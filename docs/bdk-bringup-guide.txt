= Board Validation

== Overview

This document is a step by step procedure for verifying proper
hardware functionality of boards based on THUNDERX processors.  The
target audience is either board designers or validation engineers
charged with the task of verifying hardware. By following this guide,
the following goals should be met.

.Final Goals
* The THUNDERX processor booted and running software.
* All packet interfaces verified as operational.
* Miscellaneous I/O busses verified as operational, such as TWSI and SMI/MDIO.
* If applicable, PCIe as a root complex verified as operational.
* DRAM configured and tested.
* Board ready to be handed to software for further development.

.Board Block Diagram

Below is a high level block diagram for a generic board.  The board
being tested will have connections similar to the diagram.

image::images/board_block_diagram.png[Board block diagram]

== Minimum Prerequisites

Certain minimum requirements must be met before progress can continue.
THUNDERX must progress through the reset sequence documented in the
hardware manual. THUNDERX's UART0 must be connected to a serial terminal
in order to monitor the boot progress.

* THUNDERX reference clock must be at 50 Mhz.
* THUNDERX reset sequence must follow the hardware reference manual.
* UART0 connected to a serial terminal. Baud rate of 115200, no parity, one stop bit.
* If booting from SPI, a NOR flash must be connected.

== Boot the BDK

=== Burn bdk-full.bin to NOR flash

Use a flash programmer to burn the image *bdk-full.bin* to the
beginning of the NOR flash.  The first byte of *bdk-full.bin* should
be at address zero, the second at address one, etc.

=== Boot over PCIe

The target board must be connected as a PCIe endpoint to a PC system
running Linux.

. Apply any additional power need for the target board.
. Boot the PCIe host PC into Linux.
. Install the BDK on the PC by following the instructions in the BDK documentation.
. Issue the following shell commands.

[source, sh]
----
$ export OCTEON_REMOTE_PROTOCOL=pci
$ bdk-remote boot target-bin/bdk-full.bin
----

=== Boot over EJTAG

The BDK has been tested with multiple EJTAG probes.  The best
supported probe is the Macraigor mpDemon, followed by the Mentor
Graphics Majic.  The following sections details the process of booting
the BDK using either probe.  Other EJTAG probes should be similar.

include::sections/ejtag-macraigor-mpdemon.txt[]
include::sections/ejtag-mentor-majic.txt[]

== Successful Booting

If everything went well, the following output should be visible in the
serial terminal.  If booting did not succeed, re-check step 1.

.Example Successful Boot
----
include::captures/boot_messages.capture[]
include::captures/main_menu.capture[]
Menu choice: (0INS)>
----

:leveloffset: 2
include::sections/ui-main-menu.txt[]
include::sections/ui-configure.txt[]
:leveloffset: 1

= I/O Interfaces

:leveloffset: 3
include::sections/io-dram.txt[]
include::sections/io-emmc.txt[]
include::sections/io-gpio.txt[]
include::sections/io-jtag.txt[]
include::sections/io-mdio.txt[]
include::sections/io-nand.txt[]
include::sections/io-networking.txt[]
include::sections/io-nor.txt[]
include::sections/io-oci.txt[]
include::sections/io-pcie.txt[]
include::sections/io-qlm.txt[]
include::sections/io-sata.txt[]
include::sections/io-spi.txt[]
include::sections/io-tdm.txt[]
include::sections/io-twsi.txt[]
include::sections/io-uart.txt[]
include::sections/io-usb.txt[]
:leveloffset: 1

== Next Steps

After completing the test steps outlined in this document, most board
I/O interfaces have been validated.  With working DRAM and validated
I/Os, software development can start on the board.  Software should
burn the normal bootloader into NOR flash, overwriting the BDK.  This
can be done either using a flash programmer, or the flash menu in the
BDK.

.The Flash Menu
----
include::captures/flash_menu.capture[]
----

View flash::

Dumps the contents of flash in a hexadecimal dump.

Write flash::

Allows writing a file directly to flash.  Refer to the general BDK
documentation for information about files.

TIP: During the software development process it can be useful to have
known good binaries that exercise the board.  Keep the BDK around as
it makes a good test bench.  One board running the BDK can be used to
help debug software running on another board.
