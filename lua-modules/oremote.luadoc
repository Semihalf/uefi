
---
-- The *oremote* module provides functions for remotely controlling an
-- THUNDER over PCI or EJTAG. This allows Lua scripts to remotely probe and
-- boot THUNDER. Below is a list of the functions supported.
--

---
-- Open a remote connection.
-- Protocol format
--	Format			Description
--	PCI:<device>		Use PCI/PCIe for <device>. Zero is the first THUNDER.
--	GDB:<name>,<tcp_port>	Use GDB remote protocol to communicate with THUNDER.
--	MACRAIGOR:<name>,<tcp_port>[,<jtag_speed>]	Use Macraigor mpDemon EJTAG. Note the <tcp_port> is normally 1000. <jtag_speed> is optional and defaults to 1.
--
-- TIP: The *protocol* can also be set to *nil*.  When *nil*, the protocol
-- is read from the environment variable *CAVIUM_REMOTE_PROTOCOL*.  Using
-- the environment variable to specify the protocol makes it easy for a
-- single script to support many protocols.  The parameter *debug* can
-- also be specified with *CAVIUM_REMOTE_DEBUG*.
--
-- @function oremote.open
-- @param protocol Remote protocol or nil
-- @param debug Debug level or nil
-- @return Nothing

---
-- Close a remote connection.
--
-- @function oremote.close
-- @return Nothing

---
-- Read a CSR register
--
-- @function oremote.read_csr
-- @param type CSR enum type
-- @param busnum Bus number
-- @param size Read size in bytes
-- @param address CSR address
-- @return Return csr value as a number

---
-- Write a CSR register
--
-- @function oremote.write_csr
-- @param type CSR enum type
-- @param busnum Bus number
-- @param size Read size in bytes
-- @param address CSR address
-- @param value Value of CSR as a number
-- @return Nothing

---
-- Read data from memory.
--
-- @function oremote.read_mem
-- @param address Physical address to read
-- @param length Number of bytes to read
-- @return returns string of length

---
-- Write data to memory.
--
-- @function oremote.write_mem
-- @param address physical address to write
-- @param bytes string of bytes to write
-- @return Nothing

---
-- Get the processor id.
--
-- @function oremote.get_model
-- @return Returns Processor ID register as number

---
-- Start cores after a reset or stop().
--
-- @function oremote.start_cores
-- @param mask Bitmask of cores to start
-- @return Nothing

---
-- Stop cores from executing.
--
-- @function oremote.stop_cores
-- @param mask Bitmask of cores to stop
-- @return Nothing

---
-- Returns the number of cores.
--
-- @function oremote.get_num_cores
-- @return Returns the number of cores.

---
-- Returns the bitmask of cores that are running.
--
-- @function oremote.get_running_cores
-- @return Returns the bitmask of cores that are running.

---
-- Get all state information for a CPU core.
--
-- @function oremote.get_core_state
-- @param core Core state to get, starting at 0
-- @return Returns a table:
--
-- * table[1][1-256] = Normal registers
-- * table[2][1-256] = COP0 reg * 8 + sel
-- * table[3][1-128][1-4] = TLB

---
-- Set all state information for a CPU core.
--
-- @function oremote.set_core_state
-- @param core Core state to set, starting at 0
-- @param state Table of format from get_core_state
-- @return Nothing

---
-- Read an individual CPU register.
--
-- * General purpose registers: 0-31
-- * LO: 32, HI: 33
-- * COP0: 0x100 + register * 8 + select
--
-- @function oremote.read_register
-- @param core Core starting at 0
-- @param register Register number to get
-- @return Return register as number.

---
-- Write an individual CPU register.
--
-- * General purpose registers: 0-31
-- * LO: 32, HI: 33
-- * COP0: 0x100 + register * 8 + select
--
-- @function oremote.write_register
-- @param core Core starting at 0
-- @param register Register number to set
-- @param value Register value
-- @return Nothing

---
-- Perform a chip soft reset, optionally stopping the cores.
--
-- @function oremote.reset
-- @param stop_cores If true, cores should stop after reset
-- @return Nothing

---
-- Perform a profile sample getting the PC counters for the cores.
--
-- @function oremote.get_sample
-- @param mask Bitmask of cores to get samples for
-- @return Returns a table of PC values indexed by core num+1

---
-- Write 16 bits to memory, performing endian swapping as necessary.
--
-- @function oremote.write_mem16
-- @param address Physical address
-- @param data Data to write
-- @return Nothing

---
-- Write 32 bits to memory, performing endian swapping as necessary.
--
-- @function oremote.write_mem32
-- @param address Physical address
-- @param data Data to write
-- @return Nothing

---
-- Write 64 bits to memory, performing endian swapping as necessary.
--
-- @function oremote.write_mem64
-- @param address Physical address
-- @param data Data to write
-- @return Nothing

---
-- Read 16 bits from memory, performing endian swapping as necessary.
--
-- @function oremote.read_mem16
-- @param address Physical address
-- @return Read data

---
-- Read 32 bits from memory, performing endian swapping as necessary.
--
-- @function oremote.read_mem32
-- @param address Physical address
-- @return Read data

---
-- Read 64 bits from memory, performing endian swapping as necessary.
--
-- @function oremote.read_mem64
-- @param address Physical address
-- @return Read data


---
-- Remote Model Checking
-- @section oremote.model

---
-- Returns true if the current chip matches the supplied model.
-- @function oremote.is_model
-- @param model  One of the `oremote.CN*` constants
-- @return Returns true if the current chip matches the supplied model.

---
-- CAVIUM model constant
-- @field oremote.CN61XX

---
-- CAVIUM model constant
-- @field oremote.CN68XX

---
-- CAVIUM model constant
-- @field oremote.CN70XX

---
-- CAVIUM model constant
-- @field oremote.CN78XX

---
-- Remote CSR Access
-- @section oremote.csr

---
-- Returns an iterator that iterates through the possible CSR names.
--
-- List all CSRs from Lua
--	for name in oremote.csr()
--	do
--		print (name)
-- 	end
--
-- @function oremote.csr
-- @return Returns an iterator that iterates through the possible CSR names.

---
-- Read the value of the CSR **NAME**.  **NAME** is name such as "CIU_FUSE"
-- or "CIU_INTX_SUM0(0)".
--
-- @function oremote.csr.NAME.read
-- @return Returns the CSR value

---
-- Write the value of the CSR **NAME**.  **NAME** is name such as "CIU_FUSE"
-- or "CIU_INTX_SUM0(0)".
--
-- @function oremote.csr.NAME.write
-- @param value Value to write
-- @return Nothing

----
-- Uses **optional_value** as a numeric value for the CSR.  It then decodes
-- each field and displays it.  If **optional_value** is not supplied the actual
-- value is read from the hardware.
--
-- @function oremote.csr.NAME.display
-- @param optional_value If supplied, value of CSR to display.
-- @return Nothing

---
-- Uses **optional_value** as a numeric value for the CSR.  It then decodes
-- each field and returns a Lua table containing the fields.  If
-- **optional_value** is not supplied the actual value is read from the
-- hardware.
--
-- Decode example
--	pprint(oremote.csr.ciu_fuse.decode())
--
-- Decode output
--	{
--		FUSE = 63
--		RESERVED_6_63 = 0
--	}
--
-- @function oremote.csr.NAME.decode
-- @param optional_value If supplied, value of CSR to decode.
-- @return Returns a table of the decoded values.

---
-- Converts a table of CSR fields into a CSR value and writes it to the
-- hardware.  The format of the table is identical to the *decode()*
-- format.  Missing fields are filled with zeros.
--
-- @function oremote.csr.NAME.encode
-- @param table Table of fields to encode.
-- @return Nothing

---
-- Reads the CSR and returns the value of a specific field.
-- For assignments, performs a read, modify, and write of a
-- CSR changing the specified field.
--
-- @field oremote.csr.NAME.FIELD

