
Serial Rapid I/O ports support discovery, enumeration, and basic
transactions.  The main SRIO menu allows you to toggle global debug
options and select which hardware port to work with.

.Sample SRIO Main Menu
----
include::../captures/srio_main_menu.capture[]
----

SRIO port #::

Enter the SRIO sub menu for transaction for port "#".

Toggle extra debug output. Currently OFF::

Enable or disable extra debug option for SRIO operations.  These
generally give extra information about SRIO switches and devices as
they are discovered.

Toggle logging of maintenance. Currently OFF::

When this option is enable, every SRIO maintenance transaction is
logged to the console.  This can be useful for determining exactly
what transactions are happening to each device.

.Sample SRIO Sub Menu
----
include::../captures/srio_sub_menu.capture[]
----

SRIO#: Initialize
~~~~~~~~~~~~~~~~~

Bringup the SRIO link and report its status.

SRIO#: Scan for devices
~~~~~~~~~~~~~~~~~~~~~~~

Use maintenance transactions to scan the SRIO bus for devices.
Devices found can be displayed using a following menu option.

SRIO#: Enumerate devices
~~~~~~~~~~~~~~~~~~~~~~~~

Iterate through all devices found in the scan and assign device IDs,
set link enables, and program switch route tables.  After enumeration,
devices are capable of responding to SRIO transactions.

SRIO#: Display devices
~~~~~~~~~~~~~~~~~~~~~~

Display the known device SRIO devices along with information about
each device.

SRIO#: Perform a maintenance read
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Issue a maintenance read transaction.  Prompts will request the device
ID to access, transaction format (8 or 16 bit), the SRIO hopcount, and
the register address to read.

SRIO#: Perform a maintenance write
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Issue a maintenance write transaction.  Prompts will request the
device ID to access, transaction format (8 or 16 bit), the SRIO
hopcount, the register address to write, and the write data.


More Advanced SRIO Testing
~~~~~~~~~~~~~~~~~~~~~~~~~~

After basic enumeration completes successfully, SRIO is known to be in
a working state.  If you have devices connected to SRIO which support
more advanced operation, you can perform more detailed probing.  The
exact sequence to perform varies based on the connected device.  The
following section give a brief overview of some of the functions
available in the BDK.

SRIO#: Send a doorbell
^^^^^^^^^^^^^^^^^^^^^^

Send a SRIO doorbell to a device.  Prompts will request the device ID
to access, transaction format (8 or 16 bit), the priority if the
doorbell (0-3), and the doorbell data (a 16bit number).

SRIO#: Receive a doorbell
^^^^^^^^^^^^^^^^^^^^^^^^^

Displays a list of all doorbells received.

SRIO#: Perform a memory read
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TBD

SRIO#: Perform a memory write
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TBD

