Introducing the Bringup and Diagnostic Kit
==========================================
:author:    Chad Reese and Roy Franz
:backend:   slidy
:max-width: 45em
:data-uri:


Bringup and Diagnostic Kit (BDK)
--------------------------------

.What is the BDK?

The BDK is a set of executables and
scripts used to validate new boards based on
OCTEON II processors, and prove the board works independent of software.

* New release package unrelated to the SDK
* Focused on board bringup

.What Isn't the BDK?

* The BDK is not a replacement for the SDK
* The BDK is not a generic bootloader
* No source code
* Focus on I/O testing, not software


BDK Features
------------

* Runs from L2, doesn't need working DRAM
* Uses a simple menu-driven interface
* Contains a built-in traffic generation for Ethernet-based I/Os
* Provides the ability to test many I/Os before DRAM is configured
* Provides prebuilt known-good binaries for booting new hardware
* Provides the ability to remote boot over PCIe or EJTAG

.Supported chips

* CN70XX
* CN78XX

.Unsupported chips

* OCTEON (CN3XXX)
* OCTEON+ (CN5XXX)
* OCTEON2 (CN6XXX)

Host Installation
-----------------

* Download BDK from support site (tar file format)
* Host = x86 running Linux

----
# This example used BDK version 2011.09, build r64643
host$ tar -zxf octeon-bdk-2011.09-r64643.tgz
host$ ls octeon-bdk-2011.09
bin  docs  examples  lua-modules  readme.txt  rom  target-bin  version.txt
----

.The Directory Structure of the BDK

bin:: All host binaries and scripts
docs:: All documentation for the BDK
examples:: Example host Lua scripts
lua-modules:: Lua source files and support modules
rom:: All files in here are included into BDK applications for access
	using standard filesystem calls. These are mostly symbol links
	to 'lua-modules'.
target-bin:: All target binaries, ELF files, and memory maps for use
	on OCTEON targets


Target Installation
-------------------

.Booting from NOR flash

Burn *target-bin/bdk-full.bin* to the beginning of the NOR flash (address 0).

.Booting using the *bdk-remote* utility over PCIe from the host
[source, sh]
----
host$ export OCTEON_REMOTE_PROTOCOL=pci
host$ bdk-remote boot target-bin/bdk-full.bin
----

.Booting using a pre-existing U-Boot, from the U-Boot prompt on the target
----
Octeon ebb6300# dhcp
Octeon ebb6300# setenv serverip 192.168.162.148
Octeon ebb6300# tftpboot 0x400000 bdk-full.bin
Octeon ebb6300# go 0x400000
----

TIP: U-Boot interprets bdk-full.bin as a bootloader image file, so it can
be burned into NOR flash as if it was a normal bootloader image file using
"bootloaderupdate" from the U-Boot command prompt.


Interactive Demo - Main Menu
----------------------------

----
include::captures/main_menu.capture[]
----


Interactive Demo - Configuration
--------------------------------

* PHY addresses are important
* Menu items change based on the detected configuration

----
include::captures/configure_menu.capture[]
----


Interactive Demo - PCIe
-----------------------

* Enumeration and basic device probing

----
include::captures/pcie_menu.capture[]
----


Interactive Demo - Traffic Gen
------------------------------

* Port ranges by name "SGMII00-SGMII03", "XAUI00,XAUI10", "LOOP00-LOOP03", etc (no whitespace)
* The *csr* command give direct access to CSRs
* Commands are different from SDK traffic-gen
* Key commands:
** csr <name> [value]
** default <port range>
** count [port range] <count>
** size [port range] <size>
** scan_sizes
** show [port range]
** start [port range]
** stop [port range]
** tx_percent [port range] <precent of 1Gbps>
** tx_rate [port range] <packets/sec>


Configuring DRAM (Part 1)
-------------------------

.Loading a DDR configuration
* Configuration must be loaded before any other operations
* Can be loaded from an EVB config, or from a file
** files can be loaded over xmodem/tftp

.Modifying a DDR configuration
* DIMM SPD addresses can be set on per-interface basis
** Must provide Octeon TWSI bus and TWSI address on bus.
** SPD addresses for DIMMS provided in order for each DDR interface.
** provided SPD addresses replace existing SPD addresses for each DDR interface selected.
* DDR clock frequency can be modified
* Other arbitrary changes can be made by saving config, editing it, then loading it
** Details of this documented separately.


Configuring DRAM (Part 2)
-------------------------

.Initializing DDR controller
* DDR controller is initialized using the current configuration
** On success, DRAM size and clock frequency are listed.
** Error message displayed on initialization failure.

.Testing DDR
* Simple option to test 64 Mbytes should catch most errors
* Arbitrary ranges can be provided for more thorough tests.

.Reporting problems
* Verbose output is _always_ required when reporting problems
** simply select the "Enable verbose output" menu option before init.
** Capture output using terminal program.


Interactive Demo - DRAM
-----------------------

----
include::captures/ddr_menu.capture[]
----


Access the BDK through the Network
----------------------------------

.Telnet

* The BDK contains a full TCP/IP stack with a builtin Telnet server

.TFTP

* The BDK contains a TFTP server

.Sample TFTP transfer (OCTEON -> Host)
[source, sh]
----
tftp 169.254.1.240 -m binary -c get /rom/ilua.lua
----

.Sample TFTP transfer (Host -> OCTEON)
[source, sh]
----
tftp 169.254.1.240 -m binary -c put myscript.lua /ram/myscript.lua
----

CAUTION: The builtin traffic generator interfers with TCP/IP.


The Virtual File System
-----------------------

[options="header,footer"]
|=======================
|File		| Description
|/rom/*		| Static files from the *rom* directory.
|/ram/* 	| Free area to create temporary files.
|/xmodem	| Translates files into XMODEM transfers.
|/dev/uart/0	| OCTEON's first uart.
|/dev/uart/1	| OCTEON's second uart.
|/dev/nor/0	| NOR flash.
|/dev/mem	| DRAM.
|/dev/pcie/0	| Read and write access to memory on PCIe port 0.
|/dev/pcie/1	| Read and write access to memory on PCIe port 1.
|/tcp/host:port	| TCP connection to the supplied host and port.
|=======================


Future Changes
--------------
* Scripting
	* Easy automation of tasks through scripts run remotely from host
	* Fast host-based test development on remote target board
	* GUI-based interactive script debugger
	* Lua remote-procedure calls over serial and TCP/IP


BDK Release Rollout
-------------------

* Download now from support site
** Products -> Processors -> CN63XX -> BDK
** Products -> Processors -> CN68XX -> BDK
* Engage with all CN6XXX pre-alpha customers (even those with the SDK already)
** Not to be just thrown over the wall
** FAE needs to become familiar with the BDK on an CN6XXX EVB first
** Once the customer's board is back from fab, either load the binary for them or give step-by-step instruction for their situation
** Walk them through BDK menu and help with testing out the various I/Os.
** Feedback issues / feature requests to the BDK team


Questions
---------

Latest docs::

* link:http://chad-cube/bdk/bdk.html[]
* link:http://chad-cube/bdk/bdk-bringup-guide.html[]

OCTEON Bugzilla::

link:http://caswbug/octeon_bugzilla/[]

These slides as a text file::

link:bdk-intro-slides.txt[]


