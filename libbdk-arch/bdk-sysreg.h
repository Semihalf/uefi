/**
 *
 * WARNING: This file is auto generated. DO NOT EDIT
 *
 * There are a large amount of system registers accessed by MRS/MSR. They are
 * index sparsely by treating (op0, op1, crn, crm, op2) as a 15 bit register
 * number. The macros below are meant to be included by other code to allow easy
 * building of lookup constants, string conversions, and such without needing
 * special code for each register. Note that the macros below include the full
 * op0 field even though bit 1 is always one and not part of the 15 bit register
 * number.
 */
#ifndef SYSTEM_REGISTER
    #error SYSTEM_REGISTER must be defined before the system register file is included
#endif
SYSTEM_REGISTER(ACTLR_EL1, 3,0,1,0,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ACTLR_EL2, 3,4,1,0,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ACTLR_EL3, 3,6,1,0,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(AFSR0_EL1, 3,0,5,1,0, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(AFSR0_EL2, 3,4,5,1,0, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(AFSR0_EL3, 3,6,5,1,0, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(AFSR1_EL1, 3,0,5,1,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(AFSR1_EL2, 3,4,5,1,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(AFSR1_EL3, 3,6,5,1,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(AIDR_EL1, 3,1,0,0,7, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(AMAIR_EL1, 3,0,10,3,0, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(AMAIR_EL2, 3,4,10,3,0, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(AMAIR_EL3, 3,6,10,3,0, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CCSIDR_EL1, 3,1,0,0,0, 0x0, 0x0, 0xffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CLIDR_EL1, 3,1,0,0,1, 0x0, 0x0, 0x3fffffff, 0x9200023, 0x9200023, true)
SYSTEM_REGISTER(CNTFRQ_EL0, 3,3,14,0,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTHCTL_EL2, 3,4,14,1,0, 0xff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTHP_CTL_EL2, 3,4,14,2,1, 0x3, 0x0, 0x4, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTHP_CVAL_EL2, 3,4,14,2,2, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTHP_TVAL_EL2, 3,4,14,2,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTKCTL_EL1, 3,0,14,1,0, 0x3ff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTPCT_EL0, 3,3,14,0,1, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTPS_CTL_EL1, 3,7,14,2,1, 0x3, 0x0, 0x4, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTPS_CVAL_EL1, 3,7,14,2,2, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTPS_TVAL_EL1, 3,7,14,2,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTP_CTL_EL0, 3,3,14,2,1, 0x3, 0x0, 0x4, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTP_CVAL_EL0, 3,3,14,2,2, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTP_TVAL_EL0, 3,3,14,2,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTVCT_EL0, 3,3,14,0,2, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTVOFF_EL2, 3,4,14,0,3, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTV_CTL_EL0, 3,3,14,3,1, 0x3, 0x0, 0x4, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTV_CVAL_EL0, 3,3,14,3,2, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CNTV_TVAL_EL0, 3,3,14,3,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CONTEXTIDR_EL1, 3,0,13,0,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CPACR_EL1, 3,0,1,0,2, 0x300000, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CPTR_EL2, 3,4,1,1,2, 0x800037ff, 0x33ff, 0x0, 0x33ff, 0x33ff, true)
SYSTEM_REGISTER(CPTR_EL3, 3,6,1,1,2, 0x80000400, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CSSELR_EL1, 3,2,0,0,0, 0xf, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CTR_EL0, 3,3,0,0,1, 0x80000000, 0x80000000, 0xfffc00f, 0x85558005, 0x85558005, true)
SYSTEM_REGISTER(CurrentEL, 3,0,4,2,2, 0x0, 0x0, 0xc, 0xc, 0xc, true)
SYSTEM_REGISTER(CVMCTL_EL1, 3,0,11,0,0, 0x7ffff03ff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CVMMEMCTL0_EL1, 3,0,11,0,4, 0x7fffffffffff, 0x0, 0x7c00000000000000, 0x43e0d67c, 0x43e0d67c, true)
SYSTEM_REGISTER(CVMMEMCTL1_EL1, 3,0,11,0,5, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_POWER_EL1, 3,0,11,0,2, 0xffffffff1fffffff, 0x0, 0x0, 0x2ffff00, 0x2ffff00, true)
SYSTEM_REGISTER(CVM_BIST0_EL1, 3,0,11,1,0, 0x0, 0x0, 0x7ffff00ff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_BIST1_EL1, 3,0,11,1,1, 0x0, 0x0, 0xffffffffffff, 0xffffffffffff, 0xffffffffffff, true)
SYSTEM_REGISTER(CVM_BIST2_EL1, 3,0,11,1,4, 0x0, 0x0, 0x1ff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_BIST3_EL1, 3,0,11,1,5, 0x0, 0x0, 0xffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_ERRICACHE_EL1, 3,0,11,2,0, 0x1fff9, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_ERRMEM_EL1, 3,0,11,2,4, 0x1fffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_EVATTID_EL1, 3,0,11,2,5, 0x3f000f003f, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_ICACHEDATA0_EL1, 3,0,11,3,0, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_ICACHEDATA1_EL1, 3,0,11,3,1, 0x0, 0x0, 0x3, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_ICACHETAG0_EL1, 3,0,11,3,2, 0x0, 0x0, 0xfffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DCACHEDATA0_EL1, 3,0,11,3,4, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DCACHEDATA1_EL1, 3,0,11,3,5, 0x0, 0x0, 0xff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DCACHEVTAG0_EL1, 3,0,11,3,6, 0x0, 0x0, 0xf01ffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DCACHEVTAG1_EL1, 3,0,11,3,7, 0x0, 0x0, 0x1ff01ff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DCACHEPTAG0_EL1, 3,0,11,4,4, 0x0, 0x0, 0xffffffffc01, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_XLATDATA0_EL1, 3,0,11,5,4, 0x0, 0x0, 0xc03afffffffff3ff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_XLATDATA1_EL1, 3,0,11,5,5, 0x0, 0x0, 0x7fc01ff3fffff3ff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_XLATVTAG0_EL1, 3,0,11,5,6, 0x0, 0x0, 0xfffffffffffff001, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_XLATVTAG1_EL1, 3,0,11,5,7, 0x0, 0x0, 0x1ff1ff3fffff003, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DEBUG0_EL3, 3,6,11,4,0, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DEBUG1_EL3, 3,6,11,4,1, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DEBUG2_EL3, 3,6,11,4,2, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DEBUG3_EL3, 3,6,11,4,3, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_MEMDEBUG0_EL3, 3,6,11,4,4, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_MEMDEBUG1_EL3, 3,6,11,4,5, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_MEMDEBUG2_EL3, 3,6,11,4,6, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_MEMDEBUG3_EL3, 3,6,11,4,7, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_MEMDEBUG4_EL3, 3,6,11,5,4, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_MEMDEBUG5_EL3, 3,6,11,5,5, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_MEMDEBUG6_EL3, 3,6,11,5,6, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_MEMDEBUG7_EL3, 3,6,11,5,7, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DEBUG4_EL3, 3,6,11,5,0, 0x0, 0x0, 0x1f, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DLL_OBSERVABILTY_EL3, 3,6,11,5,1, 0x0, 0x0, 0xfffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DEBUG6_EL3, 3,6,11,5,2, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_DEBUG7_EL3, 3,6,11,5,3, 0x0, 0x0, 0xffffffffffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_NVBAR_EL3, 3,6,11,6,0, 0xfffffffffffff800, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(CVM_ACCESS_EL3, 3,6,11,0,3, 0x13f, 0x0, 0x0, 0x13f, 0x13f, true)
SYSTEM_REGISTER(CVM_ACCESS_EL2, 3,4,11,0,3, 0x13f, 0x0, 0x0, 0x13f, 0x13f, true)
SYSTEM_REGISTER(CVM_ACCESS_EL1, 3,0,11,0,3, 0x13f, 0x0, 0x0, 0x13f, 0x13f, true)
SYSTEM_REGISTER(DACR32_EL2, 3,4,3,0,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(DAIF, 3,3,4,2,1, 0x3c0, 0x0, 0x0, 0x3c0, 0x3c0, true)
SYSTEM_REGISTER(DBGAUTHSTATUS_EL1, 2,0,7,14,6, 0x0, 0x0, 0xff, 0xff, 0xff, true)
SYSTEM_REGISTER(DBGBCR0_EL1, 2,0,0,0,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR1_EL1, 2,0,0,1,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR2_EL1, 2,0,0,2,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR3_EL1, 2,0,0,3,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR4_EL1, 2,0,0,4,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR5_EL1, 2,0,0,5,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR6_EL1, 2,0,0,6,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR7_EL1, 2,0,0,7,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR8_EL1, 2,0,0,8,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR9_EL1, 2,0,0,9,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR10_EL1, 2,0,0,10,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR11_EL1, 2,0,0,11,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR12_EL1, 2,0,0,12,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR13_EL1, 2,0,0,13,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR14_EL1, 2,0,0,14,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBCR15_EL1, 2,0,0,15,5, 0xffe1e7, 0x1e0, 0x0, 0x1e0, 0x1e0, true)
SYSTEM_REGISTER(DBGBVR0_EL1, 2,0,0,0,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR1_EL1, 2,0,0,1,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR2_EL1, 2,0,0,2,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR3_EL1, 2,0,0,3,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR4_EL1, 2,0,0,4,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR5_EL1, 2,0,0,5,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR6_EL1, 2,0,0,6,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR7_EL1, 2,0,0,7,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR8_EL1, 2,0,0,8,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR9_EL1, 2,0,0,9,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR10_EL1, 2,0,0,10,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR11_EL1, 2,0,0,11,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR12_EL1, 2,0,0,12,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR13_EL1, 2,0,0,13,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR14_EL1, 2,0,0,14,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGBVR15_EL1, 2,0,0,15,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGCLAIMCLR_EL1, 2,0,7,9,6, 0xff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGCLAIMSET_EL1, 2,0,7,8,6, 0xff, 0x0, 0x0, 0xff, 0xff, true)
SYSTEM_REGISTER(DBGDTRRX_EL0, 2,3,0,5,0, 0x0, 0x0, 0xffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGDTRTX_EL0, 2,3,0,5,0, 0x0, 0x0, 0xffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGDTR_EL0, 2,3,0,4,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGPRCR_EL1, 2,0,1,4,4, 0x1, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGVCR32_EL2, 2,4,0,7,0, 0xde0000de, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(DBGWCR0_EL1, 2,0,0,0,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR1_EL1, 2,0,0,1,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR2_EL1, 2,0,0,2,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR3_EL1, 2,0,0,3,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR4_EL1, 2,0,0,4,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR5_EL1, 2,0,0,5,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR6_EL1, 2,0,0,6,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR7_EL1, 2,0,0,7,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR8_EL1, 2,0,0,8,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR9_EL1, 2,0,0,9,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR10_EL1, 2,0,0,10,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR11_EL1, 2,0,0,11,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR12_EL1, 2,0,0,12,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR13_EL1, 2,0,0,13,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR14_EL1, 2,0,0,14,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWCR15_EL1, 2,0,0,15,7, 0x1f1fffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR0_EL1, 2,0,0,0,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR1_EL1, 2,0,0,1,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR2_EL1, 2,0,0,2,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR3_EL1, 2,0,0,3,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR4_EL1, 2,0,0,4,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR5_EL1, 2,0,0,5,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR6_EL1, 2,0,0,6,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR7_EL1, 2,0,0,7,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR8_EL1, 2,0,0,8,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR9_EL1, 2,0,0,9,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR10_EL1, 2,0,0,10,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR11_EL1, 2,0,0,11,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR12_EL1, 2,0,0,12,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR13_EL1, 2,0,0,13,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR14_EL1, 2,0,0,14,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DBGWVR15_EL1, 2,0,0,15,6, 0xfffffffffffffffc, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DCZID_EL0, 3,3,0,0,7, 0x0, 0x0, 0x1f, 0x5, 0x5, true)
SYSTEM_REGISTER(DLR_EL0, 3,3,4,5,1, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(DSPSR_EL0, 3,3,4,5,0, 0xf03003df, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ELR_EL1, 3,0,4,0,1, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ELR_EL2, 3,4,4,0,1, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ELR_EL3, 3,6,4,0,1, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ESR_EL1, 3,0,5,2,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ESR_EL2, 3,4,5,2,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ESR_EL3, 3,6,5,2,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(FAR_EL1, 3,0,6,0,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(FAR_EL2, 3,4,6,0,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(FAR_EL3, 3,6,6,0,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(FPCR, 3,3,4,4,0, 0x7c00000, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(FPEXC32_EL2, 3,4,5,3,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(FPSR, 3,3,4,4,1, 0x800009f, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(HACR_EL2, 3,4,1,1,7, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(HCR_EL2, 3,4,1,1,0, 0xfdfffffff, 0x80000000, 0x0, 0x80000000, 0x80000000, true)
SYSTEM_REGISTER(HPFAR_EL2, 3,4,6,0,4, 0xfffffffff0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(HSTR_EL2, 3,4,1,1,3, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_AP0R0_EL1, 3,0,12,8,4, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_AP0R1_EL1, 3,0,12,8,5, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_AP0R2_EL1, 3,0,12,8,6, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_AP0R3_EL1, 3,0,12,8,7, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_AP1R0_EL1, 3,0,12,9,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_AP1R1_EL1, 3,0,12,9,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_AP1R2_EL1, 3,0,12,9,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_AP1R3_EL1, 3,0,12,9,3, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_ASGI1R_EL1, 3,0,12,11,6, 0xff01ff0fffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_BPR0_EL1, 3,0,12,8,3, 0x7, 0x0, 0x0, 0x2, 0x2, true)
SYSTEM_REGISTER(ICC_BPR1_EL1, 3,0,12,12,3, 0x7, 0x0, 0x0, 0x3, 0x3, true)
SYSTEM_REGISTER(ICC_CTLR_EL1, 3,0,12,12,4, 0x43, 0x0, 0xff00, 0xc00, 0x400, true)
SYSTEM_REGISTER(ICC_CTLR_EL3, 3,6,12,12,4, 0x7f, 0x0, 0xff00, 0xc00, 0x400, true)
SYSTEM_REGISTER(ICC_DIR_EL1, 3,0,12,11,1, 0xffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_EOIR0_EL1, 3,0,12,8,1, 0xffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_EOIR1_EL1, 3,0,12,12,1, 0xffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_HPPIR0_EL1, 3,0,12,8,2, 0x0, 0x0, 0xffff, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_HPPIR1_EL1, 3,0,12,12,2, 0x0, 0x0, 0xffff, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_IAR0_EL1, 3,0,12,8,0, 0x0, 0x0, 0xffff, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_IAR1_EL1, 3,0,12,12,0, 0x0, 0x0, 0xffff, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_IGRPEN0_EL1, 3,0,12,12,6, 0x1, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_IGRPEN1_EL1, 3,0,12,12,7, 0x1, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_IGRPEN1_EL3, 3,6,12,12,7, 0x3, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_PMR_EL1, 3,0,4,6,0, 0xff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_RPR_EL1, 3,0,12,11,3, 0xff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_SEIEN_EL1, 3,0,12,13,0, 0x1, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_SGI0R_EL1, 3,0,12,11,7, 0xff01ff0fffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_SGI1R_EL1, 3,0,12,11,5, 0xff01ff0fffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICC_SRE_EL1, 3,0,12,12,5, 0x0, 0x0, 0x7, 0x7, 0x6, true)
SYSTEM_REGISTER(ICC_SRE_EL2, 3,4,12,9,5, 0x8, 0x0, 0x7, 0x7, 0x6, true)
SYSTEM_REGISTER(ICC_SRE_EL3, 3,6,12,12,5, 0x8, 0x0, 0x7, 0x7, 0x6, true)
SYSTEM_REGISTER(ICH_AP0R0_EL2, 3,4,12,8,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_AP0R1_EL2, 3,4,12,8,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_AP0R2_EL2, 3,4,12,8,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_AP0R3_EL2, 3,4,12,8,3, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_AP1R0_EL2, 3,4,12,9,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_AP1R1_EL2, 3,4,12,9,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_AP1R2_EL2, 3,4,12,9,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_AP1R3_EL2, 3,4,12,9,3, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_EISR_EL2, 3,4,12,11,3, 0x0, 0x0, 0xffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_ELSR_EL2, 3,4,12,11,5, 0x0, 0x0, 0xffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_HCR_EL2, 3,4,12,11,0, 0xf8003eff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_MISR_EL2, 3,4,12,11,2, 0x0, 0x0, 0x1ff, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR0_EL2, 3,4,12,12,0, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR1_EL2, 3,4,12,12,1, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR2_EL2, 3,4,12,12,2, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR3_EL2, 3,4,12,12,3, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR4_EL2, 3,4,12,12,4, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR5_EL2, 3,4,12,12,5, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR6_EL2, 3,4,12,12,6, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR7_EL2, 3,4,12,12,7, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR8_EL2, 3,4,12,13,0, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR9_EL2, 3,4,12,13,1, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR10_EL2, 3,4,12,13,2, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR11_EL2, 3,4,12,13,3, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR12_EL2, 3,4,12,13,4, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR13_EL2, 3,4,12,13,5, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR14_EL2, 3,4,12,13,6, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LR15_EL2, 3,4,12,13,7, 0xf0ff03ffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_LRC0, 3,4,12,14,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC1, 3,4,12,14,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC2, 3,4,12,14,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC3, 3,4,12,14,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC4, 3,4,12,14,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC5, 3,4,12,14,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC6, 3,4,12,14,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC7, 3,4,12,14,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC8, 3,4,12,15,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC9, 3,4,12,15,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC10, 3,4,12,15,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC11, 3,4,12,15,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC12, 3,4,12,15,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC13, 3,4,12,15,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC14, 3,4,12,15,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_LRC15, 3,4,12,15,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ICH_VMCR_EL2, 3,4,12,11,7, 0xfffc021f, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_VSEIR_EL2, 3,4,12,9,4, 0x81ffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ICH_VTR_EL2, 3,4,12,11,1, 0x0, 0x0, 0xffe0001f, 0x9080000f, 0x9080000f, true)
SYSTEM_REGISTER(ID_AA64AFR0_EL1, 3,0,0,5,4, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64AFR1_EL1, 3,0,0,5,5, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64AFR2_EL1_RES0, 3,0,0,5,6, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64AFR3_EL1_RES0, 3,0,0,5,7, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64DFR0_EL1, 3,0,0,5,0, 0x0, 0x0, 0xf0f0ffff, 0x50305407, 0x50305407, true)
SYSTEM_REGISTER(ID_AA64DFR1_EL1, 3,0,0,5,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64DFR2_EL1_RES0, 3,0,0,5,2, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64DFR3_EL1_RES0, 3,0,0,5,3, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64ISAR0_EL1, 3,0,0,6,0, 0x0, 0x0, 0xf0fffff0, 0x10211120, 0x10211120, true)
SYSTEM_REGISTER(ID_AA64ISAR1_EL1, 3,0,0,6,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64ISAR2_EL1_RES0, 3,0,0,6,2, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64ISAR3_EL1_RES0, 3,0,0,6,3, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64ISAR4_EL1_RES0, 3,0,0,6,4, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64ISAR5_EL1_RES0, 3,0,0,6,5, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64ISAR6_EL1_RES0, 3,0,0,6,6, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64ISAR7_EL1_RES0, 3,0,0,6,7, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64MMFR0_EL1, 3,0,0,7,0, 0x0, 0x0, 0xffffffff, 0x101125, 0x101125, true)
SYSTEM_REGISTER(ID_AA64MMFR1_EL1, 3,0,0,7,1, 0x0, 0x0, 0xffffff, 0x10020, 0x10020, true)
SYSTEM_REGISTER(ID_AA64MMFR2_EL1_RES0, 3,0,0,7,2, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64MMFR3_EL1_RES0, 3,0,0,7,3, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64MMFR4_EL1_RES0, 3,0,0,7,4, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64MMFR5_EL1_RES0, 3,0,0,7,5, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64MMFR6_EL1_RES0, 3,0,0,7,6, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64MMFR7_EL1_RES0, 3,0,0,7,7, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64PFR0_EL1, 3,0,0,4,0, 0x0, 0x0, 0xfffffff, 0x1001111, 0x1001111, true)
SYSTEM_REGISTER(ID_AA64PFR1_EL1, 3,0,0,4,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64PFR2_EL1_RES0, 3,0,0,4,2, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64PFR3_EL1_RES0, 3,0,0,4,3, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64PFR4_EL1_RES0, 3,0,0,4,4, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64PFR5_EL1_RES0, 3,0,0,4,5, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64PFR6_EL1_RES0, 3,0,0,4,6, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AA64PFR7_EL1_RES0, 3,0,0,4,7, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_AFR0_EL1, 3,0,0,1,3, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_DFR0_EL1, 3,0,0,1,2, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_ISAR0_EL1, 3,0,0,2,0, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_ISAR1_EL1, 3,0,0,2,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_ISAR2_EL1, 3,0,0,2,2, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_ISAR3_EL1, 3,0,0,2,3, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_ISAR4_EL1, 3,0,0,2,4, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_ISAR5_EL1, 3,0,0,2,5, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_ISAR6_EL1_RES0, 3,0,0,2,6, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_ISAR7_EL1_RES0, 3,0,0,2,7, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_MMFR0_EL1, 3,0,0,1,4, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_MMFR1_EL1, 3,0,0,1,5, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_MMFR2_EL1, 3,0,0,1,6, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_MMFR3_EL1, 3,0,0,1,7, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_PFR0_EL1, 3,0,0,1,0, 0x0, 0x0, 0xffff, 0x0, 0x0, true)
SYSTEM_REGISTER(ID_PFR1_EL1, 3,0,0,1,1, 0x0, 0x0, 0xffffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(IFSR32_EL2, 3,4,5,0,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(ISR_EL1, 3,0,12,1,0, 0x0, 0x0, 0x1c0, 0x0, 0x0, true)
SYSTEM_REGISTER(LORSA_EL1, 3,0,10,4,0, 0xffffffff0001, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(LOREA_EL1, 3,0,10,4,1, 0xffffffff0000, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(LORN_EL1, 3,0,10,4,2, 0x3, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(LORC_EL1, 3,0,10,4,3, 0x1d, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(LORID_EL1, 3,0,10,4,7, 0x0, 0x0, 0xff00ff, 0x80003, 0x80003, true)
SYSTEM_REGISTER(MAIR_EL1, 3,0,10,2,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(MAIR_EL2, 3,4,10,2,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(MAIR_EL3, 3,6,10,2,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(MDCCINT_EL1, 2,0,0,2,0, 0x60000000, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(MDCCSR_EL0, 2,3,0,1,0, 0x0, 0x0, 0x60000000, 0x0, 0x0, true)
SYSTEM_REGISTER(MDCR_EL2, 3,4,1,1,1, 0x20fff, 0x0, 0x0, 0x6, 0x6, true)
SYSTEM_REGISTER(MDCR_EL3, 3,6,1,3,1, 0x330640, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(MDRAR_EL1, 2,0,1,0,0, 0x0, 0x0, 0xfffffffff003, 0x87a000000003, 0x87a000000003, true)
SYSTEM_REGISTER(MDSCR_EL1, 2,0,0,2,2, 0x6ce0f041, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(MIDR_EL1, 3,0,0,0,0, 0x0, 0x0, 0xffffffff, 0x430f0a10, 0x430f0a10, true)
SYSTEM_REGISTER(MPIDR_EL1, 3,0,0,0,5, 0x80000000, 0x80000000, 0xff41ffffff, 0x80000000, 0x80000000, true)
SYSTEM_REGISTER(MVFR0_EL1, 3,0,0,3,0, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(MVFR1_EL1, 3,0,0,3,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(MVFR2_EL1, 3,0,0,3,2, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(NZCV, 3,3,4,2,0, 0xf0000000, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(OSDLR_EL1, 2,0,1,3,4, 0x1, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(OSDTRRX_EL1, 2,0,0,0,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(OSDTRTX_EL1, 2,0,0,3,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(OSECCR_EL1, 2,0,0,6,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(OSLAR_EL1, 2,0,1,0,4, 0x0, 0x0, 0x1, 0x0, 0x0, true)
SYSTEM_REGISTER(OSLSR_EL1, 2,0,1,1,4, 0x0, 0x0, 0xf, 0xa, 0xa, true)
SYSTEM_REGISTER(PAN, 3,0,4,2,3, 0x400000, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PAR_EL1, 3,0,7,4,0, 0xff00fffffffffbff, 0x800, 0x0, 0x800, 0x800, true)
SYSTEM_REGISTER(PMCCFILTR_EL0, 3,3,14,15,7, 0xfc000000, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMCCNTR_EL0, 3,3,9,13,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMCEID0_EL0, 3,3,9,12,6, 0x0, 0x0, 0xffffffffffffffff, 0x5ddfffff, 0x5ddfffff, true)
SYSTEM_REGISTER(PMCEID1_EL0, 3,3,9,12,7, 0x0, 0x0, 0xffffffffffffffff, 0xe1fe, 0xe1fe, true)
SYSTEM_REGISTER(PMCNTENCLR_EL0, 3,3,9,12,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMCNTENSET_EL0, 3,3,9,12,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMCR_EL0, 3,3,9,12,0, 0x27, 0x0, 0xfffff858, 0x43003040, 0x43003000, true)
SYSTEM_REGISTER(PMEVCNTR0_EL0, 3,3,14,8,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR1_EL0, 3,3,14,8,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR2_EL0, 3,3,14,8,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR3_EL0, 3,3,14,8,3, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR4_EL0, 3,3,14,8,4, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR5_EL0, 3,3,14,8,5, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR6_EL0, 3,3,14,8,6, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR7_EL0, 3,3,14,8,7, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR8_EL0, 3,3,14,9,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR9_EL0, 3,3,14,9,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR10_EL0, 3,3,14,9,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR11_EL0, 3,3,14,9,3, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR12_EL0, 3,3,14,9,4, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR13_EL0, 3,3,14,9,5, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR14_EL0, 3,3,14,9,6, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR15_EL0, 3,3,14,9,7, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR16_EL0, 3,3,14,10,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR17_EL0, 3,3,14,10,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR18_EL0, 3,3,14,10,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR19_EL0, 3,3,14,10,3, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR20_EL0, 3,3,14,10,4, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR21_EL0, 3,3,14,10,5, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR22_EL0, 3,3,14,10,6, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR23_EL0, 3,3,14,10,7, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR24_EL0, 3,3,14,11,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR25_EL0, 3,3,14,11,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR26_EL0, 3,3,14,11,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR27_EL0, 3,3,14,11,3, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR28_EL0, 3,3,14,11,4, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR29_EL0, 3,3,14,11,5, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVCNTR30_EL0, 3,3,14,11,6, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER0_EL0, 3,3,14,12,0, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER1_EL0, 3,3,14,12,1, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER2_EL0, 3,3,14,12,2, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER3_EL0, 3,3,14,12,3, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER4_EL0, 3,3,14,12,4, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER5_EL0, 3,3,14,12,5, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER6_EL0, 3,3,14,12,6, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER7_EL0, 3,3,14,12,7, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER8_EL0, 3,3,14,13,0, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER9_EL0, 3,3,14,13,1, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER10_EL0, 3,3,14,13,2, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER11_EL0, 3,3,14,13,3, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER12_EL0, 3,3,14,13,4, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER13_EL0, 3,3,14,13,5, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER14_EL0, 3,3,14,13,6, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER15_EL0, 3,3,14,13,7, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER16_EL0, 3,3,14,14,0, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER17_EL0, 3,3,14,14,1, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER18_EL0, 3,3,14,14,2, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER19_EL0, 3,3,14,14,3, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER20_EL0, 3,3,14,14,4, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER21_EL0, 3,3,14,14,5, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER22_EL0, 3,3,14,14,6, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER23_EL0, 3,3,14,14,7, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER24_EL0, 3,3,14,15,0, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER25_EL0, 3,3,14,15,1, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER26_EL0, 3,3,14,15,2, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER27_EL0, 3,3,14,15,3, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER28_EL0, 3,3,14,15,4, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER29_EL0, 3,3,14,15,5, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMEVTYPER30_EL0, 3,3,14,15,6, 0xfc00ffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMINTENCLR_EL1, 3,0,9,14,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMINTENSET_EL1, 3,0,9,14,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMOVSCLR_EL0, 3,3,9,12,3, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMOVSSET_EL0, 3,3,9,14,3, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMSELR_EL0, 3,3,9,12,5, 0x1f, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMSWINC_EL0, 3,3,9,12,4, 0x0, 0x0, 0x7fffffff, 0x0, 0x0, true)
SYSTEM_REGISTER(PMUSERENR_EL0, 3,3,9,14,0, 0xf, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMXEVCNTR_EL0, 3,3,9,13,2, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(PMXEVTYPER_EL0, 3,3,9,13,1, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(REVIDR_EL1, 3,0,0,0,6, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(RMR_EL1, 3,0,12,0,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(RMR_EL2, 3,4,12,0,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(RMR_EL3, 3,6,12,0,2, 0x3, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(RVBAR_EL1, 3,0,12,0,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(RVBAR_EL2, 3,4,12,0,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(RVBAR_EL3, 3,6,12,0,1, 0x0, 0x0, 0xffffffffffffffff, 0x87d000000000, 0x87d000000000, true)
SYSTEM_REGISTER(SCR_EL3, 3,6,1,1,0, 0x7fbf, 0x430, 0x0, 0x430, 0x430, true)
SYSTEM_REGISTER(SCTLR_EL2, 3,4,1,0,0, 0x32cd183f, 0x30450830, 0x0, 0x30c50830, 0x30c50830, true)
SYSTEM_REGISTER(SCTLR_EL3, 3,6,1,0,0, 0x32cd183f, 0x30450830, 0x0, 0x30c50830, 0x30c50830, true)
SYSTEM_REGISTER(SCTLR_EL1, 3,0,1,0,0, 0x37dddb9f, 0x30500980, 0x0, 0x30d00980, 0x30d00980, true)
SYSTEM_REGISTER(SDER32_EL3, 3,6,1,1,1, 0x3, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(SPSR_EL1, 3,0,4,0,0, 0xf07003df, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(SPSR_EL2, 3,4,4,0,0, 0xf07003df, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(SPSR_EL3, 3,6,4,0,0, 0xf07003df, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(SPSR_abt, 3,4,4,3,1, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(SPSR_fiq, 3,4,4,3,3, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(SPSR_irq, 3,4,4,3,0, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(SPSR_und, 3,4,4,3,2, 0x0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(SPSel, 3,0,4,2,0, 0x1, 0x0, 0x0, 0x1, 0x1, true)
SYSTEM_REGISTER(SP_EL0, 3,0,4,1,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(SP_EL1, 3,4,4,1,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(SP_EL2, 3,6,4,1,0, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TCR_EL1, 3,0,2,0,2, 0x677ffffffbf, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TCR_EL2, 3,4,2,0,2, 0x677ffffffbf, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TCR_EL3, 3,6,2,0,2, 0x8197ff3f, 0x80800000, 0x0, 0x80800000, 0x80800000, true)
SYSTEM_REGISTER(TEECR32_EL1, 2,2,0,0,0, 0x1, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TEEHBR32_EL1, 2,2,1,0,0, 0xfffffffc, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TPIDRRO_EL0, 3,3,13,0,3, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TPIDR_EL2, 3,4,13,0,2, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TPIDR_EL3, 3,6,13,0,2, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TPIDR_EL0, 3,3,13,0,2, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TPIDR_EL1, 3,0,13,0,4, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TRCACATR0, 2,1,2,0,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR1, 2,1,2,2,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR2, 2,1,2,4,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR3, 2,1,2,6,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR4, 2,1,2,8,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR5, 2,1,2,10,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR6, 2,1,2,12,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR7, 2,1,2,14,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR8, 2,1,2,0,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR9, 2,1,2,2,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR10, 2,1,2,4,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR11, 2,1,2,6,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR12, 2,1,2,8,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR13, 2,1,2,10,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR14, 2,1,2,12,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACATR15, 2,1,2,14,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR0, 2,1,2,0,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR1, 2,1,2,2,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR2, 2,1,2,4,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR3, 2,1,2,6,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR4, 2,1,2,8,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR5, 2,1,2,10,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR6, 2,1,2,12,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR7, 2,1,2,14,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR8, 2,1,2,0,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR9, 2,1,2,2,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR10, 2,1,2,4,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR11, 2,1,2,6,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR12, 2,1,2,8,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR13, 2,1,2,10,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR14, 2,1,2,12,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCACVR15, 2,1,2,14,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCAUTHSTATUS, 2,1,7,14,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCAUXCTLR, 2,1,0,6,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCBBCTLR, 2,1,0,15,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCCCTLR, 2,1,0,14,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDCCTLR0, 2,1,3,0,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDCCTLR1, 2,1,3,1,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDCVR0, 2,1,3,0,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDCVR1, 2,1,3,2,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDCVR2, 2,1,3,4,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDCVR3, 2,1,3,6,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDCVR4, 2,1,3,8,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDCVR5, 2,1,3,10,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDCVR6, 2,1,3,12,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDCVR7, 2,1,3,14,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDR0, 2,1,7,12,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDR1, 2,1,7,13,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDR2, 2,1,7,14,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCIDR3, 2,1,7,15,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCLAIMCLR, 2,1,7,9,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCLAIMSET, 2,1,7,8,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTCTLR0, 2,1,0,4,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTCTLR1, 2,1,0,5,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTCTLR2, 2,1,0,6,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTCTLR3, 2,1,0,7,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTRLDVR0, 2,1,0,0,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTRLDVR1, 2,1,0,1,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTRLDVR2, 2,1,0,2,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTRLDVR3, 2,1,0,3,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTVR0, 2,1,0,8,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTVR1, 2,1,0,9,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTVR2, 2,1,0,10,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCNTVR3, 2,1,0,11,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCCONFIGR, 2,1,0,4,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDEVAFF0, 2,1,7,10,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDEVAFF1, 2,1,7,11,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDEVARCH, 2,1,7,15,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDEVID, 2,1,7,2,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDEVTYPE, 2,1,7,3,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCMR0, 2,1,2,0,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCMR1, 2,1,2,4,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCMR2, 2,1,2,8,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCMR3, 2,1,2,12,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCMR4, 2,1,2,0,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCMR5, 2,1,2,4,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCMR6, 2,1,2,8,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCMR7, 2,1,2,12,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCVR0, 2,1,2,0,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCVR1, 2,1,2,4,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCVR2, 2,1,2,8,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCVR3, 2,1,2,12,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCVR4, 2,1,2,0,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCVR5, 2,1,2,4,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCVR6, 2,1,2,8,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCDVCVR7, 2,1,2,12,5, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCEVENTCTL0R, 2,1,0,8,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCEVENTCTL1R, 2,1,0,9,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCEXTINSELR, 2,1,0,8,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR0, 2,1,0,8,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR1, 2,1,0,9,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR2, 2,1,0,10,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR3, 2,1,0,11,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR4, 2,1,0,12,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR5, 2,1,0,13,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR6, 2,1,0,14,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR7, 2,1,0,15,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR8, 2,1,0,0,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR9, 2,1,0,1,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR10, 2,1,0,2,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR11, 2,1,0,3,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR12, 2,1,0,4,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIDR13, 2,1,0,5,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIMSPEC0, 2,1,0,0,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIMSPEC1, 2,1,0,1,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIMSPEC2, 2,1,0,2,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIMSPEC3, 2,1,0,3,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIMSPEC4, 2,1,0,4,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIMSPEC5, 2,1,0,5,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIMSPEC6, 2,1,0,6,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCIMSPEC7, 2,1,0,7,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCITCTRL, 2,1,7,0,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCLAR, 2,1,7,12,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCLSR, 2,1,7,13,6, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCOSLAR, 2,1,1,0,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCOSLSR, 2,1,1,1,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPDCR, 2,1,1,4,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPDSR, 2,1,1,5,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPIDR0, 2,1,7,8,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPIDR1, 2,1,7,9,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPIDR2, 2,1,7,10,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPIDR3, 2,1,7,11,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPIDR4, 2,1,7,4,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPIDR5, 2,1,7,5,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPIDR6, 2,1,7,6,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPIDR7, 2,1,7,7,7, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPRGCTLR, 2,1,0,1,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCPROCSELR, 2,1,0,2,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCQCTLR, 2,1,0,1,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR2, 2,1,1,2,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR3, 2,1,1,3,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR4, 2,1,1,4,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR5, 2,1,1,5,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR6, 2,1,1,6,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR7, 2,1,1,7,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR8, 2,1,1,8,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR9, 2,1,1,9,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR10, 2,1,1,10,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR11, 2,1,1,11,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR12, 2,1,1,12,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR13, 2,1,1,13,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR14, 2,1,1,14,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR15, 2,1,1,15,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR16, 2,1,1,0,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR17, 2,1,1,1,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR18, 2,1,1,2,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR19, 2,1,1,3,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR20, 2,1,1,4,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR21, 2,1,1,5,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR22, 2,1,1,6,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR23, 2,1,1,7,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR24, 2,1,1,8,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR25, 2,1,1,9,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR26, 2,1,1,10,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR27, 2,1,1,11,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR28, 2,1,1,12,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR29, 2,1,1,13,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR30, 2,1,1,14,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCRSCTLR31, 2,1,1,15,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSEQEVR0, 2,1,0,0,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSEQEVR1, 2,1,0,1,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSEQEVR2, 2,1,0,2,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSEQRSTEVR, 2,1,0,6,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSEQSTR, 2,1,0,7,4, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCCR0, 2,1,1,0,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCCR1, 2,1,1,1,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCCR2, 2,1,1,2,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCCR3, 2,1,1,3,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCCR4, 2,1,1,4,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCCR5, 2,1,1,5,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCCR6, 2,1,1,6,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCCR7, 2,1,1,7,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCSR0, 2,1,1,8,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCSR1, 2,1,1,9,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCSR2, 2,1,1,10,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCSR3, 2,1,1,11,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCSR4, 2,1,1,12,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCSR5, 2,1,1,13,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCSR6, 2,1,1,14,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSCSR7, 2,1,1,15,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSPCICR0, 2,1,1,0,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSPCICR1, 2,1,1,1,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSPCICR2, 2,1,1,2,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSPCICR3, 2,1,1,3,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSPCICR4, 2,1,1,4,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSPCICR5, 2,1,1,5,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSPCICR6, 2,1,1,6,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSSPCICR7, 2,1,1,7,3, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSTALLCTLR, 2,1,0,11,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSTATR, 2,1,0,3,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCSYNCPR, 2,1,0,13,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCTRACEIDR, 2,1,0,0,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCTSCTLR, 2,1,0,12,0, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVDARCCTLR, 2,1,0,10,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVDCTLR, 2,1,0,8,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVDSACCTLR, 2,1,0,9,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVICTLR, 2,1,0,0,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVIIECTLR, 2,1,0,1,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVIPCSSCTLR, 2,1,0,3,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVISSCTLR, 2,1,0,2,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVMIDCCTLR0, 2,1,3,2,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVMIDCCTLR1, 2,1,3,3,2, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVMIDCVR0, 2,1,3,0,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVMIDCVR1, 2,1,3,2,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVMIDCVR2, 2,1,3,4,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVMIDCVR3, 2,1,3,6,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVMIDCVR4, 2,1,3,8,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVMIDCVR5, 2,1,3,10,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVMIDCVR6, 2,1,3,12,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TRCVMIDCVR7, 2,1,3,14,1, 0x0, 0x0, 0x0, 0x0, 0x0, false)
SYSTEM_REGISTER(TTBR0_EL2, 3,4,2,0,0, 0xfffffffffff0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TTBR0_EL3, 3,6,2,0,0, 0xfffffffffff0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TTBR0_EL1, 3,0,2,0,0, 0xfffffffffffffff0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TTBR1_EL1, 3,0,2,0,1, 0xfffffffffffffff0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(TTBR1_EL2, 3,4,2,0,1, 0xfffffffffffffff0, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(VBAR_EL1, 3,0,12,0,0, 0xfffffffffffff800, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(VBAR_EL2, 3,4,12,0,0, 0xfffffffffffff800, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(VBAR_EL3, 3,6,12,0,0, 0xfffffffffffff800, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(VMPIDR_EL2, 3,4,0,0,5, 0xffc1ffffff, 0x80000000, 0x0, 0x80000000, 0x80000000, true)
SYSTEM_REGISTER(VPIDR_EL2, 3,4,0,0,0, 0xffffffff, 0x0, 0x0, 0x0, 0x0, true)
SYSTEM_REGISTER(VTCR_EL2, 3,4,2,1,2, 0x800fffff, 0x80000000, 0x0, 0x80000000, 0x80000000, true)
SYSTEM_REGISTER(VTTBR_EL2, 3,4,2,1,0, 0xfffffffffffffff0, 0x0, 0x0, 0x0, 0x0, true)

#ifdef INCLUDE_SYSTEM_REGISTER_TYPEDEFS

#ifdef __cplusplus
union ACTLR_ELX_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ACTLR_ELX_t() { u = 0; }
    ACTLR_ELX_t(uint64_t data) { u = data; }
    ACTLR_ELX_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_actlr_elx_t;
#endif

#ifdef __cplusplus
union AFSRX_ELX_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    AFSRX_ELX_t() { u = 0; }
    AFSRX_ELX_t(uint32_t data) { u = data; }
    AFSRX_ELX_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_afsrx_elx_t;
#endif

#ifdef __cplusplus
union AIDR_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    AIDR_EL1_t() { u = 0; }
    AIDR_EL1_t(uint64_t data) { u = data; }
    AIDR_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_aidr_el1_t;
#endif

#ifdef __cplusplus
union AMAIR_ELX_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    AMAIR_ELX_t() { u = 0; }
    AMAIR_ELX_t(uint64_t data) { u = data; }
    AMAIR_ELX_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_amair_elx_t;
#endif

#ifdef __cplusplus
union CCSIDR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t wt : 1;
        uint32_t wb : 1;
        uint32_t ra : 1;
        uint32_t wa : 1;
        uint32_t numsets : 15;
        uint32_t associativity : 10;
        uint32_t linesize : 3;
#else
        uint32_t linesize : 3;
        uint32_t associativity : 10;
        uint32_t numsets : 15;
        uint32_t wa : 1;
        uint32_t ra : 1;
        uint32_t wb : 1;
        uint32_t wt : 1;
#endif
    } s;
#ifdef __cplusplus
    CCSIDR_EL1_t() { u = 0; }
    CCSIDR_EL1_t(uint32_t data) { u = data; }
    CCSIDR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ccsidr_el1_t;
#endif

#ifdef __cplusplus
union CLIDR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_30_31 : 2;
        uint32_t louu : 3;
        uint32_t loc : 3;
        uint32_t louis : 3;
        uint32_t ctype7 : 3;
        uint32_t ctype6 : 3;
        uint32_t ctype5 : 3;
        uint32_t ctype4 : 3;
        uint32_t ctype3 : 3;
        uint32_t ctype2 : 3;
        uint32_t ctype1 : 3;
#else
        uint32_t ctype1 : 3;
        uint32_t ctype2 : 3;
        uint32_t ctype3 : 3;
        uint32_t ctype4 : 3;
        uint32_t ctype5 : 3;
        uint32_t ctype6 : 3;
        uint32_t ctype7 : 3;
        uint32_t louis : 3;
        uint32_t loc : 3;
        uint32_t louu : 3;
        uint32_t reserved_30_31 : 2;
#endif
    } s;
#ifdef __cplusplus
    CLIDR_EL1_t() { u = 0; }
    CLIDR_EL1_t(uint32_t data) { u = data; }
    CLIDR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_clidr_el1_t;
#endif

#ifdef __cplusplus
union CNTFRQ_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    CNTFRQ_EL0_t() { u = 0; }
    CNTFRQ_EL0_t(uint32_t data) { u = data; }
    CNTFRQ_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntfrq_el0_t;
#endif

#ifdef __cplusplus
union CNTHCTL_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_8_31 : 24;
        uint32_t evnti : 4;
        uint32_t evntdir : 1;
        uint32_t evnten : 1;
        uint32_t el1pcen : 1;
        uint32_t el1pcten : 1;
#else
        uint32_t el1pcten : 1;
        uint32_t el1pcen : 1;
        uint32_t evnten : 1;
        uint32_t evntdir : 1;
        uint32_t evnti : 4;
        uint32_t reserved_8_31 : 24;
#endif
    } s;
#ifdef __cplusplus
    CNTHCTL_EL2_t() { u = 0; }
    CNTHCTL_EL2_t(uint32_t data) { u = data; }
    CNTHCTL_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cnthctl_el2_t;
#endif

#ifdef __cplusplus
union CNTHP_CTL_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_3_31 : 29;
        uint32_t istatus : 1;
        uint32_t imask : 1;
        uint32_t enable : 1;
#else
        uint32_t enable : 1;
        uint32_t imask : 1;
        uint32_t istatus : 1;
        uint32_t reserved_3_31 : 29;
#endif
    } s;
#ifdef __cplusplus
    CNTHP_CTL_EL2_t() { u = 0; }
    CNTHP_CTL_EL2_t(uint32_t data) { u = data; }
    CNTHP_CTL_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cnthp_ctl_el2_t;
#endif

#ifdef __cplusplus
union CNTHP_CVAL_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    CNTHP_CVAL_EL2_t() { u = 0; }
    CNTHP_CVAL_EL2_t(uint64_t data) { u = data; }
    CNTHP_CVAL_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cnthp_cval_el2_t;
#endif

#ifdef __cplusplus
union CNTHP_TVAL_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    CNTHP_TVAL_EL2_t() { u = 0; }
    CNTHP_TVAL_EL2_t(uint32_t data) { u = data; }
    CNTHP_TVAL_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cnthp_tval_el2_t;
#endif

#ifdef __cplusplus
union CNTKCTL_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_10_31 : 22;
        uint32_t el0pten : 1;
        uint32_t el0vten : 1;
        uint32_t evnti : 4;
        uint32_t evntdir : 1;
        uint32_t evnten : 1;
        uint32_t el0vcten : 1;
        uint32_t el0pcten : 1;
#else
        uint32_t el0pcten : 1;
        uint32_t el0vcten : 1;
        uint32_t evnten : 1;
        uint32_t evntdir : 1;
        uint32_t evnti : 4;
        uint32_t el0vten : 1;
        uint32_t el0pten : 1;
        uint32_t reserved_10_31 : 22;
#endif
    } s;
#ifdef __cplusplus
    CNTKCTL_EL1_t() { u = 0; }
    CNTKCTL_EL1_t(uint32_t data) { u = data; }
    CNTKCTL_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntkctl_el1_t;
#endif

#ifdef __cplusplus
union CNTPCT_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    CNTPCT_EL0_t() { u = 0; }
    CNTPCT_EL0_t(uint64_t data) { u = data; }
    CNTPCT_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntpct_el0_t;
#endif

#ifdef __cplusplus
union CNTPS_CTL_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_3_31 : 29;
        uint32_t istatus : 1;
        uint32_t imask : 1;
        uint32_t enable : 1;
#else
        uint32_t enable : 1;
        uint32_t imask : 1;
        uint32_t istatus : 1;
        uint32_t reserved_3_31 : 29;
#endif
    } s;
#ifdef __cplusplus
    CNTPS_CTL_EL1_t() { u = 0; }
    CNTPS_CTL_EL1_t(uint32_t data) { u = data; }
    CNTPS_CTL_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntps_ctl_el1_t;
#endif

#ifdef __cplusplus
union CNTPS_CVAL_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    CNTPS_CVAL_EL1_t() { u = 0; }
    CNTPS_CVAL_EL1_t(uint64_t data) { u = data; }
    CNTPS_CVAL_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntps_cval_el1_t;
#endif

#ifdef __cplusplus
union CNTPS_TVAL_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    CNTPS_TVAL_EL1_t() { u = 0; }
    CNTPS_TVAL_EL1_t(uint32_t data) { u = data; }
    CNTPS_TVAL_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntps_tval_el1_t;
#endif

#ifdef __cplusplus
union CNTP_CTL_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_3_31 : 29;
        uint32_t istatus : 1;
        uint32_t imask : 1;
        uint32_t enable : 1;
#else
        uint32_t enable : 1;
        uint32_t imask : 1;
        uint32_t istatus : 1;
        uint32_t reserved_3_31 : 29;
#endif
    } s;
#ifdef __cplusplus
    CNTP_CTL_EL0_t() { u = 0; }
    CNTP_CTL_EL0_t(uint32_t data) { u = data; }
    CNTP_CTL_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntp_ctl_el0_t;
#endif

#ifdef __cplusplus
union CNTP_CVAL_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    CNTP_CVAL_EL0_t() { u = 0; }
    CNTP_CVAL_EL0_t(uint64_t data) { u = data; }
    CNTP_CVAL_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntp_cval_el0_t;
#endif

#ifdef __cplusplus
union CNTP_TVAL_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    CNTP_TVAL_EL0_t() { u = 0; }
    CNTP_TVAL_EL0_t(uint32_t data) { u = data; }
    CNTP_TVAL_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntp_tval_el0_t;
#endif

#ifdef __cplusplus
union CNTVCT_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    CNTVCT_EL0_t() { u = 0; }
    CNTVCT_EL0_t(uint64_t data) { u = data; }
    CNTVCT_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntvct_el0_t;
#endif

#ifdef __cplusplus
union CNTVOFF_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    CNTVOFF_EL2_t() { u = 0; }
    CNTVOFF_EL2_t(uint64_t data) { u = data; }
    CNTVOFF_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntvoff_el2_t;
#endif

#ifdef __cplusplus
union CNTV_CTL_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_3_31 : 29;
        uint32_t istatus : 1;
        uint32_t imask : 1;
        uint32_t enable : 1;
#else
        uint32_t enable : 1;
        uint32_t imask : 1;
        uint32_t istatus : 1;
        uint32_t reserved_3_31 : 29;
#endif
    } s;
#ifdef __cplusplus
    CNTV_CTL_EL0_t() { u = 0; }
    CNTV_CTL_EL0_t(uint32_t data) { u = data; }
    CNTV_CTL_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntv_ctl_el0_t;
#endif

#ifdef __cplusplus
union CNTV_CVAL_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    CNTV_CVAL_EL0_t() { u = 0; }
    CNTV_CVAL_EL0_t(uint64_t data) { u = data; }
    CNTV_CVAL_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntv_cval_el0_t;
#endif

#ifdef __cplusplus
union CNTV_TVAL_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    CNTV_TVAL_EL0_t() { u = 0; }
    CNTV_TVAL_EL0_t(uint32_t data) { u = data; }
    CNTV_TVAL_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cntv_tval_el0_t;
#endif

#ifdef __cplusplus
union CONTEXTIDR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t procid : 32;
#else
        uint32_t procid : 32;
#endif
    } s;
#ifdef __cplusplus
    CONTEXTIDR_EL1_t() { u = 0; }
    CONTEXTIDR_EL1_t(uint32_t data) { u = data; }
    CONTEXTIDR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_contextidr_el1_t;
#endif

#ifdef __cplusplus
union CPACR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_29_31 : 3;
        uint32_t reserved_28 : 1;
        uint32_t reserved_22_27 : 6;
        uint32_t fpen : 2;
        uint32_t reserved_0_19 : 20;
#else
        uint32_t reserved_0_19 : 20;
        uint32_t fpen : 2;
        uint32_t reserved_22_27 : 6;
        uint32_t reserved_28 : 1;
        uint32_t reserved_29_31 : 3;
#endif
    } s;
#ifdef __cplusplus
    CPACR_EL1_t() { u = 0; }
    CPACR_EL1_t(uint32_t data) { u = data; }
    CPACR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cpacr_el1_t;
#endif

#ifdef __cplusplus
union CPTR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t tcpac : 1;
        uint32_t reserved_21_30 : 10;
        uint32_t reserved_20 : 1;
        uint32_t reserved_14_19 : 6;
        uint32_t reserved_12_13 : 2;
        uint32_t reserved_11 : 1;
        uint32_t tfp : 1;
        uint32_t reserved_0_9 : 10;
#else
        uint32_t reserved_0_9 : 10;
        uint32_t tfp : 1;
        uint32_t reserved_11 : 1;
        uint32_t reserved_12_13 : 2;
        uint32_t reserved_14_19 : 6;
        uint32_t reserved_20 : 1;
        uint32_t reserved_21_30 : 10;
        uint32_t tcpac : 1;
#endif
    } s;
#ifdef __cplusplus
    CPTR_EL2_t() { u = 0; }
    CPTR_EL2_t(uint32_t data) { u = data; }
    CPTR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cptr_el2_t;
#endif

#ifdef __cplusplus
union CPTR_EL3_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t tcpac : 1;
        uint32_t reserved_21_30 : 10;
        uint32_t reserved_20 : 1;
        uint32_t reserved_11_19 : 9;
        uint32_t tfp : 1;
        uint32_t reserved_0_9 : 10;
#else
        uint32_t reserved_0_9 : 10;
        uint32_t tfp : 1;
        uint32_t reserved_11_19 : 9;
        uint32_t reserved_20 : 1;
        uint32_t reserved_21_30 : 10;
        uint32_t tcpac : 1;
#endif
    } s;
#ifdef __cplusplus
    CPTR_EL3_t() { u = 0; }
    CPTR_EL3_t(uint32_t data) { u = data; }
    CPTR_EL3_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cptr_el3_t;
#endif

#ifdef __cplusplus
union CSSELR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_4_31 : 28;
        uint32_t level : 3;
        uint32_t ind : 1;
#else
        uint32_t ind : 1;
        uint32_t level : 3;
        uint32_t reserved_4_31 : 28;
#endif
    } s;
#ifdef __cplusplus
    CSSELR_EL1_t() { u = 0; }
    CSSELR_EL1_t(uint32_t data) { u = data; }
    CSSELR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_csselr_el1_t;
#endif

#ifdef __cplusplus
union CTR_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_31 : 1;
        uint32_t reserved_28_30 : 3;
        uint32_t cwg : 4;
        uint32_t erg : 4;
        uint32_t dminline : 4;
        uint32_t l1ip : 2;
        uint32_t reserved_4_13 : 10;
        uint32_t iminline : 4;
#else
        uint32_t iminline : 4;
        uint32_t reserved_4_13 : 10;
        uint32_t l1ip : 2;
        uint32_t dminline : 4;
        uint32_t erg : 4;
        uint32_t cwg : 4;
        uint32_t reserved_28_30 : 3;
        uint32_t reserved_31 : 1;
#endif
    } s;
#ifdef __cplusplus
    CTR_EL0_t() { u = 0; }
    CTR_EL0_t(uint32_t data) { u = data; }
    CTR_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ctr_el0_t;
#endif

#ifdef __cplusplus
union CurrentEL_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_4_31 : 28;
        uint32_t el : 2;
        uint32_t reserved_0_1 : 2;
#else
        uint32_t reserved_0_1 : 2;
        uint32_t el : 2;
        uint32_t reserved_4_31 : 28;
#endif
    } s;
#ifdef __cplusplus
    CurrentEL_t() { u = 0; }
    CurrentEL_t(uint32_t data) { u = data; }
    CurrentEL_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_currentel_t;
#endif

#ifdef __cplusplus
union CVMCTL_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_35_63 : 29;
        uint64_t disable_wfe : 1;
        uint64_t enable_v81 : 1;
        uint64_t make_isb_unnecessarily_slow : 1;
        uint64_t wfe_defer : 8;
        uint64_t disable_icache_probes : 1;
        uint64_t force_icache_parity : 1;
        uint64_t suppress_parity_checking : 1;
        uint64_t no_exc_icache_parity : 1;
        uint64_t step_rate : 4;
        uint64_t reserved_10_15 : 6;
        uint64_t disable_flex_execution : 1;
        uint64_t disable_branch_folding : 1;
        uint64_t disable_wfi : 1;
        uint64_t disable_fetch_under_fill : 1;
        uint64_t force_issue_clock : 1;
        uint64_t force_exe_clock : 1;
        uint64_t force_csr_clock : 1;
        uint64_t disable_icache_prefetching : 1;
        uint64_t random_icache : 1;
        uint64_t disable_icache : 1;
#else
        uint64_t disable_icache : 1;
        uint64_t random_icache : 1;
        uint64_t disable_icache_prefetching : 1;
        uint64_t force_csr_clock : 1;
        uint64_t force_exe_clock : 1;
        uint64_t force_issue_clock : 1;
        uint64_t disable_fetch_under_fill : 1;
        uint64_t disable_wfi : 1;
        uint64_t disable_branch_folding : 1;
        uint64_t disable_flex_execution : 1;
        uint64_t reserved_10_15 : 6;
        uint64_t step_rate : 4;
        uint64_t no_exc_icache_parity : 1;
        uint64_t suppress_parity_checking : 1;
        uint64_t force_icache_parity : 1;
        uint64_t disable_icache_probes : 1;
        uint64_t wfe_defer : 8;
        uint64_t make_isb_unnecessarily_slow : 1;
        uint64_t enable_v81 : 1;
        uint64_t disable_wfe : 1;
        uint64_t reserved_35_63 : 29;
#endif
    } s;
#ifdef __cplusplus
    CVMCTL_EL1_t() { u = 0; }
    CVMCTL_EL1_t(uint64_t data) { u = data; }
    CVMCTL_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvmctl_el1_t;
#endif

#ifdef __cplusplus
union CVMMEMCTL0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_63 : 1;
        uint64_t node : 2;
        uint64_t stexfailcnt : 3;
        uint64_t reserved_47_57 : 11;
        uint64_t tlbiall : 1;
        uint64_t wbfdsbflushall : 1;
        uint64_t wbfdmbflushnext : 1;
        uint64_t stexl2cforce : 1;
        uint64_t ioglobalforce : 1;
        uint64_t wcumissforce : 1;
        uint64_t replayprefdis : 1;
        uint64_t zval2cdis : 1;
        uint64_t ldil2cdis : 1;
        uint64_t dcva47 : 1;
        uint64_t stprefdis : 1;
        uint64_t ldprefdis : 1;
        uint64_t wfildexdis : 1;
        uint64_t wfito : 3;
        uint64_t rbfshortto : 5;
        uint64_t rbfto : 5;
        uint64_t wbfallbarrier : 1;
        uint64_t wbfnomerge : 1;
        uint64_t wbftonshena : 1;
        uint64_t wbftomrgclrena : 1;
        uint64_t wbfto : 5;
        uint64_t wbfthresh : 5;
        uint64_t utlbentriesm1 : 5;
        uint64_t cclkforce : 1;
        uint64_t mclkforce : 1;
#else
        uint64_t mclkforce : 1;
        uint64_t cclkforce : 1;
        uint64_t utlbentriesm1 : 5;
        uint64_t wbfthresh : 5;
        uint64_t wbfto : 5;
        uint64_t wbftomrgclrena : 1;
        uint64_t wbftonshena : 1;
        uint64_t wbfnomerge : 1;
        uint64_t wbfallbarrier : 1;
        uint64_t rbfto : 5;
        uint64_t rbfshortto : 5;
        uint64_t wfito : 3;
        uint64_t wfildexdis : 1;
        uint64_t ldprefdis : 1;
        uint64_t stprefdis : 1;
        uint64_t dcva47 : 1;
        uint64_t ldil2cdis : 1;
        uint64_t zval2cdis : 1;
        uint64_t replayprefdis : 1;
        uint64_t wcumissforce : 1;
        uint64_t ioglobalforce : 1;
        uint64_t stexl2cforce : 1;
        uint64_t wbfdmbflushnext : 1;
        uint64_t wbfdsbflushall : 1;
        uint64_t tlbiall : 1;
        uint64_t reserved_47_57 : 11;
        uint64_t stexfailcnt : 3;
        uint64_t node : 2;
        uint64_t reserved_63 : 1;
#endif
    } s;
#ifdef __cplusplus
    CVMMEMCTL0_EL1_t() { u = 0; }
    CVMMEMCTL0_EL1_t(uint64_t data) { u = data; }
    CVMMEMCTL0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvmmemctl0_el1_t;
#endif

#ifdef __cplusplus
union CVMMEMCTL1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    CVMMEMCTL1_EL1_t() { u = 0; }
    CVMMEMCTL1_EL1_t(uint64_t data) { u = data; }
    CVMMEMCTL1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvmmemctl1_el1_t;
#endif

#ifdef __cplusplus
union CVM_POWER_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t maxpow : 8;
        uint64_t average_power : 8;
        uint64_t current_setting : 8;
        uint64_t hrm_adjustment : 8;
        uint64_t reserved_29_31 : 3;
        uint64_t secret_override : 1;
        uint64_t disable_stagger : 1;
        uint64_t period : 3;
        uint64_t powlim : 8;
        uint64_t max_setting : 8;
        uint64_t min_setting : 8;
#else
        uint64_t min_setting : 8;
        uint64_t max_setting : 8;
        uint64_t powlim : 8;
        uint64_t period : 3;
        uint64_t disable_stagger : 1;
        uint64_t secret_override : 1;
        uint64_t reserved_29_31 : 3;
        uint64_t hrm_adjustment : 8;
        uint64_t current_setting : 8;
        uint64_t average_power : 8;
        uint64_t maxpow : 8;
#endif
    } s;
#ifdef __cplusplus
    CVM_POWER_EL1_t() { u = 0; }
    CVM_POWER_EL1_t(uint64_t data) { u = data; }
    CVM_POWER_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_power_el1_t;
#endif

#ifdef __cplusplus
union CVM_BIST0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_35_63 : 29;
        uint64_t fuse_controller_reports_hard_repair : 1;
        uint64_t clear_bist_was_run : 1;
        uint64_t manufacturing_mode : 1;
        uint64_t icache_data_banks_with_unrepairable_defects : 8;
        uint64_t icache_data_banks_with_defects : 8;
        uint64_t reserved_8_15 : 8;
        uint64_t aes_roms_defective : 1;
        uint64_t fpu_roms_defective : 1;
        uint64_t fpu_rf_defective : 1;
        uint64_t integer_rf_defective : 1;
        uint64_t jrt_defective : 1;
        uint64_t bht_defective : 1;
        uint64_t icache_tag_defective : 1;
        uint64_t icache_data_defective : 1;
#else
        uint64_t icache_data_defective : 1;
        uint64_t icache_tag_defective : 1;
        uint64_t bht_defective : 1;
        uint64_t jrt_defective : 1;
        uint64_t integer_rf_defective : 1;
        uint64_t fpu_rf_defective : 1;
        uint64_t fpu_roms_defective : 1;
        uint64_t aes_roms_defective : 1;
        uint64_t reserved_8_15 : 8;
        uint64_t icache_data_banks_with_defects : 8;
        uint64_t icache_data_banks_with_unrepairable_defects : 8;
        uint64_t manufacturing_mode : 1;
        uint64_t clear_bist_was_run : 1;
        uint64_t fuse_controller_reports_hard_repair : 1;
        uint64_t reserved_35_63 : 29;
#endif
    } s;
#ifdef __cplusplus
    CVM_BIST0_EL1_t() { u = 0; }
    CVM_BIST0_EL1_t(uint64_t data) { u = data; }
    CVM_BIST0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_bist0_el1_t;
#endif

#ifdef __cplusplus
union CVM_BIST1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_48_63 : 16;
        uint64_t icache_bank7 : 6;
        uint64_t icache_bank6 : 6;
        uint64_t icache_bank5 : 6;
        uint64_t icache_bank4 : 6;
        uint64_t icache_bank3 : 6;
        uint64_t icache_bank2 : 6;
        uint64_t icache_bank1 : 6;
        uint64_t icache_bank0 : 6;
#else
        uint64_t icache_bank0 : 6;
        uint64_t icache_bank1 : 6;
        uint64_t icache_bank2 : 6;
        uint64_t icache_bank3 : 6;
        uint64_t icache_bank4 : 6;
        uint64_t icache_bank5 : 6;
        uint64_t icache_bank6 : 6;
        uint64_t icache_bank7 : 6;
        uint64_t reserved_48_63 : 16;
#endif
    } s;
#ifdef __cplusplus
    CVM_BIST1_EL1_t() { u = 0; }
    CVM_BIST1_EL1_t(uint64_t data) { u = data; }
    CVM_BIST1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_bist1_el1_t;
#endif

#ifdef __cplusplus
union CVM_BIST2_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_9_63 : 55;
        uint64_t wcu : 1;
        uint64_t dut : 1;
        uint64_t wbf : 1;
        uint64_t maf : 1;
        uint64_t utlb : 1;
        uint64_t mtlb : 1;
        uint64_t l1dp : 1;
        uint64_t l1dv : 1;
        uint64_t l1dd : 1;
#else
        uint64_t l1dd : 1;
        uint64_t l1dv : 1;
        uint64_t l1dp : 1;
        uint64_t mtlb : 1;
        uint64_t utlb : 1;
        uint64_t maf : 1;
        uint64_t wbf : 1;
        uint64_t dut : 1;
        uint64_t wcu : 1;
        uint64_t reserved_9_63 : 55;
#endif
    } s;
#ifdef __cplusplus
    CVM_BIST2_EL1_t() { u = 0; }
    CVM_BIST2_EL1_t(uint64_t data) { u = data; }
    CVM_BIST2_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_bist2_el1_t;
#endif

#ifdef __cplusplus
union CVM_BIST3_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_48_63 : 16;
        uint64_t set7 : 6;
        uint64_t set6 : 6;
        uint64_t set5 : 6;
        uint64_t set4 : 6;
        uint64_t set3 : 6;
        uint64_t set2 : 6;
        uint64_t set1 : 6;
        uint64_t set0 : 6;
#else
        uint64_t set0 : 6;
        uint64_t set1 : 6;
        uint64_t set2 : 6;
        uint64_t set3 : 6;
        uint64_t set4 : 6;
        uint64_t set5 : 6;
        uint64_t set6 : 6;
        uint64_t set7 : 6;
        uint64_t reserved_48_63 : 16;
#endif
    } s;
#ifdef __cplusplus
    CVM_BIST3_EL1_t() { u = 0; }
    CVM_BIST3_EL1_t(uint64_t data) { u = data; }
    CVM_BIST3_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_bist3_el1_t;
#endif

#ifdef __cplusplus
union CVM_ERRICACHE_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_17_63 : 47;
        uint64_t set : 6;
        uint64_t va : 8;
        uint64_t reserved_1_2 : 2;
        uint64_t icache_data_error : 1;
#else
        uint64_t icache_data_error : 1;
        uint64_t reserved_1_2 : 2;
        uint64_t va : 8;
        uint64_t set : 6;
        uint64_t reserved_17_63 : 47;
#endif
    } s;
#ifdef __cplusplus
    CVM_ERRICACHE_EL1_t() { u = 0; }
    CVM_ERRICACHE_EL1_t(uint64_t data) { u = data; }
    CVM_ERRICACHE_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_erricache_el1_t;
#endif

#ifdef __cplusplus
union CVM_ERRMEM_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_45_63 : 19;
        uint64_t wcumultdis : 1;
        uint64_t wcumult : 1;
        uint64_t mtlbmultdis : 1;
        uint64_t mtlbmult : 1;
        uint64_t barriertoforce : 1;
        uint64_t barriertonosw : 1;
        uint64_t barriertodis : 1;
        uint64_t barrierto : 1;
        uint64_t rbftoforce : 1;
        uint64_t rbftonosw : 1;
        uint64_t rbftodis : 1;
        uint64_t rbfto : 1;
        uint64_t wcuperrforce : 1;
        uint64_t wcuperrnosw : 1;
        uint64_t wcuperrdis : 1;
        uint64_t wcuperr : 1;
        uint64_t wbfdbeforce : 1;
        uint64_t wbfsbeforce : 1;
        uint64_t wbfperrnosw : 1;
        uint64_t wbfperrdis : 1;
        uint64_t wbfperr : 1;
        uint64_t mafperrforce : 1;
        uint64_t mafperrnosw : 1;
        uint64_t mafperrdis : 1;
        uint64_t mafperr : 1;
        uint64_t utlbperrforce : 1;
        uint64_t utlbperrnosw : 1;
        uint64_t utlbperrdis : 1;
        uint64_t utlbperr : 1;
        uint64_t mtlbperrforce : 1;
        uint64_t mtlbperrnosw : 1;
        uint64_t mtlbperrdis : 1;
        uint64_t mtlbperr : 1;
        uint64_t l1dperrforce : 1;
        uint64_t l1dperrnosw : 1;
        uint64_t l1dperrdis : 1;
        uint64_t l1dperr : 1;
        uint64_t l1dway : 5;
        uint64_t l1dset : 3;
#else
        uint64_t l1dset : 3;
        uint64_t l1dway : 5;
        uint64_t l1dperr : 1;
        uint64_t l1dperrdis : 1;
        uint64_t l1dperrnosw : 1;
        uint64_t l1dperrforce : 1;
        uint64_t mtlbperr : 1;
        uint64_t mtlbperrdis : 1;
        uint64_t mtlbperrnosw : 1;
        uint64_t mtlbperrforce : 1;
        uint64_t utlbperr : 1;
        uint64_t utlbperrdis : 1;
        uint64_t utlbperrnosw : 1;
        uint64_t utlbperrforce : 1;
        uint64_t mafperr : 1;
        uint64_t mafperrdis : 1;
        uint64_t mafperrnosw : 1;
        uint64_t mafperrforce : 1;
        uint64_t wbfperr : 1;
        uint64_t wbfperrdis : 1;
        uint64_t wbfperrnosw : 1;
        uint64_t wbfsbeforce : 1;
        uint64_t wbfdbeforce : 1;
        uint64_t wcuperr : 1;
        uint64_t wcuperrdis : 1;
        uint64_t wcuperrnosw : 1;
        uint64_t wcuperrforce : 1;
        uint64_t rbfto : 1;
        uint64_t rbftodis : 1;
        uint64_t rbftonosw : 1;
        uint64_t rbftoforce : 1;
        uint64_t barrierto : 1;
        uint64_t barriertodis : 1;
        uint64_t barriertonosw : 1;
        uint64_t barriertoforce : 1;
        uint64_t mtlbmult : 1;
        uint64_t mtlbmultdis : 1;
        uint64_t wcumult : 1;
        uint64_t wcumultdis : 1;
        uint64_t reserved_45_63 : 19;
#endif
    } s;
#ifdef __cplusplus
    CVM_ERRMEM_EL1_t() { u = 0; }
    CVM_ERRMEM_EL1_t(uint64_t data) { u = data; }
    CVM_ERRMEM_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_errmem_el1_t;
#endif

#ifdef __cplusplus
union CVM_EVATTID_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_38_63 : 26;
        uint64_t el2_asid : 6;
        uint64_t reserved_20_31 : 12;
        uint64_t el1_vmid : 4;
        uint64_t reserved_6_15 : 10;
        uint64_t el1_asid : 6;
#else
        uint64_t el1_asid : 6;
        uint64_t reserved_6_15 : 10;
        uint64_t el1_vmid : 4;
        uint64_t reserved_20_31 : 12;
        uint64_t el2_asid : 6;
        uint64_t reserved_38_63 : 26;
#endif
    } s;
#ifdef __cplusplus
    CVM_EVATTID_EL1_t() { u = 0; }
    CVM_EVATTID_EL1_t(uint64_t data) { u = data; }
    CVM_EVATTID_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_evattid_el1_t;
#endif

#ifdef __cplusplus
union CVM_ICACHEDATA0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_ICACHEDATA0_EL1_t() { u = 0; }
    CVM_ICACHEDATA0_EL1_t(uint64_t data) { u = data; }
    CVM_ICACHEDATA0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_icachedata0_el1_t;
#endif

#ifdef __cplusplus
union CVM_ICACHEDATA1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_2_63 : 62;
        uint64_t data : 2;
#else
        uint64_t data : 2;
        uint64_t reserved_2_63 : 62;
#endif
    } s;
#ifdef __cplusplus
    CVM_ICACHEDATA1_EL1_t() { u = 0; }
    CVM_ICACHEDATA1_EL1_t(uint64_t data) { u = data; }
    CVM_ICACHEDATA1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_icachedata1_el1_t;
#endif

#ifdef __cplusplus
union CVM_ICACHETAG0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_52_63 : 12;
        uint64_t valid : 1;
        uint64_t va : 40;
        uint64_t asid_valid_ignored : 1;
        uint64_t asid_index : 6;
        uint64_t vmid_index : 4;
#else
        uint64_t vmid_index : 4;
        uint64_t asid_index : 6;
        uint64_t asid_valid_ignored : 1;
        uint64_t va : 40;
        uint64_t valid : 1;
        uint64_t reserved_52_63 : 12;
#endif
    } s;
#ifdef __cplusplus
    CVM_ICACHETAG0_EL1_t() { u = 0; }
    CVM_ICACHETAG0_EL1_t(uint64_t data) { u = data; }
    CVM_ICACHETAG0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_icachetag0_el1_t;
#endif

#ifdef __cplusplus
union CVM_DCACHEDATA0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_DCACHEDATA0_EL1_t() { u = 0; }
    CVM_DCACHEDATA0_EL1_t(uint64_t data) { u = data; }
    CVM_DCACHEDATA0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_dcachedata0_el1_t;
#endif

#ifdef __cplusplus
union CVM_DCACHEDATA1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_8_63 : 56;
        uint64_t parity : 8;
#else
        uint64_t parity : 8;
        uint64_t reserved_8_63 : 56;
#endif
    } s;
#ifdef __cplusplus
    CVM_DCACHEDATA1_EL1_t() { u = 0; }
    CVM_DCACHEDATA1_EL1_t(uint64_t data) { u = data; }
    CVM_DCACHEDATA1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_dcachedata1_el1_t;
#endif

#ifdef __cplusplus
union CVM_DCACHEVTAG0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_60_63 : 4;
        uint64_t eva_vmid : 4;
        uint64_t reserved_49_55 : 7;
        uint64_t r : 1;
        uint64_t vtag : 38;
        uint64_t eva_asid : 6;
        uint64_t ng : 1;
        uint64_t el_1or0 : 1;
        uint64_t ns : 1;
        uint64_t valid : 1;
#else
        uint64_t valid : 1;
        uint64_t ns : 1;
        uint64_t el_1or0 : 1;
        uint64_t ng : 1;
        uint64_t eva_asid : 6;
        uint64_t vtag : 38;
        uint64_t r : 1;
        uint64_t reserved_49_55 : 7;
        uint64_t eva_vmid : 4;
        uint64_t reserved_60_63 : 4;
#endif
    } s;
#ifdef __cplusplus
    CVM_DCACHEVTAG0_EL1_t() { u = 0; }
    CVM_DCACHEVTAG0_EL1_t(uint64_t data) { u = data; }
    CVM_DCACHEVTAG0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_dcachevtag0_el1_t;
#endif

#ifdef __cplusplus
union CVM_DCACHEVTAG1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_25_63 : 39;
        uint64_t ent1 : 9;
        uint64_t reserved_9_15 : 7;
        uint64_t ent2 : 9;
#else
        uint64_t ent2 : 9;
        uint64_t reserved_9_15 : 7;
        uint64_t ent1 : 9;
        uint64_t reserved_25_63 : 39;
#endif
    } s;
#ifdef __cplusplus
    CVM_DCACHEVTAG1_EL1_t() { u = 0; }
    CVM_DCACHEVTAG1_EL1_t(uint64_t data) { u = data; }
    CVM_DCACHEVTAG1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_dcachevtag1_el1_t;
#endif

#ifdef __cplusplus
union CVM_DCACHEPTAG0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_44_63 : 20;
        uint64_t ns : 1;
        uint64_t ptag : 33;
        uint64_t reserved_1_9 : 9;
        uint64_t valid : 1;
#else
        uint64_t valid : 1;
        uint64_t reserved_1_9 : 9;
        uint64_t ptag : 33;
        uint64_t ns : 1;
        uint64_t reserved_44_63 : 20;
#endif
    } s;
#ifdef __cplusplus
    CVM_DCACHEPTAG0_EL1_t() { u = 0; }
    CVM_DCACHEPTAG0_EL1_t(uint64_t data) { u = data; }
    CVM_DCACHEPTAG0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_dcacheptag0_el1_t;
#endif

#ifdef __cplusplus
union CVM_XLATDATA0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t par : 2;
        uint64_t reserved_54_61 : 8;
        uint64_t walk : 2;
        uint64_t ng : 1;
        uint64_t reserved_50 : 1;
        uint64_t ns : 1;
        uint64_t reserved_48 : 1;
        uint64_t ppn : 36;
        uint64_t reserved_10_11 : 2;
        uint64_t sh1 : 2;
        uint64_t ap1 : 2;
        uint64_t xn1 : 1;
        uint64_t pxn1 : 1;
        uint64_t attr1 : 4;
#else
        uint64_t attr1 : 4;
        uint64_t pxn1 : 1;
        uint64_t xn1 : 1;
        uint64_t ap1 : 2;
        uint64_t sh1 : 2;
        uint64_t reserved_10_11 : 2;
        uint64_t ppn : 36;
        uint64_t reserved_48 : 1;
        uint64_t ns : 1;
        uint64_t reserved_50 : 1;
        uint64_t ng : 1;
        uint64_t walk : 2;
        uint64_t reserved_54_61 : 8;
        uint64_t par : 2;
#endif
    } s;
#ifdef __cplusplus
    CVM_XLATDATA0_EL1_t() { u = 0; }
    CVM_XLATDATA0_EL1_t(uint64_t data) { u = data; }
    CVM_XLATDATA0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_xlatdata0_el1_t;
#endif

#ifdef __cplusplus
union CVM_XLATDATA1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_63 : 1;
        uint64_t ent2 : 9;
        uint64_t reserved_45_53 : 9;
        uint64_t ent1 : 9;
        uint64_t reserved_34_35 : 2;
        uint64_t mask : 22;
        uint64_t reserved_10_11 : 2;
        uint64_t sh2 : 2;
        uint64_t ap2 : 2;
        uint64_t xn2 : 1;
        uint64_t pxn2 : 1;
        uint64_t attr2 : 4;
#else
        uint64_t attr2 : 4;
        uint64_t pxn2 : 1;
        uint64_t xn2 : 1;
        uint64_t ap2 : 2;
        uint64_t sh2 : 2;
        uint64_t reserved_10_11 : 2;
        uint64_t mask : 22;
        uint64_t reserved_34_35 : 2;
        uint64_t ent1 : 9;
        uint64_t reserved_45_53 : 9;
        uint64_t ent2 : 9;
        uint64_t reserved_63 : 1;
#endif
    } s;
#ifdef __cplusplus
    CVM_XLATDATA1_EL1_t() { u = 0; }
    CVM_XLATDATA1_EL1_t(uint64_t data) { u = data; }
    CVM_XLATDATA1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_xlatdata1_el1_t;
#endif

#ifdef __cplusplus
union CVM_XLATVTAG0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t level : 2;
        uint64_t eva_asid : 6;
        uint64_t eva_vmid : 4;
        uint64_t ng : 1;
        uint64_t el_1or0 : 1;
        uint64_t ns : 1;
        uint64_t r : 1;
        uint64_t vpn : 36;
        uint64_t reserved_1_11 : 11;
        uint64_t val : 1;
#else
        uint64_t val : 1;
        uint64_t reserved_1_11 : 11;
        uint64_t vpn : 36;
        uint64_t r : 1;
        uint64_t ns : 1;
        uint64_t el_1or0 : 1;
        uint64_t ng : 1;
        uint64_t eva_vmid : 4;
        uint64_t eva_asid : 6;
        uint64_t level : 2;
#endif
    } s;
#ifdef __cplusplus
    CVM_XLATVTAG0_EL1_t() { u = 0; }
    CVM_XLATVTAG0_EL1_t(uint64_t data) { u = data; }
    CVM_XLATVTAG0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_xlatvtag0_el1_t;
#endif

#ifdef __cplusplus
union CVM_XLATVTAG1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_57_63 : 7;
        uint64_t ent2 : 9;
        uint64_t reserved_45_47 : 3;
        uint64_t ent1 : 9;
        uint64_t reserved_34_35 : 2;
        uint64_t mask : 22;
        uint64_t reserved_2_11 : 10;
        uint64_t stage2 : 1;
        uint64_t stage1 : 1;
#else
        uint64_t stage1 : 1;
        uint64_t stage2 : 1;
        uint64_t reserved_2_11 : 10;
        uint64_t mask : 22;
        uint64_t reserved_34_35 : 2;
        uint64_t ent1 : 9;
        uint64_t reserved_45_47 : 3;
        uint64_t ent2 : 9;
        uint64_t reserved_57_63 : 7;
#endif
    } s;
#ifdef __cplusplus
    CVM_XLATVTAG1_EL1_t() { u = 0; }
    CVM_XLATVTAG1_EL1_t(uint64_t data) { u = data; }
    CVM_XLATVTAG1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_xlatvtag1_el1_t;
#endif

#ifdef __cplusplus
union CVM_DEBUG0_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t current_pc : 64;
#else
        uint64_t current_pc : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_DEBUG0_EL3_t() { u = 0; }
    CVM_DEBUG0_EL3_t(uint64_t data) { u = data; }
    CVM_DEBUG0_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_debug0_el3_t;
#endif

#ifdef __cplusplus
union CVM_DEBUG1_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t current_fetch : 64;
#else
        uint64_t current_fetch : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_DEBUG1_EL3_t() { u = 0; }
    CVM_DEBUG1_EL3_t(uint64_t data) { u = data; }
    CVM_DEBUG1_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_debug1_el3_t;
#endif

#ifdef __cplusplus
union CVM_DEBUG2_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t last_ifill : 64;
#else
        uint64_t last_ifill : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_DEBUG2_EL3_t() { u = 0; }
    CVM_DEBUG2_EL3_t(uint64_t data) { u = data; }
    CVM_DEBUG2_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_debug2_el3_t;
#endif

#ifdef __cplusplus
union CVM_DEBUG3_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t last_committed : 64;
#else
        uint64_t last_committed : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_DEBUG3_EL3_t() { u = 0; }
    CVM_DEBUG3_EL3_t(uint64_t data) { u = data; }
    CVM_DEBUG3_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_debug3_el3_t;
#endif

#ifdef __cplusplus
union CVM_MEMDEBUG0_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t debug : 64;
#else
        uint64_t debug : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_MEMDEBUG0_EL3_t() { u = 0; }
    CVM_MEMDEBUG0_EL3_t(uint64_t data) { u = data; }
    CVM_MEMDEBUG0_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_memdebug0_el3_t;
#endif

#ifdef __cplusplus
union CVM_MEMDEBUG1_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t debug : 64;
#else
        uint64_t debug : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_MEMDEBUG1_EL3_t() { u = 0; }
    CVM_MEMDEBUG1_EL3_t(uint64_t data) { u = data; }
    CVM_MEMDEBUG1_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_memdebug1_el3_t;
#endif

#ifdef __cplusplus
union CVM_MEMDEBUG2_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t debug : 64;
#else
        uint64_t debug : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_MEMDEBUG2_EL3_t() { u = 0; }
    CVM_MEMDEBUG2_EL3_t(uint64_t data) { u = data; }
    CVM_MEMDEBUG2_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_memdebug2_el3_t;
#endif

#ifdef __cplusplus
union CVM_MEMDEBUG3_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t debug : 64;
#else
        uint64_t debug : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_MEMDEBUG3_EL3_t() { u = 0; }
    CVM_MEMDEBUG3_EL3_t(uint64_t data) { u = data; }
    CVM_MEMDEBUG3_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_memdebug3_el3_t;
#endif

#ifdef __cplusplus
union CVM_MEMDEBUG4_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t debug : 64;
#else
        uint64_t debug : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_MEMDEBUG4_EL3_t() { u = 0; }
    CVM_MEMDEBUG4_EL3_t(uint64_t data) { u = data; }
    CVM_MEMDEBUG4_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_memdebug4_el3_t;
#endif

#ifdef __cplusplus
union CVM_MEMDEBUG5_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t debug : 64;
#else
        uint64_t debug : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_MEMDEBUG5_EL3_t() { u = 0; }
    CVM_MEMDEBUG5_EL3_t(uint64_t data) { u = data; }
    CVM_MEMDEBUG5_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_memdebug5_el3_t;
#endif

#ifdef __cplusplus
union CVM_MEMDEBUG6_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t debug : 64;
#else
        uint64_t debug : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_MEMDEBUG6_EL3_t() { u = 0; }
    CVM_MEMDEBUG6_EL3_t(uint64_t data) { u = data; }
    CVM_MEMDEBUG6_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_memdebug6_el3_t;
#endif

#ifdef __cplusplus
union CVM_MEMDEBUG7_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t debug : 64;
#else
        uint64_t debug : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_MEMDEBUG7_EL3_t() { u = 0; }
    CVM_MEMDEBUG7_EL3_t(uint64_t data) { u = data; }
    CVM_MEMDEBUG7_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_memdebug7_el3_t;
#endif

#ifdef __cplusplus
union CVM_DEBUG4_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_5_63 : 59;
        uint64_t mem_stall_4a : 1;
        uint64_t waiting_for_pfill_4a : 1;
        uint64_t waiting_for_ifill_4a : 1;
        uint64_t exception_level : 2;
#else
        uint64_t exception_level : 2;
        uint64_t waiting_for_ifill_4a : 1;
        uint64_t waiting_for_pfill_4a : 1;
        uint64_t mem_stall_4a : 1;
        uint64_t reserved_5_63 : 59;
#endif
    } s;
#ifdef __cplusplus
    CVM_DEBUG4_EL3_t() { u = 0; }
    CVM_DEBUG4_EL3_t(uint64_t data) { u = data; }
    CVM_DEBUG4_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_debug4_el3_t;
#endif

#ifdef __cplusplus
union CVM_DLL_OBSERVABILTY_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_60_63 : 4;
        uint64_t max_seen : 12;
        uint64_t min_seen : 12;
        uint64_t rclk_dll_lock : 1;
        uint64_t dll_state : 3;
        uint64_t dll_setting : 12;
        uint64_t raw_dly_elem_enable : 16;
        uint64_t clk_invert : 1;
        uint64_t pd_pos_rclk_refclk : 1;
        uint64_t pdl_rclk_refclk : 1;
        uint64_t pdr_rclk_refclk : 1;
#else
        uint64_t pdr_rclk_refclk : 1;
        uint64_t pdl_rclk_refclk : 1;
        uint64_t pd_pos_rclk_refclk : 1;
        uint64_t clk_invert : 1;
        uint64_t raw_dly_elem_enable : 16;
        uint64_t dll_setting : 12;
        uint64_t dll_state : 3;
        uint64_t rclk_dll_lock : 1;
        uint64_t min_seen : 12;
        uint64_t max_seen : 12;
        uint64_t reserved_60_63 : 4;
#endif
    } s;
#ifdef __cplusplus
    CVM_DLL_OBSERVABILTY_EL3_t() { u = 0; }
    CVM_DLL_OBSERVABILTY_EL3_t(uint64_t data) { u = data; }
    CVM_DLL_OBSERVABILTY_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_dll_observabilty_el3_t;
#endif

#ifdef __cplusplus
union CVM_DEBUG6_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t debug : 64;
#else
        uint64_t debug : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_DEBUG6_EL3_t() { u = 0; }
    CVM_DEBUG6_EL3_t(uint64_t data) { u = data; }
    CVM_DEBUG6_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_debug6_el3_t;
#endif

#ifdef __cplusplus
union CVM_DEBUG7_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t debug : 64;
#else
        uint64_t debug : 64;
#endif
    } s;
#ifdef __cplusplus
    CVM_DEBUG7_EL3_t() { u = 0; }
    CVM_DEBUG7_EL3_t(uint64_t data) { u = data; }
    CVM_DEBUG7_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_debug7_el3_t;
#endif

#ifdef __cplusplus
union CVM_NVBAR_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t vector_address : 53;
        uint64_t reserved_0_10 : 11;
#else
        uint64_t reserved_0_10 : 11;
        uint64_t vector_address : 53;
#endif
    } s;
#ifdef __cplusplus
    CVM_NVBAR_EL3_t() { u = 0; }
    CVM_NVBAR_EL3_t(uint64_t data) { u = data; }
    CVM_NVBAR_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_nvbar_el3_t;
#endif

#ifdef __cplusplus
union CVM_ACCESS_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_9_63 : 55;
        uint64_t cvm_cache : 1;
        uint64_t reserved_6_7 : 2;
        uint64_t cvm_evattid : 1;
        uint64_t cvm_i_d_cache : 1;
        uint64_t cvm_err : 1;
        uint64_t cvm_bist : 1;
        uint64_t powthrottle : 1;
        uint64_t cvm_ctl : 1;
#else
        uint64_t cvm_ctl : 1;
        uint64_t powthrottle : 1;
        uint64_t cvm_bist : 1;
        uint64_t cvm_err : 1;
        uint64_t cvm_i_d_cache : 1;
        uint64_t cvm_evattid : 1;
        uint64_t reserved_6_7 : 2;
        uint64_t cvm_cache : 1;
        uint64_t reserved_9_63 : 55;
#endif
    } s;
#ifdef __cplusplus
    CVM_ACCESS_EL3_t() { u = 0; }
    CVM_ACCESS_EL3_t(uint64_t data) { u = data; }
    CVM_ACCESS_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_access_el3_t;
#endif

#ifdef __cplusplus
union CVM_ACCESS_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_9_63 : 55;
        uint64_t cvm_cache : 1;
        uint64_t reserved_6_7 : 2;
        uint64_t cvm_evattid : 1;
        uint64_t cvm_i_d_cache : 1;
        uint64_t cvm_err : 1;
        uint64_t cvm_bist : 1;
        uint64_t powthrottle : 1;
        uint64_t cvm_ctl : 1;
#else
        uint64_t cvm_ctl : 1;
        uint64_t powthrottle : 1;
        uint64_t cvm_bist : 1;
        uint64_t cvm_err : 1;
        uint64_t cvm_i_d_cache : 1;
        uint64_t cvm_evattid : 1;
        uint64_t reserved_6_7 : 2;
        uint64_t cvm_cache : 1;
        uint64_t reserved_9_63 : 55;
#endif
    } s;
#ifdef __cplusplus
    CVM_ACCESS_EL2_t() { u = 0; }
    CVM_ACCESS_EL2_t(uint64_t data) { u = data; }
    CVM_ACCESS_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_access_el2_t;
#endif

#ifdef __cplusplus
union CVM_ACCESS_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_9_63 : 55;
        uint64_t cvm_cache : 1;
        uint64_t reserved_6_7 : 2;
        uint64_t cvm_evattid : 1;
        uint64_t cvm_i_d_cache : 1;
        uint64_t cvm_err : 1;
        uint64_t cvm_bist : 1;
        uint64_t powthrottle : 1;
        uint64_t cvm_ctl : 1;
#else
        uint64_t cvm_ctl : 1;
        uint64_t powthrottle : 1;
        uint64_t cvm_bist : 1;
        uint64_t cvm_err : 1;
        uint64_t cvm_i_d_cache : 1;
        uint64_t cvm_evattid : 1;
        uint64_t reserved_6_7 : 2;
        uint64_t cvm_cache : 1;
        uint64_t reserved_9_63 : 55;
#endif
    } s;
#ifdef __cplusplus
    CVM_ACCESS_EL1_t() { u = 0; }
    CVM_ACCESS_EL1_t(uint64_t data) { u = data; }
    CVM_ACCESS_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_cvm_access_el1_t;
#endif

#ifdef __cplusplus
union DAIF_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_10_31 : 22;
        uint32_t d : 1;
        uint32_t a : 1;
        uint32_t i : 1;
        uint32_t f : 1;
        uint32_t reserved_0_5 : 6;
#else
        uint32_t reserved_0_5 : 6;
        uint32_t f : 1;
        uint32_t i : 1;
        uint32_t a : 1;
        uint32_t d : 1;
        uint32_t reserved_10_31 : 22;
#endif
    } s;
#ifdef __cplusplus
    DAIF_t() { u = 0; }
    DAIF_t(uint32_t data) { u = data; }
    DAIF_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_daif_t;
#endif

#ifdef __cplusplus
union DBGAUTHSTATUS_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_8_31 : 24;
        uint32_t snid : 2;
        uint32_t sid : 2;
        uint32_t nsnid : 2;
        uint32_t nsid : 2;
#else
        uint32_t nsid : 2;
        uint32_t nsnid : 2;
        uint32_t sid : 2;
        uint32_t snid : 2;
        uint32_t reserved_8_31 : 24;
#endif
    } s;
#ifdef __cplusplus
    DBGAUTHSTATUS_EL1_t() { u = 0; }
    DBGAUTHSTATUS_EL1_t(uint32_t data) { u = data; }
    DBGAUTHSTATUS_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgauthstatus_el1_t;
#endif

#ifdef __cplusplus
union DBGBCRX_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_24_31 : 8;
        uint32_t bt : 4;
        uint32_t lbn : 4;
        uint32_t ssc : 2;
        uint32_t hmc : 1;
        uint32_t reserved_9_12 : 4;
        uint32_t reserved_5_8 : 4;
        uint32_t reserved_3_4 : 2;
        uint32_t pmc : 2;
        uint32_t e : 1;
#else
        uint32_t e : 1;
        uint32_t pmc : 2;
        uint32_t reserved_3_4 : 2;
        uint32_t reserved_5_8 : 4;
        uint32_t reserved_9_12 : 4;
        uint32_t hmc : 1;
        uint32_t ssc : 2;
        uint32_t lbn : 4;
        uint32_t bt : 4;
        uint32_t reserved_24_31 : 8;
#endif
    } s;
#ifdef __cplusplus
    DBGBCRX_EL1_t() { u = 0; }
    DBGBCRX_EL1_t(uint32_t data) { u = data; }
    DBGBCRX_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgbcrx_el1_t;
#endif

#ifdef __cplusplus
union DBGBVRX_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    DBGBVRX_EL1_t() { u = 0; }
    DBGBVRX_EL1_t(uint64_t data) { u = data; }
    DBGBVRX_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgbvrx_el1_t;
#endif

#ifdef __cplusplus
union DBGCLAIMCLR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_8_31 : 24;
        uint32_t claim : 8;
#else
        uint32_t claim : 8;
        uint32_t reserved_8_31 : 24;
#endif
    } s;
#ifdef __cplusplus
    DBGCLAIMCLR_EL1_t() { u = 0; }
    DBGCLAIMCLR_EL1_t(uint32_t data) { u = data; }
    DBGCLAIMCLR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgclaimclr_el1_t;
#endif

#ifdef __cplusplus
union DBGCLAIMSET_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_8_31 : 24;
        uint32_t claim : 8;
#else
        uint32_t claim : 8;
        uint32_t reserved_8_31 : 24;
#endif
    } s;
#ifdef __cplusplus
    DBGCLAIMSET_EL1_t() { u = 0; }
    DBGCLAIMSET_EL1_t(uint32_t data) { u = data; }
    DBGCLAIMSET_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgclaimset_el1_t;
#endif

#ifdef __cplusplus
union DBGDTRRX_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    DBGDTRRX_EL0_t() { u = 0; }
    DBGDTRRX_EL0_t(uint32_t data) { u = data; }
    DBGDTRRX_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgdtrrx_el0_t;
#endif

#ifdef __cplusplus
union DBGDTRTX_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    DBGDTRTX_EL0_t() { u = 0; }
    DBGDTRTX_EL0_t(uint32_t data) { u = data; }
    DBGDTRTX_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgdtrtx_el0_t;
#endif

#ifdef __cplusplus
union DBGDTR_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t highword : 32;
        uint64_t lowword : 32;
#else
        uint64_t lowword : 32;
        uint64_t highword : 32;
#endif
    } s;
#ifdef __cplusplus
    DBGDTR_EL0_t() { u = 0; }
    DBGDTR_EL0_t(uint64_t data) { u = data; }
    DBGDTR_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgdtr_el0_t;
#endif

#ifdef __cplusplus
union DBGPRCR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_1_31 : 31;
        uint32_t corenpdrq : 1;
#else
        uint32_t corenpdrq : 1;
        uint32_t reserved_1_31 : 31;
#endif
    } s;
#ifdef __cplusplus
    DBGPRCR_EL1_t() { u = 0; }
    DBGPRCR_EL1_t(uint32_t data) { u = data; }
    DBGPRCR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgprcr_el1_t;
#endif

#ifdef __cplusplus
union DBGWCRX_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_29_31 : 3;
        uint32_t mask : 5;
        uint32_t reserved_21_23 : 3;
        uint32_t wt : 1;
        uint32_t lbn : 4;
        uint32_t ssc : 2;
        uint32_t hmc : 1;
        uint32_t bas : 8;
        uint32_t lsc : 2;
        uint32_t pac : 2;
        uint32_t e : 1;
#else
        uint32_t e : 1;
        uint32_t pac : 2;
        uint32_t lsc : 2;
        uint32_t bas : 8;
        uint32_t hmc : 1;
        uint32_t ssc : 2;
        uint32_t lbn : 4;
        uint32_t wt : 1;
        uint32_t reserved_21_23 : 3;
        uint32_t mask : 5;
        uint32_t reserved_29_31 : 3;
#endif
    } s;
#ifdef __cplusplus
    DBGWCRX_EL1_t() { u = 0; }
    DBGWCRX_EL1_t(uint32_t data) { u = data; }
    DBGWCRX_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgwcrx_el1_t;
#endif

#ifdef __cplusplus
union DBGWVRX_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t ress : 15;
        uint64_t va : 47;
        uint64_t reserved_0_1 : 2;
#else
        uint64_t reserved_0_1 : 2;
        uint64_t va : 47;
        uint64_t ress : 15;
#endif
    } s;
#ifdef __cplusplus
    DBGWVRX_EL1_t() { u = 0; }
    DBGWVRX_EL1_t(uint64_t data) { u = data; }
    DBGWVRX_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dbgwvrx_el1_t;
#endif

#ifdef __cplusplus
union DCZID_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_5_31 : 27;
        uint32_t dzp : 1;
        uint32_t bs : 4;
#else
        uint32_t bs : 4;
        uint32_t dzp : 1;
        uint32_t reserved_5_31 : 27;
#endif
    } s;
#ifdef __cplusplus
    DCZID_EL0_t() { u = 0; }
    DCZID_EL0_t(uint32_t data) { u = data; }
    DCZID_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dczid_el0_t;
#endif

#ifdef __cplusplus
union DLR_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    DLR_EL0_t() { u = 0; }
    DLR_EL0_t(uint64_t data) { u = data; }
    DLR_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dlr_el0_t;
#endif

#ifdef __cplusplus
union DSPSR_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t n : 1;
        uint32_t z : 1;
        uint32_t c : 1;
        uint32_t v : 1;
        uint32_t reserved_22_27 : 6;
        uint32_t ss : 1;
        uint32_t il : 1;
        uint32_t reserved_10_19 : 10;
        uint32_t d : 1;
        uint32_t a : 1;
        uint32_t i : 1;
        uint32_t f : 1;
        uint32_t reserved_5 : 1;
        uint32_t nRW : 1;
        uint32_t EL : 2;
        uint32_t reserved1 : 1;
        uint32_t SP : 1;
#else
        uint32_t SP : 1;
        uint32_t reserved1 : 1;
        uint32_t EL : 2;
        uint32_t nRW : 1;
        uint32_t reserved_5 : 1;
        uint32_t f : 1;
        uint32_t i : 1;
        uint32_t a : 1;
        uint32_t d : 1;
        uint32_t reserved_10_19 : 10;
        uint32_t il : 1;
        uint32_t ss : 1;
        uint32_t reserved_22_27 : 6;
        uint32_t v : 1;
        uint32_t c : 1;
        uint32_t z : 1;
        uint32_t n : 1;
#endif
    } s;
#ifdef __cplusplus
    DSPSR_EL0_t() { u = 0; }
    DSPSR_EL0_t(uint32_t data) { u = data; }
    DSPSR_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_dspsr_el0_t;
#endif

#ifdef __cplusplus
union ELR_ELX_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t address : 64;
#else
        uint64_t address : 64;
#endif
    } s;
#ifdef __cplusplus
    ELR_ELX_t() { u = 0; }
    ELR_ELX_t(uint64_t data) { u = data; }
    ELR_ELX_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_elr_elx_t;
#endif

#ifdef __cplusplus
union ESR_ELX_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t ec : 6;
        uint32_t il : 1;
        uint32_t iss : 25;
#else
        uint32_t iss : 25;
        uint32_t il : 1;
        uint32_t ec : 6;
#endif
    } s;
#ifdef __cplusplus
    ESR_ELX_t() { u = 0; }
    ESR_ELX_t(uint32_t data) { u = data; }
    ESR_ELX_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_esr_elx_t;
#endif

#ifdef __cplusplus
union FAR_ELX_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    FAR_ELX_t() { u = 0; }
    FAR_ELX_t(uint64_t data) { u = data; }
    FAR_ELX_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_far_elx_t;
#endif

#ifdef __cplusplus
union FPCR_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_27_31 : 5;
        uint32_t ahp : 1;
        uint32_t dn : 1;
        uint32_t fz : 1;
        uint32_t rmode : 2;
        uint32_t reserved_20_21 : 2;
        uint32_t reserved_19 : 1;
        uint32_t reserved_16_18 : 3;
        uint32_t reserved_15 : 1;
        uint32_t reserved_13_14 : 2;
        uint32_t reserved_12 : 1;
        uint32_t reserved_11 : 1;
        uint32_t reserved_10 : 1;
        uint32_t reserved_9 : 1;
        uint32_t reserved_8 : 1;
        uint32_t reserved_0_7 : 8;
#else
        uint32_t reserved_0_7 : 8;
        uint32_t reserved_8 : 1;
        uint32_t reserved_9 : 1;
        uint32_t reserved_10 : 1;
        uint32_t reserved_11 : 1;
        uint32_t reserved_12 : 1;
        uint32_t reserved_13_14 : 2;
        uint32_t reserved_15 : 1;
        uint32_t reserved_16_18 : 3;
        uint32_t reserved_19 : 1;
        uint32_t reserved_20_21 : 2;
        uint32_t rmode : 2;
        uint32_t fz : 1;
        uint32_t dn : 1;
        uint32_t ahp : 1;
        uint32_t reserved_27_31 : 5;
#endif
    } s;
#ifdef __cplusplus
    FPCR_t() { u = 0; }
    FPCR_t(uint32_t data) { u = data; }
    FPCR_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_fpcr_t;
#endif

#ifdef __cplusplus
union FPSR_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_31 : 1;
        uint32_t reserved_30 : 1;
        uint32_t reserved_29 : 1;
        uint32_t reserved_28 : 1;
        uint32_t qc : 1;
        uint32_t reserved_8_26 : 19;
        uint32_t idc : 1;
        uint32_t reserved_5_6 : 2;
        uint32_t ixc : 1;
        uint32_t ufc : 1;
        uint32_t ofc : 1;
        uint32_t dzc : 1;
        uint32_t ioc : 1;
#else
        uint32_t ioc : 1;
        uint32_t dzc : 1;
        uint32_t ofc : 1;
        uint32_t ufc : 1;
        uint32_t ixc : 1;
        uint32_t reserved_5_6 : 2;
        uint32_t idc : 1;
        uint32_t reserved_8_26 : 19;
        uint32_t qc : 1;
        uint32_t reserved_28 : 1;
        uint32_t reserved_29 : 1;
        uint32_t reserved_30 : 1;
        uint32_t reserved_31 : 1;
#endif
    } s;
#ifdef __cplusplus
    FPSR_t() { u = 0; }
    FPSR_t(uint32_t data) { u = data; }
    FPSR_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_fpsr_t;
#endif

#ifdef __cplusplus
union HACR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    HACR_EL2_t() { u = 0; }
    HACR_EL2_t(uint32_t data) { u = data; }
    HACR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_hacr_el2_t;
#endif

#ifdef __cplusplus
union HCR_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_36_63 : 28;
        uint64_t tlor : 1;
        uint64_t e2h : 1;
        uint64_t id : 1;
        uint64_t cd : 1;
        uint64_t reserved_31 : 1;
        uint64_t trvm : 1;
        uint64_t reserved_29 : 1;
        uint64_t tdz : 1;
        uint64_t tge : 1;
        uint64_t tvm : 1;
        uint64_t ttlb : 1;
        uint64_t tpu : 1;
        uint64_t tpc : 1;
        uint64_t tsw : 1;
        uint64_t tacr : 1;
        uint64_t tidcp : 1;
        uint64_t tsc : 1;
        uint64_t tid3 : 1;
        uint64_t tid2 : 1;
        uint64_t tid1 : 1;
        uint64_t tid0 : 1;
        uint64_t twe : 1;
        uint64_t twi : 1;
        uint64_t dc : 1;
        uint64_t bsu : 2;
        uint64_t fb : 1;
        uint64_t vse : 1;
        uint64_t vi : 1;
        uint64_t vf : 1;
        uint64_t amo : 1;
        uint64_t imo : 1;
        uint64_t fmo : 1;
        uint64_t ptw : 1;
        uint64_t swio : 1;
        uint64_t vm : 1;
#else
        uint64_t vm : 1;
        uint64_t swio : 1;
        uint64_t ptw : 1;
        uint64_t fmo : 1;
        uint64_t imo : 1;
        uint64_t amo : 1;
        uint64_t vf : 1;
        uint64_t vi : 1;
        uint64_t vse : 1;
        uint64_t fb : 1;
        uint64_t bsu : 2;
        uint64_t dc : 1;
        uint64_t twi : 1;
        uint64_t twe : 1;
        uint64_t tid0 : 1;
        uint64_t tid1 : 1;
        uint64_t tid2 : 1;
        uint64_t tid3 : 1;
        uint64_t tsc : 1;
        uint64_t tidcp : 1;
        uint64_t tacr : 1;
        uint64_t tsw : 1;
        uint64_t tpc : 1;
        uint64_t tpu : 1;
        uint64_t ttlb : 1;
        uint64_t tvm : 1;
        uint64_t tge : 1;
        uint64_t tdz : 1;
        uint64_t reserved_29 : 1;
        uint64_t trvm : 1;
        uint64_t reserved_31 : 1;
        uint64_t cd : 1;
        uint64_t id : 1;
        uint64_t e2h : 1;
        uint64_t tlor : 1;
        uint64_t reserved_36_63 : 28;
#endif
    } s;
#ifdef __cplusplus
    HCR_EL2_t() { u = 0; }
    HCR_EL2_t(uint64_t data) { u = data; }
    HCR_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_hcr_el2_t;
#endif

#ifdef __cplusplus
union HPFAR_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_40_63 : 24;
        uint64_t fipa : 36;
        uint64_t reserved_0_3 : 4;
#else
        uint64_t reserved_0_3 : 4;
        uint64_t fipa : 36;
        uint64_t reserved_40_63 : 24;
#endif
    } s;
#ifdef __cplusplus
    HPFAR_EL2_t() { u = 0; }
    HPFAR_EL2_t(uint64_t data) { u = data; }
    HPFAR_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_hpfar_el2_t;
#endif

#ifdef __cplusplus
union HSTR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    HSTR_EL2_t() { u = 0; }
    HSTR_EL2_t(uint32_t data) { u = data; }
    HSTR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_hstr_el2_t;
#endif

#ifdef __cplusplus
union ICC_AP0RX_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t PriorityBits : 32;
#else
        uint32_t PriorityBits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICC_AP0RX_EL1_t() { u = 0; }
    ICC_AP0RX_EL1_t(uint32_t data) { u = data; }
    ICC_AP0RX_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_ap0rx_el1_t;
#endif

#ifdef __cplusplus
union ICC_AP1RX_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t PriorityBits : 32;
#else
        uint32_t PriorityBits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICC_AP1RX_EL1_t() { u = 0; }
    ICC_AP1RX_EL1_t(uint32_t data) { u = data; }
    ICC_AP1RX_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_ap1rx_el1_t;
#endif

#ifdef __cplusplus
union ICC_ASGI1R_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_56_63 : 8;
        uint64_t aff3 : 8;
        uint64_t reserved_41_47 : 7;
        uint64_t irm : 1;
        uint64_t aff2 : 8;
        uint64_t reserved_28_31 : 4;
        uint64_t sgiid : 4;
        uint64_t aff1 : 8;
        uint64_t targetlist : 16;
#else
        uint64_t targetlist : 16;
        uint64_t aff1 : 8;
        uint64_t sgiid : 4;
        uint64_t reserved_28_31 : 4;
        uint64_t aff2 : 8;
        uint64_t irm : 1;
        uint64_t reserved_41_47 : 7;
        uint64_t aff3 : 8;
        uint64_t reserved_56_63 : 8;
#endif
    } s;
#ifdef __cplusplus
    ICC_ASGI1R_EL1_t() { u = 0; }
    ICC_ASGI1R_EL1_t(uint64_t data) { u = data; }
    ICC_ASGI1R_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_asgi1r_el1_t;
#endif

#ifdef __cplusplus
union ICC_BPR0_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_3_31 : 29;
        uint32_t binarypoint : 3;
#else
        uint32_t binarypoint : 3;
        uint32_t reserved_3_31 : 29;
#endif
    } s;
#ifdef __cplusplus
    ICC_BPR0_EL1_t() { u = 0; }
    ICC_BPR0_EL1_t(uint32_t data) { u = data; }
    ICC_BPR0_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_bpr0_el1_t;
#endif

#ifdef __cplusplus
union ICC_BPR1_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_3_31 : 29;
        uint32_t binarypoint : 3;
#else
        uint32_t binarypoint : 3;
        uint32_t reserved_3_31 : 29;
#endif
    } s;
#ifdef __cplusplus
    ICC_BPR1_EL1_t() { u = 0; }
    ICC_BPR1_EL1_t(uint32_t data) { u = data; }
    ICC_BPR1_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_bpr1_el1_t;
#endif

#ifdef __cplusplus
union ICC_CTLR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_16_31 : 16;
        uint32_t a3v : 1;
        uint32_t seis : 1;
        uint32_t idbits : 3;
        uint32_t pribits : 3;
        uint32_t reserved_7 : 1;
        uint32_t pmhe : 1;
        uint32_t reserved_2_5 : 4;
        uint32_t eoimode : 1;
        uint32_t cbpr : 1;
#else
        uint32_t cbpr : 1;
        uint32_t eoimode : 1;
        uint32_t reserved_2_5 : 4;
        uint32_t pmhe : 1;
        uint32_t reserved_7 : 1;
        uint32_t pribits : 3;
        uint32_t idbits : 3;
        uint32_t seis : 1;
        uint32_t a3v : 1;
        uint32_t reserved_16_31 : 16;
#endif
    } s;
#ifdef __cplusplus
    ICC_CTLR_EL1_t() { u = 0; }
    ICC_CTLR_EL1_t(uint32_t data) { u = data; }
    ICC_CTLR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_ctlr_el1_t;
#endif

#ifdef __cplusplus
union ICC_CTLR_EL3_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_16_31 : 16;
        uint32_t a3v : 1;
        uint32_t seis : 1;
        uint32_t idbits : 3;
        uint32_t pribits : 3;
        uint32_t reserved_7 : 1;
        uint32_t pmhe : 1;
        uint32_t rm : 1;
        uint32_t eoimode_el1ns : 1;
        uint32_t eoimode_el1s : 1;
        uint32_t eoimode_el3 : 1;
        uint32_t cbpr_el1ns : 1;
        uint32_t cbpr_el1s : 1;
#else
        uint32_t cbpr_el1s : 1;
        uint32_t cbpr_el1ns : 1;
        uint32_t eoimode_el3 : 1;
        uint32_t eoimode_el1s : 1;
        uint32_t eoimode_el1ns : 1;
        uint32_t rm : 1;
        uint32_t pmhe : 1;
        uint32_t reserved_7 : 1;
        uint32_t pribits : 3;
        uint32_t idbits : 3;
        uint32_t seis : 1;
        uint32_t a3v : 1;
        uint32_t reserved_16_31 : 16;
#endif
    } s;
#ifdef __cplusplus
    ICC_CTLR_EL3_t() { u = 0; }
    ICC_CTLR_EL3_t(uint32_t data) { u = data; }
    ICC_CTLR_EL3_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_ctlr_el3_t;
#endif

#ifdef __cplusplus
union ICC_DIR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_16_31 : 16;
        uint32_t interruptid : 16;
#else
        uint32_t interruptid : 16;
        uint32_t reserved_16_31 : 16;
#endif
    } s;
#ifdef __cplusplus
    ICC_DIR_EL1_t() { u = 0; }
    ICC_DIR_EL1_t(uint32_t data) { u = data; }
    ICC_DIR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_dir_el1_t;
#endif

#ifdef __cplusplus
union ICC_EOIR0_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_16_31 : 16;
        uint32_t IntVector : 16;
#else
        uint32_t IntVector : 16;
        uint32_t reserved_16_31 : 16;
#endif
    } s;
#ifdef __cplusplus
    ICC_EOIR0_EL1_t() { u = 0; }
    ICC_EOIR0_EL1_t(uint32_t data) { u = data; }
    ICC_EOIR0_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_eoir0_el1_t;
#endif

#ifdef __cplusplus
union ICC_EOIR1_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_16_31 : 16;
        uint32_t IntVector : 16;
#else
        uint32_t IntVector : 16;
        uint32_t reserved_16_31 : 16;
#endif
    } s;
#ifdef __cplusplus
    ICC_EOIR1_EL1_t() { u = 0; }
    ICC_EOIR1_EL1_t(uint32_t data) { u = data; }
    ICC_EOIR1_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_eoir1_el1_t;
#endif

#ifdef __cplusplus
union ICC_HPPIR0_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_16_31 : 16;
        uint32_t IntVector : 16;
#else
        uint32_t IntVector : 16;
        uint32_t reserved_16_31 : 16;
#endif
    } s;
#ifdef __cplusplus
    ICC_HPPIR0_EL1_t() { u = 0; }
    ICC_HPPIR0_EL1_t(uint32_t data) { u = data; }
    ICC_HPPIR0_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_hppir0_el1_t;
#endif

#ifdef __cplusplus
union ICC_HPPIR1_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_16_31 : 16;
        uint32_t IntVector : 16;
#else
        uint32_t IntVector : 16;
        uint32_t reserved_16_31 : 16;
#endif
    } s;
#ifdef __cplusplus
    ICC_HPPIR1_EL1_t() { u = 0; }
    ICC_HPPIR1_EL1_t(uint32_t data) { u = data; }
    ICC_HPPIR1_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_hppir1_el1_t;
#endif

#ifdef __cplusplus
union ICC_IAR0_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_16_31 : 16;
        uint32_t IntVector : 16;
#else
        uint32_t IntVector : 16;
        uint32_t reserved_16_31 : 16;
#endif
    } s;
#ifdef __cplusplus
    ICC_IAR0_EL1_t() { u = 0; }
    ICC_IAR0_EL1_t(uint32_t data) { u = data; }
    ICC_IAR0_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_iar0_el1_t;
#endif

#ifdef __cplusplus
union ICC_IAR1_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_16_31 : 16;
        uint32_t IntVector : 16;
#else
        uint32_t IntVector : 16;
        uint32_t reserved_16_31 : 16;
#endif
    } s;
#ifdef __cplusplus
    ICC_IAR1_EL1_t() { u = 0; }
    ICC_IAR1_EL1_t(uint32_t data) { u = data; }
    ICC_IAR1_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_iar1_el1_t;
#endif

#ifdef __cplusplus
union ICC_IGRPEN0_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_1_31 : 31;
        uint32_t enable : 1;
#else
        uint32_t enable : 1;
        uint32_t reserved_1_31 : 31;
#endif
    } s;
#ifdef __cplusplus
    ICC_IGRPEN0_EL1_t() { u = 0; }
    ICC_IGRPEN0_EL1_t(uint32_t data) { u = data; }
    ICC_IGRPEN0_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_igrpen0_el1_t;
#endif

#ifdef __cplusplus
union ICC_IGRPEN1_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_1_31 : 31;
        uint32_t enable : 1;
#else
        uint32_t enable : 1;
        uint32_t reserved_1_31 : 31;
#endif
    } s;
#ifdef __cplusplus
    ICC_IGRPEN1_EL1_t() { u = 0; }
    ICC_IGRPEN1_EL1_t(uint32_t data) { u = data; }
    ICC_IGRPEN1_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_igrpen1_el1_t;
#endif

#ifdef __cplusplus
union ICC_IGRPEN1_EL3_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_2_31 : 30;
        uint32_t enablegrp1s : 1;
        uint32_t enablegrp1ns : 1;
#else
        uint32_t enablegrp1ns : 1;
        uint32_t enablegrp1s : 1;
        uint32_t reserved_2_31 : 30;
#endif
    } s;
#ifdef __cplusplus
    ICC_IGRPEN1_EL3_t() { u = 0; }
    ICC_IGRPEN1_EL3_t(uint32_t data) { u = data; }
    ICC_IGRPEN1_EL3_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_igrpen1_el3_t;
#endif

#ifdef __cplusplus
union ICC_PMR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_8_31 : 24;
        uint32_t priority : 8;
#else
        uint32_t priority : 8;
        uint32_t reserved_8_31 : 24;
#endif
    } s;
#ifdef __cplusplus
    ICC_PMR_EL1_t() { u = 0; }
    ICC_PMR_EL1_t(uint32_t data) { u = data; }
    ICC_PMR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_pmr_el1_t;
#endif

#ifdef __cplusplus
union ICC_RPR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_8_31 : 24;
        uint32_t priority : 8;
#else
        uint32_t priority : 8;
        uint32_t reserved_8_31 : 24;
#endif
    } s;
#ifdef __cplusplus
    ICC_RPR_EL1_t() { u = 0; }
    ICC_RPR_EL1_t(uint32_t data) { u = data; }
    ICC_RPR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_rpr_el1_t;
#endif

#ifdef __cplusplus
union ICC_SEIEN_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_1_31 : 31;
        uint32_t enable : 1;
#else
        uint32_t enable : 1;
        uint32_t reserved_1_31 : 31;
#endif
    } s;
#ifdef __cplusplus
    ICC_SEIEN_EL1_t() { u = 0; }
    ICC_SEIEN_EL1_t(uint32_t data) { u = data; }
    ICC_SEIEN_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_seien_el1_t;
#endif

#ifdef __cplusplus
union ICC_SGI0R_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_56_63 : 8;
        uint64_t aff3 : 8;
        uint64_t reserved_41_47 : 7;
        uint64_t irm : 1;
        uint64_t aff2 : 8;
        uint64_t reserved_28_31 : 4;
        uint64_t sgiid : 4;
        uint64_t aff1 : 8;
        uint64_t targetlist : 16;
#else
        uint64_t targetlist : 16;
        uint64_t aff1 : 8;
        uint64_t sgiid : 4;
        uint64_t reserved_28_31 : 4;
        uint64_t aff2 : 8;
        uint64_t irm : 1;
        uint64_t reserved_41_47 : 7;
        uint64_t aff3 : 8;
        uint64_t reserved_56_63 : 8;
#endif
    } s;
#ifdef __cplusplus
    ICC_SGI0R_EL1_t() { u = 0; }
    ICC_SGI0R_EL1_t(uint64_t data) { u = data; }
    ICC_SGI0R_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_sgi0r_el1_t;
#endif

#ifdef __cplusplus
union ICC_SGI1R_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_56_63 : 8;
        uint64_t aff3 : 8;
        uint64_t reserved_41_47 : 7;
        uint64_t irm : 1;
        uint64_t aff2 : 8;
        uint64_t reserved_28_31 : 4;
        uint64_t sgiid : 4;
        uint64_t aff1 : 8;
        uint64_t targetlist : 16;
#else
        uint64_t targetlist : 16;
        uint64_t aff1 : 8;
        uint64_t sgiid : 4;
        uint64_t reserved_28_31 : 4;
        uint64_t aff2 : 8;
        uint64_t irm : 1;
        uint64_t reserved_41_47 : 7;
        uint64_t aff3 : 8;
        uint64_t reserved_56_63 : 8;
#endif
    } s;
#ifdef __cplusplus
    ICC_SGI1R_EL1_t() { u = 0; }
    ICC_SGI1R_EL1_t(uint64_t data) { u = data; }
    ICC_SGI1R_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_sgi1r_el1_t;
#endif

#ifdef __cplusplus
union ICC_SRE_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_3_31 : 29;
        uint32_t dib : 1;
        uint32_t dfb : 1;
        uint32_t sre : 1;
#else
        uint32_t sre : 1;
        uint32_t dfb : 1;
        uint32_t dib : 1;
        uint32_t reserved_3_31 : 29;
#endif
    } s;
#ifdef __cplusplus
    ICC_SRE_EL1_t() { u = 0; }
    ICC_SRE_EL1_t(uint32_t data) { u = data; }
    ICC_SRE_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_sre_el1_t;
#endif

#ifdef __cplusplus
union ICC_SRE_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_4_31 : 28;
        uint32_t enable : 1;
        uint32_t dib : 1;
        uint32_t dfb : 1;
        uint32_t sre : 1;
#else
        uint32_t sre : 1;
        uint32_t dfb : 1;
        uint32_t dib : 1;
        uint32_t enable : 1;
        uint32_t reserved_4_31 : 28;
#endif
    } s;
#ifdef __cplusplus
    ICC_SRE_EL2_t() { u = 0; }
    ICC_SRE_EL2_t(uint32_t data) { u = data; }
    ICC_SRE_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_sre_el2_t;
#endif

#ifdef __cplusplus
union ICC_SRE_EL3_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_4_31 : 28;
        uint32_t enable : 1;
        uint32_t dib : 1;
        uint32_t dfb : 1;
        uint32_t sre : 1;
#else
        uint32_t sre : 1;
        uint32_t dfb : 1;
        uint32_t dib : 1;
        uint32_t enable : 1;
        uint32_t reserved_4_31 : 28;
#endif
    } s;
#ifdef __cplusplus
    ICC_SRE_EL3_t() { u = 0; }
    ICC_SRE_EL3_t(uint32_t data) { u = data; }
    ICC_SRE_EL3_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_icc_sre_el3_t;
#endif

#ifdef __cplusplus
union ICH_AP0R0_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t prioritybits : 32;
#else
        uint32_t prioritybits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICH_AP0R0_EL2_t() { u = 0; }
    ICH_AP0R0_EL2_t(uint32_t data) { u = data; }
    ICH_AP0R0_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_ap0r0_el2_t;
#endif

#ifdef __cplusplus
union ICH_AP0R1_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t prioritybits : 32;
#else
        uint32_t prioritybits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICH_AP0R1_EL2_t() { u = 0; }
    ICH_AP0R1_EL2_t(uint32_t data) { u = data; }
    ICH_AP0R1_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_ap0r1_el2_t;
#endif

#ifdef __cplusplus
union ICH_AP0R2_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t prioritybits : 32;
#else
        uint32_t prioritybits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICH_AP0R2_EL2_t() { u = 0; }
    ICH_AP0R2_EL2_t(uint32_t data) { u = data; }
    ICH_AP0R2_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_ap0r2_el2_t;
#endif

#ifdef __cplusplus
union ICH_AP0R3_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t prioritybits : 32;
#else
        uint32_t prioritybits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICH_AP0R3_EL2_t() { u = 0; }
    ICH_AP0R3_EL2_t(uint32_t data) { u = data; }
    ICH_AP0R3_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_ap0r3_el2_t;
#endif

#ifdef __cplusplus
union ICH_AP1R0_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t prioritybits : 32;
#else
        uint32_t prioritybits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICH_AP1R0_EL2_t() { u = 0; }
    ICH_AP1R0_EL2_t(uint32_t data) { u = data; }
    ICH_AP1R0_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_ap1r0_el2_t;
#endif

#ifdef __cplusplus
union ICH_AP1R1_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t prioritybits : 32;
#else
        uint32_t prioritybits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICH_AP1R1_EL2_t() { u = 0; }
    ICH_AP1R1_EL2_t(uint32_t data) { u = data; }
    ICH_AP1R1_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_ap1r1_el2_t;
#endif

#ifdef __cplusplus
union ICH_AP1R2_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t prioritybits : 32;
#else
        uint32_t prioritybits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICH_AP1R2_EL2_t() { u = 0; }
    ICH_AP1R2_EL2_t(uint32_t data) { u = data; }
    ICH_AP1R2_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_ap1r2_el2_t;
#endif

#ifdef __cplusplus
union ICH_AP1R3_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t prioritybits : 32;
#else
        uint32_t prioritybits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICH_AP1R3_EL2_t() { u = 0; }
    ICH_AP1R3_EL2_t(uint32_t data) { u = data; }
    ICH_AP1R3_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_ap1r3_el2_t;
#endif

#ifdef __cplusplus
union ICH_EISR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t status_bits : 32;
#else
        uint32_t status_bits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICH_EISR_EL2_t() { u = 0; }
    ICH_EISR_EL2_t(uint32_t data) { u = data; }
    ICH_EISR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_eisr_el2_t;
#endif

#ifdef __cplusplus
union ICH_ELSR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t status_bits : 32;
#else
        uint32_t status_bits : 32;
#endif
    } s;
#ifdef __cplusplus
    ICH_ELSR_EL2_t() { u = 0; }
    ICH_ELSR_EL2_t(uint32_t data) { u = data; }
    ICH_ELSR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_elsr_el2_t;
#endif

#ifdef __cplusplus
union ICH_HCR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t eoicount : 5;
        uint32_t reserved_14_26 : 13;
        uint32_t tsei : 1;
        uint32_t tall1 : 1;
        uint32_t tall0 : 1;
        uint32_t tc : 1;
        uint32_t vare : 1;
        uint32_t reserved_8 : 1;
        uint32_t vgrp1die : 1;
        uint32_t vgrp1eie : 1;
        uint32_t vgrp0die : 1;
        uint32_t vgrp0eie : 1;
        uint32_t npie : 1;
        uint32_t lrenpie : 1;
        uint32_t uie : 1;
        uint32_t en : 1;
#else
        uint32_t en : 1;
        uint32_t uie : 1;
        uint32_t lrenpie : 1;
        uint32_t npie : 1;
        uint32_t vgrp0eie : 1;
        uint32_t vgrp0die : 1;
        uint32_t vgrp1eie : 1;
        uint32_t vgrp1die : 1;
        uint32_t reserved_8 : 1;
        uint32_t vare : 1;
        uint32_t tc : 1;
        uint32_t tall0 : 1;
        uint32_t tall1 : 1;
        uint32_t tsei : 1;
        uint32_t reserved_14_26 : 13;
        uint32_t eoicount : 5;
#endif
    } s;
#ifdef __cplusplus
    ICH_HCR_EL2_t() { u = 0; }
    ICH_HCR_EL2_t(uint32_t data) { u = data; }
    ICH_HCR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_hcr_el2_t;
#endif

#ifdef __cplusplus
union ICH_MISR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_9_31 : 23;
        uint32_t vsei : 1;
        uint32_t vgrp1d : 1;
        uint32_t vgrp1e : 1;
        uint32_t vgrp0d : 1;
        uint32_t vgrp0e : 1;
        uint32_t np : 1;
        uint32_t lrenp : 1;
        uint32_t u : 1;
        uint32_t eoi : 1;
#else
        uint32_t eoi : 1;
        uint32_t u : 1;
        uint32_t lrenp : 1;
        uint32_t np : 1;
        uint32_t vgrp0e : 1;
        uint32_t vgrp0d : 1;
        uint32_t vgrp1e : 1;
        uint32_t vgrp1d : 1;
        uint32_t vsei : 1;
        uint32_t reserved_9_31 : 23;
#endif
    } s;
#ifdef __cplusplus
    ICH_MISR_EL2_t() { u = 0; }
    ICH_MISR_EL2_t(uint32_t data) { u = data; }
    ICH_MISR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_misr_el2_t;
#endif

#ifdef __cplusplus
union ICH_LRX_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t state : 2;
        uint64_t hw : 1;
        uint64_t group : 1;
        uint64_t reserved_56_59 : 4;
        uint64_t priority : 8;
        uint64_t reserved_42_47 : 6;
        uint64_t physical_id : 10;
        uint64_t virtual_id : 32;
#else
        uint64_t virtual_id : 32;
        uint64_t physical_id : 10;
        uint64_t reserved_42_47 : 6;
        uint64_t priority : 8;
        uint64_t reserved_56_59 : 4;
        uint64_t group : 1;
        uint64_t hw : 1;
        uint64_t state : 2;
#endif
    } s;
#ifdef __cplusplus
    ICH_LRX_EL2_t() { u = 0; }
    ICH_LRX_EL2_t(uint64_t data) { u = data; }
    ICH_LRX_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_lrx_el2_t;
#endif

#ifdef __cplusplus
union ICH_VMCR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t vpmr : 8;
        uint32_t vbpr0 : 3;
        uint32_t vbpr1 : 3;
        uint32_t reserved_10_17 : 8;
        uint32_t veoim : 1;
        uint32_t reserved_5_8 : 4;
        uint32_t vcbpr : 1;
        uint32_t vfiqen : 1;
        uint32_t vackctl : 1;
        uint32_t veng1 : 1;
        uint32_t veng0 : 1;
#else
        uint32_t veng0 : 1;
        uint32_t veng1 : 1;
        uint32_t vackctl : 1;
        uint32_t vfiqen : 1;
        uint32_t vcbpr : 1;
        uint32_t reserved_5_8 : 4;
        uint32_t veoim : 1;
        uint32_t reserved_10_17 : 8;
        uint32_t vbpr1 : 3;
        uint32_t vbpr0 : 3;
        uint32_t vpmr : 8;
#endif
    } s;
#ifdef __cplusplus
    ICH_VMCR_EL2_t() { u = 0; }
    ICH_VMCR_EL2_t(uint32_t data) { u = data; }
    ICH_VMCR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_vmcr_el2_t;
#endif

#ifdef __cplusplus
union ICH_VSEIR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t valid : 1;
        uint32_t reserved_25_30 : 6;
        uint32_t syndrome : 25;
#else
        uint32_t syndrome : 25;
        uint32_t reserved_25_30 : 6;
        uint32_t valid : 1;
#endif
    } s;
#ifdef __cplusplus
    ICH_VSEIR_EL2_t() { u = 0; }
    ICH_VSEIR_EL2_t(uint32_t data) { u = data; }
    ICH_VSEIR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_vseir_el2_t;
#endif

#ifdef __cplusplus
union ICH_VTR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t pribits : 3;
        uint32_t prebits : 3;
        uint32_t idbits : 3;
        uint32_t seis : 1;
        uint32_t a3v : 1;
        uint32_t reserved_5_20 : 16;
        uint32_t listregs : 5;
#else
        uint32_t listregs : 5;
        uint32_t reserved_5_20 : 16;
        uint32_t a3v : 1;
        uint32_t seis : 1;
        uint32_t idbits : 3;
        uint32_t prebits : 3;
        uint32_t pribits : 3;
#endif
    } s;
#ifdef __cplusplus
    ICH_VTR_EL2_t() { u = 0; }
    ICH_VTR_EL2_t(uint32_t data) { u = data; }
    ICH_VTR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ich_vtr_el2_t;
#endif

#ifdef __cplusplus
union ID_AA64AFR0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64AFR0_EL1_t() { u = 0; }
    ID_AA64AFR0_EL1_t(uint64_t data) { u = data; }
    ID_AA64AFR0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64afr0_el1_t;
#endif

#ifdef __cplusplus
union ID_AA64AFR1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64AFR1_EL1_t() { u = 0; }
    ID_AA64AFR1_EL1_t(uint64_t data) { u = data; }
    ID_AA64AFR1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64afr1_el1_t;
#endif

#ifdef __cplusplus
union ID_AA64AFRX_EL1_RES0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64AFRX_EL1_RES0_t() { u = 0; }
    ID_AA64AFRX_EL1_RES0_t(uint64_t data) { u = data; }
    ID_AA64AFRX_EL1_RES0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64afrx_el1_res0_t;
#endif

#ifdef __cplusplus
union ID_AA64DFR0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_32_63 : 32;
        uint64_t ctx_cmps : 4;
        uint64_t reserved_24_27 : 4;
        uint64_t wrps : 4;
        uint64_t reserved_16_19 : 4;
        uint64_t brps : 4;
        uint64_t pmuver : 4;
        uint64_t tracever : 4;
        uint64_t debugver : 4;
#else
        uint64_t debugver : 4;
        uint64_t tracever : 4;
        uint64_t pmuver : 4;
        uint64_t brps : 4;
        uint64_t reserved_16_19 : 4;
        uint64_t wrps : 4;
        uint64_t reserved_24_27 : 4;
        uint64_t ctx_cmps : 4;
        uint64_t reserved_32_63 : 32;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64DFR0_EL1_t() { u = 0; }
    ID_AA64DFR0_EL1_t(uint64_t data) { u = data; }
    ID_AA64DFR0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64dfr0_el1_t;
#endif

#ifdef __cplusplus
union ID_AA64DFR1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64DFR1_EL1_t() { u = 0; }
    ID_AA64DFR1_EL1_t(uint64_t data) { u = data; }
    ID_AA64DFR1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64dfr1_el1_t;
#endif

#ifdef __cplusplus
union ID_AA64DFRX_EL1_RES0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64DFRX_EL1_RES0_t() { u = 0; }
    ID_AA64DFRX_EL1_RES0_t(uint64_t data) { u = data; }
    ID_AA64DFRX_EL1_RES0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64dfrx_el1_res0_t;
#endif

#ifdef __cplusplus
union ID_AA64ISAR0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_32_63 : 32;
        uint64_t sqrdml : 4;
        uint64_t reserved_24_27 : 4;
        uint64_t atomic : 4;
        uint64_t crc32 : 4;
        uint64_t sha2 : 4;
        uint64_t sha1 : 4;
        uint64_t aes : 4;
        uint64_t reserved_0_3 : 4;
#else
        uint64_t reserved_0_3 : 4;
        uint64_t aes : 4;
        uint64_t sha1 : 4;
        uint64_t sha2 : 4;
        uint64_t crc32 : 4;
        uint64_t atomic : 4;
        uint64_t reserved_24_27 : 4;
        uint64_t sqrdml : 4;
        uint64_t reserved_32_63 : 32;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64ISAR0_EL1_t() { u = 0; }
    ID_AA64ISAR0_EL1_t(uint64_t data) { u = data; }
    ID_AA64ISAR0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64isar0_el1_t;
#endif

#ifdef __cplusplus
union ID_AA64ISAR1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64ISAR1_EL1_t() { u = 0; }
    ID_AA64ISAR1_EL1_t(uint64_t data) { u = data; }
    ID_AA64ISAR1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64isar1_el1_t;
#endif

#ifdef __cplusplus
union ID_AA64ISARX_EL1_RES0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64ISARX_EL1_RES0_t() { u = 0; }
    ID_AA64ISARX_EL1_RES0_t(uint64_t data) { u = data; }
    ID_AA64ISARX_EL1_RES0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64isarx_el1_res0_t;
#endif

#ifdef __cplusplus
union ID_AA64MMFR0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_32_63 : 32;
        uint64_t tgran4 : 4;
        uint64_t tgran64 : 4;
        uint64_t tgran16 : 4;
        uint64_t bigendel0 : 4;
        uint64_t snsmem : 4;
        uint64_t bigend : 4;
        uint64_t asidbits : 4;
        uint64_t parange : 4;
#else
        uint64_t parange : 4;
        uint64_t asidbits : 4;
        uint64_t bigend : 4;
        uint64_t snsmem : 4;
        uint64_t bigendel0 : 4;
        uint64_t tgran16 : 4;
        uint64_t tgran64 : 4;
        uint64_t tgran4 : 4;
        uint64_t reserved_32_63 : 32;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64MMFR0_EL1_t() { u = 0; }
    ID_AA64MMFR0_EL1_t(uint64_t data) { u = data; }
    ID_AA64MMFR0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64mmfr0_el1_t;
#endif

#ifdef __cplusplus
union ID_AA64MMFR1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_24_63 : 40;
        uint64_t pan : 4;
        uint64_t lo : 4;
        uint64_t hd : 4;
        uint64_t vh : 4;
        uint64_t vmidbits : 4;
        uint64_t hardware_access_dirty : 4;
#else
        uint64_t hardware_access_dirty : 4;
        uint64_t vmidbits : 4;
        uint64_t vh : 4;
        uint64_t hd : 4;
        uint64_t lo : 4;
        uint64_t pan : 4;
        uint64_t reserved_24_63 : 40;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64MMFR1_EL1_t() { u = 0; }
    ID_AA64MMFR1_EL1_t(uint64_t data) { u = data; }
    ID_AA64MMFR1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64mmfr1_el1_t;
#endif

#ifdef __cplusplus
union ID_AA64MMFRX_EL1_RES0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64MMFRX_EL1_RES0_t() { u = 0; }
    ID_AA64MMFRX_EL1_RES0_t(uint64_t data) { u = data; }
    ID_AA64MMFRX_EL1_RES0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64mmfrx_el1_res0_t;
#endif

#ifdef __cplusplus
union ID_AA64PFR0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_28_63 : 36;
        uint64_t gic : 4;
        uint64_t advsimd : 4;
        uint64_t fp : 4;
        uint64_t el3 : 4;
        uint64_t el2 : 4;
        uint64_t el1 : 4;
        uint64_t el0 : 4;
#else
        uint64_t el0 : 4;
        uint64_t el1 : 4;
        uint64_t el2 : 4;
        uint64_t el3 : 4;
        uint64_t fp : 4;
        uint64_t advsimd : 4;
        uint64_t gic : 4;
        uint64_t reserved_28_63 : 36;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64PFR0_EL1_t() { u = 0; }
    ID_AA64PFR0_EL1_t(uint64_t data) { u = data; }
    ID_AA64PFR0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64pfr0_el1_t;
#endif

#ifdef __cplusplus
union ID_AA64PFR1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64PFR1_EL1_t() { u = 0; }
    ID_AA64PFR1_EL1_t(uint64_t data) { u = data; }
    ID_AA64PFR1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64pfr1_el1_t;
#endif

#ifdef __cplusplus
union ID_AA64PFRX_EL1_RES0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_0_63 : 64;
#else
        uint64_t reserved_0_63 : 64;
#endif
    } s;
#ifdef __cplusplus
    ID_AA64PFRX_EL1_RES0_t() { u = 0; }
    ID_AA64PFRX_EL1_RES0_t(uint64_t data) { u = data; }
    ID_AA64PFRX_EL1_RES0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_aa64pfrx_el1_res0_t;
#endif

#ifdef __cplusplus
union ID_AFR0_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    ID_AFR0_EL1_t() { u = 0; }
    ID_AFR0_EL1_t(uint32_t data) { u = data; }
    ID_AFR0_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_afr0_el1_t;
#endif

#ifdef __cplusplus
union ID_DFR0_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    ID_DFR0_EL1_t() { u = 0; }
    ID_DFR0_EL1_t(uint32_t data) { u = data; }
    ID_DFR0_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_dfr0_el1_t;
#endif

#ifdef __cplusplus
union ID_ISARX_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    ID_ISARX_EL1_t() { u = 0; }
    ID_ISARX_EL1_t(uint32_t data) { u = data; }
    ID_ISARX_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_isarx_el1_t;
#endif

#ifdef __cplusplus
union ID_ISARX_EL1_RES0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    ID_ISARX_EL1_RES0_t() { u = 0; }
    ID_ISARX_EL1_RES0_t(uint32_t data) { u = data; }
    ID_ISARX_EL1_RES0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_isarx_el1_res0_t;
#endif

#ifdef __cplusplus
union ID_MMFRX_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    ID_MMFRX_EL1_t() { u = 0; }
    ID_MMFRX_EL1_t(uint32_t data) { u = data; }
    ID_MMFRX_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_mmfrx_el1_t;
#endif

#ifdef __cplusplus
union ID_PFR0_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_16_31 : 16;
        uint32_t state3 : 4;
        uint32_t state2 : 4;
        uint32_t state1 : 4;
        uint32_t state0 : 4;
#else
        uint32_t state0 : 4;
        uint32_t state1 : 4;
        uint32_t state2 : 4;
        uint32_t state3 : 4;
        uint32_t reserved_16_31 : 16;
#endif
    } s;
#ifdef __cplusplus
    ID_PFR0_EL1_t() { u = 0; }
    ID_PFR0_EL1_t(uint32_t data) { u = data; }
    ID_PFR0_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_pfr0_el1_t;
#endif

#ifdef __cplusplus
union ID_PFR1_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t gic : 4;
        uint32_t virt_frac : 4;
        uint32_t sec_frac : 4;
        uint32_t gentimer : 4;
        uint32_t virtualization : 4;
        uint32_t mprogmod : 4;
        uint32_t security : 4;
        uint32_t progmod : 4;
#else
        uint32_t progmod : 4;
        uint32_t security : 4;
        uint32_t mprogmod : 4;
        uint32_t virtualization : 4;
        uint32_t gentimer : 4;
        uint32_t sec_frac : 4;
        uint32_t virt_frac : 4;
        uint32_t gic : 4;
#endif
    } s;
#ifdef __cplusplus
    ID_PFR1_EL1_t() { u = 0; }
    ID_PFR1_EL1_t(uint32_t data) { u = data; }
    ID_PFR1_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_id_pfr1_el1_t;
#endif

#ifdef __cplusplus
union ISR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_9_31 : 23;
        uint32_t a : 1;
        uint32_t i : 1;
        uint32_t f : 1;
        uint32_t reserved_0_5 : 6;
#else
        uint32_t reserved_0_5 : 6;
        uint32_t f : 1;
        uint32_t i : 1;
        uint32_t a : 1;
        uint32_t reserved_9_31 : 23;
#endif
    } s;
#ifdef __cplusplus
    ISR_EL1_t() { u = 0; }
    ISR_EL1_t(uint32_t data) { u = data; }
    ISR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_isr_el1_t;
#endif

#ifdef __cplusplus
union LORSA_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_48_63 : 16;
        uint64_t sa : 32;
        uint64_t reserved_1_15 : 15;
        uint64_t valid : 1;
#else
        uint64_t valid : 1;
        uint64_t reserved_1_15 : 15;
        uint64_t sa : 32;
        uint64_t reserved_48_63 : 16;
#endif
    } s;
#ifdef __cplusplus
    LORSA_EL1_t() { u = 0; }
    LORSA_EL1_t(uint64_t data) { u = data; }
    LORSA_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_lorsa_el1_t;
#endif

#ifdef __cplusplus
union LOREA_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_48_63 : 16;
        uint64_t ea : 32;
        uint64_t reserved_0_15 : 16;
#else
        uint64_t reserved_0_15 : 16;
        uint64_t ea : 32;
        uint64_t reserved_48_63 : 16;
#endif
    } s;
#ifdef __cplusplus
    LOREA_EL1_t() { u = 0; }
    LOREA_EL1_t(uint64_t data) { u = data; }
    LOREA_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_lorea_el1_t;
#endif

#ifdef __cplusplus
union LORN_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_2_63 : 62;
        uint64_t num : 2;
#else
        uint64_t num : 2;
        uint64_t reserved_2_63 : 62;
#endif
    } s;
#ifdef __cplusplus
    LORN_EL1_t() { u = 0; }
    LORN_EL1_t(uint64_t data) { u = data; }
    LORN_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_lorn_el1_t;
#endif

#ifdef __cplusplus
union LORC_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_5_63 : 59;
        uint64_t ds : 3;
        uint64_t reserved_1 : 1;
        uint64_t en : 1;
#else
        uint64_t en : 1;
        uint64_t reserved_1 : 1;
        uint64_t ds : 3;
        uint64_t reserved_5_63 : 59;
#endif
    } s;
#ifdef __cplusplus
    LORC_EL1_t() { u = 0; }
    LORC_EL1_t(uint64_t data) { u = data; }
    LORC_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_lorc_el1_t;
#endif

#ifdef __cplusplus
union LORID_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_24_63 : 40;
        uint64_t ld : 8;
        uint64_t reserved_8_15 : 8;
        uint64_t lr : 8;
#else
        uint64_t lr : 8;
        uint64_t reserved_8_15 : 8;
        uint64_t ld : 8;
        uint64_t reserved_24_63 : 40;
#endif
    } s;
#ifdef __cplusplus
    LORID_EL1_t() { u = 0; }
    LORID_EL1_t(uint64_t data) { u = data; }
    LORID_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_lorid_el1_t;
#endif

#ifdef __cplusplus
union MAIR_ELX_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t attr_n : 64;
#else
        uint64_t attr_n : 64;
#endif
    } s;
#ifdef __cplusplus
    MAIR_ELX_t() { u = 0; }
    MAIR_ELX_t(uint64_t data) { u = data; }
    MAIR_ELX_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_mair_elx_t;
#endif

#ifdef __cplusplus
union MDCCINT_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_31 : 1;
        uint32_t rx : 1;
        uint32_t tx : 1;
        uint32_t reserved_0_28 : 29;
#else
        uint32_t reserved_0_28 : 29;
        uint32_t tx : 1;
        uint32_t rx : 1;
        uint32_t reserved_31 : 1;
#endif
    } s;
#ifdef __cplusplus
    MDCCINT_EL1_t() { u = 0; }
    MDCCINT_EL1_t(uint32_t data) { u = data; }
    MDCCINT_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_mdccint_el1_t;
#endif

#ifdef __cplusplus
union MDCCSR_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_31 : 1;
        uint32_t rxfull : 1;
        uint32_t txfull : 1;
        uint32_t reserved_19_28 : 10;
        uint32_t reserved_15_18 : 4;
        uint32_t reserved_13_14 : 2;
        uint32_t reserved_12 : 1;
        uint32_t reserved_6_11 : 6;
        uint32_t reserved_2_5 : 4;
        uint32_t reserved_0_1 : 2;
#else
        uint32_t reserved_0_1 : 2;
        uint32_t reserved_2_5 : 4;
        uint32_t reserved_6_11 : 6;
        uint32_t reserved_12 : 1;
        uint32_t reserved_13_14 : 2;
        uint32_t reserved_15_18 : 4;
        uint32_t reserved_19_28 : 10;
        uint32_t txfull : 1;
        uint32_t rxfull : 1;
        uint32_t reserved_31 : 1;
#endif
    } s;
#ifdef __cplusplus
    MDCCSR_EL0_t() { u = 0; }
    MDCCSR_EL0_t(uint32_t data) { u = data; }
    MDCCSR_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_mdccsr_el0_t;
#endif

#ifdef __cplusplus
union MDCR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_18_31 : 14;
        uint32_t hpmd : 1;
        uint32_t reserved_12_16 : 5;
        uint32_t tdra : 1;
        uint32_t tdosa : 1;
        uint32_t tda : 1;
        uint32_t tde : 1;
        uint32_t hpme : 1;
        uint32_t tpm : 1;
        uint32_t tpmcr : 1;
        uint32_t hpmn : 5;
#else
        uint32_t hpmn : 5;
        uint32_t tpmcr : 1;
        uint32_t tpm : 1;
        uint32_t hpme : 1;
        uint32_t tde : 1;
        uint32_t tda : 1;
        uint32_t tdosa : 1;
        uint32_t tdra : 1;
        uint32_t reserved_12_16 : 5;
        uint32_t hpmd : 1;
        uint32_t reserved_18_31 : 14;
#endif
    } s;
#ifdef __cplusplus
    MDCR_EL2_t() { u = 0; }
    MDCR_EL2_t(uint32_t data) { u = data; }
    MDCR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_mdcr_el2_t;
#endif

#ifdef __cplusplus
union MDCR_EL3_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_22_31 : 10;
        uint32_t epmad : 1;
        uint32_t edad : 1;
        uint32_t reserved_18_19 : 2;
        uint32_t spme : 1;
        uint32_t sdd : 1;
        uint32_t reserved_14_15 : 2;
        uint32_t reserved_11_13 : 3;
        uint32_t tdosa : 1;
        uint32_t tda : 1;
        uint32_t reserved_7_8 : 2;
        uint32_t tpm : 1;
        uint32_t reserved_0_5 : 6;
#else
        uint32_t reserved_0_5 : 6;
        uint32_t tpm : 1;
        uint32_t reserved_7_8 : 2;
        uint32_t tda : 1;
        uint32_t tdosa : 1;
        uint32_t reserved_11_13 : 3;
        uint32_t reserved_14_15 : 2;
        uint32_t sdd : 1;
        uint32_t spme : 1;
        uint32_t reserved_18_19 : 2;
        uint32_t edad : 1;
        uint32_t epmad : 1;
        uint32_t reserved_22_31 : 10;
#endif
    } s;
#ifdef __cplusplus
    MDCR_EL3_t() { u = 0; }
    MDCR_EL3_t(uint32_t data) { u = data; }
    MDCR_EL3_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_mdcr_el3_t;
#endif

#ifdef __cplusplus
union MDRAR_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_48_63 : 16;
        uint64_t romaddr : 36;
        uint64_t reserved_2_11 : 10;
        uint64_t valid : 2;
#else
        uint64_t valid : 2;
        uint64_t reserved_2_11 : 10;
        uint64_t romaddr : 36;
        uint64_t reserved_48_63 : 16;
#endif
    } s;
#ifdef __cplusplus
    MDRAR_EL1_t() { u = 0; }
    MDRAR_EL1_t(uint64_t data) { u = data; }
    MDRAR_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_mdrar_el1_t;
#endif

#ifdef __cplusplus
union MDSCR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_31 : 1;
        uint32_t rxfull : 1;
        uint32_t txfull : 1;
        uint32_t reserved_28 : 1;
        uint32_t rxo : 1;
        uint32_t txu : 1;
        uint32_t reserved_24_25 : 2;
        uint32_t intdis : 2;
        uint32_t tda : 1;
        uint32_t reserved_19_20 : 2;
        uint32_t reserved_16_18 : 3;
        uint32_t mde : 1;
        uint32_t hde : 1;
        uint32_t kde : 1;
        uint32_t tdcc : 1;
        uint32_t reserved_7_11 : 5;
        uint32_t err : 1;
        uint32_t reserved_1_5 : 5;
        uint32_t ss : 1;
#else
        uint32_t ss : 1;
        uint32_t reserved_1_5 : 5;
        uint32_t err : 1;
        uint32_t reserved_7_11 : 5;
        uint32_t tdcc : 1;
        uint32_t kde : 1;
        uint32_t hde : 1;
        uint32_t mde : 1;
        uint32_t reserved_16_18 : 3;
        uint32_t reserved_19_20 : 2;
        uint32_t tda : 1;
        uint32_t intdis : 2;
        uint32_t reserved_24_25 : 2;
        uint32_t txu : 1;
        uint32_t rxo : 1;
        uint32_t reserved_28 : 1;
        uint32_t txfull : 1;
        uint32_t rxfull : 1;
        uint32_t reserved_31 : 1;
#endif
    } s;
#ifdef __cplusplus
    MDSCR_EL1_t() { u = 0; }
    MDSCR_EL1_t(uint32_t data) { u = data; }
    MDSCR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_mdscr_el1_t;
#endif

#ifdef __cplusplus
union MIDR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t implementer : 8;
        uint32_t variant : 4;
        uint32_t architecture : 4;
        uint32_t partnum : 12;
        uint32_t revision : 4;
#else
        uint32_t revision : 4;
        uint32_t partnum : 12;
        uint32_t architecture : 4;
        uint32_t variant : 4;
        uint32_t implementer : 8;
#endif
    } s;
#ifdef __cplusplus
    MIDR_EL1_t() { u = 0; }
    MIDR_EL1_t(uint32_t data) { u = data; }
    MIDR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_midr_el1_t;
#endif

#ifdef __cplusplus
union MPIDR_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_40_63 : 24;
        uint64_t aff3 : 8;
        uint64_t reserved_31 : 1;
        uint64_t u : 1;
        uint64_t reserved_25_29 : 5;
        uint64_t mt : 1;
        uint64_t aff2 : 8;
        uint64_t aff1 : 8;
        uint64_t aff0 : 8;
#else
        uint64_t aff0 : 8;
        uint64_t aff1 : 8;
        uint64_t aff2 : 8;
        uint64_t mt : 1;
        uint64_t reserved_25_29 : 5;
        uint64_t u : 1;
        uint64_t reserved_31 : 1;
        uint64_t aff3 : 8;
        uint64_t reserved_40_63 : 24;
#endif
    } s;
#ifdef __cplusplus
    MPIDR_EL1_t() { u = 0; }
    MPIDR_EL1_t(uint64_t data) { u = data; }
    MPIDR_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_mpidr_el1_t;
#endif

#ifdef __cplusplus
union MVFRX_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    MVFRX_EL1_t() { u = 0; }
    MVFRX_EL1_t(uint32_t data) { u = data; }
    MVFRX_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_mvfrx_el1_t;
#endif

#ifdef __cplusplus
union NZCV_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t N : 1;
        uint32_t Z : 1;
        uint32_t C : 1;
        uint32_t V : 1;
        uint32_t reserved_0_27 : 28;
#else
        uint32_t reserved_0_27 : 28;
        uint32_t V : 1;
        uint32_t C : 1;
        uint32_t Z : 1;
        uint32_t N : 1;
#endif
    } s;
#ifdef __cplusplus
    NZCV_t() { u = 0; }
    NZCV_t(uint32_t data) { u = data; }
    NZCV_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_nzcv_t;
#endif

#ifdef __cplusplus
union OSDLR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_1_31 : 31;
        uint32_t dlk : 1;
#else
        uint32_t dlk : 1;
        uint32_t reserved_1_31 : 31;
#endif
    } s;
#ifdef __cplusplus
    OSDLR_EL1_t() { u = 0; }
    OSDLR_EL1_t(uint32_t data) { u = data; }
    OSDLR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_osdlr_el1_t;
#endif

#ifdef __cplusplus
union OSDTRRX_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    OSDTRRX_EL1_t() { u = 0; }
    OSDTRRX_EL1_t(uint32_t data) { u = data; }
    OSDTRRX_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_osdtrrx_el1_t;
#endif

#ifdef __cplusplus
union OSDTRTX_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    OSDTRTX_EL1_t() { u = 0; }
    OSDTRTX_EL1_t(uint32_t data) { u = data; }
    OSDTRTX_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_osdtrtx_el1_t;
#endif

#ifdef __cplusplus
union OSECCR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t edeccr : 32;
#else
        uint32_t edeccr : 32;
#endif
    } s;
#ifdef __cplusplus
    OSECCR_EL1_t() { u = 0; }
    OSECCR_EL1_t(uint32_t data) { u = data; }
    OSECCR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_oseccr_el1_t;
#endif

#ifdef __cplusplus
union OSLAR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_1_31 : 31;
        uint32_t oslk : 1;
#else
        uint32_t oslk : 1;
        uint32_t reserved_1_31 : 31;
#endif
    } s;
#ifdef __cplusplus
    OSLAR_EL1_t() { u = 0; }
    OSLAR_EL1_t(uint32_t data) { u = data; }
    OSLAR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_oslar_el1_t;
#endif

#ifdef __cplusplus
union OSLSR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_4_31 : 28;
        uint32_t oslm_high : 1;
        uint32_t ntt : 1;
        uint32_t oslk : 1;
        uint32_t oslm_low : 1;
#else
        uint32_t oslm_low : 1;
        uint32_t oslk : 1;
        uint32_t ntt : 1;
        uint32_t oslm_high : 1;
        uint32_t reserved_4_31 : 28;
#endif
    } s;
#ifdef __cplusplus
    OSLSR_EL1_t() { u = 0; }
    OSLSR_EL1_t(uint32_t data) { u = data; }
    OSLSR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_oslsr_el1_t;
#endif

#ifdef __cplusplus
union PAN_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_23_63 : 41;
        uint64_t pan : 1;
        uint64_t reserved_0_21 : 22;
#else
        uint64_t reserved_0_21 : 22;
        uint64_t pan : 1;
        uint64_t reserved_23_63 : 41;
#endif
    } s;
#ifdef __cplusplus
    PAN_t() { u = 0; }
    PAN_t(uint64_t data) { u = data; }
    PAN_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pan_t;
#endif

#ifdef __cplusplus
union PAR_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t mair : 8;
        uint64_t reserved_48_55 : 8;
        uint64_t pa : 36;
        uint64_t reserved_11 : 1;
        uint64_t reserved_10 : 1;
        uint64_t ns : 1;
        uint64_t sha : 2;
        uint64_t fs : 6;
        uint64_t f : 1;
#else
        uint64_t f : 1;
        uint64_t fs : 6;
        uint64_t sha : 2;
        uint64_t ns : 1;
        uint64_t reserved_10 : 1;
        uint64_t reserved_11 : 1;
        uint64_t pa : 36;
        uint64_t reserved_48_55 : 8;
        uint64_t mair : 8;
#endif
    } s;
#ifdef __cplusplus
    PAR_EL1_t() { u = 0; }
    PAR_EL1_t(uint64_t data) { u = data; }
    PAR_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_par_el1_t;
#endif

#ifdef __cplusplus
union PMCCFILTR_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t p : 1;
        uint32_t u : 1;
        uint32_t nsk : 1;
        uint32_t nsu : 1;
        uint32_t nsh : 1;
        uint32_t m : 1;
        uint32_t reserved_0_25 : 26;
#else
        uint32_t reserved_0_25 : 26;
        uint32_t m : 1;
        uint32_t nsh : 1;
        uint32_t nsu : 1;
        uint32_t nsk : 1;
        uint32_t u : 1;
        uint32_t p : 1;
#endif
    } s;
#ifdef __cplusplus
    PMCCFILTR_EL0_t() { u = 0; }
    PMCCFILTR_EL0_t(uint32_t data) { u = data; }
    PMCCFILTR_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmccfiltr_el0_t;
#endif

#ifdef __cplusplus
union PMCCNTR_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t ccnt : 64;
#else
        uint64_t ccnt : 64;
#endif
    } s;
#ifdef __cplusplus
    PMCCNTR_EL0_t() { u = 0; }
    PMCCNTR_EL0_t(uint64_t data) { u = data; }
    PMCCNTR_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmccntr_el0_t;
#endif

#ifdef __cplusplus
union PMCEID0_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t ce : 64;
#else
        uint64_t ce : 64;
#endif
    } s;
#ifdef __cplusplus
    PMCEID0_EL0_t() { u = 0; }
    PMCEID0_EL0_t(uint64_t data) { u = data; }
    PMCEID0_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmceid0_el0_t;
#endif

#ifdef __cplusplus
union PMCEID1_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t ce : 64;
#else
        uint64_t ce : 64;
#endif
    } s;
#ifdef __cplusplus
    PMCEID1_EL0_t() { u = 0; }
    PMCEID1_EL0_t(uint64_t data) { u = data; }
    PMCEID1_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmceid1_el0_t;
#endif

#ifdef __cplusplus
union PMCNTENCLR_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t c : 1;
        uint32_t p : 31;
#else
        uint32_t p : 31;
        uint32_t c : 1;
#endif
    } s;
#ifdef __cplusplus
    PMCNTENCLR_EL0_t() { u = 0; }
    PMCNTENCLR_EL0_t(uint32_t data) { u = data; }
    PMCNTENCLR_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmcntenclr_el0_t;
#endif

#ifdef __cplusplus
union PMCNTENSET_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t c : 1;
        uint32_t p : 31;
#else
        uint32_t p : 31;
        uint32_t c : 1;
#endif
    } s;
#ifdef __cplusplus
    PMCNTENSET_EL0_t() { u = 0; }
    PMCNTENSET_EL0_t(uint32_t data) { u = data; }
    PMCNTENSET_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmcntenset_el0_t;
#endif

#ifdef __cplusplus
union PMCR_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t imp : 8;
        uint32_t idcode : 8;
        uint32_t n : 5;
        uint32_t reserved_7_10 : 4;
        uint32_t lc : 1;
        uint32_t dp : 1;
        uint32_t x : 1;
        uint32_t d : 1;
        uint32_t c : 1;
        uint32_t p : 1;
        uint32_t e : 1;
#else
        uint32_t e : 1;
        uint32_t p : 1;
        uint32_t c : 1;
        uint32_t d : 1;
        uint32_t x : 1;
        uint32_t dp : 1;
        uint32_t lc : 1;
        uint32_t reserved_7_10 : 4;
        uint32_t n : 5;
        uint32_t idcode : 8;
        uint32_t imp : 8;
#endif
    } s;
#ifdef __cplusplus
    PMCR_EL0_t() { u = 0; }
    PMCR_EL0_t(uint32_t data) { u = data; }
    PMCR_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmcr_el0_t;
#endif

#ifdef __cplusplus
union PMEVCNTRX_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    PMEVCNTRX_EL0_t() { u = 0; }
    PMEVCNTRX_EL0_t(uint32_t data) { u = data; }
    PMEVCNTRX_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmevcntrx_el0_t;
#endif

#ifdef __cplusplus
union PMEVTYPERX_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t p : 1;
        uint32_t u : 1;
        uint32_t nsk : 1;
        uint32_t nsu : 1;
        uint32_t nsh : 1;
        uint32_t m : 1;
        uint32_t reserved_16_25 : 10;
        uint32_t evtcount : 16;
#else
        uint32_t evtcount : 16;
        uint32_t reserved_16_25 : 10;
        uint32_t m : 1;
        uint32_t nsh : 1;
        uint32_t nsu : 1;
        uint32_t nsk : 1;
        uint32_t u : 1;
        uint32_t p : 1;
#endif
    } s;
#ifdef __cplusplus
    PMEVTYPERX_EL0_t() { u = 0; }
    PMEVTYPERX_EL0_t(uint32_t data) { u = data; }
    PMEVTYPERX_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmevtyperx_el0_t;
#endif

#ifdef __cplusplus
union PMINTENCLR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t c : 1;
        uint32_t p : 31;
#else
        uint32_t p : 31;
        uint32_t c : 1;
#endif
    } s;
#ifdef __cplusplus
    PMINTENCLR_EL1_t() { u = 0; }
    PMINTENCLR_EL1_t(uint32_t data) { u = data; }
    PMINTENCLR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmintenclr_el1_t;
#endif

#ifdef __cplusplus
union PMINTENSET_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t c : 1;
        uint32_t p : 31;
#else
        uint32_t p : 31;
        uint32_t c : 1;
#endif
    } s;
#ifdef __cplusplus
    PMINTENSET_EL1_t() { u = 0; }
    PMINTENSET_EL1_t(uint32_t data) { u = data; }
    PMINTENSET_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmintenset_el1_t;
#endif

#ifdef __cplusplus
union PMOVSCLR_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t c : 1;
        uint32_t p : 31;
#else
        uint32_t p : 31;
        uint32_t c : 1;
#endif
    } s;
#ifdef __cplusplus
    PMOVSCLR_EL0_t() { u = 0; }
    PMOVSCLR_EL0_t(uint32_t data) { u = data; }
    PMOVSCLR_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmovsclr_el0_t;
#endif

#ifdef __cplusplus
union PMOVSSET_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t c : 1;
        uint32_t p : 31;
#else
        uint32_t p : 31;
        uint32_t c : 1;
#endif
    } s;
#ifdef __cplusplus
    PMOVSSET_EL0_t() { u = 0; }
    PMOVSSET_EL0_t(uint32_t data) { u = data; }
    PMOVSSET_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmovsset_el0_t;
#endif

#ifdef __cplusplus
union PMSELR_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_5_31 : 27;
        uint32_t sel : 5;
#else
        uint32_t sel : 5;
        uint32_t reserved_5_31 : 27;
#endif
    } s;
#ifdef __cplusplus
    PMSELR_EL0_t() { u = 0; }
    PMSELR_EL0_t(uint32_t data) { u = data; }
    PMSELR_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmselr_el0_t;
#endif

#ifdef __cplusplus
union PMSWINC_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_31 : 1;
        uint32_t p : 31;
#else
        uint32_t p : 31;
        uint32_t reserved_31 : 1;
#endif
    } s;
#ifdef __cplusplus
    PMSWINC_EL0_t() { u = 0; }
    PMSWINC_EL0_t(uint32_t data) { u = data; }
    PMSWINC_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmswinc_el0_t;
#endif

#ifdef __cplusplus
union PMUSERENR_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_4_31 : 28;
        uint32_t er : 1;
        uint32_t cr : 1;
        uint32_t sw : 1;
        uint32_t en : 1;
#else
        uint32_t en : 1;
        uint32_t sw : 1;
        uint32_t cr : 1;
        uint32_t er : 1;
        uint32_t reserved_4_31 : 28;
#endif
    } s;
#ifdef __cplusplus
    PMUSERENR_EL0_t() { u = 0; }
    PMUSERENR_EL0_t(uint32_t data) { u = data; }
    PMUSERENR_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmuserenr_el0_t;
#endif

#ifdef __cplusplus
union PMXEVCNTR_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t pmevcntr : 32;
#else
        uint32_t pmevcntr : 32;
#endif
    } s;
#ifdef __cplusplus
    PMXEVCNTR_EL0_t() { u = 0; }
    PMXEVCNTR_EL0_t(uint32_t data) { u = data; }
    PMXEVCNTR_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmxevcntr_el0_t;
#endif

#ifdef __cplusplus
union PMXEVTYPER_EL0_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t data : 32;
#else
        uint32_t data : 32;
#endif
    } s;
#ifdef __cplusplus
    PMXEVTYPER_EL0_t() { u = 0; }
    PMXEVTYPER_EL0_t(uint32_t data) { u = data; }
    PMXEVTYPER_EL0_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_pmxevtyper_el0_t;
#endif

#ifdef __cplusplus
union REVIDR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    REVIDR_EL1_t() { u = 0; }
    REVIDR_EL1_t(uint32_t data) { u = data; }
    REVIDR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_revidr_el1_t;
#endif

#ifdef __cplusplus
union RVBAR_EL3_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    RVBAR_EL3_t() { u = 0; }
    RVBAR_EL3_t(uint64_t data) { u = data; }
    RVBAR_EL3_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_rvbar_el3_t;
#endif

#ifdef __cplusplus
union SCR_EL3_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_15_31 : 17;
        uint32_t tlor : 1;
        uint32_t twe : 1;
        uint32_t twi : 1;
        uint32_t st : 1;
        uint32_t reserved_10 : 1;
        uint32_t sif : 1;
        uint32_t hce : 1;
        uint32_t smd : 1;
        uint32_t reserved_6 : 1;
        uint32_t reserved_4_5 : 2;
        uint32_t ea : 1;
        uint32_t fiq : 1;
        uint32_t irq : 1;
        uint32_t ns : 1;
#else
        uint32_t ns : 1;
        uint32_t irq : 1;
        uint32_t fiq : 1;
        uint32_t ea : 1;
        uint32_t reserved_4_5 : 2;
        uint32_t reserved_6 : 1;
        uint32_t smd : 1;
        uint32_t hce : 1;
        uint32_t sif : 1;
        uint32_t reserved_10 : 1;
        uint32_t st : 1;
        uint32_t twi : 1;
        uint32_t twe : 1;
        uint32_t tlor : 1;
        uint32_t reserved_15_31 : 17;
#endif
    } s;
#ifdef __cplusplus
    SCR_EL3_t() { u = 0; }
    SCR_EL3_t(uint32_t data) { u = data; }
    SCR_EL3_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_scr_el3_t;
#endif

#ifdef __cplusplus
union SCTLR_ELX_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_30_31 : 2;
        uint32_t reserved_28_29 : 2;
        uint32_t reserved_26_27 : 2;
        uint32_t ee : 1;
        uint32_t reserved_24 : 1;
        uint32_t span : 1;
        uint32_t reserved_22 : 1;
        uint32_t reserved_20_21 : 2;
        uint32_t wxn : 1;
        uint32_t reserved_18 : 1;
        uint32_t reserved_17 : 1;
        uint32_t reserved_16 : 1;
        uint32_t reserved_13_15 : 3;
        uint32_t i : 1;
        uint32_t reserved_11 : 1;
        uint32_t reserved_6_10 : 5;
        uint32_t reserved_4_5 : 2;
        uint32_t sa : 1;
        uint32_t c : 1;
        uint32_t a : 1;
        uint32_t m : 1;
#else
        uint32_t m : 1;
        uint32_t a : 1;
        uint32_t c : 1;
        uint32_t sa : 1;
        uint32_t reserved_4_5 : 2;
        uint32_t reserved_6_10 : 5;
        uint32_t reserved_11 : 1;
        uint32_t i : 1;
        uint32_t reserved_13_15 : 3;
        uint32_t reserved_16 : 1;
        uint32_t reserved_17 : 1;
        uint32_t reserved_18 : 1;
        uint32_t wxn : 1;
        uint32_t reserved_20_21 : 2;
        uint32_t reserved_22 : 1;
        uint32_t span : 1;
        uint32_t reserved_24 : 1;
        uint32_t ee : 1;
        uint32_t reserved_26_27 : 2;
        uint32_t reserved_28_29 : 2;
        uint32_t reserved_30_31 : 2;
#endif
    } s;
#ifdef __cplusplus
    SCTLR_ELX_t() { u = 0; }
    SCTLR_ELX_t(uint32_t data) { u = data; }
    SCTLR_ELX_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_sctlr_elx_t;
#endif

#ifdef __cplusplus
union SCTLR_EL1_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_30_31 : 2;
        uint32_t reserved_28_29 : 2;
        uint32_t reserved_27 : 1;
        uint32_t uci : 1;
        uint32_t ee : 1;
        uint32_t e0e : 1;
        uint32_t span : 1;
        uint32_t reserved_22 : 1;
        uint32_t reserved_21 : 1;
        uint32_t reserved_20 : 1;
        uint32_t wxn : 1;
        uint32_t ntwe : 1;
        uint32_t reserved_17 : 1;
        uint32_t ntwi : 1;
        uint32_t uct : 1;
        uint32_t dze : 1;
        uint32_t reserved_13 : 1;
        uint32_t i : 1;
        uint32_t reserved_11 : 1;
        uint32_t reserved_10 : 1;
        uint32_t uma : 1;
        uint32_t reserved_8 : 1;
        uint32_t reserved_7 : 1;
        uint32_t reserved_6 : 1;
        uint32_t reserved_5 : 1;
        uint32_t sa0 : 1;
        uint32_t sa : 1;
        uint32_t c : 1;
        uint32_t a : 1;
        uint32_t m : 1;
#else
        uint32_t m : 1;
        uint32_t a : 1;
        uint32_t c : 1;
        uint32_t sa : 1;
        uint32_t sa0 : 1;
        uint32_t reserved_5 : 1;
        uint32_t reserved_6 : 1;
        uint32_t reserved_7 : 1;
        uint32_t reserved_8 : 1;
        uint32_t uma : 1;
        uint32_t reserved_10 : 1;
        uint32_t reserved_11 : 1;
        uint32_t i : 1;
        uint32_t reserved_13 : 1;
        uint32_t dze : 1;
        uint32_t uct : 1;
        uint32_t ntwi : 1;
        uint32_t reserved_17 : 1;
        uint32_t ntwe : 1;
        uint32_t wxn : 1;
        uint32_t reserved_20 : 1;
        uint32_t reserved_21 : 1;
        uint32_t reserved_22 : 1;
        uint32_t span : 1;
        uint32_t e0e : 1;
        uint32_t ee : 1;
        uint32_t uci : 1;
        uint32_t reserved_27 : 1;
        uint32_t reserved_28_29 : 2;
        uint32_t reserved_30_31 : 2;
#endif
    } s;
#ifdef __cplusplus
    SCTLR_EL1_t() { u = 0; }
    SCTLR_EL1_t(uint32_t data) { u = data; }
    SCTLR_EL1_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_sctlr_el1_t;
#endif

#ifdef __cplusplus
union SPSR_ELX_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t N : 1;
        uint32_t Z : 1;
        uint32_t C : 1;
        uint32_t V : 1;
        uint32_t reserved_23_27 : 5;
        uint32_t PAN : 1;
        uint32_t SS : 1;
        uint32_t IL : 1;
        uint32_t reserved_10_19 : 10;
        uint32_t D : 1;
        uint32_t A : 1;
        uint32_t I : 1;
        uint32_t F : 1;
        uint32_t reserved_5 : 1;
        uint32_t from32 : 1;
        uint32_t EL : 2;
        uint32_t reserved1 : 1;
        uint32_t SP : 1;
#else
        uint32_t SP : 1;
        uint32_t reserved1 : 1;
        uint32_t EL : 2;
        uint32_t from32 : 1;
        uint32_t reserved_5 : 1;
        uint32_t F : 1;
        uint32_t I : 1;
        uint32_t A : 1;
        uint32_t D : 1;
        uint32_t reserved_10_19 : 10;
        uint32_t IL : 1;
        uint32_t SS : 1;
        uint32_t PAN : 1;
        uint32_t reserved_23_27 : 5;
        uint32_t V : 1;
        uint32_t C : 1;
        uint32_t Z : 1;
        uint32_t N : 1;
#endif
    } s;
#ifdef __cplusplus
    SPSR_ELX_t() { u = 0; }
    SPSR_ELX_t(uint32_t data) { u = data; }
    SPSR_ELX_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_spsr_elx_t;
#endif

#ifdef __cplusplus
union SPSR_abt_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    SPSR_abt_t() { u = 0; }
    SPSR_abt_t(uint32_t data) { u = data; }
    SPSR_abt_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_spsr_abt_t;
#endif

#ifdef __cplusplus
union SPSR_fiq_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    SPSR_fiq_t() { u = 0; }
    SPSR_fiq_t(uint32_t data) { u = data; }
    SPSR_fiq_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_spsr_fiq_t;
#endif

#ifdef __cplusplus
union SPSR_irq_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    SPSR_irq_t() { u = 0; }
    SPSR_irq_t(uint32_t data) { u = data; }
    SPSR_irq_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_spsr_irq_t;
#endif

#ifdef __cplusplus
union SPSR_und_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_0_31 : 32;
#else
        uint32_t reserved_0_31 : 32;
#endif
    } s;
#ifdef __cplusplus
    SPSR_und_t() { u = 0; }
    SPSR_und_t(uint32_t data) { u = data; }
    SPSR_und_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_spsr_und_t;
#endif

#ifdef __cplusplus
union SPSel_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_1_31 : 31;
        uint32_t sp : 1;
#else
        uint32_t sp : 1;
        uint32_t reserved_1_31 : 31;
#endif
    } s;
#ifdef __cplusplus
    SPSel_t() { u = 0; }
    SPSel_t(uint32_t data) { u = data; }
    SPSel_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_spsel_t;
#endif

#ifdef __cplusplus
union SP_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    SP_EL0_t() { u = 0; }
    SP_EL0_t(uint64_t data) { u = data; }
    SP_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_sp_el0_t;
#endif

#ifdef __cplusplus
union SP_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    SP_EL1_t() { u = 0; }
    SP_EL1_t(uint64_t data) { u = data; }
    SP_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_sp_el1_t;
#endif

#ifdef __cplusplus
union SP_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    SP_EL2_t() { u = 0; }
    SP_EL2_t(uint64_t data) { u = data; }
    SP_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_sp_el2_t;
#endif

#ifdef __cplusplus
union TCR_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_43_63 : 21;
        uint64_t had1 : 1;
        uint64_t had0 : 1;
        uint64_t reserved_40 : 1;
        uint64_t reserved_39 : 1;
        uint64_t tbi1 : 1;
        uint64_t tbi0 : 1;
        uint64_t as : 1;
        uint64_t reserved_35 : 1;
        uint64_t ips : 3;
        uint64_t tg1 : 2;
        uint64_t sh1 : 2;
        uint64_t orgn1 : 2;
        uint64_t irgn1 : 2;
        uint64_t epd1 : 1;
        uint64_t a1 : 1;
        uint64_t t1sz : 6;
        uint64_t tg0 : 2;
        uint64_t sh0 : 2;
        uint64_t orgn0 : 2;
        uint64_t irgn0 : 2;
        uint64_t epd0 : 1;
        uint64_t reserved_6 : 1;
        uint64_t t0sz : 6;
#else
        uint64_t t0sz : 6;
        uint64_t reserved_6 : 1;
        uint64_t epd0 : 1;
        uint64_t irgn0 : 2;
        uint64_t orgn0 : 2;
        uint64_t sh0 : 2;
        uint64_t tg0 : 2;
        uint64_t t1sz : 6;
        uint64_t a1 : 1;
        uint64_t epd1 : 1;
        uint64_t irgn1 : 2;
        uint64_t orgn1 : 2;
        uint64_t sh1 : 2;
        uint64_t tg1 : 2;
        uint64_t ips : 3;
        uint64_t reserved_35 : 1;
        uint64_t as : 1;
        uint64_t tbi0 : 1;
        uint64_t tbi1 : 1;
        uint64_t reserved_39 : 1;
        uint64_t reserved_40 : 1;
        uint64_t had0 : 1;
        uint64_t had1 : 1;
        uint64_t reserved_43_63 : 21;
#endif
    } s;
#ifdef __cplusplus
    TCR_EL1_t() { u = 0; }
    TCR_EL1_t(uint64_t data) { u = data; }
    TCR_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_tcr_el1_t;
#endif

#ifdef __cplusplus
union TCR_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_43_63 : 21;
        uint64_t had1 : 1;
        uint64_t had0 : 1;
        uint64_t reserved_40 : 1;
        uint64_t reserved_39 : 1;
        uint64_t tbi1 : 1;
        uint64_t tbi0 : 1;
        uint64_t as : 1;
        uint64_t reserved_35 : 1;
        uint64_t ips : 3;
        uint64_t tg1 : 2;
        uint64_t sh1 : 2;
        uint64_t orgn1 : 2;
        uint64_t irgn1 : 2;
        uint64_t epd1 : 1;
        uint64_t a1 : 1;
        uint64_t t1sz : 6;
        uint64_t tg0 : 2;
        uint64_t sh0 : 2;
        uint64_t orgn0 : 2;
        uint64_t irgn0 : 2;
        uint64_t epd0 : 1;
        uint64_t reserved_6 : 1;
        uint64_t t0sz : 6;
#else
        uint64_t t0sz : 6;
        uint64_t reserved_6 : 1;
        uint64_t epd0 : 1;
        uint64_t irgn0 : 2;
        uint64_t orgn0 : 2;
        uint64_t sh0 : 2;
        uint64_t tg0 : 2;
        uint64_t t1sz : 6;
        uint64_t a1 : 1;
        uint64_t epd1 : 1;
        uint64_t irgn1 : 2;
        uint64_t orgn1 : 2;
        uint64_t sh1 : 2;
        uint64_t tg1 : 2;
        uint64_t ips : 3;
        uint64_t reserved_35 : 1;
        uint64_t as : 1;
        uint64_t tbi0 : 1;
        uint64_t tbi1 : 1;
        uint64_t reserved_39 : 1;
        uint64_t reserved_40 : 1;
        uint64_t had0 : 1;
        uint64_t had1 : 1;
        uint64_t reserved_43_63 : 21;
#endif
    } s;
#ifdef __cplusplus
    TCR_EL2_t() { u = 0; }
    TCR_EL2_t(uint64_t data) { u = data; }
    TCR_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_tcr_el2_t;
#endif

#ifdef __cplusplus
union TCR_EL3_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_31 : 1;
        uint32_t reserved_25_30 : 6;
        uint32_t had : 1;
        uint32_t reserved_23 : 1;
        uint32_t reserved_22 : 1;
        uint32_t reserved_21 : 1;
        uint32_t tbi : 1;
        uint32_t reserved_19 : 1;
        uint32_t ps : 3;
        uint32_t tg0 : 2;
        uint32_t sh0 : 2;
        uint32_t orgn0 : 2;
        uint32_t irgn0 : 2;
        uint32_t reserved_6_7 : 2;
        uint32_t t0sz : 6;
#else
        uint32_t t0sz : 6;
        uint32_t reserved_6_7 : 2;
        uint32_t irgn0 : 2;
        uint32_t orgn0 : 2;
        uint32_t sh0 : 2;
        uint32_t tg0 : 2;
        uint32_t ps : 3;
        uint32_t reserved_19 : 1;
        uint32_t tbi : 1;
        uint32_t reserved_21 : 1;
        uint32_t reserved_22 : 1;
        uint32_t reserved_23 : 1;
        uint32_t had : 1;
        uint32_t reserved_25_30 : 6;
        uint32_t reserved_31 : 1;
#endif
    } s;
#ifdef __cplusplus
    TCR_EL3_t() { u = 0; }
    TCR_EL3_t(uint32_t data) { u = data; }
    TCR_EL3_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_tcr_el3_t;
#endif

#ifdef __cplusplus
union TPIDRRO_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    TPIDRRO_EL0_t() { u = 0; }
    TPIDRRO_EL0_t(uint64_t data) { u = data; }
    TPIDRRO_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_tpidrro_el0_t;
#endif

#ifdef __cplusplus
union TPIDR_ELX_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    TPIDR_ELX_t() { u = 0; }
    TPIDR_ELX_t(uint64_t data) { u = data; }
    TPIDR_ELX_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_tpidr_elx_t;
#endif

#ifdef __cplusplus
union TPIDR_EL0_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    TPIDR_EL0_t() { u = 0; }
    TPIDR_EL0_t(uint64_t data) { u = data; }
    TPIDR_EL0_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_tpidr_el0_t;
#endif

#ifdef __cplusplus
union TPIDR_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 64;
#else
        uint64_t data : 64;
#endif
    } s;
#ifdef __cplusplus
    TPIDR_EL1_t() { u = 0; }
    TPIDR_EL1_t(uint64_t data) { u = data; }
    TPIDR_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_tpidr_el1_t;
#endif

#ifdef __cplusplus
union TTBR0_ELX_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_48_63 : 16;
        uint64_t baddr : 44;
        uint64_t reserved_0_3 : 4;
#else
        uint64_t reserved_0_3 : 4;
        uint64_t baddr : 44;
        uint64_t reserved_48_63 : 16;
#endif
    } s;
#ifdef __cplusplus
    TTBR0_ELX_t() { u = 0; }
    TTBR0_ELX_t(uint64_t data) { u = data; }
    TTBR0_ELX_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ttbr0_elx_t;
#endif

#ifdef __cplusplus
union TTBR0_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t asid : 16;
        uint64_t baddr : 44;
        uint64_t reserved_0_3 : 4;
#else
        uint64_t reserved_0_3 : 4;
        uint64_t baddr : 44;
        uint64_t asid : 16;
#endif
    } s;
#ifdef __cplusplus
    TTBR0_EL1_t() { u = 0; }
    TTBR0_EL1_t(uint64_t data) { u = data; }
    TTBR0_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ttbr0_el1_t;
#endif

#ifdef __cplusplus
union TTBR1_EL1_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t asid : 16;
        uint64_t baddr : 44;
        uint64_t reserved_0_3 : 4;
#else
        uint64_t reserved_0_3 : 4;
        uint64_t baddr : 44;
        uint64_t asid : 16;
#endif
    } s;
#ifdef __cplusplus
    TTBR1_EL1_t() { u = 0; }
    TTBR1_EL1_t(uint64_t data) { u = data; }
    TTBR1_EL1_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ttbr1_el1_t;
#endif

#ifdef __cplusplus
union TTBR1_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t asid : 16;
        uint64_t baddr : 44;
        uint64_t reserved_0_3 : 4;
#else
        uint64_t reserved_0_3 : 4;
        uint64_t baddr : 44;
        uint64_t asid : 16;
#endif
    } s;
#ifdef __cplusplus
    TTBR1_EL2_t() { u = 0; }
    TTBR1_EL2_t(uint64_t data) { u = data; }
    TTBR1_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_ttbr1_el2_t;
#endif

#ifdef __cplusplus
union VBAR_ELX_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t data : 53;
        uint64_t reserved_0_10 : 11;
#else
        uint64_t reserved_0_10 : 11;
        uint64_t data : 53;
#endif
    } s;
#ifdef __cplusplus
    VBAR_ELX_t() { u = 0; }
    VBAR_ELX_t(uint64_t data) { u = data; }
    VBAR_ELX_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_vbar_elx_t;
#endif

#ifdef __cplusplus
union VMPIDR_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t reserved_40_63 : 24;
        uint64_t aff3 : 8;
        uint64_t reserved_31 : 1;
        uint64_t u : 1;
        uint64_t reserved_25_29 : 5;
        uint64_t mt : 1;
        uint64_t aff2 : 8;
        uint64_t aff1 : 8;
        uint64_t aff0 : 8;
#else
        uint64_t aff0 : 8;
        uint64_t aff1 : 8;
        uint64_t aff2 : 8;
        uint64_t mt : 1;
        uint64_t reserved_25_29 : 5;
        uint64_t u : 1;
        uint64_t reserved_31 : 1;
        uint64_t aff3 : 8;
        uint64_t reserved_40_63 : 24;
#endif
    } s;
#ifdef __cplusplus
    VMPIDR_EL2_t() { u = 0; }
    VMPIDR_EL2_t(uint64_t data) { u = data; }
    VMPIDR_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_vmpidr_el2_t;
#endif

#ifdef __cplusplus
union VPIDR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t implementer : 8;
        uint32_t variant : 4;
        uint32_t architecture : 4;
        uint32_t partnum : 12;
        uint32_t revision : 4;
#else
        uint32_t revision : 4;
        uint32_t partnum : 12;
        uint32_t architecture : 4;
        uint32_t variant : 4;
        uint32_t implementer : 8;
#endif
    } s;
#ifdef __cplusplus
    VPIDR_EL2_t() { u = 0; }
    VPIDR_EL2_t(uint32_t data) { u = data; }
    VPIDR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_vpidr_el2_t;
#endif

#ifdef __cplusplus
union VTCR_EL2_t
#else
typedef union
#endif
{
    uint32_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32_t reserved_31 : 1;
        uint32_t reserved_23_30 : 8;
        uint32_t reserved_22 : 1;
        uint32_t reserved_21 : 1;
        uint32_t reserved_20 : 1;
        uint32_t vs : 1;
        uint32_t ps : 3;
        uint32_t tg0 : 2;
        uint32_t sh0 : 2;
        uint32_t orgn0 : 2;
        uint32_t irgn0 : 2;
        uint32_t sl0 : 2;
        uint32_t t0sz : 6;
#else
        uint32_t t0sz : 6;
        uint32_t sl0 : 2;
        uint32_t irgn0 : 2;
        uint32_t orgn0 : 2;
        uint32_t sh0 : 2;
        uint32_t tg0 : 2;
        uint32_t ps : 3;
        uint32_t vs : 1;
        uint32_t reserved_20 : 1;
        uint32_t reserved_21 : 1;
        uint32_t reserved_22 : 1;
        uint32_t reserved_23_30 : 8;
        uint32_t reserved_31 : 1;
#endif
    } s;
#ifdef __cplusplus
    VTCR_EL2_t() { u = 0; }
    VTCR_EL2_t(uint32_t data) { u = data; }
    VTCR_EL2_t &operator=(uint32_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_vtcr_el2_t;
#endif

#ifdef __cplusplus
union VTTBR_EL2_t
#else
typedef union
#endif
{
    uint64_t u;
    struct
    {
#if __BYTE_ORDER == __BIG_ENDIAN
        uint64_t vmid : 16;
        uint64_t baddr : 44;
        uint64_t reserved_0_3 : 4;
#else
        uint64_t reserved_0_3 : 4;
        uint64_t baddr : 44;
        uint64_t vmid : 16;
#endif
    } s;
#ifdef __cplusplus
    VTTBR_EL2_t() { u = 0; }
    VTTBR_EL2_t(uint64_t data) { u = data; }
    VTTBR_EL2_t &operator=(uint64_t data) { u = data; return *this; }
#endif
#ifdef __cplusplus
};
#else
} bdk_sys_vttbr_el2_t;
#endif
#endif
