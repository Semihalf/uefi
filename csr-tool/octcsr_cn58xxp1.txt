
 *
 * ASX_RX_PRT_EN = RGMII Port Enable
 *

     ==============================================================
     ASX(0..1)_RX_PRT_EN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<3:0>   PRT_EN   R/W      0x0         1         Port enable.  Must be set for Octane to receive    |   
                                                  RMGII traffic.  When this bit clear on a given    |
                                                  port, then the all RGMII cycles will appear as    |
                                                  inter-frame cycles.                               |                 
----------------------------------------------------------------------------------------------------
===

 *
 * ASX_TX_PRT_EN = RGMII Port Enable
 *

     ==============================================================
     ASX(0..1)_TX_PRT_EN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<3:0>   PRT_EN   R/W      0x0         1         Port enable.  Must be set for Octane to send       |   
                                                  RMGII traffic.   When this bit clear on a given   |
                                                  port, then all RGMII cycles will appear as        |
                                                  inter-frame cycles.                               |
----------------------------------------------------------------------------------------------------
===

 *
 * ASX_INT_REG = Interrupt Register
 *

     ==============================================================
     ASX(0..1)_INT_REG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:12> RSVRD    RAZ      NS          NS        Reserved                                           |   
<11:8>  TXPSH    R/W1C    0x0         0         TX FIFO overflow on RMGII port                     |   
<7:4>   TXPOP    R/W1C    0x0         0         TX FIFO underflow on RMGII port                    |   
<3:0>   OVRFLW   R/W1C    0x0         0         RX FIFO overflow on RMGII port                     |   
----------------------------------------------------------------------------------------------------
===

 *
 * ASX_INT_EN = Interrupt Enable
 *

     ==============================================================
     ASX(0..1)_INT_EN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:12> RSVRD    RAZ      NS          NS        Reserved                                           |   
<11:8>  TXPSH    R/W      0x0         1         TX FIFO overflow on RMGII port                     |   
<7:4>   TXPOP    R/W      0x0         1         TX FIFO underflow on RMGII port                    |   
<3:0>   OVRFLW   R/W      0x0         1         RX FIFO overflow on RMGII port                     |   
----------------------------------------------------------------------------------------------------
===

 *
 * ASX_RX_CLK_SET = RGMII Clock delay setting
 *

     ==============================================================
     ASX(0..1)_RX_CLK_SET(0..3) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   SETTING  R/W      0x18        0         Setting to place on the open-loop RXC delay line   |   

Notes:

 Setting to place on the open-loop RXC (RGMII receive clk)
 delay line, which can delay the recieved clock. This
 can be used if the board and/or transmitting device
 has not otherwise delayed the clock.

 A value of SETTING=0 disables the delay line. The delay
 line should be disabled unless the transmitter or board
 does not delay the clock.

 Note that this delay line provides only a coarse control
 over the delay. Generally, it can only reliably provide
 a delay in the range 1.25-2.5ns, which may not be adequate
 for some system applications.

 The open loop delay line selects
 from among a series of tap positions. Each incremental
 tap position adds a delay of 50ps to 135ps per tap, depending
 on the chip, its temperature, and the voltage.
 To achieve from 1.25-2.5ns of delay on the recieved
 clock, a fixed value of SETTING=24 may work.
 For more precision, we recommend the following settings
 based on the chip voltage:

    VDD           SETTING
  -----------------------------
    1.0             18
    1.05            19
    1.1             21
    1.15            22
    1.2             23
    1.25            24
    1.3             25
                                                  The reset value was changed to 24 from 16 in pass2|
----------------------------------------------------------------------------------------------------
===

 *
 * ASX_PRT_LOOP = Internal Loopback mode - TX FIFO output goes into RX FIFO (and maybe pins)
 *

     ==============================================================
     ASX(0..1)_PRT_LOOP Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<7:4>   EXT_LOOP R/W      0x0         0         External Loopback Enable                           |   
                                                  0 = No Loopback (TX FIFO is filled by RMGII)      |
                                                  1 = RX FIFO drives the TX FIFO                    |
                                                      - GMX_PRT_CFG[DUPLEX] must be 1 (FullDuplex)  |
                                                      - GMX_PRT_CFG[SPEED] must be 1  (GigE speed)  |
                                                      - core clock > 250MHZ                         |
                                                      - rxc must not deviate from the +-50ppm       |
                                                      - if txc>rxc, idle cycle may drop over time   |
<3:0>   INT_LOOP R/W      0x0         0         Internal Loopback Enable                           |   
                                                  0 = No Loopback (RX FIFO is filled by RMGII pins) |
                                                  1 = TX FIFO drives the RX FIFO                    |
                                                  Note, in internal loop-back mode, the RGMII link  |
                                                  status is not used (since there is no real PHY).  |
                                                  Software cannot use the inband status.            |
----------------------------------------------------------------------------------------------------
===

 *
 * ASX_TX_CLK_SET = RGMII Clock delay setting
 *

     ==============================================================
     ASX(0..1)_TX_CLK_SET(0..3) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   SETTING  R/W      0x18        0         Setting to place on the open-loop TXC delay line   |   

Notes:

 Setting to place on the open-loop TXC (RGMII transmit clk)
 delay line, which can delay the transmited clock. This
 can be used if the board and/or transmitting device
 has not otherwise delayed the clock.

 A value of SETTING=0 disables the delay line. The delay
 line should be disabled unless the transmitter or board
 does not delay the clock.

 Note that this delay line provides only a coarse control
 over the delay. Generally, it can only reliably provide
 a delay in the range 1.25-2.5ns, which may not be adequate
 for some system applications.

 The open loop delay line selects
 from among a series of tap positions. Each incremental
 tap position adds a delay of 50ps to 135ps per tap, depending
 on the chip, its temperature, and the voltage.
 To achieve from 1.25-2.5ns of delay on the recieved
 clock, a fixed value of SETTING=24 may work.
 For more precision, we recommend the following settings
 based on the chip voltage:

    VDD           SETTING
  -----------------------------
    1.0             18
    1.05            19
    1.1             21
    1.15            22
    1.2             23
    1.25            24
    1.3             25
----------------------------------------------------------------------------------------------------
===

 *
 * ASX_TX_COMP_BYP = RGMII Clock delay setting
 *

     ==============================================================
     ASX(0..1)_TX_COMP_BYP Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:13> RSVRD    RAZ      NS          NS        Reserved                                           |   
<12:8>  PCTL     R/W      0x9         9         PCTL Compensation Value (see Duke)                 |   
<7:5>   RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   NCTL     R/W      0x6         6         NCTL Compensation Value (see Duke)                 |   
----------------------------------------------------------------------------------------------------
===

 *
 * ASX_TX_HI_WATER = RGMII TX FIFO Hi WaterMark
 *

     ==============================================================
     ASX(0..1)_TX_HI_WATER(0..3) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<3:0>   MARK     R/W      0x0         0         TX FIFO HiWatermark to stall GMX                   |   
                                                  Value of 0 maps to 16                             |
                                                  Reset value changed from 10 in pass1              |
                                                  Pass1 settings (assuming 125 tclk)                |
                                                  325-375: 12                                       |
                                                  375-437: 11                                       |
                                                  437-550: 10                                       |
                                                  550-687:  9                                       |
----------------------------------------------------------------------------------------------------
===

 * ASX_RLD_DATA_DRV

     ==============================================================
     ASX(0..1)_RLD_DATA_DRV Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<7:4>   PCTL     R/W      0x0         NA        These bits specify a driving strength (positive    |   
                                                  integer) for the RLD I/Os when the built-in
                                                  compensation circuit is bypassed.
<3:0>   NCTL     R/W      0x0         NA        These bits specify a driving strength (positive    |   
                                                  integer) for the RLD I/Os when the built-in
                                                  compensation circuit is bypassed.
----------------------------------------------------------------------------------------------------
===


 * ASX_RLD_COMP

     ==============================================================
     ASX(0..1)_RLD_COMP Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:9>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<8:4>   PCTL     RO       0x0         NA        PCTL Compensation Value                            |   
                                                 These bits reflect the computed compensation       |   
                                                  values from the built-in compensation circuit.    |
<3:0>   NCTL     RO       0x0         NA        These bits reflect the computed compensation       |   
                                                  values from the built-in compensation circuit.    |
----------------------------------------------------------------------------------------------------
===

 * ASX_RLD_PCTL_STRONG

     ==============================================================
     ASX(0..1)_RLD_PCTL_STRONG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   PCTL     R/W      0x0         NA        Duke's drive control                               |   
----------------------------------------------------------------------------------------------------
===

 * ASX_RLD_NCTL_STRONG

     ==============================================================
     ASX(0..1)_RLD_NCTL_STRONG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   NCTL     R/W      0x0         NA        Duke's drive control                               |   
----------------------------------------------------------------------------------------------------
===

 * ASX_RLD_PCTL_WEAK

     ==============================================================
     ASX(0..1)_RLD_PCTL_WEAK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   PCTL     R/W      0x0         NA        UNUSED (not needed for O9N)                        |   
----------------------------------------------------------------------------------------------------
===

 * ASX_RLD_NCTL_WEAK

     ==============================================================
     ASX(0..1)_RLD_NCTL_WEAK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   NCTL     R/W      0x0         NA        UNUSED (not needed for O9N)                        |   
----------------------------------------------------------------------------------------------------
===

 * ASX_RLD_BYPASS

     ==============================================================
     ASX(0..1)_RLD_BYPASS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<0>     BYPASS   R/W      0x0         NA        When set, the rld_dll setting is bypassed with     |   
                                                  ASX_RLD_BYPASS_SETTING                            |
----------------------------------------------------------------------------------------------------
===

 * ASX_RLD_BYPASS_SETTING

     ==============================================================
     ASX(0..1)_RLD_BYPASS_SETTING Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   SETTING  R/W      0x0         NA        The rld_dll setting bypass value                   |   
----------------------------------------------------------------------------------------------------
===

 * ASX_RLD_SETTING

     ==============================================================
     ASX(0..1)_RLD_SETTING Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:13> RSVRD    RAZ      NS          NS        Reserved                                           |   
<12:8>  DFASET   RO       NS          NA        RLD ClkGen DLL Setting(debug)                      |   
                                                 ** NEW O9N **
<7>     DFALAG   RO       NS          NA        RLD ClkGen DLL Lag Error(debug)                    |   
                                                 ** NEW O9N **
<6>     DFALEAD  RO       NS          NA        RLD ClkGen DLL Lead Error(debug)                   |   
                                                 ** NEW O9N **
<5>     DFALOCK  RO       NS          NA        RLD ClkGen DLL Lock acquisition(debug)             |   
                                                 ** NEW O9N **
<4:0>   SETTING  RO       NS          NA        RLDCK90 DLL Setting(debug)                         |   
----------------------------------------------------------------------------------------------------
===


 * ASX_DBG_DATA_ENABLE

     ==============================================================
     ASX0_DBG_DATA_ENABLE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<0>     EN       R/W      0x1         NA        A 1->0 transistion, turns the dbg interface OFF.   |   
----------------------------------------------------------------------------------------------------
===

 * ASX_DBG_DATA_DRV

     ==============================================================
     ASX0_DBG_DATA_DRV Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:9>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<8:4>   PCTL     R/W      0x1f        NA        These bits control the driving strength of the dbg |   
                                                  interface.                                        |
<3:0>   NCTL     R/W      0xf         NA        These bits control the driving strength of the dbg |   
                                                  interface.                                        |
----------------------------------------------------------------------------------------------------
===

 * Specify the RSL base addresses for the block
 *
 *                  DFA_CFG = DFA Configuration
 *
 * Description: 
 *

     ==============================================================
     DFA_CFG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     SARB      R/W       1      1        DFA Source Arbiter Mode                                   
                                            Selects the arbitration mode used to select DFA 
                                            requests issued from either CP2 or the DTE (NCB-CSR 
                                            or DFA HW engine).
                                                0: Fixed Priority [Highest=CP2, Lowest=DTE]
                                                1: Round-Robin 
                                            NOTE: This should only be written to a different value
                                            during power-on SW initialization.

<1>     GXOR_ENA R/W       0      0         When set, the DTE Instruction IWORD0[GXOR]                
                                            field is used to 'scramble' the LLM address
                                            to lessen the effects of bank conflicts. 
                                            In 36-bit mode: The GXOR[7:0] 8-bit value is XORed 
                                            against the LLM address addr[9:2].
                                            In 18-bit mode: GXOR[6:0] 7-bit value is XORed against
                                            the LLM address addr[8:2]. (note: we don't address 
                                            scramble outside the mode's node space)
                                             
                                            NOTE: The DFA graphs MUST BE built/written to DFA LLM memory
                                            aware of the "per-graph" address scramble.

                                            NOTE: The address 'scramble' ocurs for BOTH DFA LLM graph 
                                            read/write operations. 

<2>     NXOR_ENA R/W       0      0         When set, allows the DTE Instruction IWORD0[NXOREN]       
                                            to be used to enable/disable the per-node address 'scramble' 
                                            of the LLM address to lessen the effects of bank conflicts. 
                                            If IWORD0[NXOREN] is also set, then:
                                            In 36-bit mode: The node_Id[7:0] 8-bit value is XORed 
                                            against the LLM address addr[9:2].
                                            In 18-bit mode: The node_id[6:0] 7-bit value is XORed 
                                            against the LLM address addr[8:2]. (note: we don't address 
                                            scramble outside the mode's node space).

                                            NOTE: The DFA graphs MUST BE built/written to DFA LLM memory
                                            aware of the "per-node" address scramble.

                                            NOTE: The address 'scramble' ocurs for BOTH DFA LLM graph 
                                            read/write operations. 

<3>     NRPL_ENA R/W       0      0         When set, allows the per-node replication feature to be   
                                            enabled.
                                            In 36-bit mode: The IWORD0[31:30]=SNREPL field AND
                                            bits [21:20] of the Next Node ptr are used in generating
                                            the next node address (see OCTEON HRM - DFA Chapter for
                                            psuedo-code of DTE next node address generation).

                                            NOTE: When NRPL_ENA=1 and IWORD0[TY]=1(36b mode), 
                                            (regardless of IWORD0[NRPLEN]), the Resultant Word1+ 
                                            {[47:44],[23:20]} = Next Node's [27:20] bits. This allows 
                                            SW to use the RESERVED bits of the final node for SW 
                                            caching. Also, if required, SW will use [22:21]=Node 
                                            Replication to re-start the same graph walk(if graph
                                            walk prematurely terminated (ie: DATA_GONE). 

                                            In 18-bit mode: The IWORD0[31:30]=SNREPL field AND
                                            bit [16:14] of the Next Node ptr are used in generating
                                            the next node address (see OCTEON HRM - DFA Chapter for
                                            psuedo-code of DTE next node address generation).
                                            If (IWORD0[NREPLEN]=1 and DFA_CFG[NRPL_ENA]=1) {
                                               If next node ptr[16] is set {
                                                 next node ptr[15:14] indicates the next node repl
                                                 next node ptr[13:0]  indicates the position of the 
                                                    node relative to the first normal node (i.e.
                                                    IWORD3[Msize] must be added to get the final node)
                                               }
                                               else If next node ptr[16] is not set {
                                                 next node ptr[15:0] indicates the next node id
                                                 next node repl = 0
                                               }
                                            }
                                            NOTE: For 18b node replication, MAX node space=64KB(2^16)
                                            is used in detecting terminal node space(see HRM for full
                                            description). 

                                            NOTE: The DFA graphs MUST BE built/written to DFA LLM memory
                                            aware of the "per-node" replication.

<63:4>  NS        RAZ  NS          NS    RESERVED                                                     
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_MEMCFG0 = DFA Memory Configuration
 *
 * Description: 
 *

     ==============================================================
     DFA_MEMCFG0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     ENA_P1      R/W    1         1       Enable DFA RLDRAM Port#1                                 
                                             When enabled, this bit lets N3K be the default 
                                             driver for memory port #1.
                                             NOTE: a customer is at
                                             liberty to enable either Port#0 or Port#1 or both. 

                                             NOTE: Once a port has been disabled, it MUST NEVER
                                             be re-enabled. [the only way to enable a port is
                                             through a chip reset].

                                             NOTE: DFA Memory Port#1 corresponds to the Octeon 
                                             RLD1_* pins.

<1>     ENA_P0      R/W    1         1       Enable DFA RLDRAM Port#0                                 
                                             When enabled, this bit lets N3K be the default 
                                             driver for memory port #0. 
                                             NOTE: a customer is at
                                             liberty to enable either Port#0 or Port#1 or both. 

                                             NOTE: Once a port has been disabled, it MUST NEVER
                                             be re-enabled. [the only way to enable a port is
                                             through a chip reset].

                                             NOTE: DFA Memory Port#0 corresponds to the Octeon 
                                             RLD0_* pins.

<2>     NS            RAZ  NS        NS      RESERVED                                                 

<3>     MTYPE         R/W  0x0       0x0     FCRAM-II Memory Type                                     
                                             *** O9N UNSUPPORTED ***                                   

<5:4>   SIL_LAT       R/W  0x0       0x0     Silo Latency (#dclks): On reads, determines how many     
                                             additional dclks to wait (on top of tRL+1) before
                                             pulling data out of the padring silos used for time
                                             domain boundary crossing. 
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
<9:6>   RW_DLY        R/W  0x1       0x1     Read->Write CMD Delay (#mclks):                          
                                             Determines #mclk cycles to insert when controller
                                             switches from read to write. This allows programmer
                                             to control the data bus contention. 

                                             For RLDRAM-II(BL2): (TBL=1)

                                             RW_DLY = ROUND_UP[((TRL+TBL)*2 + TSKW + BPRCH+2)/2] - TWL + 1

                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization. 

                                             NOTE: For aggressive(performance optimal) designs,
                                             the RW_DLY 'may' be tuned down(-1) if bus fight
                                             on R->W transitions is not pronounced.  

<13:10> WR_DLY        R/W  0x2       0x2     Write->Read CMD Delay (#mclks):                          
                                             Determines #mclk cycles to insert when controller
                                             switches from write to read. This allows programmer
                                             to control the data bus contention.

                                             For RLDRAM-II(BL2): (TBL=1)
 
                                             WR_DLY = ROUND_UP[((TWL+TBL)*2 - TSKW + FPRCH) / 2] - TRL + 1
 
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.

                                             NOTE: For aggressive(performance optimal) designs,
                                             the WR_DLY 'may' be tuned down(-1) if bus fight
                                             on W->R transitions is not pronounced.
 
<15:14> FPRCH         R/W  0x0       0x0     Tristate Enable (front porch) (#dclks)                   
                                             On reads, allows user to control the shape of the
                                             tristate disable front porch for the DQ data bus. 
                                             This parameter is also very dependent on the 
                                             RW_DLY and WR_DLY parameters and care must be 
                                             taken when programming these parameters to avoid 
                                             data bus contention. Valid range [0..2] 
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
<17:16> BPRCH         R/W  0x0       0x0     Tristate Enable (back porch) (#dclks)                    
                                             On reads, allows user to control the shape of the
                                             tristate disable back porch for the DQ data bus. 
                                             This parameter is also very dependent on the 
                                             RW_DLY and WR_DLY parameters and care must be 
                                             taken when programming these parameters to avoid 
                                             data bus contention. Valid range [0..2]   
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
<18>    BLEN          R/W  0x0       0x0     Device Burst Length  (0=2-burst/1=4-burst)               
                                             NOTE: RLDRAM-II MUST USE BLEN=0(2-burst)  
               
<21:19> PBUNK         R/W  0x2       0x2     Physical Bunk address bit pointer.                       
                                             Specifies which address bit within the Longword 
                                             Memory address MA[23:0] is used to determine the 
                                             chip selects.    
                                             [RLD_CS0_N corresponds to physical bunk #0, and 
                                             RLD_CS1_N corresponds to physical bunk #1].
                                               000: CS0_N = MA[19]/CS1_N = !MA[19]
                                               001: CS0_N = MA[20]/CS1_N = !MA[20]
                                               010: CS0_N = MA[21]/CS1_N = !MA[21]
                                               011: CS0_N = MA[22]/CS1_N = !MA[22]
                                               100: CS0_N = MA[23]/CS1_N = !MA[23]
                                               101-111: CS0_N = 0 /CS1_N = 1
                                                 
                                             Example(s): 
                                             To build out a 128MB DFA memory, 4x 32Mx9
                                             parts could be used to fill out TWO physical
                                             bunks (clamshell configuration). Each (of the 
                                             two) physical bunks contains 2x 32Mx9 = 16Mx36.
                                             Each RLDRAM device also contains 8 internal banks, 
                                             therefore the memory Address is 16M/8banks = 2M 
                                             addresses/bunk (2^21). In this case, MA[21] would
                                             select the physical bunk.
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
                                             be used to determine the Chip Select(s).
                                                           
<22>    R2R_PBUNK     R/W  0x1       0x1     When enabled, an additional command bubble is inserted   
                                             if back to back reads are issued to different physical
                                             bunks. This is to avoid DQ data bus collisions when 
                                             references cross between physical bunks. 
                                             [NOTE: the physical bunk address boundary is determined 
                                             by the PBUNK bit].
 
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization. 

<23>    INIT_P1      R/W  0         0        When a '1' is written (and the previous value was '0'),   
                                             the HW init sequence(s) for Memory Port #1 is 
                                             initiated. 

                                             NOTE: To initialize memory, SW must:
                                               1) Set up the DFA_MEMCFG0[CLKDIV] ratio for intended
                                                  RLDRAM operation. 
                                                    [legal values 0: DIV2 2: DIV3 3: DIV4]
                                               2) Write a '1' into BOTH the DFA_MEM_CFG0[RLDCK_RST] 
                                                  and DFA_MEM_CFG0[RLDQCK90_RST] field at
                                                  the SAME TIME. This step puts all three DLLs in 
                                                  SW reset (RLDCK, RLDCK90, RLDQK90 DLLs).
                                               3) Write a '0' into the DFA_MEM_CFG0[RLDCK_RST] field.
                                                  This step takes the RLDCK DLL out of soft-reset so
                                                  that the DLL can generate the RLDx_CK_H/L clock pins. 
                                               4) Wait 1ms (for RLDCK DLL to achieve lock)
                                               5) Write a '0' into DFA_MEM_CFG0[RLDQCK90_RST] field. 
                                                  This step takes the RLDCK90 DLL AND RLDQK90 DLL out 
                                                  of soft-reset. 
                                               6) Wait 1ms (for RLDCK90/RLDQK90 DLLs to achieve lock)
                                               7) Enable memory port(s) ENA_P0=1/ENA_P1=1
                                               8) Wait 100us (to ensure a stable clock 
                                                  to the RLDRAMs) - as per RLDRAM spec.
                                               - - - - - Hardware Initialization Sequence - - - - - 
                                               9) Setup the DFA_MEMCFG0[BUNK_INIT] for the bunk(s)
                                                  intended to be initialized.   
                                              10) Write a '1' to the corresponding INIT_Px which
                                                  will initiate a hardware initialization 
                                                  sequence to that'specific' port. 
                                              11) Wait (DFA_MEMCFG0[CLKDIV] * 32K) eclk cycles. 
                                                  [to ensure the HW init sequence has completed 
                                                  before writing to ANY of the DFA_MEM* registers]
                                               - - - - - Hardware Initialization Sequence - - - - - 
                                              12) Write the DFA_MEMCFG0[BUNK_INIT]=3 to enable 
                                                  refreshes to BOTH bunks. 

                                             NOTE: In some cases (where the address wires are routed 
                                             differently between the front and back 'bunks'), 
                                             SW will need to use DFA_MEMCFG0[BUNK_INIT] bits to 
                                             control the Hardware initialization sequence for a 
                                             'specific bunk'. In these cases, SW would setup the 
                                             BUNK_INIT and repeat Steps #9-11 for each bunk/port. 
                                           
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.                                                

                                             NOTE: DFA Memory Port#1 corresponds to the Octeon 
                                             RLD1_* pins.

<24>    INIT_P0      R/W  0         0        When a '1' is written (and the previous value was '0'),   
                                             the HW init sequence(s) for Memory Port #0 is 
                                             initiated.

                                             NOTE: To initialize memory, SW must:
                                               1) Set up the DFA_MEMCFG0[CLKDIV] ratio for intended
                                                  RLDRAM operation. 
                                                    [legal values 0: DIV2 2: DIV3 3: DIV4]
                                               2) Write a '1' into BOTH the DFA_MEM_CFG0[RLDCK_RST] 
                                                  and DFA_MEM_CFG0[RLDQCK90_RST] field at
                                                  the SAME TIME. This step puts all three DLLs in 
                                                  SW reset (RLDCK, RLDCK90, RLDQK90 DLLs).
                                               3) Write a '0' into the DFA_MEM_CFG0[RLDCK_RST] field.
                                                  This step takes the RLDCK DLL out of soft-reset so
                                                  that the DLL can generate the RLDx_CK_H/L clock pins. 
                                               4) Wait 1ms (for RLDCK DLL to achieve lock)
                                               5) Write a '0' into DFA_MEM_CFG0[RLDQCK90_RST] field. 
                                                  This step takes the RLDCK90 DLL AND RLDQK90 DLL out 
                                                  of soft-reset. 
                                               6) Wait 1ms (for RLDCK90/RLDQK90 DLLs to achieve lock)
                                               7) Enable memory port(s):  ENA_P0=1/ENA_P1=1
                                               8) Wait 100us (to ensure a stable clock 
                                                  to the RLDRAMs) - as per RLDRAM spec.
                                               - - - - - Hardware Initialization Sequence - - - - - 
                                               9) Setup the DFA_MEMCFG0[BUNK_INIT] for the bunk(s)
                                                  intended to be initialized.   
                                              10) Write a '1' to the corresponding INIT_Px which
                                                  will initiate a hardware initialization 
                                                  sequence to that'specific' port. 
                                              11) Wait (DFA_MEMCFG0[CLKDIV] * 32K) eclk cycles. 
                                                  [to ensure the HW init sequence has completed 
                                                  before writing to ANY of the DFA_MEM* registers]
                                               - - - - - Hardware Initialization Sequence - - - - - 
                                              12) Write the DFA_MEMCFG0[BUNK_INIT]=3 to enable 
                                                  refreshes to BOTH bunks. 

                                             NOTE: In some cases (where the address wires are routed 
                                             differently between the front and back 'bunks'), 
                                             SW will need to use DFA_MEMCFG0[BUNK_INIT] bits to 
                                             control the Hardware initialization sequence for a 
                                             'specific bunk'. In these cases, SW would setup the 
                                             BUNK_INIT and repeat Steps #9-11 for each bunk/port. 

                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
                                             NOTE: DFA Memory Port#0 corresponds to the Octeon 
                                             RLD0_* pins.

<26:25> BUNK_INIT     R/W  0x3      0x3      Controls the CS_N[1:0] during a) a HW Initialization      
                                             sequence (triggered by DFA_MEMCFG0[INIT_Px]) or 
                                             b) during a normal refresh sequence. If 
                                             the BNK_INIT[x]=1, the corresponding CS_N[x] is driven.  
 
                                             NOTE: This is required for DRAM used in a 
                                             clamshell configuration, since the address lines
                                             carry Mode Register write data that is unique
                                             per bunk(or clam). In a clamshell configuration, 
                                             The N3K A[x] pin may be tied into Clam#0's A[x] 
                                             and also into Clam#1's 'mirrored' address bit A[y] 
                                             (eg: Clam0 sees A[5] and Clam1 sees A[15]).      
                                             To support clamshell designs, SW must initiate 
                                             two separate HW init sequences for the two bunks
                                             (or clams) . Before each HW init sequence is triggered, 
                                             SW must preload the DFA_MEMRLD[22:0] with the data
                                             that will be driven onto the A[22:0] wires during
                                             an MRS mode register write.

                                             NOTE: After the final HW initialization sequence has 
                                             been triggered, SW must wait 64K eclks before writing
                                             the BUNK_INIT[1:0] field = 3'b11 (so that CS_N[1:0] is
                                             driven during refresh sequences in normal operation. 
                                               
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  

<27>   LPP_ENA        R/W  0         0       PP Linear Port Addressing Mode Enable                     
                                             When enabled, PP-core LLM accesses to the lower-512MB 
                                             LLM address space are sent to the single DFA port 
                                             which is enabled. NOTE: If LPP_ENA=1, only 
                                             one DFA RLDRAM port may be enabled for RLDRAM accesses 
                                             (ie: ENA_P0 and ENA_P1 CAN NEVER BOTH be set).
                                             PP-core LLM accesses to the upper-512MB LLM address 
                                             space are sent to the other 'disabled' DFA port.

                                             SW RESTRICTION: If LPP_ENA=1, then only one DFA port 
                                             may be enabled for RLDRAM accesses (ie: ENA_P0 and 
                                             ENA_P1 CAN NEVER BOTH be set).

                                             NOTE: This bit is used to allow PP-Core LLM accesses to a
                                             disabled port, such that each port can be sequentially 
                                             addressed (ie: disable LW address interleaving).

                                             Enabling this bit allows BOTH PORTs to be active and 
                                             sequentially addressable. The single port that is 
                                             enabled(ENA_Px) will respond to the low-512MB LLM address 
                                             space, and the other 'disabled' port will respond to the 
                                             high-512MB LLM address space. 

                                             Example usage: 
                                                - DFA RLD0 pins used for TCAM-FPGA(CP2 accesses) 
                                                - DFA RLD1 pins used for RLDRAM (DTE/CP2 accesses). 
                                             
                                             USAGE NOTE: 
                                             If LPP_ENA=1 and SW DOES NOT initialize the disabled port
                                             (ie: INIT_Px=0->1), then refreshes and the HW init 
                                             sequence WILL NOT occur for the disabled port.
                                             If LPP_ENA=1 and SW does initialize the disabled port
                                             (INIT_Px=0->1 with ENA_Px=0), then refreshes and
                                             the HW init sequence WILL occur to the disabled port.

<29:28> CLKDIV        R/W  0         0       RLDCLK Divisor Select                                     
                                                0: RLDx_CK_H/L = Core Clock /2
                                                1: RESERVED (must not be used)
                                                2: RLDx_CK_H/L = Core Clock /3
                                                3: RLDx_CK_H/L = Core Clock /4
                                             The DFA LLM interface(s) are tied to the core clock 
                                             frequency through this programmable clock divisor.  
                                             Examples: 
                                                Core Clock(MHz) | DFA-LLM Clock(MHz) | CLKDIV
                                               -----------------+--------------------+-------- 
                                                     800        |    400/(800-DDR)   |  /2
                                                    1000        |    333/(666-DDR)   |  /3
                                                     800        |    200/(400-DDR)   |  /4
                                                      
                                             NOTE: This value MUST BE programmed BEFORE doing a 
                                             Hardware init sequence (see: DFA_MEMCFG0[INIT_Px] bits). 
                                             *** NOTE: O9N PASS1 Addition

<30>    RLDCK_RST     R/W  0         0       RLDCK Zero Delay DLL(Clock Generator) SW Reset            
                                             When written with a '1' the RLDCK zero delay DLL is in 
                                             soft-reset. 
                                              
<31>    RLDQCK90_RST  R/W  0         0       RLDCK90 and RLDQK90 DLL SW Reset                          
                                             When written with a '1' the RLDCK90 and RLDQK90 DLL are 
                                             in soft-reset. 
                                              
<63:32> NS            RAZ  NS        NS      RESERVED                                                  
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_MEMCFG1 = RLDRAM Memory Timing Configuration
 *
 * Description: 
 *

     ==============================================================
     DFA_MEMCFG1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   REF_INT      R/W   3           3     Refresh Interval (represented in #of 512 dclk            
                                             increments). 
                                                  0000: RESERVED
                                                  0001: 1 * 512  = 512 dclks
                                                  ...  
                                                  1111: 15 * 512 = 7680 dclks 
                                             NOTE: For finer level of granularity, refer to 
                                             REF_INTLO[8:0] field.    

                                             For RLDRAM-II, each refresh interval will
                                             generate a burst of 8 AREF commands, one to each of 
                                             8 explicit banks (referenced using the RLD_BA[2:0] 
                                             pins.
                                             Example: For mclk=200MHz/dclk(400MHz=2.5ns): 
                                               64K AREF cycles required within tREF=32ms
                                                 trefint = tREF(ms)/(64K cycles/8banks)
                                                         = 32ms/8K = 3.9us = 3900ns
                                                 REF_INT = ROUND_DOWN[(trefint/dclk)/512]
                                                         = ROUND_DOWN[(3900/2.5)/512]
                                                         = 3 

                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
<5:4>   TSKW         R/W   0x0        0x0    Board Skew (represented in #dclks)                         
                                             Represents additional board skew of DQ/DQS. 
                                                 00: board-skew = 0 dclk
                                                 01: board-skew = 1 dclk
                                                 10: board-skew = 2 dclk
                                                 11: board-skew = 3 dclk

                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
<7:6>   SPARE        R/W   0x0        0x0    SPARE bits                                                 
 
<11:8>  TRL          R/W  0x6        0x6     Read Latency (represented in #mclks)                       
                                             see also: DFA_MEMRLD[RLCFG] field which must
                                             correspond with tRL/tWL parameter(s).  
                                                  0000-0010: RESERVED 
                                                  0011: Read Latency = 3 mclks
                                                  0100: Read Latency = 4 mclks
                                                  0101: Read Latency = 5 mclks
                                                  0110: Read Latency = 6 mclks
                                                  0111: Read Latency = 7 mclks
                                                  1000: Read Latency = 8 mclks
                                                  1001: Read Latency = 9 mclks
                                                  1010: Read Latency = 10 mclks
                                                  1011-1111: RESERVED

                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
<15:12>  TWL          R/W   7           7    Write Latency (represented in #mclks)                       
                                             see also: DFA_MEMRLD[RLCFG] field which must
                                             correspond with tRL/tWL parameter(s).  
                                                  0000-0001: RESERVED 
                                                  0010: Write Latency (WL=2.0 mclk)
                                                  0011: Write Latency (WL=3.0 mclks)
                                                  0100: Write Latency (WL=4.0 mclks)
                                                  0101: Write Latency (WL=5.0 mclks)
                                                  0110: Write Latency (WL=6.0 mclks)
                                                  0111: Write Latency (WL=7.0 mclks) 
                                                  1000: Write Latency (WL=8.0 mclks) 
                                                  1001: Write Latency (WL=9.0 mclks) 
                                                  1010: Write Latency (WL=10.0 mclks) 
                                                  1011-1111: RESERVED

                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  

<19:16>   TRC        R/W   6           6     Row Cycle Time (represented in #mclks)                     
                                             see also: DFA_MEMRLD[RLCFG] field which must
                                             correspond with tRL/tWL parameter(s).  
                                                  0000-0010: RESERVED
                                                  0011: tRC = 3 mclks
                                                  0100: tRC = 4 mclks
                                                  0101: tRC = 5 mclks
                                                  0110: tRC = 6 mclks
                                                  0111: tRC = 7 mclks
                                                  1000: tRC = 8 mclks
                                                  1001: tRC = 9 mclks
                                                  1010-1111: RESERVED

                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
  
<22:20>   TMRSC      R/W  6            6     Mode Register Set Cycle Time (represented in #mclks)      
                                                  000-001: RESERVED
                                                  010: tMRSC = 2 mclks 
                                                  011: tMRSC = 3 mclks
                                                  ...
                                                  111: tMRSC = 7 mclks

                                             NOTE: The device tMRSC parameter is a function of CL
                                             (which during HW initialization is not known. Its 
                                             recommended to load tMRSC(MAX) value to avoid timing
                                             violations. 
                                                 
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.
 
<23>      MRS_ENA    R/W  0            0     Mode Register Set Cycle Enable                            
                                             INTERNAL USE ONLY: 
                                             NOTE: This mode bit is ONLY intended to be used by
                                             low-level power-on initialization routines in the
                                             event that the hardware initialization routine  
                                             does not work. It allows SW to create MRS
                                             commands on the RLDRAM bus directly. 
                                             When this bit is set, ALL RLDRAM writes (issued by 
                                             a PP through the NCB or CP2) are converted to MRS 
                                             commands on the RLDRAM bus. The write-address is 
                                             presented on the A[20:0]/BA[2:0] pins (for which 
                                             the RLDRAM only interprets A[17:0]).
                                             When this bit is set, only writes are allowed
                                             and MUST use grepl=0 (1x). 

                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.

                                             NOTE: MRS_ENA and AREF_ENA are mutually exclusive
                                             (SW can set one or the other, but never both!)
                                          
                                             NOTE: MRS commands generated using this method target
                                             the 'addressed' bunk.

<24>      AREF_ENA    R/W  0            0    Auto Refresh Cycle Enable                                  
                                             INTERNAL USE ONLY: 
                                             NOTE: This mode bit is ONLY intended to be used by
                                             low-level power-on initialization routines in the
                                             event that the hardware initialization routine  
                                             does not work. It allows SW to create AREF
                                             commands on the RLDRAM bus directly. 
                                             When this bit is set, ALL RLDRAM writes (issued by 
                                             a PP through the NCB or CP2) are converted to AREF 
                                             commands on the RLDRAM bus. The write-address is 
                                             presented on the A[20:0]/BA[2:0] pins (for which 
                                             the RLDRAM only interprets BA[2:0]).
                                             When this bit is set, only writes are allowed
                                             and MUST use grepl=0 (1x). 

                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  

                                             NOTE: MRS_ENA and AREF_ENA are mutually exclusive
                                             (SW can set one or the other, but never both!)
     
                                             NOTE: AREF commands generated using this method target
                                             the 'addressed' bunk. 

<33:25> REF_INTLO    R/W   0           0     Burst Refresh Interval[8:0] (#dclks)                       
                                             For finer refresh interval granularity control.  
                                             This field provides an additional level of granularity
                                             for the refresh interval. It specifies the additional 
                                             #dclks [0...511] to be added to the REF_INT[3:0] field. 

                                             For RLDRAM-II: For dclk(400MHz=2.5ns): 
                                             Example: 64K AREF cycles required within tREF=32ms
                                                 trefint = tREF(ms)/(64K cycles/8banks)
                                                             = 32ms/8K = 3.9us = 3900ns
                                                 REF_INT[3:0] = ROUND_DOWN[(trefint/dclk)/512]
                                                              = ROUND_DOWN[(3900/2.5)/512]
                                                              = 3
                                                 REF_INTLO[8:0] = MOD[(trefint/dclk)/512]
                                                                = MOD[(3900/2.5)/512]
                                                                = 24

                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  

                                             *** NOTE: PASS2 Addition

<63:34>   NS         RAZ  NS           NS    RESERVED                                                   
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_MEMRLD = DFA RLDRAM MRS Register Values
 *
 * Description: 
 *

     ==============================================================
     DFA_MEMRLD Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<22:0>   MRSDAT   R/W    0x000002  0x000002  This field represents the data driven onto the              
                                             A[22:0] address lines during MRS(Mode Register Set)
                                             commands (during a HW init sequence). This field 
                                             corresponds with the Mode Register Bit Map from 
                                             your RLDRAM-II device specific data sheet.  
                                                A[17:10]: RESERVED
                                                A[9]:     ODT (on die termination)
                                                A[8]:     Impedance Matching  
                                                A[7]:     DLL Reset
                                                A[6]:     UNUSED
                                                A[5]:     Address Mux  (for N3K: MUST BE ZERO)
                                                A[4:3]:   Burst Length (for N3K: MUST BE ZERO)
                                                A[2:0]:   Configuration (see data sheet for
                                                          specific RLDRAM-II device). 
                                                   000-001: CFG=1 [tRC=4/tRL=4/tWL=5]
                                                   010:     CFG=2 [tRC=6/tRL=6/tWL=7]    
                                                   011:     CFG=3 [tRC=8/tRL=8/tWL=9] 
                                                   100-111: RESERVED                                            
                                              
                                              NOTE: For additional density, the RLDRAM-II parts
                                              can be 'clamshelled' (ie: two devices mounted on 
                                              different sides of the PCB board), since the BGA 
                                              pinout supports 'mirroring'.  
                                              To support a clamshell design, SW must preload
                                              the MRSDAT[22:0] with the proper A[22:0] pin mapping
                                              which is dependent on the 'selected' bunk/clam 
                                              (see also: DFA_MEMCFG0[BUNK_INIT] field).    

                                              NOTE: Care MUST BE TAKEN NOT to write to this register
                                              within 64K eclk cycles of a HW INIT (see: INIT_P0/INIT_P1).

                                              NOTE: This should only be written to a different value
                                              during power-on SW initialization.  
  
<63:23> NS        RAZ    NS        NS         RESERVED                                                  

----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_NCBCTL = DFA NCB CTL Register
 *
 * Description: 
 *

     ==============================================================
     DFA_NCBCTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     IMODE     R/W       1       1        NCB-Inbound Arbiter                                      
                                             (0=FP {LP=NRQ,HP=NRP}, 1=RR)
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
<1>     QMODE     R/W       1       1        NCB-NRQ Arbiter Mode                                     
                                             (0=Fixed Priority {LP=IRF,RWF,PRF,HP=GRF}/1=RR
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
<2>     PMODE     R/W       1       1        NCB-NRP Arbiter Mode                                     
                                             (0=Fixed Priority {LP=WQF,DFF,HP=RGF}/1=RR
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
<3>     DTMODE    R/W       1       1        DRF-DTE Arbiter Mode                                     
                                             DTE-DRF Arbiter (0=FP {LP=DTE[15],...,HP=DTE[0]},1=RR)
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
<4>     DCMODE    R/W       0       0        DRF-CRQ/DTE Arbiter Mode                                 
                                             DTE-DRF Arbiter (0=FP {LP=CRQ/HP=DTE},1=RR)
                                             NOTE: This should only be written to a different value
                                             during power-on SW initialization.  
 
<5>     SBDLCK    R/W       0       0        DFA Scoreboard LOCK Strobe                               
                                             For internal use only. (DFA Scoreboard debug)  
                                             When written with a '1', the DFA Scoreboard Debug
                                             registers (DFA_SBD_DBG[0-3]) are all locked down. 
                                             This allows SW to lock down the contents of the entire
                                             SBD for a single instant in time. All subsequent reads
                                             of the DFA scoreboard registers will return the data
                                             from that instant in time. 

<10:6>  SBDNUM    R/W       0       0        SBD Debug Entry#                                         
                                             For internal use only. (DFA Scoreboard debug)  
                                             Selects which one of 32 DFA Scoreboard entries is
                                             latched into the DFA_SBD_DBG[0-3] registers.  
                                              
<63:11>  NS        RAZ       NS      NS       RESERVED                                                
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_ERR = DFA ERROR Register
 *
 * Description: 
 *

     ==============================================================
     DFA_ERR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     CP2ECCENA R/W       0       0        PP-CP2 QW ECC Enable (for QW Mode transactions)          
                                             When set, 8bit QW ECC is enabled on all PP-generated 
                                             QW Mode read transactions, CP2SBE and
                                             CP2DBE may be set, and CP2SYN may be filled.
                                             NOTE: This signal must only be written to a different 
                                             value when there are no PP-CP2 transactions
                                             (preferrably during power-on software initialization). 
 
                                             NOTE: QW refers to a 64-bit LLM Load/Store (intiated
                                             by a processor core). LW refers to a 36-bit load/store.

<1>     CP2SBE    R/W1C     0       0        PP-CP2 Single Bit Error Corrected - Status bit           
                                             When set, a single bit error had been detected and
                                             corrected for a PP-generated QW Mode read 
                                             transaction.  
                                             If the CP2DBE=0, then the CP2SYN contains the 
                                             failing syndrome (used during correction). 

                                             Refer to CP2ECCENA.
 
                                             If the CP2SBINA had previously been enabled(set), 
                                             an interrupt will be posted. Software can clear 
                                             the interrupt by writing a 1 to this register bit. 

                                             See also: DFA_MEMFADR CSR which contains more data
                                             about the memory address/control to help isolate
                                             the failure. 
  
                                             NOTE: PP-generated LW Mode Read transactions 
                                             do not participate in ECC check/correct). 
 
<2>     CP2DBE    R/W1C     0       0        PP-CP2 Double Bit Error Detected - Status bit            
                                             When set, a double bit error had been detected
                                             for a PP-generated QW Mode read transaction. 
                                             The CP2SYN contains the failing syndrome.

                                              NOTE: PP-generated LW Mode Read transactions 
                                             do not participate in ECC check/correct). 

                                             Refer to CP2ECCENA.

                                             If the CP2DBINA had previously been enabled(set), 
                                             an interrupt will be posted. Software can clear 
                                             the interrupt by writing a 1 to this register bit. 
 
                                             See also: DFA_MEMFADR CSR which contains more data
                                             about the memory address/control to help isolate
                                             the failure.  
 
<3>     CP2SBINA  R/W       0       0        PP-CP2 Single Bit Error Interrupt Enable bit             
                                             When set, an interrupt is posted for any PP-generated 
                                             QW Mode read which encounters a single bit error
                                             (which is also corrected). 

                                             Refer to CP2SBE.
   
<4>     CP2DBINA  R/W       0       0        PP-CP2 Double Bit Error Interrupt Enable bit             
                                             When set, an interrupt is posted for any PP-generated 
                                             QW Mode read which encounters a double bit error.

                                             Refer to CP2DBE.
  
<12:5>  CP2SYN    RO        0       0        PP-CP2 QW ECC Failing 8bit Syndrome                      
                                             When CP2SBE or CP2DBE are set, this field contains
                                             the failing ECC 8b syndrome. 

                                             Refer to CP2ECCENA.

<13>    DTEECCENA R/W       0       0        DTE 29b ECC Enable (for 36b SIMPLE mode ONLY)            
                                             When set, 29b ECC is enabled on all DTE-generated 
                                             36b SIMPLE Mode read transactions. 
                                             NOTE: This signal must only be written to a different 
                                             value when there are no DFA thread engines active
                                             (preferrably during power-on software initialization).  

<14>    DTESBE    R/W1C     0       0        DTE 29b Single Bit Error Corrected - Status bit          
                                             When set, a single bit error had been detected and
                                             corrected for a DTE-generated 36b SIMPLE Mode read 
                                             transaction. 
                                             If the DTEDBE=0, then the DTESYN contains the 
                                             failing syndrome (used during correction).

                                             NOTE: DTE-generated 18b SIMPLE Mode Read 
                                             transactions do not participate in ECC check/correct).  
 
                                             If the DTESBINA had previously been enabled(set), 
                                             an interrupt will be posted. Software can clear 
                                             the interrupt by writing a 1 to this register bit. 
 
                                             See also: DFA_MEMFADR CSR which contains more data
                                             about the memory address/control to help isolate
                                             the failure.  
 
<15>    DTEDBE    R/W1C     0       0        DTE 29b Double Bit Error Detected - Status bit           
                                             When set, a double bit error had been detected
                                             for a DTE-generated 36b SIMPLE Mode read transaction. 
                                             The DTESYN contains the failing syndrome.
 
                                             If the DTEDBINA had previously been enabled(set), 
                                             an interrupt will be posted. Software can clear 
                                             the interrupt by writing a 1 to this register bit.
  
                                             See also: DFA_MEMFADR CSR which contains more data
                                             about the memory address/control to help isolate
                                             the failure.  
  
                                             NOTE: DTE-generated 18b SIMPLE Mode Read transactions 
                                             do not participate in ECC check/correct).  
 
<16>    DTESBINA  R/W       0       0        DTE 29b Single Bit Error Interrupt Enable bit            
                                             When set, an interrupt is posted for any DTE-generated 
                                             36b SIMPLE Mode read which encounters a single bit 
                                             error (which is also corrected). 
 
<17>    DTEDBINA  R/W       0       0        DTE 29b Double Bit Error Interrupt Enable bit            
                                             When set, an interrupt is posted for any DTE-generated 
                                             36b SIMPLE Mode read which encounters a double bit 
                                             error.
                                             
<24:18> DTESYN    RO        0       0        DTE 29b ECC Failing 6bit Syndrome                        
                                             When DTESBE or DTEDBE are set, this field contains
                                             the failing 7b ECC syndrome. 
 
<25>    DTEPARENA R/W       0       0        DTE Parity Error Enable (for 18b SIMPLE mode ONLY)       
                                             When set, all DTE-generated 18b SIMPLE Mode read
                                             transactions which encounter a parity error (across
                                             the 17b of data) are reported. 
                                             NOTE: This signal must only be written to a different 
                                             value when there are no DFA thread engines active
                                             (preferrably during power-on).  
 
<26>    DTEPERR   R/W1C     0       0        DTE Parity Error Detected (for 18b SIMPLE mode ONLY)     
                                             When set, all DTE-generated 18b SIMPLE Mode read
                                             transactions which encounter a parity error (across
                                             the 17b of data) are reported. 
 
<27>    DTEPINA   R/W       0       0        DTE Parity Error Interrupt Enable bit                    
                                             (for 18b SIMPLE mode ONLY).     
                                             When set, all DTE-generated 18b SIMPLE Mode read
                                             transactions which encounter a parity error (across
                                             the 17b of data) are reported.

<28>    CP2PARENA R/W       0       0        CP2 LW Mode Parity Error Enable                          
                                             When set, all PP-generated LW Mode read
                                             transactions which encounter a parity error (across
                                             the 36b of data) are reported. 
                                             NOTE: This signal must only be written to a different 
                                             value when there are no PP-CP2 transactions
                                             (preferrably during power-on software initialization). 

<29>    CP2PERR   R/W1C     0       0        PP-CP2 Parity Error Detected - Status bit                
                                             When set, a parity error had been detected for a 
                                             PP-generated LW Mode read transaction.  
 
                                             If the CP2PINA had previously been enabled(set), 
                                             an interrupt will be posted. Software can clear 
                                             the interrupt by writing a 1 to this register bit. 

                                             See also: DFA_MEMFADR CSR which contains more data
                                             about the memory address/control to help isolate
                                             the failure. 
   
<30>    CP2PINA   R/W       0       0        CP2 LW Mode Parity Error Interrupt Enable bit.           
                                             When set, all PP-generated LW Mode read
                                             transactions which encounter a parity error (across
                                             the 36b of data) are reported.
 
<31>    DBLOVF    R/W1C     0       0        Doorbell Overflow detected - Status bit                  
                                             When set, the 20b accumulated doorbell register      
                                             had overflowed (SW wrote too many doorbell requests). 
 
                                             If the DBLINA had previously been enabled(set), 
                                             an interrupt will be posted. Software can clear 
                                             the interrupt by writing a 1 to this register bit. 
 
                                             NOTE: Detection of a Doorbell Register overflow
                                             is a catastrophic error which may leave the DFA
                                             HW in an unrecoverable state.    
 
<32>    DBLINA    R/W       0       0        Doorbell Overflow Interrupt Enable bit.                  
                                             When set, doorbell overflow conditions are reported.
                                               
<63:33> NS        RAZ       NS      NS       RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_MEMFADR = RLDRAM Failing Address/Control Register
 *
 * Description: DFA Memory Failing Address/Control Error Capture information 
 * This register contains useful information to help in isolating an RLDRAM memory failure. 
 * NOTE: The first detected SEC/DED/PERR failure is captured in DFA_MEMFADR, however, a DED or PERR (which is
 * more severe) will always overwrite a SEC error. The user can 'infer' the source of the interrupt 
 * via the FSRC field.
 * NOTE: If DFA_MEMCFG2[DTECLKDIS]=1, the contents of this register are UNDEFINED. 
 *

     ==============================================================
     DFA_MEMFADR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<23:0>   MADDR    RO        0       0        Memory Address                                           
 
<26:24>  BNUM     RO        0       0        Memory Bank                                              
 
<27>     PNUM     RO        0       0        Memory Port                                              

                                             NOTE: the port id's are reversed
                                                PNUM==0 => port#1
                                                PNUM==1 => port#0
 
<29:28>  FSRC     RO        0       0        Fill-Source (0=NCB-DTE/1=NCB-CSR/2=RESERVED/3=PP-CP2)    
 
<38:30>  FDST     RO        0       0        Fill-Destination                                         
                                                FSRC[1:0]    | FDST[8:0]
                                                -------------+-------------------------------------
                                                 0(NCB-DTE)  | {fillstart,1'b0,WIDX(1),DMODE(1),DTE(5)}
                                                 1(NCB-CSR)  | {ncbSRC[8:0]}
                                                 3(CP2-PP)   | {2'b0,SIZE(1),INDEX(1),PP(4),FID(1)}
                                               where: 
                                                   DTE: DFA Thread Engine ID#
                                                   PP: Packet Processor ID# 
                                                   FID: Fill-ID# (unique per PP)
                                                   WIDX:  18b SIMPLE Mode (index)
                                                   DMODE: (0=18b SIMPLE/1=36b SIMPLE)
                                                   SIZE: (0=LW Mode access/1=QW Mode Access)
                                                   INDEX: (0=Low LW/1=High LW) 

                                             NOTE: QW refers to a 64-bit LLM Load/Store (intiated
                                             by a processor core). LW refers to a 36-bit load/store.
   
<63:39> NS        RAZ       NS      NS       RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_MEMFCR = FCRAM MRS Register(s) EMRS2[14:0], EMRS1[14:0], MRS[14:0]
 * *** O9N UNSUPPORTED ***
 *

     ==============================================================
     DFA_MEMFCR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<14:0>   MRS       R/W       0x0042  0x0042   FCRAM Memory Address[14:0] during MRS                   
                                              *** O9N UNSUPPORTED ***                                   
                                                A[6:4]=4  CAS LATENCY=4(default)
                                                A[3]=0    Burst Type(must be 0:Sequential)
                                                A[2:0]=2  Burst Length=4(default)        
<15>     NS        RAZ       NS      NS       RESERVED                                                
<30:16>  EMRS      R/W       0x0040  0x0040   Memory Address[14:0] during EMRS                        
                                              *** O9N UNSUPPORTED ***                                   
                                                A[0]=1: DLL Enabled)
<31>     NS        RAZ       NS      NS       RESERVED                                                
<46:32>  EMRS2     R/W       0x0000  0x0000   Memory Address[14:0] during EMRS2(for FCRAM-II+)        
                                              *** O9N UNSUPPORTED ***                                   
<63:47>  NS        RAZ       NS      NS       RESERVED                                                

NOTES: For FCRAM-II please consult your device's data sheet for further details: 
        MRS Definition: 
           A[13:8]=0   RESERVED  
           A[7]=0      TEST MODE     (N3K requires test mode 0:"disabled")
           A[6:4]      CAS LATENCY   (fully programmable - SW must ensure that the value programmed 
                                      into DFA_MEM_CFG0[TRL] corresponds with this value). 
           A[3]=0      BURST TYPE    (N3K requires 0:"Sequential" Burst Type)
           A[2:0]      BURST LENGTH  Burst Length [1:BL2/2:BL4] (N3K only supports BL=2,4)
                                        
                                         In BL2 mode(for highest performance), only 1/2 the phsyical
                                         memory is unique (ie: each bunk stores the same information).
                                         In BL4 mode(highest capacity), all of the physical memory
                                         is unique (ie: each bunk is uniquely addressable).  
        EMRS Definition: 
           A[13:12]    REFRESH MODE  (N3K Supports only 0:"Conventional" and 1:"Short" auto-refresh modes)
                                           
                                     (SW must ensure that the value programmed into DFA_MEMCFG2[REFSHORT] 
                                     is also reflected in the Refresh Mode encoding). 
           A[11:7]=0   RESERVED
           A[6:5]=2    STROBE SELECT (N3K supports only 2:"Unidirectional DS/QS" mode - the read capture 
                                     silos rely on a conditional QS strobe)
           A[4:3]      DIC(QS)       QS Drive Strength: fully programmable (consult your FCRAM-II data sheet) 
                                       [0: Normal Output Drive/1: Strong Output Drive/2: Weak output Drive]
           A[2:1]      DIC(DQ)       DQ Drive Strength: fully programmable (consult your FCRAM-II data sheet)
                                       [0: Normal Output Drive/1: Strong Output Drive/2: Weak output Drive] 
           A[0]        DLL           DLL Enable: Programmable [0:DLL Enable/1: DLL Disable]

        EMRS2 Definition: (for FCRAM-II+) 
           A[13:11]=0                RESERVED
           A[10:8]     ODTDS         On Die Termination (DS+/-)
                                        [0: ODT Disable /1: 15ohm termination /(2-7): RESERVED]
           A[7:6]=0    MBW           Multi-Bank Write: (N3K requires use of 0:"single bank" mode only)
           A[5:3]      ODTin         On Die Termination (input pin)
                                        [0: ODT Disable /1: 15ohm termination /(2-7): RESERVED]         
           A[2:0]      ODTDQ         On Die Termination (DQ)
                                        [0: ODT Disable /1: 15ohm termination /(2-7): RESERVED]
----------------------------------------------------------------------------------------------------
===

 *
 *                  DFA_SBD_DBG0 = DFA Scoreboard Debug #0 Register
 *
 * Description: When the DFA_NCBCTL[SBDLCK] bit is written '1', the contents of this register are locked down. 
 * Otherwise, the contents of this register are the 'active' contents of the DFA Scoreboard at the time of the
 * CSR read. 
 * VERIFICATION NOTE: Read data is unsafe. X's(undefined data) can propagate (in the behavioral model) 
 * on the reads unless the DTE Engine specified by DFA_NCBCTL[SBDNUM] has previously been assigned an 
 * instruction. 
 * 

     ==============================================================
     DFA_SBD_DBG0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0> SBD0       RO        NS       NS      DFA ScoreBoard #0 Data                                   
                                             For internal use only! (DFA Scoreboard Debug)
 
                                             [63:40] rptr[26:3]: Result Base Pointer
                                             [39:24] rwcnt[15:0] Cumulative Result Write Counter 
                                             [23]    lastgrdrsp: Last Gather-Rd Response
                                             [22]    wtgrdrsp: Waiting Gather-Rd Response
                                             [21]    wtgrdreq: Waiting for Gather-Rd Issue
                                             [20]    glvld: GLPTR/GLCNT Valid 
                                             [19]    cmpmark: Completion Marked Node Detected
                                             [18:17] cmpcode[1:0]: Completion Code 
                                                           [0=PDGONE/1=PERR/2=RFULL/3=TERM]
                                             [16]    cmpdet: Completion Detected
                                             [15]    wthdrwrcmtrsp: Waiting for HDR RWrCmtRsp
                                             [14]    wtlastwrcmtrsp: Waiting for LAST RESULT
                                                           RWrCmtRsp
                                             [13]    hdrwrreq: Waiting for HDR RWrReq
                                             [12]    wtrwrreq: Waiting for RWrReq
                                             [11]    wtwqwrreq: Waiting for WQWrReq issue 
                                             [10]    lastprdrspeot: Last Packet-Rd Response
                                             [9]     lastprdrsp: Last Packet-Rd Response
                                             [8]     wtprdrsp:  Waiting for PRdRsp EOT
                                             [7]     wtprdreq: Waiting for PRdReq Issue
                                             [6]     lastpdvld: PDPTR/PDLEN Valid 
                                             [5]     pdvld: Packet Data Valid
                                             [4]     wqvld: WQVLD
                                             [3]     wqdone: WorkQueue Done condition
                                                           a) WQWrReq issued(for WQPTR<>0) OR
                                                           b) HDR RWrCmtRsp completed)
                                             [2]     rwstf: Resultant write STF/P Mode
                                             [1]     pdldt: Packet-Data LDT mode
                                             [0]     gmode: Gather-Mode
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_SBD_DBG1 = DFA Scoreboard Debug #1 Register
 *
 * Description: When the DFA_NCBCTL[SBDLCK] bit is written '1', the contents of this register are locked down. 
 * Otherwise, the contents of this register are the 'active' contents of the DFA Scoreboard at the time of the
 * CSR read. 
 * VERIFICATION NOTE: Read data is unsafe. X's(undefined data) can propagate (in the behavioral model) 
 * on the reads unless the DTE Engine specified by DFA_NCBCTL[SBDNUM] has previously been assigned an 
 * instruction. 
 *

     ==============================================================
     DFA_SBD_DBG1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0> SBD1       RO        NS       NS      DFA ScoreBoard #1 Data                                   
                                             For internal use only! (DFA Scoreboard Debug)
 
                                             [63:61] wqptr[35:33]: Work Queue Pointer   
                                             [60:52] rptr[35:27]: Result Base Pointer
                                             [51:16] pdptr[35:0]: Packet Data Pointer
                                             [15:0]  pdcnt[15:0]: Packet Data Counter
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_SBD_DBG2 = DFA Scoreboard Debug #2 Register
 *
 * Description: When the DFA_NCBCTL[SBDLCK] bit is written '1', the contents of this register are locked down. 
 * Otherwise, the contents of this register are the 'active' contents of the DFA Scoreboard at the time of the
 * CSR read. 
 * VERIFICATION NOTE: Read data is unsafe. X's(undefined data) can propagate (in the behavioral model) 
 * on the reads unless the DTE Engine specified by DFA_NCBCTL[SBDNUM] has previously been assigned an 
 * instruction. 
 *

     ==============================================================
     DFA_SBD_DBG2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0> SBD2       RO        NS       NS      DFA ScoreBoard #2 Data                                   

                                             [63:49] wqptr[17:3]: Work Queue Pointer
                                             [48:16] rwptr[35:3]: Result Write Pointer             
                                             [15:0]  prwcnt[15:0]: Pending Result Write Counter
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_SBD_DBG3 = DFA Scoreboard Debug #3 Register
 *
 * Description: When the DFA_NCBCTL[SBDLCK] bit is written '1', the contents of this register are locked down. 
 * Otherwise, the contents of this register are the 'active' contents of the DFA Scoreboard at the time of the
 * CSR read. 
 * VERIFICATION NOTE: Read data is unsafe. X's(undefined data) can propagate (in the behavioral model) 
 * on the reads unless the DTE Engine specified by DFA_NCBCTL[SBDNUM] has previously been assigned an 
 * instruction. 
 *

     ==============================================================
     DFA_SBD_DBG3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0> SBD3       RO        NS       NS      DFA ScoreBoard #3 Data                                   
 
                                             [63:49] wqptr[32:18]: Work Queue Pointer
                                             [48:16] glptr[35:3]: Gather List Pointer
                                             [15:0]  glcnt[15:0]: Gather List Counter 
 
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_MEMCFG2 = DFA Memory Config Register #2 
 * *** NOTE: Pass2 Addition
 *
 * Description: Additional Memory Configuration CSRs to support FCRAM-II/II+ and Network DRAM-II
 *

     ==============================================================
     DFA_MEMCFG2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     FCRAM2P       R/W  0x0       0x0     FCRAM-II+ Mode Enable                                     
                                             *** O9N UNSUPPORTED ***                                   

<1>     MAXBNK        R/W  0x1       0x1     Maximum Banks per-device (used by the address mapper      
                                             when extracting address bits for the memory bank#. 
                                                0: 4 banks/device
                                                1: 8 banks/device 
                                             *** NOTE: PASS2 Addition

<3:2>   UA_START      R/W  0x1       0x1     FCRAM-II Upper Addres Start                               
                                             *** O9N UNSUPPORTED ***

<4>     REFSHORT      R/W  0x0       0x0     FCRAM Short Refresh Mode                                  
                                             *** O9N UNSUPPORTED ***
 
<9:5>   TRFC          R/W  0x9       0x9     FCRAM-II Refresh Interval                                 
                                             *** O9N UNSUPPORTED ***

<10>    SILRST       R/W   0           0     LLM-PHY Silo Reset                                         
                                             When a '1' is written (when the previous 
                                             value was a '0') causes the the LLM-PHY Silo read/write 
                                             pointers to be reset. 

                                             NOTE: SW MUST WAIT 400 dclks after the LAST HW Init
                                             sequence was launched (ie: INIT_START 0->1 CSR write),
                                             before the SILRST can be triggered (0->1). 

<11>    DTECLKDIS R/W      0           0     DFA DTE Clock Disable                                    
                                             When SET, the DFA clocks for DTE(thread engine) 
                                             operation are disabled. 

                                             NOTE: When SET, SW MUST NEVER issue ANY operations to 
                                             the DFA via the NCB Bus. All DFA Operations must be 
                                             issued solely through the CP2 interface. 
                                             *** NOTE: PASS2 Addition

                                             NOTE: When DTECLKDIS=1, if CP2 Errors are encountered
                                             (ie: CP2SBE, CP2DBE, CP2PERR), the DFA_MEMFADR CSR 
                                             does not reflect the failing address/ctl information. 

<63:12> NS        RAZ      NS          NS    RESERVED                                                 
 
----------------------------------------------------------------------------------------------------
===
 *
 *                    DFA_RODT_COMP_CTL = DFA RLD Compensation control (For read "on die termination")
 *

     ==============================================================
     DFA_RODT_COMP_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:17>  NS         RAZ     0x0     NS      RESERVED                                                   
<16>     ENABLE     R/W     0x0     NS      Read On Die Termination Enable                             
                                            (0=disable, 1=enable)                                    
<15:12>  NS         RAZ     0x0     NS      RESERVED                                                   
<11:8>   NCTL       R/W     0x0     NS      Compensation control bits                                  
<7:5>    NS         RAZ     0x0     NS      RESERVED                                                   
<4:0>    PCTL       R/W     0x0     NS      Compensation control bits                                  
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_BST0 = DFA Bist Status
 *
 * Description: 
 *

     ==============================================================
     DFA_BST0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>     PDF     RO       0           0       Bist Results for PDF[3:0] RAM(s)                      
                                                0: GOOD (or bist in progress/never run)
                                                1: BAD 
<15:4>    NS       RAZ      0           0       RESERVED                                             
<19:16>   RDF      RO       0           0       Bist Results for RDF[3:0] RAM(s)                     
                                                0: GOOD (or bist in progress/never run) 
                                                1: BAD
<63:20>   NS       RAZ      0           0       RESERVED                                             
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_BST1 = DFA Bist Status
 *
 * Description: 
 *

     ==============================================================
     DFA_BST1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<7:0>    P1_BRF   RO       0           0       Bist Results for P1_BRF RAM                           
                                                0: GOOD (or bist in progress/never run)
                                                1: BAD
 
<15:8>   P0_BRF   RO       0           0       Bist Results for P0_BRF RAM                           
                                                0: GOOD (or bist in progress/never run)
                                                1: BAD

<16>     P1_BWB   RO       0           0       Bist Results for P1_BWB RAM                           
                                                0: GOOD (or bist in progress/never run)
                                                1: BAD
 
<17>     P0_BWB   RO       0           0       Bist Results for P0_BWB RAM                           
                                                0: GOOD (or bist in progress/never run)
                                                1: BAD
 
<18>     CRF      RO       0           0       Bist Results for CRF RAM                              
                                                0: GOOD (or bist in progress/never run)
                                                1: BAD
 
<19>     NS       RAZ      0           0       RESERVED                                              
 
<20>     GFU      RO       0           0       Bist Results for GFU RAM                              
                                                0: GOOD (or bist in progress/never run)
                                                1: BAD
 
<21>     IFU      RO       0           0       Bist Results for IFU RAM                              
                                                0: GOOD (or bist in progress/never run)
                                                1: BAD

<22>     CRQ      RO       0           0       Bist Results for CRQ RAM                              
                                                0: GOOD (or bist in progress/never run)
                                                1: BAD
   
<63:23>  NS       RAZ      0           0       RESERVED                                              
                                                                                  
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_DBELL = DFA Doorbell Register
 *
 * Description: 
 *  NOTE: To write to the DFA_DBELL register, a device would issue an IOBST directed at the DFA with addr[34:33]=2'b00.
 *        To read the DFA_DBELL register, a device would issue an IOBLD64 directed at the DFA with addr[34:33]=2'b00.      
 * 
 *  NOTE: If DFA_CFG[DTECLKDIS]=1 (DFA-DTE clocks disabled), reads/writes to the DFA_DBELL register do not take effect. 
 *  NOTE: If FUSE[120]="DFA DTE disable" is blown, reads/writes to the DFA_DBELL register do not take effect. 
 * 

     ==============================================================
     DFA_DBELL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<19:0>  DBELL    R/W      0x0         NS        Represents the cumulative total of pending           
                                                 DFA instructions which SW has previously written 
                                                 into the DFA Instruction FIFO (DIF) in main memory. 
                                                 Each DFA instruction contains a fixed size 32B 
                                                 instruction word which is executed by the DFA HW. 
                                                 The DBL register can hold up to 1M-1 (2^20-1) 
                                                 pending DFA instruction requests. 

                                                 During a read (by SW), the 'most recent' contents
                                                 of the DFA_DBELL register are returned at the time
                                                 the NCB-INB bus is driven.

                                                 NOTE: Since DFA HW updates this register, its 
                                                 contents are unpredictable in SW. 

<63:20> NS       RAZ      NS          NS        RESERVED                                             
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_DIFRDPTR = DFA Instruction FIFO (DIF) RDPTR Register
 *
 * Description: 
 *  NOTE: To write to the DFA_DIFRDPTR register, a device would issue an IOBST directed at the DFA with addr[34:33]=2'b01.
 *        To read the DFA_DIFRDPTR register, a device would issue an IOBLD64 directed at the DFA with addr[34:33]=2'b01.
 *                                                 
 *  NOTE: If DFA_CFG[DTECLKDIS]=1 (DFA-DTE clocks disabled), reads/writes to the DFA_DIFRDPTR register do not take effect. 
 *  NOTE: If FUSE[120]="DFA DTE disable" is blown, reads/writes to the DFA_DIFRDPTR register do not take effect. 
 * 

     ==============================================================
     DFA_DIFRDPTR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<4:0>   NS       RAZ      NS          NS        RESERVED                                             
<35:5>  RDPTR    R/W      0x0         NS        Represents the 32B-aligned address of the current    
                                                 instruction in the DFA Instruction FIFO in main 
                                                 memory. The RDPTR must be seeded by software at 
                                                 boot time, and is then maintained thereafter 
                                                 by DFA HW. 

                                                 During the seed write (by SW), RDPTR[6:5]=0, 
                                                 since DFA instruction chunks must be 128B aligned.

                                                 During a read (by SW), the 'most recent' contents
                                                 of the RDPTR register are returned at the time
                                                 the NCB-INB bus is driven.

                                                 NOTE: Since DFA HW updates this register, its 
                                                 contents are unpredictable in SW (unless
                                                 its guaranteed that no new DoorBell register 
                                                 writes have occurred and the DoorBell register is
                                                 read as zero). 

<63:36> NS       RAZ      NS          NS        RESERVED                                             
----------------------------------------------------------------------------------------------------
===
 *
 *                  DFA_DIFCTL = DFA Instruction FIFO (DIF) Control Register
 *
 * Description: 
 *  NOTE: To write to the DFA_DIFCTL register, a device would issue an IOBST directed at the DFA with addr[34:33]=2'b11.
 *        To read the DFA_DIFCTL register, a device would issue an IOBLD64 directed at the DFA with addr[34:33]=2'b11.
 *                   
 *  NOTE: This register is intended to ONLY be written once (at power-up). Any future writes could 
 *  cause the DFA and FPA HW to become unpredictable. 
 * 
 *  NOTE: If DFA_CFG[DTECLKDIS]=1 (DFA-DTE clocks disabled), reads/writes to the DFA_DIFCTL register do not take effect. 
 *  NOTE: If FUSE[120]="DFA DTE disable" is blown, reads/writes to the DFA_DIFCTL register do not take effect. 
 * 

     ==============================================================
     DFA_DIFCTL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<8:0>  SIZE      R/W      0x3         NS        Represents the # of 32B instructions contained       
                                                 within each DFA instruction chunk. At Power-on,
                                                 SW will seed the SIZE register with a fixed 
                                                 chunk-size. (Must be at least 3)
                                                 DFA HW uses this field to determine the size
                                                 of each DFA instruction chunk, in order to: 
                                                    a) determine when to read the next DFA 
                                                       instruction chunk pointer which is 
                                                       written by SW at the end of the current 
                                                       DFA instruction chunk (see DFA description
                                                       of next chunk buffer Ptr for format). 
                                                    b) determine when a DFA instruction chunk
                                                       can be returned to the Free Page List
                                                       maintained by the FPA HW.
      
<11:9> POOL      R/W      0x0         NS        Represents the 3bit buffer pool-id  used by DFA HW   
                                                 when the DFA instruction chunk is recycled back
                                                 to the Free Page List maintained by the FPA HW 
                                                 (once the DFA instruction has been issued).

<19:12> DWBCNT   R/W      0x1         NS        Represents the # of cache lines in the instruction   
                                                 buffer that may be dirty and should not be 
                                                 written-back to memory when the instruction
                                                 chunk is returned to the Free Page list. 

                                                 NOTE: Typically SW will want to mark all DFA
                                                 Instruction memory returned to the Free Page list
                                                 as DWB (Don't WriteBack), therefore SW should
                                                 seed this register as: 
                                                   DFA_DIFCTL[DWBCNT] = (DFA_DIFCTL[SIZE] + 4)/4

<63:20> NS       RAZ      NS          NS        RESERVED                                             
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_FPF0_MARKS = FPA's Queue 0 Free Page FIFO Read Write Marks
 *
 * The high and low watermark register that determines when we write and read free pages from L2C
 * for Queue 0. The value of FPF_RD and FPF_WR should have at least a 33 diffrence. Recommend value
 * is FPF_RD == (FPA_FPF#_SIZE[FPF_SIZ] * .25) and FPF_WR == (FPA_FPF#_SIZE[FPF_SIZ] * .75) 
 *

     ==============================================================
     FPA_FPF0_MARKS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<11:0>  FPF_RD   R/W      0x40        0         When the number of free-page-pointers in a             
                                                 queue drops below this value amd there are                                        
                                                 free-page-pointers in DRAM, the FPA will                                                
                                                 read one page (32 pointers) from DRAM.                                            
                                                 This maximum value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-34. The min number
                                                 for this would be 16.
<23:12> FPF_WR   R/W      0xC4        0         When the number of free-page-pointers in a             
                                                  queue exceeds this value the FPA will write                                       
                                                  32-page-pointers of that queue to DRAM.
                                                 The MAX value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-2.
<63:24> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_FPF1_MARKS = FPA's Queue 1 Free Page FIFO Read Write Marks
 *
 * The high and low watermark register that determines when we write and read free pages from L2C
 * for Queue 1. The value of FPF_RD and FPF_WR should have at least a 33 diffrence. Recommend value
 * is FPF_RD == (FPA_FPF#_SIZE[FPF_SIZ] * .25) and FPF_WR == (FPA_FPF#_SIZE[FPF_SIZ] * .75) 
 *

     ==============================================================
     FPA_FPF1_MARKS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>  FPF_RD   R/W      0x40        0         When the number of free-page-pointers in a             
                                                  queue drops below this value amd there are                                      
                                                  free-page-pointers in DRAM, the FPA will                                             
                                                  read one page (32 pointers) from DRAM.                                               
                                                 This maximum value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-34. The min number
                                                 for this would be 16.
<21:11> FPF_WR   R/W      0xC4        0         When the number of free-page-pointers in a             
                                                  queue exceeds this value the FPA will write                                     
                                                  32-page-pointers of that queue to DRAM.                                              
                                                 The MAX value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-2.
<63:22> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_FPF2_MARKS = FPA's Queue 2 Free Page FIFO Read Write Marks
 *
 * The high and low watermark register that determines when we write and read free pages from L2C
 * for Queue 2. The value of FPF_RD and FPF_WR should have at least a 33 diffrence. Recommend value
 * is FPF_RD == (FPA_FPF#_SIZE[FPF_SIZ] * .25) and FPF_WR == (FPA_FPF#_SIZE[FPF_SIZ] * .75) 
 *

     ==============================================================
     FPA_FPF2_MARKS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>  FPF_RD   R/W      0x40        0         When the number of free-page-pointers in a             
                                                  queue drops below this value amd there are                                               
                                                  free-page-pointers in DRAM, the FPA will                                                 
                                                  read one page (32 pointers) from DRAM.                                                   
                                                 This maximum value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-34. The min number
                                                 for this would be 16.
<21:11> FPF_WR   R/W      0xC4        0         When the number of free-page-pointers in a             
                                                  queue exceeds this value the FPA will write                                              
                                                  32-page-pointers of that queue to DRAM.                                                  
                                                 The MAX value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-2.
<63:22> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_FPF3_MARKS = FPA's Queue 3 Free Page FIFO Read Write Marks
 *
 * The high and low watermark register that determines when we write and read free pages from L2C
 * for Queue 3. The value of FPF_RD and FPF_WR should have at least a 33 diffrence. Recommend value
 * is FPF_RD == (FPA_FPF#_SIZE[FPF_SIZ] * .25) and FPF_WR == (FPA_FPF#_SIZE[FPF_SIZ] * .75) 
 *

     ==============================================================
     FPA_FPF3_MARKS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>  FPF_RD   R/W      0x40        0         When the number of free-page-pointers in a             
                                                  queue drops below this value amd there are                                           
                                                  free-page-pointers in DRAM, the FPA will                                               
                                                  read one page (32 pointers) from DRAM.                                                 
                                                 This maximum value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-34. The min number
                                                 for this would be 16.
<21:11> FPF_WR   R/W      0xC4        0         When the number of free-page-pointers in a             
                                                  queue exceeds this value the FPA will write                                          
                                                  32-page-pointers of that queue to DRAM.                                                
                                                 The MAX value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-2.
<63:22> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_FPF4_MARKS = FPA's Queue 4 Free Page FIFO Read Write Marks
 *
 * The high and low watermark register that determines when we write and read free pages from L2C
 * for Queue 4. The value of FPF_RD and FPF_WR should have at least a 33 diffrence. Recommend value
 * is FPF_RD == (FPA_FPF#_SIZE[FPF_SIZ] * .25) and FPF_WR == (FPA_FPF#_SIZE[FPF_SIZ] * .75) 
 *

     ==============================================================
     FPA_FPF4_MARKS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>  FPF_RD   R/W       0x40        0        When the number of free-page-pointers in a             
                                                  queue drops below this value amd there are                                     
                                                  free-page-pointers in DRAM, the FPA will                                       
                                                  read one page (32 pointers) from DRAM.                                             
                                                 This maximum value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-34. The min number
                                                 for this would be 16.
<21:11> FPF_WR   R/W       0xC4        0        When the number of free-page-pointers in a             
                                                  queue exceeds this value the FPA will write                                    
                                                  32-page-pointers of that queue to DRAM.                                            
                                                 The MAX value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-2.
<63:22> NS       RAZ       NS          NS       Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_FPF5_MARKS = FPA's Queue 5 Free Page FIFO Read Write Marks
 *
 * The high and low watermark register that determines when we write and read free pages from L2C
 * for Queue 5. The value of FPF_RD and FPF_WR should have at least a 33 diffrence. Recommend value
 * is FPF_RD == (FPA_FPF#_SIZE[FPF_SIZ] * .25) and FPF_WR == (FPA_FPF#_SIZE[FPF_SIZ] * .75) 
 *

     ==============================================================
     FPA_FPF5_MARKS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>  FPF_RD   R/W       0x40        0        When the number of free-page-pointers in a             
                                                  queue drops below this value amd there are                                 
                                                  free-page-pointers in DRAM, the FPA will                                   
                                                  read one page (32 pointers) from DRAM.                                           
                                                 This maximum value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-34. The min number
                                                 for this would be 16.
<21:11> FPF_WR   R/W       0xC4        0        When the number of free-page-pointers in a             
                                                  queue exceeds this value the FPA will write                                
                                                  32-page-pointers of that queue to DRAM.                                          
                                                 The MAX value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-2.
<63:22> NS       RAZ       NS          NS       Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_FPF6_MARKS = FPA's Queue 6 Free Page FIFO Read Write Marks
 *
 * The high and low watermark register that determines when we write and read free pages from L2C
 * for Queue 6. The value of FPF_RD and FPF_WR should have at least a 33 diffrence. Recommend value
 * is FPF_RD == (FPA_FPF#_SIZE[FPF_SIZ] * .25) and FPF_WR == (FPA_FPF#_SIZE[FPF_SIZ] * .75) 
 *

     ==============================================================
     FPA_FPF6_MARKS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>   FPF_RD   R/W      0x40        0        When the number of free-page-pointers in a             
                                                  queue drops below this value amd there are                                         
                                                  free-page-pointers in DRAM, the FPA will                                               
                                                  read one page (32 pointers) from DRAM.                                                    
                                                 This maximum value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-34. The min number
                                                 for this would be 16.
<21:11>  FPF_WR   R/W      0xC4        0        When the number of free-page-pointers in a             
                                                  queue exceeds this value the FPA will write                                        
                                                  32-page-pointers of that queue to DRAM.                                                
                                                 The MAX value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-2.
<63:22>  NS       RAZ      NS          NS       Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_FPF7_MARKS = FPA's Queue 7 Free Page FIFO Read Write Marks
 *
 * The high and low watermark register that determines when we write and read free pages from L2C
 * for Queue 7. The value of FPF_RD and FPF_WR should have at least a 33 diffrence. Recommend value
 * is FPF_RD == (FPA_FPF#_SIZE[FPF_SIZ] * .25) and FPF_WR == (FPA_FPF#_SIZE[FPF_SIZ] * .75) 
 *

     ==============================================================
     FPA_FPF7_MARKS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>  FPF_RD    R/W     0x40        0         When the number of free-page-pointers in a             
                                                  queue drops below this value amd there are                                            
                                                  free-page-pointers in DRAM, the FPA will                                              
                                                  read one page (32 pointers) from DRAM.                                                
                                                 This maximum value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-34. The min number
                                                 for this would be 16.
<21:11> FPF_WR    R/W     0xC4        0         When the number of free-page-pointers in a             
                                                  queue exceeds this value the FPA will write                                           
                                                  32-page-pointers of that queue to DRAM.                                               
                                                 The MAX value for this field should be
                                                 FPA_FPF0_SIZE[FPF_SIZ]-2.
<63:22> NS        RAZ      NS         NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_INT_SUM = FPA's Interrupt Summary Register
 *
 * Contains the diffrent interrupt summary bits of the FPA.
 *

     ==============================================================
     FPA_INT_SUM Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     FED0_SBE R/W1C     0           0        Set when a Single Bit Error is detected in FPF0.       
<1>     FED0_DBE R/W1C     0           0        Set when a Double Bit Error is detected in FPF0.       
<2>     FED1_SBE R/W1C     0           0        Set when a Single Bit Error is detected in FPF1.       
<3>     FED1_DBE R/W1C     0           0        Set when a Double Bit Error is detected in FPF1.       
<4>     Q0_UND   R/W1C     0           0        Set when a Queue0 page count available goes            
                                                 negative.
<5>     Q0_COFF  R/W1C     0           0        Set when a Queue0 stack end tag is present and         
                                                 the count available is greater than pointers
                                                 present in the FPA.
<6>     Q0_PERR  R/W1C     0           0        Set when a Queue0 pointer read from the stack in       
                                                 the L2C does not have the FPA owner ship bit set.
<7>     Q1_UND   R/W1C     0           0        Set when a Queue0 page count available goes            
                                                 negative.
<8>     Q1_COFF  R/W1C     0           0        Set when a Queue0 stack end tag is present and         
                                                 the count available is greater than pointers
                                                 present in the FPA.
<9>     Q1_PERR  R/W1C     0           0        Set when a Queue0 pointer read from the stack in       
                                                 the L2C does not have the FPA owner ship bit set.
<10>    Q2_UND   R/W1C     0           0        Set when a Queue0 page count available goes            
                                                 negative.
<11>    Q2_COFF  R/W1C     0           0        Set when a Queue0 stack end tag is present and         
                                                 the count available is greater than than pointers
                                                 present in the FPA.
<12>    Q2_PERR  R/W1C     0           0        Set when a Queue0 pointer read from the stack in       
                                                 the L2C does not have the FPA owner ship bit set.
<13>    Q3_UND   R/W1C     0           0        Set when a Queue0 page count available goes            
                                                 negative.
<14>    Q3_COFF  R/W1C     0           0        Set when a Queue0 stack end tag is present and         
                                                 the count available is greater than than pointers
                                                 present in the FPA.
<15>    Q3_PERR  R/W1C     0           0        Set when a Queue0 pointer read from the stack in       
                                                 the L2C does not have the FPA owner ship bit set.
<16>    Q4_UND   R/W1C     0           0        Set when a Queue0 page count available goes            
                                                 negative.
<17>    Q4_COFF  R/W1C     0           0        Set when a Queue0 stack end tag is present and         
                                                 the count available is greater than than pointers
                                                 present in the FPA.
<18>    Q4_PERR  R/W1C     0           0        Set when a Queue0 pointer read from the stack in       
                                                 the L2C does not have the FPA owner ship bit set.
<19>    Q5_UND   R/W1C     0           0        Set when a Queue0 page count available goes            
                                                 negative.
<20>    Q5_COFF  R/W1C     0           0        Set when a Queue0 stack end tag is present and         
                                                 the count available is greater than than pointers
                                                 present in the FPA.
<21>    Q5_PERR  R/W1C     0           0        Set when a Queue0 pointer read from the stack in       
                                                 the L2C does not have the FPA owner ship bit set.
<22>    Q6_UND   R/W1C     0           0        Set when a Queue0 page count available goes            
                                                 negative.
<23>    Q6_COFF  R/W1C     0           0        Set when a Queue0 stack end tag is present and         
                                                 the count available is greater than than pointers
                                                 present in the FPA.
<24>    Q6_PERR  R/W1C     0           0        Set when a Queue0 pointer read from the stack in       
                                                 the L2C does not have the FPA owner ship bit set.
<25>    Q7_UND   R/W1C     0           0        Set when a Queue0 page count available goes            
                                                 negative.
<26>    Q7_COFF  R/W1C     0           0        Set when a Queue0 stack end tag is present and         
                                                 the count available is greater than than pointers
                                                 present in the FPA.
<27>    Q7_PERR  R/W1C     0           0        Set when a Queue0 pointer read from the stack in       
                                                 the L2C does not have the FPA owner ship bit set.
<63:28> NS       RAZ       NS          NS       Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_INT_ENB = FPA's Interrupt Enable
 *
 * The FPA's interrupt enable register.
 *

     ==============================================================
     FPA_INT_ENB Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     FED0_SBE R/W      0           0         When set (1) and bit 0 of the FPA_INT_SUM              
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<1>     FED0_DBE R/W      0           0         When set (1) and bit 1 of the FPA_INT_SUM              
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<2>     FED1_SBE R/W      0           0         When set (1) and bit 2 of the FPA_INT_SUM              
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<3>     FED1_DBE R/W      0           0         When set (1) and bit 3 of the FPA_INT_SUM              
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         

<4>     Q0_UND   R/W      0           0         When set (1) and bit 4 of the FPA_INT_SUM              
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<5>     Q0_COFF  R/W      0           0         When set (1) and bit 5 of the FPA_INT_SUM              
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<6>     Q0_PERR  R/W      0           0         When set (1) and bit 6 of the FPA_INT_SUM              
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<7>     Q1_UND   R/W      0           0         When set (1) and bit 7 of the FPA_INT_SUM              
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<8>     Q1_COFF  R/W      0           0         When set (1) and bit 8 of the FPA_INT_SUM              
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<9>     Q1_PERR  R/W      0           0         When set (1) and bit 9 of the FPA_INT_SUM              
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<10>    Q2_UND   R/W      0           0         When set (1) and bit 10 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<11>    Q2_COFF  R/W      0           0         When set (1) and bit 11 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<12>    Q2_PERR  R/W      0           0         When set (1) and bit 12 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<13>    Q3_UND   R/W      0           0         When set (1) and bit 13 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<14>    Q3_COFF  R/W      0           0         When set (1) and bit 14 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<15>    Q3_PERR  R/W      0           0         When set (1) and bit 15 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<16>    Q4_UND   R/W      0           0         When set (1) and bit 16 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<17>    Q4_COFF  R/W      0           0         When set (1) and bit 17 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<18>    Q4_PERR  R/W      0           0         When set (1) and bit 18 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<19>    Q5_UND   R/W      0           0         When set (1) and bit 19 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<20>    Q5_COFF  R/W      0           0         When set (1) and bit 20 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<21>    Q5_PERR  R/W      0           0         When set (1) and bit 21 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<22>    Q6_UND   R/W      0           0         When set (1) and bit 22 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<23>    Q6_COFF  R/W      0           0         When set (1) and bit 23 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<24>    Q6_PERR  R/W      0           0         When set (1) and bit 24 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<25>    Q7_UND   R/W      0           0         When set (1) and bit 25 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<26>    Q7_COFF  R/W      0           0         When set (1) and bit 26 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<27>    Q7_PERR  R/W      0           0         When set (1) and bit 27 of the FPA_INT_SUM             
                                                 register is asserted the FPA will assert an                                        
                                                 interrupt.                                                                         
<63:28> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_CTL_STATUS = FPA's Control/Status Register
 *
 * The FPA's interrupt enable register.
 *

     ==============================================================
     FPA_CTL_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<6:0>   MEM0_ERR R/W      0           0         Causes a flip of the ECC bit associated 38:32          
                                                 respective to bit 6:0 of this field, for FPF                                                
                                                 FIFO 0.                                                                                     
<13:7>  MEM1_ERR R/W      0           0         Causes a flip of the ECC bit associated 38:32          
                                                 respective to bit 6:0 of this field, for FPF                                                
                                                 FIFO 1.                                                                                     
<14>    ENB      R/W      0           0         Must be set to 1 AFTER writing all config registers    
                                                 and 10 cycles have past. If any of the config
                                                 register are written after writing this bit the
                                                 FPA may begin to operate incorrectly.
<15>    USE_STT  R/W      0           0         When clear '0' the FPA will use STT to store           
                                                 pointers to the L2C.
<16>    USE_LDT  R/W      0           0         When clear '0' the FPA will use LDT to load            
                                                 pointers from the L2C.
<17>    RESET    R/W      0           0         When set causes a reset of the FPA with the            
                                                 exception of the RSL.
<63:18> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_FPF0_SIZE = FPA's Queue 0 Free Page FIFO Size
 *
 * The number of page pointers that will be kept local to the FPA for this Queue. FPA Queues are
 * assigned in order from Queue 0 to Queue 7, though only Queue 0 through Queue x can be used.
 * The sum of the 8 (0-7) FPA_FPF#_SIZE registers must be limited to 2048.
 *

     ==============================================================
     FPA_FPF0_SIZE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<11:0>  FPF_SIZ  R/W      0x100       0         The number of entries assigned in the FPA FIFO         
                                                 (used to hold page-pointers) for this Queue.                                                     
                                                 The value of this register must divisable by 2,                                                  
                                                 and the FPA will ignore bit [0] of this register.                                                
                                                 The total of the FPF_SIZ field of the 8 (0-7)                                                    
                                                 FPA_FPF#_SIZE registers must not exceed 2048.                                            
                                                 After writing this field the FPA will need 10                                                    
                                                 core clock cycles to be ready for operation. The                                                 
                                                 assignment of location in the FPA FIFO must                                                      
                                                 start with Queue 0, then 1, 2, etc.
                                                 The number of useable entries will be FPF_SIZ-2.
<63:12> NS       RAZ      NS          NS        Reserved                                              
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_FPF@_SIZE = FPA's Queue 1-7 Free Page FIFO Size
 *
 * The number of page pointers that will be kept local to the FPA for this Queue. FPA Queues are
 * assigned in order from Queue 0 to Queue 7, though only Queue 0 through Queue x can be used.
 * The sum of the 8 (0-7) FPA_FPF#_SIZE registers must be limited to 2048.
 *

     ==============================================================
     FPA_FPF(1..7)_SIZE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>  FPF_SIZ  R/W      0x100       0         The number of entries assigned in the FPA FIFO         
                                                 (used to hold page-pointers) for this Queue.                                                
                                                 The value of this register must divisable by 2,                                             
                                                 and the FPA will ignore bit [0] of this register.                                           
                                                 The total of the FPF_SIZ field of the 8 (0-7)                                               
                                                 FPA_FPF#_SIZE registers must not exceed 2048.                                       
                                                 After writing this field the FPA will need 10                                               
                                                 core clock cycles to be ready for operation. The                                            
                                                 assignment of location in the FPA FIFO must                                                 
                                                 start with Queue 0, then 1, 2, etc.                                                         
                                                 The number of useable entries will be FPF_SIZ-2.
<63:11> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE@_PAGES_AVAILABLE = FPA's Queue 0-7 Free Page Available Register
 *
 * The number of page pointers that are available in the FPA and local DRAM.
 *

     ==============================================================
     FPA_QUE(0..7)_AVAILABLE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<28:0>  QUE_SIZ  RO       0x0         0         The number of free pages available in this Queue.      
<63:29> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_WART_CTL = FPA's WART Control
 *
 * Control and status for the WART block.
 *

     ==============================================================
     FPA_WART_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  CTL      R/W      NS          0         Control information.                                   
<63:16> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_WART_STATUS = FPA's WART Status
 *
 * Control and status for the WART block.
 *

     ==============================================================
     FPA_WART_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  STATUS   RO       0x0         0         Status information.                                    
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_BIST_STATUS = BIST Status of FPA Memories
 *
 * The result of the BIST run on the FPA memories.
 *

     ==============================================================
     FPA_BIST_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     FDR      RO       0x0         0         fpa_fdr  memory bist status.                           
<1>     FFR      RO       0x0         0         fpa_ffr  memory bist status.                           
<2>     FPF1     RO       0x0         0         fpa_fpf1 memory bist status.                           
<3>     FPF0     RO       0x0         0         fpa_fpf0 memory bist status.                           
<4>     FRD      RO       0x0         0         fpa_frd  memory bist status.                           
<63:5>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE0_PAGE_INDEX = FPA's Queue0 Page Index
 *
 * The present index page for queue 0 of the FPA.
 * This numbr reflests the number of pages of pointers that have been written to memory
 * for this queue.
 *

     ==============================================================
     FPA_QUE0_PAGE_INDEX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<24:0>  PG_NUM   RO       0x0         NS        Page number.                                           
<63:25> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE1_PAGE_INDEX = FPA's Queue1 Page Index
 *
 * The present index page for queue 1 of the FPA.
 * This numbr reflests the number of pages of pointers that have been written to memory
 * for this queue.
 *

     ==============================================================
     FPA_QUE1_PAGE_INDEX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<24:0>  PG_NUM   RO       0x0         NS        Page number.                                           
<63:25> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE2_PAGE_INDEX = FPA's Queue2 Page Index
 *
 * The present index page for queue 2 of the FPA.
 * This numbr reflests the number of pages of pointers that have been written to memory
 * for this queue.
 *

     ==============================================================
     FPA_QUE2_PAGE_INDEX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<24:0>  PG_NUM   RO       0x0         NS        Page number.                                           
<63:25> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE3_PAGE_INDEX = FPA's Queue3 Page Index
 *
 * The present index page for queue 3 of the FPA.
 * This numbr reflests the number of pages of pointers that have been written to memory
 * for this queue.
 *

     ==============================================================
     FPA_QUE3_PAGE_INDEX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<24:0>  PG_NUM   RO       0x0         NS        Page number.                                           
<63:25> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE4_PAGE_INDEX = FPA's Queue4 Page Index
 *
 * The present index page for queue 4 of the FPA.
 * This numbr reflests the number of pages of pointers that have been written to memory
 * for this queue.
 *

     ==============================================================
     FPA_QUE4_PAGE_INDEX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<24:0>  PG_NUM   RO       0x0         NS        Page number.                                           
<63:25> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE5_PAGE_INDEX = FPA's Queue5 Page Index
 *
 * The present index page for queue 5 of the FPA.
 * This numbr reflests the number of pages of pointers that have been written to memory
 * for this queue.
 *

     ==============================================================
     FPA_QUE5_PAGE_INDEX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<24:0>  PG_NUM   RO       0x0         NS        Page number.                                           
<63:25> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE6_PAGE_INDEX = FPA's Queue6 Page Index
 *
 * The present index page for queue 6 of the FPA.
 * This numbr reflests the number of pages of pointers that have been written to memory
 * for this queue.
 *

     ==============================================================
     FPA_QUE6_PAGE_INDEX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<24:0>  PG_NUM   RO       0x0         NS        Page number.                                           
<63:25> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE7_PAGE_INDEX = FPA's Queue7 Page Index
 *
 * The present index page for queue 7 of the FPA.
 * This numbr reflests the number of pages of pointers that have been written to memory
 * for this queue.
 *

     ==============================================================
     FPA_QUE7_PAGE_INDEX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<24:0>  PG_NUM   RO       0x0         NS        Page number.                                           
<63:25> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE_EXP = FPA's Queue# Expected Page Index
 *
 * When a INT_SUM[PERR#] occurs this will be latched with the expected value.
 * This is latched on the first error and will not latch again unitl all errors are cleared.
 *

     ==============================================================
     FPA_QUE_EXP Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<25:0>  EXP_INDX RO       0x0         NS        Expected page number read from memory.                 
<28:26> EXP_QUE  RO       0x0         NS        Expected fpa-queue-number read from memory.            
<31:29> RSVD     RO       0x0         0x7       Resered.                                               
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  FPA_QUE_ACT = FPA's Queue# Actual Page Index
 *
 * When a INT_SUM[PERR#] occurs this will be latched with the value read from L2C.
 * This is latched on the first error and will not latch again unitl all errors are cleared.
 *

     ==============================================================
     FPA_QUE_ACT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<25:0>  ACT_INDX RO       0x0         NS        Page number read from memory.                          
<28:26> ACT_QUE  RO       0x0         NS        FPA-queue-number read from memory.                     
<31:29> RSVD     RO       0x0         0x7       Resered.                                               
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===



 *
 * GMX_RX_INT_REG = Interrupt Register
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_INT_REG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:20> RSVRD    RAZ      NS          NS        Reserved                                           |   
<19>    PAUSE_DRP R/W1C   0x0         0         Pause packet was dropped due to full GMX RX FIFO   |   
<18>    PHY_DUPX R/W1C    0x0         0         Change in the RMGII inbound LinkDuplex             |   
<17>    PHY_SPD  R/W1C    0x0         0         Change in the RMGII inbound LinkSpeed              |   
<16>    PHY_LINK R/W1C    0x0         0         Change in the RMGII inbound LinkStatus             |   
<15>    IFGERR   R/W1C    0x0         0         Interframe Gap Violation                           |   
                                                  Does not necessarily indicate a failure           |
<14>    COLDET   R/W1C    0x0         0         Collision Detection                                |   
<13>    FALERR   R/W1C    0x0         0         False carrier error or extend error after slottime |   
<12>    RSVERR   R/W1C    0x0         0         RGMII reserved opcodes                             |   
<11>    PCTERR   R/W1C    0x0         0         Bad Preamble / Protocol                            |   
<10>    OVRERR   R/W1C    0x0         0         Internal Data Aggregation Overflow                 |   
                                                  This interrupt should never assert                |
<9>     NIBERR   R/W1C    0x0         0         Nibble error (hi_nibble != lo_nibble)              |   
<8>     SKPERR   R/W1C    0x0         0         Skipper error                                      |   
<7>     RCVERR   R/W1C    0x0         0         Frame was received with RMGII Data reception error |   
<6>     LENERR   R/W1C    0x0         0         Frame was received with length error               |   
<5>     ALNERR   R/W1C    0x0         0         Frame was received with an alignment error         |   
<4>     FCSERR   R/W1C    0x0         0         Frame was received with FCS/CRC error              |   
<3>     JABBER   R/W1C    0x0         0         Frame was received with length > sys_length        |   
<2>     MAXERR   R/W1C    0x0         0         Frame was received with length > max_length        |   
<1>     CAREXT   R/W1C    0x0         0         RGMII carrier extend error                         |   
<0>     MINERR   R/W1C    0x0         0         Frame was received with length < min_length        |   

Notes:

(1) exceptions will only be raised to the control processor if the
    corresponding bit in the GMX_RX_INT_EN register is set.

(2) exception conditions 10:0 can also set the rcv/opcode in the received
    packet's workQ entry.  The GMX_RX_FRM_CHK register provides a bit mask
    for configuring which conditions set the error.

(3) in half duplex operation, the expectation is that collisions will appear
    as either MINERR o r CAREXT errors.

(4) JABBER - An RX Jabber error indicates that a packet was received which
             is longer than the maximum allowed packet as defined by the
             system.  GMX will truncate the packet at the JABBER count.
             Failure to do so could lead to system instabilty.

(5) NIBERR - This error is illegal at 1000Mbs speeds
             (GMX_RX_PRT_CFG[SPEED]==0) and will never assert.
 
(6) MAXERR - for untagged frames, the total frame DA+SA+TL+DATA+PAD+FCS >
             GMX_RX_FRM_MAX.  For tagged frames, DA+SA+VLAN+TL+DATA+PAD+FCS
             > GMX_RX_FRM_MAX + 4*VLAN_VAL + 4*VLAN_STACKED.

(7) MINERR - total frame DA+SA+TL+DATA+PAD+FCS < GMX_RX_FRM_MIN.

(8) ALNERR - Indicates that the packet received was not an integer number of
             bytes.  If FCS checking is enabled, ALNERR will only assert if
             the FCS is bad.  If FCS checking is disabled, ALNERR will
             assert in all non-integer frame cases.

(9) Collisions - Collisions can only occur in half-duplex mode.  A collision
                 is assumed by the receiver when one of the following
                 conditions occur...

                 . frame < GMX_RX_FRM_MIN - MINERR
                 . carrier extend error   - CAREXT
                 . transfer ended before slottime (only 1000Mbs - in cases where SLOTTIME > GMX_RX_FRM_MIN) - COLDET

(A) LENERR - Length errors occur when the received packet does not match the
             length field.  LENERR is only checked for packets between 64
             and 1500 bytes.  For untagged frames, the length must exact
             match.  For tagged frames the length or length+4 must match.

(B) PCTERR - checks that the frame transtions from PREAMBLE=>SFD=>DATA.
             Does not check the number of PREAMBLE cycles.

(C) OVRERR - Not to be included in the HRM

             OVRERR is an architectural assertion check internal to GMX to
             make sure no assumption was violated.  In a correctly operating
             system, this interrupt can never fire.

             GMX has an internal arbiter which selects which of 4 ports to
             buffer in the main RX FIFO.  If we normally buffer 8 bytes,
             then each port will typically push a tick every 8 cycles - if
             the packet interface is going as fast as possible.  If there
             are four ports, they push every two cycles.  So that's the
             assumption.  That the inbound module will always be able to
             consume the tick before another is produced.  If that doesn't
             happen - that's when OVRERR will assert.

(D) In spi4 mode, all spi4 ports use prt0 for interrupt logging.
----------------------------------------------------------------------------------------------------
===

 * 
 * GMX_RX_INT_EN = Interrupt Enable
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_INT_EN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:20> RSVRD    RAZ      NS          NS        Reserved                                           |   
<19>    PAUSE_DRP R/W     0x0         0         Pause packet was dropped due to full GMX RX FIFO   |   
<18>    PHY_DUPX R/W      0x0         0         Change in the RMGII inbound LinkDuplex             |   
<17>    PHY_SPD  R/W      0x0         0         Change in the RMGII inbound LinkSpeed              |   
<16>    PHY_LINK R/W      0x0         0         Change in the RMGII inbound LinkStatus             |   
<15>    IFGERR   R/W      0x0         0         Interframe Gap Violation                           |   
<14>    COLDET   R/W      0x0         0         Collision Detection                                |   
<13>    FALERR   R/W      0x0         0         False carrier error or extend error after slottime |   
<12>    RSVERR   R/W      0x0         0         RGMII reserved opcodes                             |   
<11>    PCTERR   R/W      0x0         0         Bad Preamble / Protocol                            |   
<10>    OVRERR   R/W      0x0         0         Internal Data Aggregation Overflow                 |   
<9>     NIBERR   R/W      0x0         0         Nibble error (hi_nibble != lo_nibble)              |   
<8>     SKPERR   R/W      0x0         0         Skipper error                                      |   
<7>     RCVERR   R/W      0x0         0         Frame was received with RMGII Data reception error |   
<6>     LENERR   R/W      0x0         0         Frame was received with length error               |   
<5>     ALNERR   R/W      0x0         0         Frame was received with an alignment error         |   
<4>     FCSERR   R/W      0x0         0         Frame was received with FCS/CRC error              |   
<3>     JABBER   R/W      0x0         0         Frame was received with length > sys_length        |   
<2>     MAXERR   R/W      0x0         0         Frame was received with length > max_length        |   
<1>     CAREXT   R/W      0x0         0         RGMII carrier extend error                         |   
<0>     MINERR   R/W      0x0         0         Frame was received with length < min_length        |   

Notes:
In spi4 mode, all spi4 ports use prt0 for checking.
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_PRT_CFG = Port description
 *

     ==============================================================
     GMX(0..1)_PRT(0..3)_CFG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4> RSVRD     RAZ      NS          NS        Reserved                                           |   
<3>    SLOTTIME  R/W      0x1         NS        Slot Time for Half-Duplex operation                |   
                                                  0 = 512 bitimes (10/100Mbs operation)             |
                                                  1 = 4096 bitimes (1000Mbs operation)              |
<2>    DUPLEX    R/W      0x1         NS        Duplex                                             |   
                                                  0 = Half Duplex (collisions/extentions/bursts)    |
                                                  1 = Full Duplex                                   |
<1>    SPEED     R/W      0x1         NS        Link Speed                                         |   
                                                  0 = 10/100Mbs operation                           |
                                                      (GMX_TX_CLK[CLK_CNT] > 1)                     |
                                                  1 = 1000Mbs operation                             |
<0>    EN        R/W      0x0         NS        Link Enable                                        |   
                                                  When EN is clear, packets will not be received    |
                                                  or transmitted (including PAUSE and JAM packets). |
                                                  If EN is cleared while a packet is currently      |
                                                  being received or transmitted, the packet will    |
                                                  be allowed to complete before the bus is idled.   |
                                                  On the RX side, subsequent packets in a burst     |
                                                  will be ignored.                                  |
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_FRM_CTL = Frame Control
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_FRM_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:9>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<8>     PAD_LEN  R/W      0x0         0         When set, disables the length check for non-min    |   
                                                  sized pkts with padding in the client data        |
                                                  (PASS3 Only)                                      |
<7>     VLAN_LEN R/W      0x0         0         When set, disables the length check for VLAN pkts  |   
                                                  (PASS2 only)                                      |
<6>     PRE_FREE R/W      0x0         0         When set, PREAMBLE checking is  less strict.       |   
                                                  0 - 254 cycles of PREAMBLE followed by SFD        |
<5>     CTL_SMAC R/W      0x1         1         Control Pause Frames can match station SMAC        |   
<4>     CTL_MCST R/W      0x1         1         Control Pause Frames can match globally assign     |   
                                                  Multicast address                                 |
<3>     CTL_BCK  R/W      0x1         1         Forward pause information to TX block              |   
<2>     CTL_DRP  R/W      0x1         1         Drop Control Pause Frames                          |   
<1>     PRE_STRP R/W      0x1         1         Strip off the preamble (when present)              |   
                                                  0=PREAMBLE+SFD is sent to core as part of frame   |
                                                  1=PREAMBLE+SFD is dropped                         |
<0>     PRE_CHK  R/W      0x1         1         This port is configured to send PREAMBLE+SFD       |   
                                                  to begin every frame.  GMX checks that the        |
                                                  PREAMBLE is sent correctly                        |

Notes:
* PRE_CHK
  When set, the RGMII state expects a typical frame consisting of
  INTER_FRAME=>PREAMBLE(x7)=>SFD(x1)=>DAT.  The state machine watches for
  this exact sequence in order to recognize a valid frame and push frame
  data into the Octane.  There must be exactly 7 PREAMBLE cycles followed by
  the single SFD cycle for the frame to be accepted.

  When a problem does occur within the PREAMBLE seqeunce, the frame is
  marked as bad and not sent into the core.  The GMX_RX_INT_REG[PCTERR]
  interrupt is also raised.

* PRE_STRP
  When PRE_CFG is set (indicating that the PREAMBLE will be sent), PRE_STRP
  determines if the PREAMBLE+SFD bytes are thrown away or sent to the Octane
  core as part of the packet.

  In either mode, the PREAMBLE+SFD bytes are not counted toward the packet
  size when checking against the MIN and MAX bounds.  Furthermore, the bytes
  are skipped when locating the start of the L2 header for DMAC and Control
  frame recognition.

* CTL_BCK/CTL_DRP
  These bits control how the HW handles incoming PAUSE packets.  Here are
  the most common modes of operation:
    CTL_BCK=1,CTL_DRP=1   - HW does it all
    CTL_BCK=0,CTL_DRP=0   - SW sees all pause frames
    CTL_BCK=0,CTL_DRP=1   - all pause frames are completely ignored

  These control bits should be set to CTL_BCK=0,CTL_DRP=0 in halfdup mode.
  Since PAUSE packets only apply to fulldup operation, any PAUSE packet
  would constitute an exception which should be handled by the processing
  cores.  PAUSE packets should not be forwarded.
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_FRM_CHK = Which frame errors will set the ERR bit of the frame
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_FRM_CHK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:10> RSVRD    RAZ      NS          NS        Reserved                                           |   
<9>     NIBERR   R/W      0x1         1         Nibble error (hi_nibble != lo_nibble)              |   
<8>     SKPERR   R/W      0x1         1         Skipper error                                      |   
<7>     RCVERR   R/W      0x1         1         Frame was received with RMGII Data reception error |   
<6>     LENERR   R/W      0x1         1         Frame was received with length error               |   
<5>     ALNERR   R/W      0x1         1         Frame was received with an alignment error         |   
<4>     FCSERR   R/W      0x1         1         Frame was received with FCS/CRC error              |   
<3>     JABBER   R/W      0x1         1         Frame was received with length > sys_length        |   
<2>     MAXERR   R/W      0x1         1         Frame was received with length > max_length        |   
<1>     CAREXT   R/W      0x1         1         RGMII carrier extend error                         |   
<0>     MINERR   R/W      0x1         1         Frame was received with length < min_length        |   

Notes:
If GMX_RX_UDD_SKP[LEN] != 0, then LENERR will be forced to zero in HW.

In spi4 mode, all spi4 ports use prt0 for checking.
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_FRM_MIN = Frame Min length
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_FRM_MIN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  LEN      R/W      0x40        0x40      Byte count for Min-sized frame check               |   
                                                  GMX_RXn_FRM_CHK[MINERR] enables the check for     |
                                                  port n.                                           |
                                                  If enabled, failing packets set the MINERR        |
                                                  interrupt and work-queue entry WORD2[opcode] is   |
                                                  set to UNDER_FCS (0x6, if packet has bad FCS) or  |
                                                  UNDER_ERR (0x8, if packet has good FCS).          |

Notes:
In spi4 mode, all spi4 ports use prt0 for checking.
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_FRM_MAX = Frame Max length
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_FRM_MAX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  LEN      R/W      0x600       0x600     Byte count for Max-sized frame check               |   
                                                  GMX_RXn_FRM_CHK[MAXERR] enables the check for     |
                                                  port n.                                           |
                                                  If enabled, failing packets set the MAXERR        |
                                                  interrupt and work-queue entry WORD2[opcode] is   |
                                                  set to OVER_FCS (0x3, if packet has bad FCS) or   |
                                                  OVER_ERR (0x4, if packet has good FCS).           |
                                                  LEN =< GMX_RX_JABBER[CNT]                         |

Notes:
In spi4 mode, all spi4 ports use prt0 for checking.

When changing the LEN field, be sure that LEN does not exceed
GMX_RX_JABBER[CNT]. Failure to meet this constraint will cause packets that
are within the maximum length parameter to be rejected because they exceed
the GMX_RX_JABBER[CNT] limit.
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_JABBER = The max size packet after which GMX will truncate
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_JABBER Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  CNT      R/W      0x2800      0x2800    Byte count for jabber check                        |   
                                                  Failing packets set the JABBER interrupt and are  |
                                                  optionally sent with opcode==JABBER               |
                                                  GMX will truncate the packet to CNT bytes         |
                                                  CNT >= GMX_RX_FRM_MAX[LEN]                        |

Notes: 

  CNT must be 8-byte aligned such that CNT[2:0] == 0

  The packet that will be sent to the packet input logic will have an
  additionl 8 bytes if GMX_RX_FRM_CTL[PRE_CHK] is set and
  GMX_RX_FRM_CTL[PRE_STRP] is clear.  The max packet that will be sent is
  defined as...

       max_sized_packet = GMX_RX_JABBER[CNT]+((GMX_RX_FRM_CTL[PRE_CHK] & !GMX_RX_FRM_CTL[PRE_STRP])*8)

  Be sure the CNT field value is at least as large as the
  GMX_RX_FRM_MAX[LEN] value. Failure to meet this constraint will cause
  packets that are within the GMX_RX_FRM_MAX[LEN] length to be rejected
  because they exceed the CNT limit.

  In spi4 mode, all spi4 ports use prt0 for checking.
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_DECISION = The byte count to decide when to accept or filter a packet
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_DECISION Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   CNT      R/W      0x18        0x18      The byte count to decide when to accept or filter  |   
                                                   a packet.                                        |

Notes:
As each byte in a packet is received by GMX, the L2 byte count is compared
against the GMX_RX_DECISION[CNT].  The L2 byte count is the number of bytes
from the beginning of the L2 header (DMAC).  In normal operation, the L2
header begins after the PREAMBLE+SFD (GMX_RX_FRM_CTL[PRE_CHK]=1) and any
optional UDD skip data (GMX_RX_UDD_SKP[LEN]).

When GMX_RX_FRM_CTL[PRE_CHK] is clear, PREAMBLE+SFD are prepended to the
packet and would require UDD skip length to account for them.

Packets are only filtered in RGMII mode.  The GMX_RX_DECISION is not used in
Spi4 mode.

                                                L2 Size
Port Mode             <=GMX_RX_DECISION bytes (default=24)      >GMX_RX_DECISION bytes (default=24)

RGMII/Full Duplex     accept packet                             apply filters
                      no filtering is applied                   accept packet based on DMAC and PAUSE packet filters

RGMII/Half Duplex     drop packet                               apply filters
                      packet is unconditionally dropped         accept packet based on DMAC

Spi4                  no filtering                              no filtering
                      Spi4 packets are never filtered           Spi4 packets are never filtered

where l2_size = MAX(0, total_packet_size - GMX_RX_UDD_SKP[LEN] - ((GMX_RX_FRM_CTL[PRE_CHK]==1)*8)
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_UDD_SKP = Amount of User-defined data before the start of the L2 data
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_UDD_SKP Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:9> RSVRD     RAZ      NS          NS        Reserved                                           |   
<8>    FCSSEL    R/W      0x0         0         Include the skip bytes in the FCS calculation      |   
                                                  0 = all skip bytes are included in FCS            |
                                                  1 = the skip bytes are not included in FCS        |
<7>    RSVRD     RAZ      NS          NS        Reserved                                           |   
<6:0>  LEN       R/W      0x0         0         Amount of User-defined data before the start of    |   
                                                  the L2 data.  Zero means L2 comes first.          |
                                                  Max value is 64.                                  |

Notes:

(1) The skip bytes are part of the packet and will be sent down the NCB
    packet interface and will be handled by PKI.

(2) The system can determine if the UDD bytes are included in the FCS check
    by using the FCSSEL field - if the FCS check is enabled.

(3) Assume that the preamble/sfd is always at the start of the frame - even
    before UDD bytes.  In most cases, there will be no preamble in these
    cases since it will be RGMII to RGMII communication without a PHY
    involved.

(4) We can still do address filtering and control packet filtering is the
    user desires.
 
(5) UDD_SKP must be 0 in half-duplex operation unless
    GMX_RX_FRM_CTL[PRE_CHK] is clear.  If GMX_RX_FRM_CTL[PRE_CHK] is clear,
    then UDD_SKP will normally be 8.

(6) In all cases, the UDD bytes will be sent down the packet interface as
    part of the packet.  The UDD bytes are never stripped from the actual
    packet.

(7) If LEN != 0, then GMX_RX_FRM_CHK[LENERR] will be disabled and GMX_RX_INT_REG[LENERR] will be zero
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_STATS_CTL = RX Stats Control register
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_STATS_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1> RSVRD     RAZ      NS          NS        Reserved                                           |   
<0>    RD_CLR    R/W      0x0         0         RX Stats registers will clear on reads             |   
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_IFG = RX Min IFG
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_IFG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD     RAZ      NS         NS        Reserved                                           |   
<3:0>   IFG       R/W      0xC        12        Min IFG between packets used to determine IFGERR   |   
                                                  1000Mbs, IFG==0.096us or 12 clks                  |
                                                  100Mbs,  IFG==0.96us or 24 clks                   |
                                                  10Mbs,   IFG==9.6us or 24 clks                    |
                                                  In order to simplify the programming model,       |
                                                  IFG is doubled internally when                    |
                                                  GMX_PRT_CFG[SPEED]==0.                            |
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_INBND = RGMII InBand Link Status
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_RX_INBND Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD     RAZ     NS          NS        Reserved                                           |   
<3>     DUPLEX    RO      0x0         NS        RGMII Inbound LinkDuplex                           |   
                                                  0=half-duplex                                     |
                                                  1=full-duplex                                     |
<2:1>   SPEED     RO      0x0         NS        RGMII Inbound LinkSpeed                            |   
                                                  00=2.5MHz                                         |
                                                  01=25MHz                                          |
                                                  10=125MHz                                         |
                                                  11=Reserved                                       |
<0>     STATUS    RO      0x0         NS        RGMII Inbound LinkStatus                           |   
                                                  0=down                                            |
                                                  1=up                                              |

Notes:
These fields are only valid if the attached PHY is operating in RGMII mode
and supports the optional in-band status (see section 3.4.1 of the RGMII
specification, version 1.3 for more information).
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_PAUSE_DROP_TIME = The TIME field in a PAUSE Packet which was dropped due to GMX RX FIFO full condition
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_PAUSE_DROP_TIME Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16>  RSVRD     RAZ     NS          NS        Reserved                                          |   
<15:0>   STATUS    R/W1C   0x0         NS        Time extracted from the dropped PAUSE packet      |   
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_STATS_PKTS
 *
 * Count of good received packets - packets that are not recognized as PAUSE
 * packets, dropped due the DMAC filter, dropped due FIFO full status, or
 * have any other OPCODE (FCS, Length, etc).
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_STATS_PKTS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  CNT      RC/W     0x0         NS        Count of received good packets                     |   

Notes:
- Cleared either by a write (of any value) or a read when GMX_RX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

     ==============================================================
     GMX(0..1)_RX(0..3)_STATS_OCTS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD    RAZ      NS          NS        Reserved                                           |   
<47:0>  CNT      RC/W    0x0         NS        Octet count of received good packets               |   

Notes:
- Cleared either by a write (of any value) or a read when GMX_RX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_RX_STATS_PKTS_CTL
 *
 * Count of all packets received that were recognized as Flow Control or
 * PAUSE packets.  PAUSE packets with any kind of error are counted in
 * GMX_RX_STATS_PKTS_BAD.  Pause packets can be optionally dropped or
 * forwarded based on the GMX_RX_FRM_CTL[CTL_DRP] bit.  This count
 * increments regardless of whether the packet is dropped.  Pause packets
 * will never be counted in GMX_RX_STATS_PKTS.  Packets dropped due the dmac
 * filter will be counted in GMX_RX_STATS_PKTS_DMAC and not here.
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_STATS_PKTS_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  CNT      RC/W    0x0         NS        Count of received pause packets                    |   

Notes:
- Cleared either by a write (of any value) or a read when GMX_RX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

     ==============================================================
     GMX(0..1)_RX(0..3)_STATS_OCTS_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD    RAZ      NS          NS        Reserved                                           |   
<47:0>  CNT      RC/W    0x0         NS        Octet count of received pause packets              |   

Notes:
- Cleared either by a write (of any value) or a read when GMX_RX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_RX_STATS_PKTS_DMAC
 *
 * Count of all packets received that were dropped by the dmac filter.
 * Packets that match the DMAC will be dropped and counted here regardless
 * of if they were bad packets.  These packets will never be counted in
 * GMX_RX_STATS_PKTS.
 *
 * Some packets that were not able to satisify the DECISION_CNT may not
 * actually be dropped by Octeon, but they will be counted here as if they
 * were dropped.
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_STATS_PKTS_DMAC Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  CNT      RC/W    0x0         NS        Count of filtered dmac packets                     |   

Notes:
- Cleared either by a write (of any value) or a read when GMX_RX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

     ==============================================================
     GMX(0..1)_RX(0..3)_STATS_OCTS_DMAC Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD    RAZ      NS          NS        Reserved                                           |   
<47:0>  CNT      RC/W    0x0         NS        Octet count of filtered dmac packets               |   

Notes:
- Cleared either by a write (of any value) or a read when GMX_RX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_RX_STATS_PKTS_DRP
 *
 * Count of all packets received that were dropped due to a full receive
 * FIFO.  This counts good and bad packets received - all packets dropped by
 * the FIFO.  It does not count packets dropped by the dmac or pause packet
 * filters.
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_STATS_PKTS_DRP Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  CNT      RC/W    0x0         NS        Count of dropped packets                           |   

Notes:
- Cleared either by a write (of any value) or a read when GMX_RX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

     ==============================================================
     GMX(0..1)_RX(0..3)_STATS_OCTS_DRP Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD    RAZ      NS          NS        Reserved                                           |   
<47:0>  CNT      RC/W    0x0         NS        Octet count of dropped packets                     |   

Notes:
- Cleared either by a write (of any value) or a read when GMX_RX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_RX_STATS_PKTS_BAD
 *
 * Count of all packets received with some error that were not dropped
 * either due to the dmac filter or lack of room in the receive FIFO.
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_STATS_PKTS_BAD Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  CNT      RC/W    0x0         NS        Count of bad packets                               |   

Notes:
- Cleared either by a write (of any value) or a read when GMX_RX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_ADR_CTL = Address Filtering Control
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_ADR_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<3>     CAM_MODE R/W      0x0         NS        Allow or deny DMAC address filter                  |   
                                                  0 = reject the packet on DMAC address match       |
                                                  1 = accept the packet on DMAC address match       |
<2:1>   MCST     R/W      0x0         NS        Multicast Mode                                     |   
                                                  0 = Use the Address Filter CAM                    |
                                                  1 = Force reject all multicast packets            |
                                                  2 = Force accept all multicast packets            |
                                                  3 = Reserved                                      |
<0>     BCST     R/W      0x1         NS        Accept All Broadcast Packets                       |   

Notes:
* ALGORITHM
  Here is some pseudo code that represents the address filter behavior.

     @verbatim
     bool dmac_addr_filter(uint8 prt, uint48 dmac) {
       ASSERT(prt >= 0 && prt <= 3);
       if (is_bcst(dmac))                               // broadcast accept
         return (GMX_RX{prt}_ADR_CTL[BCST] ? ACCEPT : REJECT);
       if (is_mcst(dmac) & GMX_RX{prt}_ADR_CTL[MCST] == 1)   // multicast reject
         return REJECT;
       if (is_mcst(dmac) & GMX_RX{prt}_ADR_CTL[MCST] == 2)   // multicast accept
         return ACCEPT;

       cam_hit = 0;
     
       for (i=0; i<8; i++) {
         if (GMX_RX{prt}_ADR_CAM_EN[EN<i>] == 0)
           continue;
         uint48 unswizzled_mac_adr = 0x0;
         for (j=5; j>=0; j--) {
            unswizzled_mac_adr = (unswizzled_mac_adr << 8) | GMX_RX{prt}_ADR_CAM{j}[ADR<i*8+7:i*8>];
         }
         if (unswizzled_mac_adr == dmac) {
           cam_hit = 1;
           break;
         }
       }
     
       if (cam_hit)
         return (GMX_RX{prt}_ADR_CTL[CAM_MODE] ? ACCEPT : REJECT);
       else
         return (GMX_RX{prt}_ADR_CTL[CAM_MODE] ? REJECT : ACCEPT);
     }
     @endverbatim
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_ADR_CAM_EN = Address Filtering Control Enable
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_ADR_CAM_EN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<7:0>   EN       R/W      0x0         NS        CAM Entry Enables                                  |   
----------------------------------------------------------------------------------------------------
===

 
 *
 * GMX_RX_ADR_CAM = Address Filtering Control
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_ADR_CAM0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  ADR      R/W      0x0         NS        The DMAC address to match on                       |   
                                                  Each entry contributes 8bits to one of 8 matchers |
                                                  Write transactions to GMX_RX_ADR_CAM will not     |
                                                  change the CSR when GMX_PRT_CFG[EN] is enabled    |
                                                  The CAM matches against unicst or multicst DMAC   |
                                                  addresses.                                        |
----------------------------------------------------------------------------------------------------
===


 
 *
 * GMX_RX_ADR_CAM = Address Filtering Control
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_ADR_CAM1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  ADR      R/W      0x0         NS        The DMAC address to match on                       |   
                                                  Each entry contributes 8bits to one of 8 matchers |
                                                  Write transactions to GMX_RX_ADR_CAM will not     |
                                                  change the CSR when GMX_PRT_CFG[EN] is enabled    |
                                                  The CAM matches against unicst or multicst DMAC   |
                                                  addresses.                                        |
----------------------------------------------------------------------------------------------------
===


 
 *
 * GMX_RX_ADR_CAM = Address Filtering Control
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_ADR_CAM2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  ADR      R/W      0x0         NS        The DMAC address to match on                       |   
                                                  Each entry contributes 8bits to one of 8 matchers |
                                                  Write transactions to GMX_RX_ADR_CAM will not     |
                                                  change the CSR when GMX_PRT_CFG[EN] is enabled    |
                                                  The CAM matches against unicst or multicst DMAC   |
                                                  addresses.                                        |
----------------------------------------------------------------------------------------------------
===


 
 *
 * GMX_RX_ADR_CAM = Address Filtering Control
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_ADR_CAM3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  ADR      R/W      0x0         NS        The DMAC address to match on                       |   
                                                  Each entry contributes 8bits to one of 8 matchers |
                                                  Write transactions to GMX_RX_ADR_CAM will not     |
                                                  change the CSR when GMX_PRT_CFG[EN] is enabled    |
                                                  The CAM matches against unicst or multicst DMAC   |
                                                  addresses.                                        |
----------------------------------------------------------------------------------------------------
===


 
 *
 * GMX_RX_ADR_CAM = Address Filtering Control
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_ADR_CAM4 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  ADR      R/W      0x0         NS        The DMAC address to match on                       |   
                                                  Each entry contributes 8bits to one of 8 matchers |
                                                  Write transactions to GMX_RX_ADR_CAM will not     |
                                                  change the CSR when GMX_PRT_CFG[EN] is enabled    |
                                                  The CAM matches against unicst or multicst DMAC   |
                                                  addresses.                                        |
----------------------------------------------------------------------------------------------------
===


 
 *
 * GMX_RX_ADR_CAM = Address Filtering Control
 *

     ==============================================================
     GMX(0..1)_RX(0..3)_ADR_CAM5 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  ADR      R/W      0x0         NS        The DMAC address to match on                       |   
                                                  Each entry contributes 8bits to one of 8 matchers |
                                                  Write transactions to GMX_RX_ADR_CAM will not     |
                                                  change the CSR when GMX_PRT_CFG[EN] is enabled    |
                                                  The CAM matches against unicst or multicst DMAC   |
                                                  addresses.                                        |
----------------------------------------------------------------------------------------------------
===



 *
 * GMX_BIST = GMX BIST Results
 *

     ==============================================================
     GMX(0..1)_BIST Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:17> RSVRD    RAZ      NS          NS        Reserved                                           |   
<16:0>  STATUS   RO       0x0         0         BIST Results.                                      |   
                                                  HW sets a bit in BIST for for memory that fails   |
                                                   0: gmx#.inb.fif_bnk0                             |
                                                   1: gmx#.inb.fif_bnk1                             |
                                                   2: gmx#.inb.fif_bnk2                             |
                                                   3: gmx#.inb.fif_bnk3                             |
                                                   4: gmx#.outb.fif.fif_bnk0                        |
                                                   5: gmx#.outb.fif.fif_bnk1                        |
                                                   6: gmx#.outb.fif.fif_bnk2                        |
                                                   7: gmx#.outb.fif.fif_bnk3                        |
                                                   8: gmx#.csr.gmi0.srf8x64m1_bist                  |
                                                   9: gmx#.csr.gmi1.srf8x64m1_bist                  |
                                                  10: gmx#.csr.gmi2.srf8x64m1_bist                  |
                                                  11: gmx#.csr.gmi3.srf8x64m1_bist                  |
                                                  12: gmx#.csr.drf20x80m1_bist                      |
                                                  13: gmx#.outb.stat.drf16x27m1_bist                |
                                                  14: gmx#.outb.stat.drf40x64m1_bist                |
                                                  15: gmx#.outb.ncb.drf16x76m1_bist                 |
                                                  16: gmx#.outb.fif.srf32x16m2_bist                 |
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_PRTS = Number of FIFOs to carve the RX buffer into
 *

     ==============================================================
     GMX(0..1)_RX_PRTS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<2:0>   PRTS     R/W      0x4         4         In RGMII mode, the RX buffer can be carved into    |   
                                                  several logical buffers depending on the number   |
                                                  or implemented ports.                             |
                                                  0 or 1 port  = 512ticks / 4096bytes               |
                                                  2 ports      = 256ticks / 2048bytes               |
                                                  3 or 4 ports = 128ticks / 1024bytes               |

Notes:
Note: Unlike GMX_TX_PRTS, GMX_RX_PRTS will always power on to 4 ports.  It
is unused in Spi mode since the RX buffer is always unified.
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_BP_DROP = FIFO mark for packet drop
 *

     ==============================================================
     GMX(0..1)_RX_BP_DROP(0..3) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:6> RSVRD    RAZ      NS          NS        Reserved                                            |   
<5:0>  MARK     R/W      NS          NS        Number of 8B ticks to reserve in the RX FIFO.       |   
                                                 When the FIFO exceeds this count, packets will     |
                                                 be dropped and not buffered.                       |
                                                 MARK should typically be programmed to ports+1.    |
                                                 Failure to program correctly can lead to system    |
                                                 instability.                                       |
                                                 Reset value for RGMII mode = 2                     |
                                                 Reset value for Spi4 mode  = 17                    |

Notes:
Note: the actual watermark is dynamic with respect to the GMX_RX_PRTS
register (in RGMII mode).  The GMX_RX_PRTS controls the depth of the port's
FIFO so as ports are added or removed, the drop point may change.

In spi4 mode, all spi4 ports use prt0 for checking.
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_BP_ON = Hiwater mark for port/interface backpressure
 *

     ==============================================================
     GMX(0..1)_RX_BP_ON(0..3) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:9>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<8:0>   MARK     R/W      NS          NS        Hiwater mark (8B ticks) for backpressure.          |   
                                                  In RGMII mode, the backpressure is given per      |
                                                  port.  In Spi4 mode, the backpressure is for the  |
                                                  entire interface.  GMX_RX_BP_ON must satisfy      |
                                                  BP_OFF <= BP_ON < (FIFO_SIZE - BP_DROP)           |
                                                  The reset value is half the FIFO.                 |
                                                  Reset value RGMII mode = 0x40  (512bytes)                 |
                                                  Reset value Spi4 mode  = 0x100 (2048bytes)                |
                                                  A value of zero will immediately assert back      |
                                                  pressure.                                         |

Notes:
In spi4 mode, all spi4 ports use prt0 for checking.
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_BP_OFF = Lowater mark for packet drop
 *

     ==============================================================
     GMX(0..1)_RX_BP_OFF(0..3) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:6>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<5:0>   MARK     R/W      0x10        0x10      Water mark (8B ticks) to deassert backpressure     |   

Notes:
In spi4 mode, all spi4 ports use prt0 for checking.
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_PASS_EN = Packet pass through mode enable
 *
 * When both Octane ports are running in Spi4 mode, packets can be directly
 * passed from one SPX interface to the other without being processed by the
 * core or PP's.  The register has one bit for each port to enable the pass
 * through feature.
 *

     ==============================================================
     GMX(0..1)_RX_PASS_EN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  EN       R/W      0x0         0x0       Which ports to configure in pass through mode      |   

Notes:

(1) Can only be used in dual Spi4 configs

(2) The mapped pass through output port cannot be the destination port for
    any Octane core traffic.
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_RX_PASS_MAP = Packet pass through port map
 *

     ==============================================================
     GMX(0..1)_RX_PASS_MAP(0..15) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<3:0>   DPRT     R/W      0x0         0x0       Destination port to map Spi pass through traffic   |   
----------------------------------------------------------------------------------------------------
===


 *
 * Per Port
 *

 *
 * GMX_TX_CLK = RGMII TX Clock Generation Register
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_CLK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:6>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<5:0>   CLK_CNT  R/W      0x1         1         Controls the RGMII TXC frequency                   |   
                                                  When PLL is used, TXC(phase) =                    |
                                                   spi4_tx_pll_ref_clk(period)/2*CLK_CNT            |
                                                  When PLL bypass is used, TXC(phase) =             |
                                                   spi4_tx_pll_ref_clk(period)*2*CLK_CNT            |
                                                  NOTE: CLK_CNT==0 will not generate any clock      |
                                                  if CLK_CNT > 1 if GMX_PRT_CFG[SPEED]==0           |

Notes:
Example: given a 125MHz PLL and 250MHz internal RGMII clock...
         CLK_CNT ==  1 ==> 125.0MHz TXC clock period (8ns/2* 1*2)
         CLK_CNT ==  5 ==>  25.0MHz TXC clock period (8ns/2* 5*2)
         CLK_CNT == 50 ==>   2.5MHz TXC clock period (8ns/2*50*2)
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_THRESH = RGMII TX Threshold
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_THRESH Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:9>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<8:0>   CNT      R/W      0x20        0x20      Number of 16B ticks to accumulate in the TX FIFO   |   
                                                  before sending on the RGMII interface             |
                                                  This register should be large enough to prevent   |
                                                  underflow on the RGMII interface and must never   |
                                                  be set to zero.  This register cannot exceed the  |
                                                  the TX FIFO depth which is...                     |
                                                   GMX_TX_PRTS==0,1:  CNT MAX = 0x100               |
                                                   GMX_TX_PRTS==2  :  CNT MAX = 0x080               |
                                                   GMX_TX_PRTS==3,4:  CNT MAX = 0x040               |
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_APPEND = RGMII TX Append Control
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_APPEND Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<3>     FORCE_FCS R/W     0x1         0x1       Append the Ethernet FCS on each pause packet       |   
                                                  When FCS is clear                                 |
                                                  This implies that FCS==0 and PAD==0               |
                                                  (PASS2 only)                                      |
<2>     FCS      R/W      0x1         0x1       Append the Ethernet FCS on each packet             |   
<1>     PAD      R/W      0x1         0x1       Append PAD bytes such that min sized               |   
<0>     PREAMBLE R/W      0x1         0x1       Prepend the Ethernet preamble on each transfer     |   
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_SLOT = RGMII TX Slottime Counter
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_SLOT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:10> RSVRD    RAZ      NS          NS        Reserved                                           |   
<9:0>   SLOT     R/W      0x200       0x200     Slottime (refer to 802.3 to set correctly)         |   
                                                  10/100Mbs: 0x40                                   |
                                                  1000Mbs:   0x200                                  |
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_BURST = RGMII TX Burst Counter
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_BURST Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  BURST    R/W      0x2000      0x2000    Burst (refer to 802.3 to set correctly)            |   
                                                  Only valid for 1000Mbs half-duplex operation      |
                                                   halfdup / 1000Mbs: 0x2000                        |
                                                   all other modes:   0x0                           |
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_SMAC = RGMII SMAC
 *

     ==============================================================
     GMX(0..1)_SMAC(0..3) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD    RAZ      NS          NS        Reserved                                           |   
<47:0>  SMAC     R/W      0x0         NS        The SMAC field is used for generating and          |   
                                                  accepting Control Pause packets                   |
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_PAUSE_PKT_TIME = RGMII TX Pause Packet pause_time field
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_PAUSE_PKT_TIME Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  TIME     R/W      0x60        NS        The pause_time field placed is outbnd pause pkts   |   
                                                  pause_time is in 512 bit-times                    |
                                                  Normally, TIME > GMX_TX_PAUSE_PKT_INTERVAL        |

Notes:
Choosing proper values of GMX_TX_PAUSE_PKT_TIME[TIME] and
GMX_TX_PAUSE_PKT_INTERVAL[INTERVAL] can be challenging to the system
designer.  It is suggested that TIME be much greater than INTERVAL and
GMX_TX_PAUSE_ZERO[SEND] be set.  This allows a periodic refresh of the PAUSE
count and then when the backpressure condition is lifted, a PAUSE packet
with TIME==0 will be sent indicating that Octane is ready for additional
data.

If the system chooses to not set GMX_TX_PAUSE_ZERO[SEND], then it is
suggested that TIME and INTERVAL are programmed such that they satisify the
following rule...

   INTERVAL <= TIME - (largest_pkt_size + IFG + pause_pkt_size)

where largest_pkt_size is that largest packet that the system can send
(normally 1518B), IFG is the interframe gap and pause_pkt_size is the size
of the PAUSE packet (normally 64B).
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_MIN_PKT = RGMII TX Min Size Packet (PAD upto min size)
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_MIN_PKT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<7:0>   MIN_SIZE R/W      0x3b        59        Min frame in bytes before the FCS is applied       |   
                                                  Padding is only appened when GMX_TX_APPEND[PAD]   |
                                                  for the coresponding RGMII port is set.           |
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_PAUSE_PKT_INTERVAL = RGMII TX Pause Packet transmission interval - how often PAUSE packets will be sent
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_PAUSE_PKT_INTERVAL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  INTERVAL R/W      0x10        NS        Arbitrate for a pause packet every (INTERVAL*512)  |   
                                                  bit-times.                                        |
                                                  Normally, 0 < INTERVAL < GMX_TX_PAUSE_PKT_TIME    |
                                                  INTERVAL=0, will only send a single PAUSE packet  |
                                                  for each backpressure event                       |

Notes:
Choosing proper values of GMX_TX_PAUSE_PKT_TIME[TIME] and
GMX_TX_PAUSE_PKT_INTERVAL[INTERVAL] can be challenging to the system
designer.  It is suggested that TIME be much greater than INTERVAL and
GMX_TX_PAUSE_ZERO[SEND] be set.  This allows a periodic refresh of the PAUSE
count and then when the backpressure condition is lifted, a PAUSE packet
with TIME==0 will be sent indicating that Octane is ready for additional
data.

If the system chooses to not set GMX_TX_PAUSE_ZERO[SEND], then it is
suggested that TIME and INTERVAL are programmed such that they satisify the
following rule...

   INTERVAL <= TIME - (largest_pkt_size + IFG + pause_pkt_size)

where largest_pkt_size is that largest packet that the system can send
(normally 1518B), IFG is the interframe gap and pause_pkt_size is the size
of the PAUSE packet (normally 64B).
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_SOFT_PAUSE = RGMII TX Software Pause
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_SOFT_PAUSE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  TIME     R/W      0x0         NS        Back off the TX bus for (TIME*512) bit-times       |   
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_PAUSE_TOGO = RGMII TX Amount of time remaining to backpressure
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_PAUSE_TOGO Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  TIME     RO       NS          NS        Amount of time remaining to backpressure           |   
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_PAUSE_ZERO = RGMII TX Amount of time remaining to backpressure
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_PAUSE_ZERO Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<0>     SEND     R/W      1           1         When backpressure condition clear, send PAUSE      |   
                                                  packet with pause_time of zero to enable the      |
                                                  channel                                           |
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_STATS_CTL = TX Stats Control register
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_STATS_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1> RSVRD     RAZ      NS          NS        Reserved                                           |   
<0>    RD_CLR    R/W      0x0         0         Stats registers will clear on reads                |   
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_TX_CTL = TX Control register
 *

     ==============================================================
     GMX(0..1)_TX(0..3)_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2> RSVRD     RAZ      NS          NS        Reserved                                           |   
<1>    XSDEF_EN  R/W      0x1         1         Enables the excessive deferral check for stats     |   
                                                  and interrupts                                    |
                                                  (PASS2 only)                                      |
<0>    XSCOL_EN  R/W      0x1         1         Enables the excessive collision check for stats    |   
                                                  and interrupts                                    |
                                                  (PASS2 only)                                      |
----------------------------------------------------------------------------------------------------
===


 * GMX_TX_STAT0 = GMX_TX_STATS_XSDEF / GMX_TX_STATS_XSCOL

     ==============================================================
     GMX(0..1)_TX(0..3)_STAT0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> XSDEF    RC/W     0x0         NS        Number of packets dropped (never successfully      |   
                                                  sent) due to excessive deferal                    |
<31:0>  XSCOL    RC/W     0x0         NS        Number of packets dropped (never successfully      |   
                                                  sent) due to excessive collision.  Defined by     |
                                                  GMX_TX_COL_ATTEMPT[LIMIT].                        |

Notes:
- Cleared either by a write (of any value) or a read when GMX_TX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 * GMX_TX_STAT1 = GMX_TX_STATS_SCOL  / GMX_TX_STATS_MCOL

     ==============================================================
     GMX(0..1)_TX(0..3)_STAT1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> SCOL     RC/W     0x0         NS        Number of packets sent with a single collision     |   
<31:0>  MCOL     RC/W     0x0         NS        Number of packets sent with multiple collisions    |   
                                                  but < GMX_TX_COL_ATTEMPT[LIMIT].                  |

Notes:
- Cleared either by a write (of any value) or a read when GMX_TX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 * GMX_TX_STAT2 = GMX_TX_STATS_OCTS

     ==============================================================
     GMX(0..1)_TX(0..3)_STAT2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD    RAZ      NS          NS        Reserved                                           |   
<47:0>  OCTS     RC/W     0x0         NS        Number of total octets sent on the interface.      |   
                                                  Does not count octets from frames that were       |
                                                  truncated due to collisions in halfdup mode.      |

Notes:
- Octect counts are the sum of all data transmitted on the wire including
  packet data, pad bytes, fcs bytes, pause bytes, and jam bytes.  The octect
  counts do not include PREAMBLE byte or EXTEND cycles.
- Cleared either by a write (of any value) or a read when GMX_TX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 * GMX_TX_STAT3 = GMX_TX_STATS_PKTS

     ==============================================================
     GMX(0..1)_TX(0..3)_STAT3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  PKTS     RC/W     0x0         NS        Number of total frames sent on the interface.      |   
                                                  Does not count frames that were truncated due to  |
                                                   collisions in halfdup mode.                      |

Notes:
- Cleared either by a write (of any value) or a read when GMX_TX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 * GMX_TX_STAT4 = GMX_TX_STATS_HIST1 (64) / GMX_TX_STATS_HIST0 (<64)

     ==============================================================
     GMX(0..1)_TX(0..3)_STAT4 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> HIST1    RC/W     0x0         NS        Number of packets sent with an octet count of 64.  |   
<31:0>  HIST0    RC/W     0x0         NS        Number of packets sent with an octet count         |   
                                                  of < 64.                                          |

Notes:
- Packet length is the sum of all data transmitted on the wire for the given
  packet including packet data, pad bytes, fcs bytes, pause bytes, and jam
  bytes.  The octect counts do not include PREAMBLE byte or EXTEND cycles.
- Cleared either by a write (of any value) or a read when GMX_TX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 * GMX_TX_STAT5 = GMX_TX_STATS_HIST3 (128- 255) / GMX_TX_STATS_HIST2 (65- 127)

     ==============================================================
     GMX(0..1)_TX(0..3)_STAT5 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> HIST3    RC/W     0x0         NS        Number of packets sent with an octet count of      |   
                                                  128 - 255.                                        |
<31:0>  HIST2    RC/W     0x0         NS        Number of packets sent with an octet count of      |   
                                                  65 - 127.                                         |

Notes:
- Packet length is the sum of all data transmitted on the wire for the given
  packet including packet data, pad bytes, fcs bytes, pause bytes, and jam
  bytes.  The octect counts do not include PREAMBLE byte or EXTEND cycles.
- Cleared either by a write (of any value) or a read when GMX_TX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 * GMX_TX_STAT6 = GMX_TX_STATS_HIST5 (512-1023) / GMX_TX_STATS_HIST4 (256-511)

     ==============================================================
     GMX(0..1)_TX(0..3)_STAT6 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> HIST5    RC/W     0x0         NS        Number of packets sent with an octet count of      |   
                                                  512 - 1023.                                       |
<31:0>  HIST4    RC/W     0x0         NS        Number of packets sent with an octet count of      |   
                                                  256 - 511.                                        |

Notes:
- Packet length is the sum of all data transmitted on the wire for the given
  packet including packet data, pad bytes, fcs bytes, pause bytes, and jam
  bytes.  The octect counts do not include PREAMBLE byte or EXTEND cycles.
- Cleared either by a write (of any value) or a read when GMX_TX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 * GMX_TX_STAT7 = GMX_TX_STATS_HIST7 (1024-1518) / GMX_TX_STATS_HIST6 (>1518)

     ==============================================================
     GMX(0..1)_TX(0..3)_STAT7 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> HIST7    RC/W     0x0         NS        Number of packets sent with an octet count         |   
                                                  of > 1518.                                        |
<31:0>  HIST6    RC/W     0x0         NS        Number of packets sent with an octet count of      |   
                                                  1024 - 1518.                                      |

Notes:
- Packet length is the sum of all data transmitted on the wire for the given
  packet including packet data, pad bytes, fcs bytes, pause bytes, and jam
  bytes.  The octect counts do not include PREAMBLE byte or EXTEND cycles.
- Cleared either by a write (of any value) or a read when GMX_TX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===

 * GMX_TX_STAT8 = GMX_TX_STATS_MCST  / GMX_TX_STATS_BCST

     ==============================================================
     GMX(0..1)_TX(0..3)_STAT8 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> MCST     RC/W     0x0         NS        Number of packets sent to multicast DMAC.          |   
                                                  Does not include BCST packets.                    |
<31:0>  BCST     RC/W     0x0         NS        Number of packets sent to broadcast DMAC.          |   
                                                  Does not include MCST packets.                    |

Notes:
- Cleared either by a write (of any value) or a read when GMX_TX_STATS_CTL[RD_CLR] is set
- Counters will wrap
- Note, GMX determines if the packet is MCST or BCST from the DMAC of the
  packet.  GMX assumes that the DMAC lies in the first 6 bytes of the packet
  as per the 802.3 frame definition.  If the system requires additional data
  before the L2 header, then the MCST and BCST counters may not reflect
  reality and should be ignored by software.
----------------------------------------------------------------------------------------------------
===

 * GMX_TX_STAT9 = GMX_TX_STATS_UNDFLW / GMX_TX_STATS_CTL

     ==============================================================
     GMX(0..1)_TX(0..3)_STAT9 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> UNDFLW   RC/W     0x0         NS        Number of underflow packets                        |   
<31:0>  CTL      RC/W     0x0         NS        Number of Control packets (PAUSE flow control)     |   
                                                  generated by GMX.  It does not include control    |
                                                  packets forwarded or generated by the PP's.       |

Notes:
- Cleared either by a write (of any value) or a read when GMX_TX_STATS_CTL[RD_CLR] is set
- Counters will wrap
----------------------------------------------------------------------------------------------------
===



 *
 * Common
 *

 *
 * GMX_TX_PRTS = TX Ports
 *

     ==============================================================
     GMX(0..1)_TX_PRTS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   PRTS     R/W      1           NS        Number of ports allowed on the interface           |   

Notes:
* The value programmed for PRTS is the number of the highest architected
  port number on the interface, plus 1.  For example, if port 2 is the
  highest architected port, then the programmed value should be 3 since
  there are 3 ports in the system - 0, 1, and 2.
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_IFG = RGMII TX Interframe Gap
 *

     ==============================================================
     GMX(0..1)_TX_IFG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<7:4>   IFG2     R/W      0x4         NS        1/3 of the interframe gap timing (in IFG2*8 bits)  |   
                                                  If CRS is detected during IFG2, then the          |
                                                  interFrameSpacing timer is not reset and a frame  |
                                                  is transmited once the timer expires.             |
<3:0>   IFG1     R/W      0x8         NS        2/3 of the interframe gap timing (in IFG1*8 bits)  |   
                                                  If CRS is detected during IFG1, then the          |
                                                  interFrameSpacing timer is reset and a frame is   |
                                                  not transmited.                                   |

Notes:
* Programming IFG1 and IFG2.

  For 10/100/1000Mbs half-duplex systems that require IEEE 802.3
  compatibility, IFG1 must be in the range of 1-8, IFG2 must be in the range
  of 4-12, and the IFG1+IFG2 sum must be 12.

  For 10/100/1000Mbs full-duplex systems that require IEEE 802.3
  compatibility, IFG1 must be in the range of 1-11, IFG2 must be in the range
  of 1-11, and the IFG1+IFG2 sum must be 12.

  For all other systems, IFG1 and IFG2 can be any value in the range of
  1-15.  Allowing for a total possible IFG sum of 2-30.
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_JAM = RGMII TX Jam Pattern
 *

     ==============================================================
     GMX(0..1)_TX_JAM Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<7:0>   JAM      R/W      0xEE        NS        Jam pattern                                        |   
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_COL_ATTEMPT = RGMII TX collision attempts before dropping frame
 *

     ==============================================================
     GMX(0..1)_TX_COL_ATTEMPT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<4:0>   LIMIT    R/W      0x10        16        Collision Attempts                                 |   
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_PAUSE_PKT_DMAC = RGMII TX Pause Packet DMAC field
 *

     ==============================================================
     GMX(0..1)_TX_PAUSE_PKT_DMAC Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD    RAZ      NS          NS        Reserved                                           |   
<47:0>  DMAC     R/W      0x0180c2000001 0x0180c2000001 The DMAC field placed is outbnd pause pkts |   
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_PAUSE_PKT_TYPE = RGMII TX Pause Packet TYPE field
 *

     ==============================================================
     GMX(0..1)_TX_PAUSE_PKT_TYPE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  TYPE     R/W      0x8808      0x8808    The TYPE field placed is outbnd pause pkts         |   
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_SPI_MAX = RGMII TX Spi4 MAX
 *

     ==============================================================
     GMX(0..1)_TX_SPI_MAX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:23> RSVRD    RAZ      NS          NS        Reserved                                           |   
<22:16> SLICE    R/W      0x0         NS        Number of 16B blocks to transmit in a burst before |   
                                                  switching to the next port. SLICE does not always |
                                                  limit the burst length transmitted by OCTEON.     |
                                                  Depending on the traffic pattern and              |
                                                  GMX_TX_SPI_ROUND programming, the next port could |
                                                  be the same as the current port. In this case,    |
                                                  OCTEON may merge multiple sub-SLICE bursts into   |
                                                  one contiguous burst that is longer than SLICE    |
                                                  (as long as the burst does not cross a packet     |
                                                  boundary).                                        |
                                                  SLICE must be programmed to be >=                 |
                                                    GMX_TX_SPI_THRESH[THRESH]                       |
                                                  If SLICE==0, then the transmitter will tend to    |
                                                  send the complete packet. The port will only      |
                                                  switch if credits are exhausted or PKO cannot     |
                                                  keep up.                                          |
                                                  (90nm ONLY)                                       |
<15:8>  MAX2     R/W      0x4         NS        MAX2 (per Spi4.2 spec)                             |   
<7:0>   MAX1     R/W      0x8         NS        MAX1 (per Spi4.2 spec)                             |   
                                                  MAX1 >= GMX_TX_SPI_THRESH[THRESH]                 |
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_SPI_THRESH = RGMII TX Spi4 Transmit Threshold
 *

     ==============================================================
     GMX(0..1)_TX_SPI_THRESH Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:6>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<5:0>   THRESH   R/W      0x4         NS        Transmit threshold in 16B blocks - cannot be zero  |   
                                                  THRESH <= TX_FIFO size   (in non-passthrough mode)|
                                                  THRESH <= TX_FIFO size-2 (in passthrough mode)    |
                                                  THRESH <= GMX_TX_SPI_MAX[MAX1]                    |
                                                  THRESH <= GMX_TX_SPI_MAX[MAX2], if not then is it |
                                                   possible for Octeon to send a Spi4 data burst of |
                                                   MAX2 <= burst <= THRESH 16B ticks                |
                                                  GMX_TX_SPI_MAX[SLICE] must be programmed to be >= |
                                                    THRESH                                          |

Notes:
Note: zero will map to 0x20

This will normally creates Spi4 traffic bursts at least THRESH in length.
If dclk > eclk, then this rule may not always hold and Octeon may split
transfers into smaller bursts - some of which could be as short as 16B.
Octeon will never violate the Spi4.2 spec and send a non-EOP burst that is
not a multiple of 16B.
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_SPI_CTL = Spi4 TX ModesSpi4 
 *

     ==============================================================
     GMX(0..1)_TX_SPI_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<2>     SPARE    R/W      0x0         0         Spare                                              |   
<1>     TPA_CLR  R/W      0x0         NS        TPA Clear Mode                                     |   
                                                  Clear credit counter when satisifed status        |
<0>     CONT_PKT R/W      0x0         NS        Contiguous Packet Mode                             |   
                                                  Finish one packet before switching to another     |
                                                  Cannot be set in Spi4 pass-through mode           |
----------------------------------------------------------------------------------------------------
===

 *
 * GMX_TX_OVR_BP = RGMII TX Override BackPressure
 *

     ==============================================================
     GMX(0..1)_TX_OVR_BP Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:12> RSVRD    RAZ      NS          NS        Reserved                                           |   
<11:8>  EN       R/W      0x0         0         Per port Enable back pressure override             |   
<7:4>   BP       R/W      0x0         0         Per port BackPressure status to use                |   
                                                  0=Port is available                               |
                                                  1=Port should be back pressured                   |
<3:0>   IGN_FULL R/W      0x0         0         Ignore the RX FIFO full when computing BP          |   
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_TX_BP = RGMII TX BackPressure Register
 *

     ==============================================================
     GMX(0..1)_TX_BP Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<3:0>   BP       RO       0x0         0         Per port BackPressure status                       |   
                                                  0=Port is available                               |
                                                  1=Port should be back pressured                   |
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_TX_CORRUPT = TX - Corrupt TX packets with the ERR bit set
 *

     ==============================================================
     GMX(0..1)_TX_CORRUPT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<3:0>   CORRUPT  R/W      0xf         0xf       Per port error propagation                         |   
                                                  0=Never corrupt packets                           |
                                                  1=Corrupt packets with ERR                        |

Notes:
Packets sent from PKO with the ERR wire asserted or spi passthrough traffic
with a nonzero opcode will be corrupted by the transmitter if CORRUPT[prt]
is set (SPI uses prt==0).

In RGMII mode, corruption means that GMX will send a bad FCS value.  If
GMX_TX_APPEND[FCS] is clear then no FCS is sent and the GMX cannot corrupt
it.  The corrupt FCS value is 0xeeeeeeee.

In Spi4 mode, corruptions means the SPX will terminate the packet if an
ABORT code.
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_TX_SPI_DRAIN = Drain out Spi TX FIFO
 *

     ==============================================================
     GMX(0..1)_TX_SPI_DRAIN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  DRAIN    R/W      0x0         0x0       Per port drain control                             |   
                                                  0=Normal operation                                |
                                                  1=GMX TX will be popped, but no valid data will   |
                                                    be sent to SPX.  Credits are correctly returned |
                                                    to PKO.  STX_IGN_CAL should be set to ignore    |
                                                    TPA and not stall due to back-pressure.         |
                                                  (PASS3 only)                                      |
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_RX_PRT_INFO = Report the RX status for port
 *

     ==============================================================
     GMX(0..1)_RX_PRT_INFO Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:16> DROP     RO       0x0         0x0       Per port indication that data was dropped          |   
                                                  (PASS3 only)                                      |
<15:0>  COMMIT   RO       0x0         0x0       Per port indication that SOP was accepted          |   
                                                  (PASS3 only)                                      |
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_TX_LFSR = LFSR used to implement truncated binary exponential backoff
 *

     ==============================================================
     GMX(0..1)_TX_LFSR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  LFSR     R/W      0xffff      NS        The current state of the LFSR used to feed random  |   
                                                  numbers to compute truncated binary exponential   |
                                                  backoff.                                          |
----------------------------------------------------------------------------------------------------
===


 *
 * GMX_TX_INT_REG = Interrupt Register
 *

     ==============================================================
     GMX(0..1)_TX_INT_REG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:20> RSVRD    RAZ      NS          NS        Reserved                                           |   
<19:16> LATE_COL R/W1C    0x0         0         TX Late Collision                                  |   
                                                  (PASS3 only)                                      |
<15:12> XSDEF    R/W1C    0x0         0         TX Excessive deferral (RGMII/halfdup mode only)    |   
                                                  (PASS2 only)                                      |
<11:8>  XSCOL    R/W1C    0x0         0         TX Excessive collisions (RGMII/halfdup mode only)  |   
                                                  (PASS2 only)                                      |
<7:6>   SPARE    R/W1C    0x0         0         Spare                                              |   
                                                  (PASS2 only)                                      |
<5:2>   UNDFLW   R/W1C    0x0         0         TX Underflow (RGMII mode only)                     |   
<1>     NCB_NXA  R/W1C    0x0         0         Port address out-of-range from NCB Interface       |   
<0>     PKO_NXA  R/W1C    0x0         0         Port address out-of-range from PKO Interface       |   
----------------------------------------------------------------------------------------------------
===


 * 
 * GMX_TX_INT_EN = Interrupt Enable
 *

     ==============================================================
     GMX(0..1)_TX_INT_EN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:20> RSVRD    RAZ      NS          NS        Reserved                                           |   
<19:16> LATE_COL R/W      0x0         0         TX Late Collision                                  |   
                                                  (PASS3 only)                                      |
<15:12> XSDEF    R/W      0x0         0         TX Excessive deferral (RGMII/halfdup mode only)    |   
                                                  (PASS2 only)                                      |
<11:8>  XSCOL    R/W      0x0         0         TX Excessive collisions (RGMII/halfdup mode only)  |   
                                                  (PASS2 only)                                      |
<7:6>   SPARE    R/W      0x0         0         Spare                                              |   
                                                  (PASS2 only)                                      |
<5:2>   UNDFLW   R/W      0x0         0         TX Underflow (RGMII mode only)                     |   
<1>     NCB_NXA  R/W      0x0         0         Port address out-of-range from NCB Interface       |   
<0>     PKO_NXA  R/W      0x0         0         Port address out-of-range from PKO Interface       |   
----------------------------------------------------------------------------------------------------
===


 * 
 * GMX_NXA_ADR = NXA Port Address
 *

     ==============================================================
     GMX(0..1)_NXA_ADR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:6>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<5:0>   PRT      RO       0x0         NS        Logged address for NXA exceptions                  |   
                                                  The logged address will be from the first         |
                                                  exception that caused the problem.  NCB has       |
                                                  higher priority than PKO and will win.            |
----------------------------------------------------------------------------------------------------
===

 * 
 * GMX_BAD_REG = A collection of things that have gone very, very wrong
 *

     ==============================================================
     GMX(0..1)_BAD_REG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:31> RSVRD1   RAZ      NS          NS        Reserved                                           |   
<30:27> INB_NXA  R/W1C    0x0         0         Inbound port > GMX_RX_PRTS                         |   
<26>    STATOVR  R/W1C    0x0         0         TX Statistics overflow                             |   
<25:22> LOSTSTAT R/W1C    0x0         0         TX Statistics data was over-written (per RGM port) |   
                                                  TX Stats are corrupted                            |
<21:18> UNUSED   RAZ      0x0         0         Write safe / read as zero                          |   
                                                  Formerly pass1 SLOTERR                            |
<17:2>  OUT_OVR  R/W1C    0x0         0         Outbound data FIFO overflow (per port)             |   
<1>     NCB_OVR  R/W1C    0x0         0         Outbound NCB FIFO Overflow                         |   
<0>     OUT_COL  R/W1C    0x0         0         Outbound collision occured between PKO and NCB     |   
----------------------------------------------------------------------------------------------------
===

 * 
 * GMX_STAT_BP = Number of cycles that the TX/Stats block has help up operation
 *

     ==============================================================
     GMX(0..1)_STAT_BP Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:17> RSVRD    RAZ      NS          NS        Reserved                                           |   
<16>    BP       RO       0x0         0         Current BP state                                   |   
<15:0>  CNT      R/W1C    0x0         0         Number of cycles that BP has been asserted         |   
                                                  Saturating counter                                |
----------------------------------------------------------------------------------------------------
===

 * 
 * GMX_TX_SPI_ROUND = Controls SPI4 TX Arbitration
 *

     ==============================================================
     GMX(0..1)_TX_SPI_ROUND(0..31) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  ROUND    R/W      0x0         NS        Which Spi ports participate in each arbitration    |   
                                                  round.  Each bit corresponds to a spi port        |
                                                  0: this port will arb in this round               |
                                                  1: this port will not arb in this round           |
                                                  (90nm ONLY)                                       |
----------------------------------------------------------------------------------------------------
===

 * 
 * GMX_INF_MODE = Interface Mode
 *

     ==============================================================
     GMX(0..1)_INF_MODE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<1>     EN       RO       NS          NS        Interface Enable                                   |   
<0>     TYPE     RO       NS          NS        Interface Mode                                     |   
                                                  0: RGMII Mode                                     |
                                                  1: Spi4 Mode                                      |
----------------------------------------------------------------------------------------------------
===



 *
 *                  FAU Timeout = Fetch and Add Unit Tag-Switch Timeout
 *
 * How many clokc ticks the FAU unit will wait for a tag-switch before timeing out.
 * for Queue 0.
 *

     ==============================================================
     IOB_FAU_TIMEOUT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<11:0>  TOUT_VAL R/W      0x4         0x4       When a tag request arrives from the PP a timer is      
                                                 started associate with that PP. The timer which
                                                 increments every 256 eclks is compared to TOUT_VAL.
                                                 When the two are equal the IOB will flag the tag 
                                                 request to complete as a time-out tag operation.
                                                 The 256 count timer used to increment the PP
                                                 associated timer is always running so the first
                                                 increment of the PP associated timer may occur any
                                                 where within the first 256 eclks.  Note that '0'
                                                 is an illegal value.
<12>    TOUT_ENB R/W      0x1         0         The enable for the FAU timeout feature.                
                                                 '1' will enable the timeout, '0' will disable.                                            
<63:13> NS        RAZ     NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NCB To CMB Response Priority Counter = NCB to CMB Response Priority Counter Enable and Timer Value
*
* Enables and supplies the timeout count for raising the priority of NCB Responses access to the CMB.
*

     ==============================================================
     IOB_N2C_RSP_PRI_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<14:0>  CNT_VAL   R/W     0x0         0         Number of core clocks to wait before raising           
                                                 the priority for access to CMB.                                                                
<15>    CNT_ENB   R/W     0x0         0         Enables the raising of CMB access priority             
                                                 when CNT_VAL is reached.                                                               
<63:16> NS        RAZ     NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


*
*                  IPD To CMB Store Priority Counter = IPD to CMB Store Priority Counter Enable and Timer Value
*
* Enables and supplies the timeout count for raising the priority of IPD Store access to the CMB.
*

     ==============================================================
     IOB_I2C_PRI_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<14:0>  CNT_VAL   R/W      0x0         0        Number of core clocks to wait before raising           
                                                 the priority for access to CMB.                                                               
<15>    CNT_ENB   R/W      0x0         0        Enables the raising of CMB access priority             
                                                 when CNT_VAL is reached.                                                               
<63:16> NS        RAZ      NS          NS       Reserved                                               
----------------------------------------------------------------------------------------------------
===


*
*                  PKO To CMB Response Priority Counter = PKO to CMB Response Priority Counter Enable and Timer Value
*
* Enables and supplies the timeout count for raising the priority of PKO Load access to the CMB.
*

     ==============================================================
     IOB_P2C_REQ_PRI_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<14:0>  CNT_VAL   R/W     0x0         0         Number of core clocks to wait before raising           
                                                 the priority for access to CMB.                                                            
<15>    CNT_ENB   R/W     0x0         0         Enables the raising of CMB access priority              
                                                 when CNT_VAL is reached.                                                           
<63:16> NS        RAZ     NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NCB To CMB L2C Priority Counter = NCB to CMB L2C Priority Counter Enable and Timer Value
*
* Enables and supplies the timeout count for raising the priority of NCB Store/Load access to the CMB.
*

     ==============================================================
     IOB_N2C_L2C_PRI_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<14:0>  CNT_VAL   R/W     0x0         0         Number of core clocks to wait before raising           
                                                 the priority for access to CMB.                                                               
<15>    CNT_ENB   R/W     0x0         0         Enables the raising of CMB access priority              
                                                 when CNT_VAL is reached.                                                              
<63:16> NS        RAZ     NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  DWB To CMB Priority Counter = Don't Write Back to CMB Priority Counter Enable and Timer Value
*
* Enables and supplies the timeout count for raising the priority of Don't Write Back request to the L2C.
*

     ==============================================================
     IOB_DWB_PRI_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<14:0>  CNT_VAL   R/W     0x0         0         Number of core clocks to wait before raising           
                                                 the priority for access to CMB.                                                                  
<15>    CNT_ENB   R/W     0x0         0         Enables the raising of CMB access priority             
                                                 when CNT_VAL is reached.                                                                 
<63:16> NS        RAZ     NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  Request To NCB Priority Counter = Request to NCB Priority Counter Enable and Timer Value
*
* Enables and supplies the timeout count for raising the priority of Request transfers to the Outbound NCB.
*

     ==============================================================
     IOB_OUTB_REQ_PRI_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<14:0>  CNT_VAL   R/W     0x0         0         Number of core clocks to wait before raising           
                                                 the priority for access to NCB.                                                             
<15>    CNT_ENB   R/W     0x0         0         Enables the raising of NCB access priority             
                                                 when CNT_VAL is reached.                                                                    
<63:16> NS        RAZ     NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  Commit To NCB Priority Counter = Commit to NCB Priority Counter Enable and Timer Value
*
* Enables and supplies the timeout count for raising the priority of Commit request to the Outbound NCB.
*

     ==============================================================
     IOB_OUTB_COM_PRI_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<14:0>  CNT_VAL   R/W     0x0         0         Number of core clocks to wait before raising           
                                                 the priority for access to NCB.                                                            
<15>    CNT_ENB   R/W     0x0         0         Enables the raising of NCB access priority             
                                                 when CNT_VAL is reached.                                                                   
<63:16> NS        RAZ     NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  FPA To NCB Priority Counter = FPA Returns to NCB Priority Counter Enable and Timer Value
*
* Enables and supplies the timeout count for raising the priority of FPA Rreturn Page request to the Outbound NCB.
*

     ==============================================================
     IOB_OUTB_FPA_PRI_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<14:0>  CNT_VAL   R/W     0x0         0         Number of core clocks to wait before raising           
                                                 the priority for access to NCB.                                                             
<15>    CNT_ENB   R/W     0x0         0         Enables the raising of NCB access priority             
                                                 when CNT_VAL is reached.                                                                     
<63:16> NS        RAZ     NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IOB Control Status = IOB Control and Status Register
*
* Provides control for IOB functions.
*

     ==============================================================
     IOB_CTL_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     FAU_END   R/W     0x0         0         Toggles the endian style of the FAU. '0' is for        
                                                 big-endian and '1' is for little-endian.
<1>     DWB_ENB   R/W     0x1         1         Enables the DWB function of the IOB.                   
<2>     PKO_ENB   R/W     0x0         0         Toggles the endian style of the FAU for the PKO.       
                                                 '0' is for big-endian and '1' is for little-endian.
<3>     INB_MAT   R/W1C   0x0         0         Was a match on the inbound bus to the inb pattern      
                                                 matchers. PASS2 FIELD.
<4>     OUTB_MAT  R/W1C   0x0         0         Was a match on the outbound bus to the inb pattern     
                                                 matchers. PASS2 FIELD.
<63:5>  NS        RAZ     NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IOB_INT_SUM = IOB's Interrupt Summary Register
*
* Contains the diffrent interrupt summary bits of the IOB. This is a PASS-2 register.
*

     ==============================================================
     IOB_INT_SUM Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     NP_SOP   R/W1C     0           0        Set when a SOP is followed by an SOP for the same      
                                                 port for a non-passthrough packet.
                                                 The first detected error associated with bits [5:0]
                                                 of this register will only be set here. A new bit
                                                 can be set when the previous reported bit is cleared.
<1>     NP_EOP   R/W1C     0           0        Set when a EOP is followed by an EOP for the same      
                                                 port for a non-passthrough packet.
                                                 The first detected error associated with bits [5:0]
                                                 of this register will only be set here. A new bit
                                                 can be set when the previous reported bit is cleared.
<2>     P_SOP    R/W1C     0           0        Set when a SOP is followed by an SOP for the same      
                                                 port for a passthrough packet.
                                                 The first detected error associated with bits [5:0]
                                                 of this register will only be set here. A new bit
                                                 can be set when the previous reported bit is cleared.
<3>     P_EOP   R/W1C      0           0        Set when a EOP is followed by an EOP for the same      
                                                 port for a passthrough packet.
                                                 The first detected error associated with bits [5:0]
                                                 of this register will only be set here. A new bit
                                                 can be set when the previous reported bit is cleared.

<4>     NP_DAT  R/W1C      0           0        Set when a data arrives before a SOP for the same      
                                                 port for a non-passthrough packet.
                                                 The first detected error associated with bits [5:0]
                                                 of this register will only be set here. A new bit
                                                 can be set when the previous reported bit is cleared.
<5>     P_DAT   R/W1C      0           0        Set when a data arrives before a SOP for the same      
                                                 port for a passthrough packet.
                                                 The first detected error associated with bits [5:0]
                                                 of this register will only be set here. A new bit
                                                 can be set when the previous reported bit is cleared.
<63:6>  NS       RAZ       NS          NS       Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  IOB_INT_ENB = IOB's Interrupt Enable
 *
 * The IOB's interrupt enable register. This is a PASS-2 register.
 *

     ==============================================================
     IOB_INT_ENB Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     NP_SOP   R/W      0           0         When set (1) and bit 0 of the IOB_INT_SUM              
                                                 register is asserted the IOB will assert an                                        
                                                 interrupt.                                                                         
<1>     NP_EOP   R/W      0           0         When set (1) and bit 1 of the IOB_INT_SUM              
                                                 register is asserted the IOB will assert an                                        
                                                 interrupt.                                                                         
<2>     P_SOP    R/W      0           0         When set (1) and bit 2 of the IOB_INT_SUM              
                                                 register is asserted the IOB will assert an                                        
                                                 interrupt.                                                                         
<3>     P_EOP    R/W      0           0         When set (1) and bit 3 of the IOB_INT_SUM              
                                                 register is asserted the IOB will assert an                                        
                                                 interrupt.                                                                         
<4>     NP_DAT   R/W      0           0         When set (1) and bit 4 of the IOB_INT_SUM              
                                                 register is asserted the IOB will assert an                                        
                                                 interrupt.                                                                         
<5>     P_DAT    R/W      0           0         When set (1) and bit 5 of the IOB_INT_SUM              
                                                 register is asserted the IOB will assert an                                        
                                                 interrupt.                                                                         
<63:6>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  IOB_PKT_ERR = IOB Packet Error Register
 *
 * Provides status about the failing packet recevie error. This is a PASS-2 register.
 *

     ==============================================================
     IOB_PKT_ERR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<5:0>   PORT     RO       0x0         NS        When IOB_INT_SUM[3:0] bit is set, this field           
                                                 latches the failing port associate with the
                                                 IOB_INT_SUM[3:0] bit set.
<63:6>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===



*
*                  IOB_INB_DATA_MATCH = IOB Inbound Data Match
*
* Match pattern for the inbound data to set the INB_MATCH_BIT. PASS-2 Register
*

     ==============================================================
     IOB_INB_DATA_MATCH Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  DATA     R/W      0x0         NS        Pattern to match on the inbound NCB.                   
----------------------------------------------------------------------------------------------------
===

*
*                  IOB_INB_CONTROL_MATCH = IOB Inbound Control Match
*
* Match pattern for the inbound control to set the INB_MATCH_BIT. PASS-2 Register
*

     ==============================================================
     IOB_INB_CONTROL_MATCH Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:29> NS        RAZ     NS          NS        Reserved                                               
<28:21> MASK     R/W      0x0         NS        Pattern to match on the inbound NCB.                   
<20:17> OPC      R/W      0x0         NS        Pattern to match on the inbound NCB.                   
<16:8>  DST      R/W      0x0         NS        Pattern to match on the inbound NCB.                   
<7:0>   SRC      R/W      0x0         NS        Pattern to match on the inbound NCB.                   
----------------------------------------------------------------------------------------------------
===

*
*                  IOB_INB_DATA_MATCH_ENB = IOB Inbound Data Match Enable
*
* Enables the match of the corresponding bit in the IOB_INB_DATA_MATCH reister. PASS-2 Register
*

     ==============================================================
     IOB_INB_DATA_MATCH_ENB Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  DATA     R/W      0x0         NS        Bit to enable match of.                                
----------------------------------------------------------------------------------------------------
===

*
*                  IOB_INB_CONTROL_MATCH_ENB = IOB Inbound Control Match Enable
*
* Enables the match of the corresponding bit in the IOB_INB_CONTROL_MATCH reister. PASS-2 Register
*

     ==============================================================
     IOB_INB_CONTROL_MATCH_ENB Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:29> NS        RAZ     NS          NS        Reserved                                               
<28:21> MASK     R/W      0x0         NS        Pattern to match on the inbound NCB.                   
<20:17> OPC      R/W      0x0         NS        Pattern to match on the inbound NCB.                   
<16:8>  DST      R/W      0x0         NS        Pattern to match on the inbound NCB.                   
<7:0>   SRC      R/W      0x0         NS        Pattern to match on the inbound NCB.                   
----------------------------------------------------------------------------------------------------
===

*
*                  IOB_OUTB_DATA_MATCH = IOB Outbound Data Match
*
* Match pattern for the outbound data to set the OUTB_MATCH_BIT. PASS-2 Register
*

     ==============================================================
     IOB_OUTB_DATA_MATCH Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  DATA     R/W      0x0         NS        Pattern to match on the outbound NCB.                   
----------------------------------------------------------------------------------------------------
===

*
*                  IOB_OUTB_CONTROL_MATCH = IOB Outbound Control Match
*
* Match pattern for the outbound control to set the OUTB_MATCH_BIT. PASS-2 Register
*

     ==============================================================
     IOB_OUTB_CONTROL_MATCH Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:26> NS        RAZ     NS          NS        Reserved                                               
<25:18> MASK     R/W      0x0         NS        Pattern to match on the outbound NCB.                   
<17>    EOT      R/W      0x0         NS        Pattern to match on the outbound NCB.                   
<16:9>  DST      R/W      0x0         NS        Pattern to match on the outbound NCB.                   
<8:0>   SRC      R/W      0x0         NS        Pattern to match on the outbound NCB.                   
----------------------------------------------------------------------------------------------------
===

*
*                  IOB_OUTB_DATA_MATCH_ENB = IOB Outbound Data Match Enable
*
* Enables the match of the corresponding bit in the IOB_OUTB_DATA_MATCH reister. PASS-2 Register
*

     ==============================================================
     IOB_OUTB_DATA_MATCH_ENB Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  DATA     R/W      0x0         NS        Bit to enable match of.                                
----------------------------------------------------------------------------------------------------
===

*
*                  IOB_OUTB_CONTROL_MATCH_ENB = IOB Outbound Control Match Enable
*
* Enables the match of the corresponding bit in the IOB_OUTB_CONTROL_MATCH reister. PASS-2 Register
*

     ==============================================================
     IOB_OUTB_CONTROL_MATCH_ENB Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:26> NS        RAZ     NS          NS        Reserved                                               
<25:18> MASK     R/W      0x0         NS        Pattern to match on the outbound NCB.                   
<17>    EOT      R/W      0x0         NS        Pattern to match on the outbound NCB.                   
<16:9>  DST      R/W      0x0         NS        Pattern to match on the outbound NCB.                   
<8:0>   SRC      R/W      0x0         NS        Pattern to match on the outbound NCB.                   
----------------------------------------------------------------------------------------------------
===


*
*                  IOB_BIST_STATUS = BIST Status of IOB Memories
*
* The result of the BIST run on the IOB memories.
*

     ==============================================================
     IOB_BIST_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     ICD      RO       0x0         0         icd_ncb_fifo_bist_status                               
<1>     IBD      RO       0x0         0         ibd_bist_mem0_status                                   
<2>     ICRP1    RO       0x0         0         icr_pko_bist_mem1_status                               
<3>     ICRP0    RO       0x0         0         icr_pko_bist_mem0_status                               
<4>     ICRN1    RO       0x0         0         icr_ncb_bist_mem1_status                               
<5>     ICRN0    RO       0x0         0         icr_ncb_bist_mem0_status                               
<6>     IBRQ1    RO       0x0         0         ibrq_bist_req_fifo1_status                             
<7>     IBRQ0    RO       0x0         0         ibrq_bist_req_fifo0_status                             
<8>     ICNRT    RO       0x0         0         icnr_tag_cb_reg_fifo_bist_status                       
<9>     IBR1     RO       0x0         0         ibr_bist_rsp_fifo1_status                              
<10>    IBR0     RO       0x0         0         ibr_bist_rsp_fifo0_status                              
<11>    IBDR1    RO       0x0         0         ibdr_bist_req_fifo1_status                             
<12>    IBDR0    RO       0x0         0         ibdr_bist_req_fifo0_status                             
<13>    ICNR0    RO       0x0         0         icnr_reg_mem0_bist_status                              
<14>    ICNR1    RO       0x0         0         icnr_reg_mem1_bist_status                              
<15>    ICR1     RO       0x0         0         icr_bist_req_fifo1_status                              
<16>    ICR0     RO       0x0         0         icr_bist_req_fifo0_status                              
<17>    ICNRCB   RO       0x0         0         icnr_cb_reg_fifo_bist_status                           
<63:18> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  IPD_1ST_MBUFF_SKIP = IPD First MBUFF Word Skip Size
 *
 * The number of words that the IPD will skip when writing the first MBUFF.
 *

     ==============================================================
     IPD_1ST_MBUFF_SKIP Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<5:0>   SKIP_SZ  R/W      0           0         The number of 8-byte words from the top of the         
                                                 1st MBUFF that the IPD will store the next-pointer.
                                                 Legal values are 0 to 32, where the MAX value
                                                 is also limited to:
                                                 IPD_PACKET_MBUFF_SIZE[MB_SIZE] - 18.
<63:6>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_NOT_1ST_MBUFF_SKIP = IPD Not First MBUFF Word Skip Size
*
* The number of words that the IPD will skip when writing any MBUFF that is not the first.
*

     ==============================================================
     IPD_NOT_1ST_MBUFF_SKIP Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<5:0>   SKIP_SZ  R/W      0           0         The number of 8-byte words from the top of any         
                                                 MBUFF, that is not the 1st MBUFF, that the IPD                                                     
                                                 will write the next-pointer.                                                                       
                                                 Legal values are 0 to 32, where the MAX value
                                                 is also limited to:
                                                 IPD_PACKET_MBUFF_SIZE[MB_SIZE] - 16.
<63:6>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_PACKET_MBUFF_SIZE = IPD's PACKET MUBUF Size In Words
*
* The number of words in a MBUFF used for packet data store.
*

     ==============================================================
     IPD_PACKET_MBUFF_SIZE Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<11:0>  MB_SIZE  R/W       32          32       The number of 8-byte words in a MBUF.                 
                                                 This must be a number in the range of 32 to
                                                 2048.
                                                 This is also the size of the FPA's                                                         
                                                 Queue-0 Free-Page.
<63:12> NS       RAZ       NS          NS       Reserved                                               
----------------------------------------------------------------------------------------------------
===


*
*                  IPD_CTL_STATUS = IPS'd Control Status Register
*
* The number of words in a MBUFF used for packet data store.
*

     ==============================================================
     IPD_CTL_STATUS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     IPD_EN   R/W      0           0         When set '1' enable the operation of the IPD.          
                                                 When clear '0', the IPD will appear to the
                                                 IOB-arbiter to be applying backpressure, this
                                                 causes the IOB-Arbiter to not send grants to NCB
                                                 devices requesting to send packet data to the IPD.
<2:1>   OPC_MODE R/W      0           0         0 ==> All packet data (and next buffer pointers)       
                                                 is written through to memory.
                                                 1 ==> All packet data (and next buffer pointers) is
                                                 written into the cache.
                                                 2 ==> The first aligned cache block holding the
                                                 packet data (and initial next buffer pointer) is
                                                 written to the L2 cache, all remaining cache blocks
                                                 are not written to the L2 cache.
                                                 3 ==> The first two aligned cache blocks holding
                                                 the packet data (and initial next buffer pointer)
                                                 are written to the L2 cache, all remaining cache
                                                 blocks are not written to the L2 cache.
<3>     PBP_EN   R/W      0           0         Port back pressure enable. When set '1' enables        
                                                 the sending of port level backpressure to the
                                                 Octane input-ports. Once enabled the sending of
                                                 port-level-backpressure can not be disabled by
                                                 changing the value of this bit.
<4>     WQE_LEND R/W      0           0         Changes WQE to little endian writes to L2C             
<5>     PKT_LEND R/W      0           0         Changes PKT to little endian writes to L2C             
<6>     NADDBUF  R/W      0           0         When IPD_CTL_STATUS[NADDBUF] is set,                   
                                                 IPD_PORT_BP_COUNTERS_PAIR(port)[CNT_VAL]
                                                 WILL NOT be incremented when IPD allocates a
                                                 buffer for a packet on the port.
                                                 PASS-2 Field.
<7>     ADDPKT   R/W      0           0         When IPD_CTL_STATUS[ADDPKT] is set,                    
                                                 IPD_PORT_BP_COUNTERS_PAIR(port)[CNT_VAL]
                                                 WILL be incremented by one for every work
                                                 queue entry that is sent to POW.
                                                 PASS-2 Field.
<8>     RESET    R/W      0           0         When set '1' causes a reset of the IPD, except         
                                                 RSL.
<9>     LEN_M8   R/W      0           1         Setting of this bit will subtract 8 from the           
                                                 data-length field in the header written wo the
                                                 POW and the top of a MBUFF.
                                                 OCTEAN PASS2 generates a length that includes the
                                                 length of the data + 8 for the header-field. By
                                                 setting this bit the 8 for the instr-field will
                                                 not be included in the length field of the header.
                                                 NOTE: IPD is compliant with the spec when this
                                                 field is '1'.
<10>     PKT_OFF   R/W      0           0        When clear '0' the IPD working normaly,                
                                                 buffering the received packet data. When set '1'
                                                 the IPD will not buffer the received packet data.
<11>     IPD_FULL  R/W      0           0        When clear '0' the IPD acts normaly.                   
                                                 When set '1' the IPD drive the IPD_BUFF_FULL line to
                                                 the IOB-arbiter, telling it to not give grants to
                                                 NCB devices sending packet data.
<63:12> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_WQE_FPA_QUEUE = IPD Work-Queue-Entry FPA Page Size
*
* Which FPA Queue (0-7) to fetch page-pointers from for WQE's
*

     ==============================================================
     IPD_WQE_FPA_QUEUE Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<2:0>   WQE_QUE  R/W      1           1         Which FPA Queue to fetch page-pointers                 
                                                 from for WQE's.                                                                              
<63:3>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_PORT@_BP_PAGE_CNT = IPD Port Backpressure Page Count
*
* The number of pages in use by the port that when exceeded, backpressure will be applied to the port.
*

     ==============================================================
     IPD_PORT(0..35)_BP_PAGE_CNT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<16:0>  PAGE_CNT R/W      0x0         0         The number of page pointers assigned to                
                                                 the port, that when exceeded will cause                                                       
                                                 back-pressure to be applied to the port.                                                      
                                                 This value is in 256 page-pointer increments,
                                                 (i.e. 0 = 0-page-ptrs, 1 = 256-page-ptrs,..)
<17>    BP_ENB   R/W      0x0         0         When set '1' BP will be applied, if '0' BP will        
                                                 not be applied to port.
<63:18> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_SUB_PORT_BP_PAGE_CNT = IPD Subtract Port Backpressure Page Count
*
* Will add the value to the indicated port count register, the number of pages supplied. The value added should
* be the 2's complement of the vallue that needs to be subtracted. Users would add 2's compliment values to the
* port-mbuf-count register to return (lower the count) mbufs to the counter in order to avoid port-level
* backpressure being applied to the port. Backpressure is applied when the MBUF used count of a port exceeds the
* value in the IPD_PORT@_BP_PAGE_CNT.
*
* This register can't be written from the PCI via a window write.
*

     ==============================================================
     IPD_SUB_PORT_BP_PAGE_CNT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<24:0>  PAGE_CNT R/W      NS          0         The number of page pointers to add to                  
                                                 the port counter pointed to by the                                                     
                                                 PORT Field.                                                                                    
<30:25> PORT     R/W      NS          0         The port to add the PAGE_CNT field to.                 
<63:31> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_1st_NEXT_PTR_BACK = IPD First Next Pointer Back Values
*
* Contains the Back Field for use in creating the Next Pointer Header for the First MBUF
*

     ==============================================================
     IPD_1st_NEXT_PTR_BACK Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   BACK     R/W      0x0         0         Used to find head of buffer from the nxt-hdr-ptr.      
<63:4>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_2nd_NEXT_PTR_BACK = IPD Second Next Pointer Back Value
*
* Contains the Back Field for use in creating the Next Pointer Header for the First MBUF
*

     ==============================================================
     IPD_2nd_NEXT_PTR_BACK Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   BACK     R/W      0x0         0         Used to find head of buffer from the nxt-hdr-ptr.      
<63:4>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_INTERRUPT_ENB = IPD Interrupt Enable Register
*
* Used to enable the various interrupting conditions of IPD
*

     ==============================================================
     IPD_INT_ENB Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     PRC_PAR0 R/W      0x0         0         Enable parity error interrupts for bits                
                                                 [31:0] of the PBM memory.                                                                          
<1>     PRC_PAR1 R/W      0x0         0         Enable parity error interrupts for bits                
                                                 [63:32] of the PBM memory.                                                                         
<2>     PRC_PAR2 R/W      0x0         0         Enable parity error interrupts for bits                
                                                 [95:64] of the PBM memory.                                                       
<3>     PRC_PAR3 R/W      0x0         0         Enable parity error interrupts for bits                
                                                 [127:96] of the PBM memory.                                                                        
<4>     BP_SUB   R/W      0x0         0         Enables interrupts when a backpressure subtract        
                                                 has an illegal value.
<5>     DC_OVR   R/W      0x0         0         Allows an interrupt to be sent when the                
                                                 corresponding bit in the IPD_INT_SUM is set.
                                                 This is a PASS-3 Field.
<6>     CC_OVR   R/W      0x0         0         Allows an interrupt to be sent when the                
                                                 corresponding bit in the IPD_INT_SUM is set.
                                                 This is a PASS-3 Field.
<7>     C_COLL   R/W      0x0         0         Allows an interrupt to be sent when the                
                                                 corresponding bit in the IPD_INT_SUM is set.
                                                 This is a PASS-3 Field.
<8>     D_COLL   R/W      0x0         0         Allows an interrupt to be sent when the                
                                                 corresponding bit in the IPD_INT_SUM is set.
                                                 This is a PASS-3 Field.
<9>     BC_OVR   R/W      0x0         0         Allows an interrupt to be sent when the                
                                                 corresponding bit in the IPD_INT_SUM is set.
                                                 This is a PASS-3 Field.
<63:10> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_INTERRUPT_SUM = IPD Interrupt Summary Register
*
* Set when an interrupt condition occurs, write '1' to clear.
*

     ==============================================================
     IPD_INT_SUM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     PRC_PAR0 R/W1C    0x0         0         Set when a parity error is dected for bits             
                                                 [31:0] of the PBM memory.                                                                          
<1>     PRC_PAR1 R/W1C    0x0         0         Set when a parity error is dected for bits             
                                                 [63:32] of the PBM memory.                                                      
<2>     PRC_PAR2 R/W1C    0x0         0         Set when a parity error is dected for bits             
                                                 [95:64] of the PBM memory.                                                      
<3>     PRC_PAR3 R/W1C    0x0         0         Set when a parity error is dected for bits             
                                                 [127:96] of the PBM memory.                                                                        
<4>     BP_SUB   R/W1C    0x0         0         Set when a backpressure subtract is done with a        
                                                 supplied illegal value.
<5>     DC_OVR   R/W1C    0x0         0         Set when the data credits to the IOB overflow.         
                                                 This is a PASS-3 Field.
<6>     CC_OVR   R/W1C    0x0         0         Set when the command credits to the IOB overflow.      
                                                 This is a PASS-3 Field.
<7>     C_COLL   R/W1C    0x0         0         Set when the packet/WQE commands to be sent to IOB     
                                                 collides.
                                                 This is a PASS-3 Field.
<8>     D_COLL   R/W1C    0x0         0         Set when the packet/WQE data to be sent to IOB         
                                                 collides.
                                                 This is a PASS-3 Field.
<9>     BC_OVR   R/W1C    0x0         0         Set when the byte-count to send to IOB overflows.      
                                                 This is a PASS-3 Field.
<63:10> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


*
*                  IPD_SUB_PORT_FCS = IPD Subtract Ports FCS Register
*
* When set '1' the port corresponding to the but set will subtract 4 bytes from the end of
* the packet.
*

     ==============================================================
     IPD_SUB_PORT_FCS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PORT_BIT R/W      0xffffffff  0xffffffff When set '1', the port corresponding to the bit       
                                                 position set, will subtract the FCS for packets
                                                 on that port.
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


*
*                  IPD_QOS0_RED_MARKS = IPD QOS 0 Marks Red High Low
*
* Set the pass-drop marks for qos level.
*

     ==============================================================
     IPD_QOS0_RED_MARKS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PASS     R/W      0x0         NS        Packets will be passed when the average value of    
                                                 IPD_QUE0_FREE_PAGE_CNT is larger than this value.
<63:32> DROP     R/W      0x0         NS        Packets will be dropped when the average value of   
                                                 IPD_QUE0_FREE_PAGE_CNT is equal to or less than
                                                 this value.                                                     
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_QOS1_RED_MARKS = IPD QOS 1 Marks Red High Low
*
* Set the pass-drop marks for qos level.
*

     ==============================================================
     IPD_QOS1_RED_MARKS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PASS     R/W      0x0         NS        Packets will be passed when the average value of    
                                                 IPD_QUE0_FREE_PAGE_CNT is larger than this value.
<63:32> DROP     R/W      0x0         NS        Packets will be dropped when the average value of   
                                                 IPD_QUE0_FREE_PAGE_CNT is equal to or less than
                                                 this value.                                                     
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_QOS2_RED_MARKS = IPD QOS 2 Marks Red High Low
*
* Set the pass-drop marks for qos level.
*

     ==============================================================
     IPD_QOS2_RED_MARKS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PASS     R/W      0x0         NS        Packets will be passed when the average value of    
                                                 IPD_QUE0_FREE_PAGE_CNT is larger than this value.
<63:32> DROP     R/W      0x0         NS        Packets will be dropped when the average value of   
                                                 IPD_QUE0_FREE_PAGE_CNT is equal to or less than
                                                 this value.                                                     
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_QOS3_RED_MARKS = IPD QOS 3 Marks Red High Low
*
* Set the pass-drop marks for qos level.
*

     ==============================================================
     IPD_QOS3_RED_MARKS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PASS     R/W      0x0         NS        Packets will be passed when the average value of    
                                                 IPD_QUE0_FREE_PAGE_CNT is larger than this value.
<63:32> DROP     R/W      0x0         NS        Packets will be dropped when the average value of   
                                                 IPD_QUE0_FREE_PAGE_CNT is equal to or less than
                                                 this value.                                                     
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_QOS4_RED_MARKS = IPD QOS 4 Marks Red High Low
*
* Set the pass-drop marks for qos level.
*

     ==============================================================
     IPD_QOS4_RED_MARKS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PASS     R/W      0x0         NS        Packets will be passed when the average value of    
                                                 IPD_QUE0_FREE_PAGE_CNT is larger than this value.
<63:32> DROP     R/W      0x0         NS        Packets will be dropped when the average value of   
                                                 IPD_QUE0_FREE_PAGE_CNT is equal to or less than
                                                 this value.                                                     
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_QOS5_RED_MARKS = IPD QOS 5 Marks Red High Low
*
* Set the pass-drop marks for qos level.
*

     ==============================================================
     IPD_QOS5_RED_MARKS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PASS     R/W      0x0         NS        Packets will be passed when the average value of    
                                                 IPD_QUE0_FREE_PAGE_CNT is larger than this value.
<63:32> DROP     R/W      0x0         NS        Packets will be dropped when the average value of   
                                                 IPD_QUE0_FREE_PAGE_CNT is equal to or less than
                                                 this value.                                                     
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_QOS6_RED_MARKS = IPD QOS 6 Marks Red High Low
*
* Set the pass-drop marks for qos level.
*

     ==============================================================
     IPD_QOS6_RED_MARKS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PASS     R/W      0x0         NS        Packets will be passed when the average value of    
                                                 IPD_QUE0_FREE_PAGE_CNT is larger than this value.
<63:32> DROP     R/W      0x0         NS        Packets will be dropped when the average value of   
                                                 IPD_QUE0_FREE_PAGE_CNT is equal to or less than
                                                 this value.                                                     
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_QOS7_RED_MARKS = IPD QOS 7 Marks Red High Low
*
* Set the pass-drop marks for qos level.
*

     ==============================================================
     IPD_QOS7_RED_MARKS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PASS     R/W      0x0         NS        Packets will be passed when the average value of    
                                                 IPD_QUE0_FREE_PAGE_CNT is larger than this value.
<63:32> DROP     R/W      0x0         NS        Packets will be dropped when the average value of   
                                                 IPD_QUE0_FREE_PAGE_CNT is equal to or less than
                                                 this value.                                                     
----------------------------------------------------------------------------------------------------
===

*
* IPD_PORT_BP_COUNTERS_PAIR@ = MBUF Counters port Ports used to generate Back Pressure Per Port.
*

     ==============================================================
     IPD_PORT_BP_COUNTERS_PAIR(0..35) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:25> RSVRD    RAZ      NS          NS        Reserved                                           |   
<24:0>  CNT_VAL  RO       0x0         NS        Number of MBUFs being used by data on this port.   |   
----------------------------------------------------------------------------------------------------
===
   
 *
 *                  IPD_RED_PORT_ENABLE = IPD RED Port Enable
 *
 * Set the pass-drop marks for qos level.
 *

     ==============================================================
     IPD_RED_PORT_ENABLE Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<35:0>  PRT_ENB  R/W      0x0         0         The bit position will enable the corresponding      
                                                 Ports ability to have packets dropped by RED
                                                 probability.
<49:36> AVG_DLY  R/W      0x0         NS        Number (core clocks periods + 10) * 8 to wait       
                                                 before caluclating the moving average for wach
                                                 QOS level.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<63:50> PRB_DLY  R/W      0x0         0         Number (core clocks periods + 68) * 8 to wait       
                                                 before caluclating the new packet drop
                                                 probability for each QOS level.
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_RED_QUE0_PARAM = IPD RED Queue-0 Parameters
*
* Value control the Passing and Dropping of packets by the red engine for QOS Level-0.
*

     ==============================================================
     IPD_RED_QUE0_PARAM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PRB_CON  R/W      0x0         NS        Used in computing the probability of a packet being  
                                                 passed or drop by the WRED engine. The field is
                                                 calculated to be (255 * 2^24)/(PASS-DROP). Where
                                                 PASS and DROP are the field from the
                                                 IPD_QOS0_RED_MARKS CSR.
<39:32> AVG_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Average Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents AVG_CON/256 of the Average
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 NEW_CON must be equal to 256.                      
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<47:40> NEW_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Actual Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents NEW_CON/256 of the Actual
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 AVG_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<48>    USE_PCNT R/W      0           0         When set '1' red will use the actual Packet-Page     
                                                 Count in place of the Average for RED calculations.
<63:49> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_RED_QUE1_PARAM = IPD RED Queue-1 Parameters
*
* Value control the Passing and Dropping of packets by the red engine for QOS Level-1.
*

     ==============================================================
     IPD_RED_QUE1_PARAM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PRB_CON  R/W      0x0         NS        Used in computing the probability of a packet being  
                                                 passed or drop by the WRED engine. The field is
                                                 calculated to be (255 * 2^24)/(PASS-DROP). Where
                                                 PASS and DROP are the field from the
                                                 IPD_QOS1_RED_MARKS CSR.
<39:32> AVG_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Average Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents AVG_CON/256 of the Average
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 NEW_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<47:40> NEW_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Actual Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents NEW_CON/256 of the Actual
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 AVG_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<48>    USE_PCNT R/W      0           0         When set '1' red will use the actual Packet-Page     
                                                 Count in place of the Average for RED calculations.
<63:49> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===
*
*                  IPD_RED_QUE2_PARAM = IPD RED Queue-2 Parameters
*
* Value control the Passing and Dropping of packets by the red engine for QOS Level-2.
*

     ==============================================================
     IPD_RED_QUE2_PARAM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PRB_CON  R/W      0x0         NS        Used in computing the probability of a packet being  
                                                 passed or drop by the WRED engine. The field is
                                                 calculated to be (255 * 2^24)/(PASS-DROP). Where
                                                 PASS and DROP are the field from the
                                                 IPD_QOS2_RED_MARKS CSR.
<39:32> AVG_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Average Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents AVG_CON/256 of the Average
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 NEW_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<47:40> NEW_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Actual Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents NEW_CON/256 of the Actual
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 AVG_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<48>    USE_PCNT R/W      0           0         When set '1' red will use the actual Packet-Page     
                                                 Count in place of the Average for RED calculations.
<63:49> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===
*
*                  IPD_RED_QUE3_PARAM = IPD RED Queue-3 Parameters
*
* Value control the Passing and Dropping of packets by the red engine for QOS Level-3.
*

     ==============================================================
     IPD_RED_QUE3_PARAM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PRB_CON  R/W      0x0         NS        Used in computing the probability of a packet being  
                                                 passed or drop by the WRED engine. The field is
                                                 calculated to be (255 * 2^24)/(PASS-DROP). Where
                                                 PASS and DROP are the field from the
                                                 IPD_QOS3_RED_MARKS CSR.
<39:32> AVG_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Average Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents AVG_CON/256 of the Average
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 NEW_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<47:40> NEW_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Actual Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents NEW_CON/256 of the Actual
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 AVG_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<48>    USE_PCNT R/W      0           0         When set '1' red will use the actual Packet-Page     
                                                 Count in place of the Average for RED calculations.
<63:49> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===
*
*                  IPD_RED_QUE4_PARAM = IPD RED Queue-4 Parameters
*
* Value control the Passing and Dropping of packets by the red engine for QOS Level-4.
*

     ==============================================================
     IPD_RED_QUE4_PARAM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PRB_CON  R/W      0x0         NS        Used in computing the probability of a packet being  
                                                 passed or drop by the WRED engine. The field is
                                                 calculated to be (255 * 2^24)/(PASS-DROP). Where
                                                 PASS and DROP are the field from the
                                                 IPD_QOS4_RED_MARKS CSR.
<39:32> AVG_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Average Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents AVG_CON/256 of the Average
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 NEW_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<47:40> NEW_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Actual Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents NEW_CON/256 of the Actual
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 AVG_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<48>    USE_PCNT R/W      0           0         When set '1' red will use the actual Packet-Page     
                                                 Count in place of the Average for RED calculations.
<63:49> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===
*
*                  IPD_RED_QUE5_PARAM = IPD RED Queue-5 Parameters
*
* Value control the Passing and Dropping of packets by the red engine for QOS Level-5.
*

     ==============================================================
     IPD_RED_QUE5_PARAM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PRB_CON  R/W      0x0         NS        Used in computing the probability of a packet being  
                                                 passed or drop by the WRED engine. The field is
                                                 calculated to be (255 * 2^24)/(PASS-DROP). Where
                                                 PASS and DROP are the field from the
                                                 IPD_QOS5_RED_MARKS CSR.
<39:32> AVG_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Average Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents AVG_CON/256 of the Average
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 NEW_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<47:40> NEW_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Actual Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents NEW_CON/256 of the Actual
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 AVG_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<48>    USE_PCNT R/W      0           0         When set '1' red will use the actual Packet-Page     
                                                 Count in place of the Average for RED calculations.
<63:49> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===
*
*                  IPD_RED_QUE6_PARAM = IPD RED Queue-6 Parameters
*
* Value control the Passing and Dropping of packets by the red engine for QOS Level-6.
*

     ==============================================================
     IPD_RED_QUE6_PARAM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PRB_CON  R/W      0x0         NS        Used in computing the probability of a packet being  
                                                 passed or drop by the WRED engine. The field is
                                                 calculated to be (255 * 2^24)/(PASS-DROP). Where
                                                 PASS and DROP are the field from the
                                                 IPD_QOS6_RED_MARKS CSR.
<39:32> AVG_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Average Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents AVG_CON/256 of the Average
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 NEW_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<47:40> NEW_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Actual Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents NEW_CON/256 of the Actual
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 AVG_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<48>    USE_PCNT R/W      0           0         When set '1' red will use the actual Packet-Page     
                                                 Count in place of the Average for RED calculations.
<63:49> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===
*
*                  IPD_RED_QUE7_PARAM = IPD RED Queue-7 Parameters
*
* Value control the Passing and Dropping of packets by the red engine for QOS Level-7.
*

     ==============================================================
     IPD_RED_QUE7_PARAM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PRB_CON  R/W      0x0         NS        Used in computing the probability of a packet being  
                                                 passed or drop by the WRED engine. The field is
                                                 calculated to be (255 * 2^24)/(PASS-DROP). Where
                                                 PASS and DROP are the field from the
                                                 IPD_QOS7_RED_MARKS CSR.
<39:32> AVG_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Average Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents AVG_CON/256 of the Average
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 NEW_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<47:40> NEW_CON  R/W      0x0         NS        This value is used control how much of the present   
                                                 Actual Queue Size is used to calculate the new 
                                                 Average Queue Size. The value is a number from 0
                                                 256, which represents NEW_CON/256 of the Actual
                                                 Queue Size that will be used in the calculation.
                                                 The number in this field plus the value of
                                                 AVG_CON must be equal to 256.
                                                 Larger AVG_DLY values cause the moving averages
                                                 of ALL QOS levels to track changes in the actual
                                                 free space more slowly. Smaller NEW_CON (and
                                                 larger AVG_CON) values can have a similar effect,
                                                 but only affect an individual QOS level, rather
                                                 than all.
<48>    USE_PCNT R/W      0           0         When set '1' red will use the actual Packet-Page     
                                                 Count in place of the Average for RED calculations.
<63:49> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_PTR_COUNT = IPD Page Pointer Count
*
* Shows the number of WQE and Packet Page Pointers stored in the IPD.
*

     ==============================================================
     IPD_PTR_COUNT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<6:0>   WQE_PCNT RO       0x0         0         Number of page pointers for WQE storage that are     
                                                 buffered in the IPD. The total count is the value
                                                 of this buffer plus the field [WQEV_CNT]. For
                                                 PASS-1 (which does not have the WQEV_CNT field)
                                                 when the value of this register is '0' there still
                                                 may be 1 pointer being help by IPD.
<13:7>  PKT_PCNT RO       0x0         0         This value plus PFIF_CNT plus 36 is the number       
                                                 of PKT Page Pointers in IPD.
<16:14> PFIF_CNT RO       0x0         0         See PKT_PCNT.                                        
<17>    WQEV_CNT RO       0x0         0         WQE Ptr Valid. This value is '1' when a WQE          
                                                 is being for use by the IPD. The value of this
                                                 field shoould be added to tha value of the
                                                 WQE_PCNT field, of this register, for a total
                                                 count of the WQE Page Pointers being held by IPD.
                                                 PASS2 Field.
<18>    PKTV_CNT RO       0x0         0         PKT Ptr Valid. PASS2 Field                           
<63:19> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_BP_PRT_RED_END = IPD Backpressure Port RED Enable
*
* When IPD applies backpressure to a PORT and the corresponding bit in this register is set,
* the RED Unit will drop packets for that port.
*

     ==============================================================
     IPD_BP_PRT_RED_END Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<35:0>  PRT_ENB  R/W      0x0         0         The port corresponding to the bit position in this   
                                                 field, will allow RED to drop back when port level
                                                 backpressure is applied to the port. The applying
                                                 of port-level backpressure for this RED dropping
                                                 does not take into consideration the value of
                                                 IPD_PORT@_BP_PAGE_CNT[BP_ENB].
<63:36> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_QUE0_FREE_PAGE_CNT = IPD Queue0 Free Page Count
*
* Number of Free-Page Pointer that are available for use in the FPA for Queue-0.
*

     ==============================================================
     IPD_QUE0_FREE_PAGE_CNT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  Q0_PCNT  RO       0x0         0         Number of Queue-0 Page Pointers Available.           
<63:32> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_CLK_COUNT = IPD Clock Count
*
* Counts the number of core clocks periods since the de-asserition of reset.
*

     ==============================================================
     IPD_CLK_COUNT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  CLK_CNT  RO       0x0         0         This counter will be zeroed when reset is applied   
                                                 and will increment every rising edgge of the
                                                 core-clock. PASS2 FIELD.
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_PWP_PTR_FIFO_CTL = IPD's PWP Pointer FIFO Control
*
* Allows reading of the Page-Pointers stored in the IPD's PWP Fifo.
*

     ==============================================================
     IPD_PWP_PTR_FIFO_CTL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<7:0>   RADDR    R/W      0x0         0         Sets the address to read from in the pwp_fifo.       
                                                 Addresses 0 through 7 contain Packet-Pointers and
                                                 addresses 8 through 15 contain WQE-Pointers.
<8>     CENA     R/W      0x1         1         Active low Chip Enable to the read port of the       
                                                 pwp_fifo. This bit also controls the MUX-select
                                                 that steers [RADDR] to the pwp_fifo.
                                                 *WARNING - Setting this field to '0' will allow
                                                 reading of the memories thorugh the PTR field,
                                                 but will cause unpredictable operation of the IPD
                                                 under normal operation.
<37:9>  PTR      RO       NS          NS        The output of the pwp_fifo.                          
<45:38> PRADDR   RO       NS          NS        Present FIFO Packet Read address.                    
<53:46> WRADDR   RO       NS          NS        Present FIFO WQE Read address.                       
<60:54> MAX_CNTS RO       0x40        0x40      Maximum number of Packet-Pointers or WQE-Pointers    
                                                 that COULD be in the FIFO.
<63:61> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_PRC_HOLD_PTR_FIFO_CTL = IPD's PRC Holding Pointer FIFO Control
*
* Allows reading of the Page-Pointers stored in the IPD's PRC Holding Fifo.
*

     ==============================================================
     IPD_PRC_HOLD_PTR_FIFO_CTL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<2:0>   RADDR    R/W      0x0         0         Sets the address to read from in the holding.        
                                                 fifo in the PRC. This FIFO holds Packet-Pointers
                                                 to be used for packet data storage.
<3>     CENA     R/W      0x1         1         Active low Chip Enable that controls the             
                                                 MUX-select that steers [RADDR] to the fifo.
                                                 *WARNING - Setting this field to '0' will allow
                                                 reading of the memories thorugh the PTR field,
                                                 but will cause unpredictable operation of the IPD
                                                 under normal operation.
<32:4>  PTR      RO       NS          NS        The output of the prc-holding-fifo.                  
<35:33> PRADDR   RO       NS          NS        Present Packet-Pointer read address.                 
<38:36> MAX_PKT  RO       0x5         0x5       Maximum number of Packet-Pointers that COULD be      
                                                 in the FIFO.
<63:39> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_PRC_PORT_PTR_FIFO_CTL = IPD's PRC PORT Pointer FIFO Control
*
* Allows reading of the Page-Pointers stored in the IPD's PRC PORT Fifo.
*

     ==============================================================
     IPD_PRC_PORT_PTR_FIFO_CTL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<6:0>   RADDR    R/W      0x0         0         Sets the address to read from in the port            
                                                 fifo in the PRC. This FIFO holds Packet-Pointers
                                                 to be used for packet data storage.
<7>     CENA     R/W      0x1         1         Active low Chip Enable to the read port of the       
                                                 pwp_fifo. This bit also controls the MUX-select
                                                 that steers [RADDR] to the pwp_fifo.
                                                 *WARNING - Setting this field to '0' will allow
                                                 reading of the memories thorugh the PTR field,
                                                 but will cause unpredictable operation of the IPD
                                                 under normal operation.
<36:8>  PTR      RO       NS          NS        The output of the prc-port-ptr-fifo.                 
<43:37> MAX_PKT  RO       0x24        0x24      Maximum number of Packet-Pointers that are in        
                                                 in the FIFO.
<63:44> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_PKT_PTR_VALID = IPD's Packet Pointer Valid
*
* The value of the packet-pointer fetched and in the valid register.
*

     ==============================================================
     IPD_PKT_PTR_VALID Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<28:0>  PTR      RO       NS          NS        Pointer value.                                       
<63:29> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===

*
*                  IPD_WQE_PTR_VALID = IPD's WQE Pointer Valid
*
* The value of the WQE-pointer fetched and in the valid register.
*

     ==============================================================
     IPD_WQE_PTR_VALID Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<28:0>  PTR      RO       NS          NS        Pointer value.                                       
<63:29> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===


*
*                  IPD_BIST_STATUS = IPD BIST STATUS
*
* BIST Status for IPD's Memories.
*

     ==============================================================
     IPD_BIST_STATUS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     PWP      RO       0x0         0         PWP Memory Bist Status.                              
<1>     IPD_NEW  RO       0x0         0         IPD_NEW Memory Bist Status.                          
<2>     IPD_OLD  RO       0x0         0         IPD_OLD Memory Bist Status.                          
<3>     PRC_OFF  RO       0x0         0         PRC_OFF Memory Bist Status.                          
<4>     PWQ0     RO       0x0         0         PWQ0 Memory Bist Status.                             
<5>     PWQ1     RO       0x0         0         PWQ1 Memory Bist Status.                             
<6>     PBM_WORD RO       0x0         0         PBM_WORD Memory Bist Status.                         
<7>     PBM0     RO       0x0         0         PBM0 Memory Bist Status.                             
<8>     PBM1     RO       0x0         0         PBM1 Memory Bist Status.                             
<9>     PBM2     RO       0x0         0         PBM2 Memory Bist Status.                             
<10>    PBM3     RO       0x0         0         PBM3 Memory Bist Status.                             
<11>    IPQ_PBE0 RO       0x0         0         IPQ PBE0 Memory Bist Status.                         
<12>    IPQ_PBE1 RO       0x0         0         IPQ PBE1 Memory Bist Status.                         
<13>    PWQ_POW  RO       0x0         0         PWQ POW MEM Memory Bist Status.                      
<14>    PWQ_WP1  RO       0x0         0         PWQ WQE PAGE1 PTR Memory Bist Status.                
<15>    PWQ_WQED RO       0x0         0         PWQ PIP WQE DONE Memory Bist Status.                 
<63:16> NS       RAZ      NS          NS        Reserved                                             
----------------------------------------------------------------------------------------------------
===




 *
 *                  KEY_INT_SUM = KEY's Interrupt Summary Register
 *
 * Contains the diffrent interrupt summary bits of the KEY.
 *

     ==============================================================
     KEY_INT_SUM Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     KED0_SBE R/W1C     0           0                                                               
<1>     KED0_DBE R/W1C     0           0                                                               
<2>     KED1_SBE R/W1C     0           0                                                               
<3>     KED1_DBE R/W1C     0           0                                                               
<63:4>  NS       RAZ       NS          NS       Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  KEY_INT_ENB = KEY's Interrupt Enable
 *
 * The KEY's interrupt enable register.
 *

     ==============================================================
     KEY_INT_ENB Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     KED0_SBE R/W      0           0         When set (1) and bit 0 of the KEY_INT_SUM              
                                                 register is asserted the KEY will assert an                                        
                                                 interrupt.                                                                         
<1>     KED0_DBE R/W      0           0         When set (1) and bit 1 of the KEY_INT_SUM              
                                                 register is asserted the KEY will assert an                                        
                                                 interrupt.                                                                         
<2>     KED1_SBE R/W      0           0         When set (1) and bit 2 of the KEY_INT_SUM              
                                                 register is asserted the KEY will assert an                                        
                                                 interrupt.                                                                         
<3>     KED1_DBE R/W      0           0         When set (1) and bit 3 of the KEY_INT_SUM              
                                                 register is asserted the KEY will assert an                                        
                                                 interrupt.                                                                         
<63:4>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  KEY_CTL_STATUS = KEY's Control/Status Register
 *
 * The KEY's interrupt enable register.
 *

     ==============================================================
     KEY_CTL_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<6:0>   MEM0_ERR R/W      0           0         Causes a flip of the ECC bit associated 38:32          
                                                 respective to bit 6:0 of this field, for FPF                                                
                                                 FIFO 0.                                                                                     
<13:7>  MEM1_ERR R/W      0           0         Causes a flip of the ECC bit associated 38:32          
                                                 respective to bit 13:7 of this field, for FPF                                                       
                                                 FIFO 1.                                                                                     
<63:14> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


 *
 *                  KEY_BIST_REG = KEY's BIST Status Register
 *
 * The KEY's BIST status for memories.
 *

     ==============================================================
     KEY_BIST_REG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     MEM0     RO       0           0         MEM - 0 bist status.                                   
<1>     MEM1     RO       0           0         MEM - 1 bist status.                                   
<2>     RRC      RO       0           0         RRC bist status.                                       
<63:3>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


 * Specify the RSL base addresses for the block
 *
 *                  L2C_CFG = L2C Configuration
 *
 * Description: 
 *

     ==============================================================
     L2C_CFG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     LRF_ARB_MODE  R/W  1           1     RF Arbitration Mode:                                       
                                             0: Fixed Priority -                                                                  
                                                IOB memory requests are higher priority than PP                                  
                                                memory requests.                                                                  
                                             1: Round Robin -                                                                     
                                                Memory requests from PP and IOB are serviced in                                   
                                                round robin.                                                                      
<1>     RFB_ARB_MODE  R/W  1           1     RFB Arbitration Mode:                                      
                                             0: Fixed Priority -                                                                 
                                                IOB->PP requests are higher priority than 
                                                PP->IOB requests                                   
                                             1: Round Robin -                                                                    
                                                I/O requests from PP and IOB are serviced in 
                                                round robin                                     
<2>     RSP_ARB_MODE  R/W  1           1     RSP Arbitration Mode:                                      
                                             0: Fixed Priority [HP=RFB, RMCF, RHCF, STRSP, LP=STRSC]       
                                             1: Round Robin: [RFB(reflected I/O), RMCF(RdMiss),                                  
                                                RHCF(RdHit), STRSP(ST RSP w/ invalidate),                                        
                                                STRSC(ST RSP no invalidate)]                                                     
<6:3>   MWF_CRD       R/W  2           2     MWF Credit Threshold: When the remaining MWF credits       
                                             become less than or equal to the MWF_CRD, the L2C will
                                             assert l2c__lmi_mwd_hiwater_a to signal the LMC to give
                                             writes (victims) higher priority.                                                   

<7>     IDXALIAS      R/W  0           1     L2C Index Alias Enable                                     
                                             When set, the L2 Tag/Data Store will alias the 11-bit 
                                             index with the low order 11-bits of the tag.  
                                                index[17:7] =  (tag[28:18] ^ index[17:7])
                                             NOTE: This bit must only be modified at boot time, 
                                             when it can be guaranteed that no blocks have been 
                                             loaded into the L2 Cache. 

                                             The index aliasing is a performance enhancement feature
                                             which reduces the L2 cache thrashing experienced for
                                             regular stride references. 
 
                                             NOTE: The index alias is stored in the LFB and VAB, and
                                             its effects are reversed for memory references (Victims,
                                             STT-Misses and Read-Misses)
 
<8>     FPEN          R/W  0           0     [CYA] Forward Progress Counter Enable                      
                                             NOTE: Should NOT be exposed to customer! [FOR DEBUG ONLY]
                                             When set, enables the Forward Progress Counter to 
                                             prevent new LFB entries from enqueueing until ALL 
                                             current LFB entries have completed. 

<9>     FPEMPTY       R/W  0           0     [CYA] Forward Progress Counter Empty                       
                                             NOTE: Should NOT be exposed to customer! [FOR DEBUG ONLY]
                                             When set, if the forward progress counter expires,
                                             all new LFB-NQs are stopped UNTIL all current LFB 
                                             entries have completed. 
                                             When clear, if the forward progress counter expires,
                                             all new LFB-NQs are stopped UNTIL either
                                               a) all current LFB entries have completed.   
                                               b) another forward progress interval expires
                                             NOTE: We may want to FREEZE/HANG the system when
                                             we encounter an LFB entry cannot complete, and there
                                             may be times when we want to allow further LFB-NQs
                                             to be permitted to help in further analyzing the
                                             source                                   
 
<13:10> FPEXP         R/W  0           0     [CYA] Forward Progress Counter Exponent                    
                                             NOTE: Should NOT be exposed to customer! [FOR DEBUG ONLY]
                                             When FPEN is enabled and the LFB is empty, the
                                             forward progress counter (FPCNT) is initialized to: 
                                                FPCNT[24:0] = 2^(9+FPEXP)
                                             When the LFB is non-empty the FPCNT is decremented
                                             (every eclk interval). If the FPCNT reaches zero, 
                                             the LFB no longer accepts new requests until either
                                                a) all of the current LFB entries have completed 
                                                   (to ensure forward progress).
                                                b) FPEMPTY=0 and another forward progress count 
                                                   interval timeout expires. 
            
                                             EXAMPLE USE: If FPEXP=2, the FPCNT = 2048 eclks. 
                                             (For eclk=500MHz(2ns), this would be ~4us).  

<14>  DFILL_DIS       R/W  0           0     L2C Dual Fill Disable                                     
                                             When set, the L2C dual-fill performance feature is 
                                             disabled.  
                                             NOTE: This bit is only intended to evaluate the 
                                             effectiveness of the dual-fill feature. For OPTIMAL
                                             performance, this bit should ALWAYS be zero. 
                                             *** NOTE: O9N PASS1 Addition

<17:15> SPARE         R/W  0            0    Spare CSR Bit (R/W)                                       
                                             *** NOTE: O9N PASS1 Addition

<63:18> NS            RAZ  NS          NS    RESERVED                                                  
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2T_ERR = L2 Tag Errors
 *
 * Description: L2 Tag ECC SEC/DED Errors and Interrupt Enable
 *

     ==============================================================
     L2T_ERR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     ECC_ENA    R/W     0           1       L2 Tag ECC Enable                                        
                                               When set, enables 6-bit SEC/DED codeword for 19-bit 
                                               L2 Tag Arrays {V,D,L,TAG[33:18]}                                                  
<1>     SEC_INTENA R/W     0           1       L2 Tag ECC Single Error Correct(SEC) Interrupt           
                                               Enable bit. When set, allows interrupts to be
                                               reported on single bit (correctable) errors from
                                               the L2 Tag Arrays.                                                                
<2>     DED_INTENA R/W     0           1       L2 Tag ECC Double Error Detect(DED) Interrupt            
                                               Enable bit. When set, allows interrupts to be 
                                               reported on double bit (uncorrectable) errors from
                                               the L2 Tag Arrays.                                                        
<3>     SEC_ERR    R/W1C   0           0       L2T Single Bit Error corrected (SEC)                     
                                               During every L2 Tag Probe, all 8 sets Tag's (at a
                                               given index) are checked for single bit errors(SBEs). 
                                               This bit is set if ANY of the 8 sets contains an SBE. 
                                               SBEs are auto corrected in HW and generate an 
                                               interrupt(if enabled).                          

<4>     DED_ERR    R/W1C   0           0       L2T Double Bit Error detected (DED)                      
                                               During every L2 Tag Probe, all 8 sets Tag's (at a
                                               given index) are checked for double bit errors(DBEs). 
                                               This bit is set if ANY of the 8 sets contains a DBE. 
                                               DBEs also generated an interrupt(if enabled).                        

<10:5>  FSYN       RO      0           0       When L2T_ERR[SEC_ERR] or L2T_ERR[DED_ERR] are set,       
                                               the contents of this register contain the 6-bit 
                                               syndrome for the hit set only. 
                                               If (FSYN = 0), the SBE or DBE reported was for one of 
                                               the "non-hit" sets at the failing index(FADR). 

                                               NOTE: During a force-hit (L2T/L2D/L2T=1), the hit set
                                               is specified by the L2C_DBG[SET]. 

                                               If (FSYN != 0), the SBE or DBE reported was for the
                                               hit set at the failing index(FADR) and failing 
                                               set(FSET).

                                               SW NOTE: To determine which "non-hit" set was in error, 
                                               SW can use the L2C_DBG[L2T] debug feature to explicitly
                                               read the other sets at the failing index(FADR). When 
                                               (FSYN !=0), then the FSET contains the failing hit-set. 
                                               
                                               NOTE: A DED Error will always overwrite a SEC Error 
                                               SYNDROME and FADR).                                  

<20:11> FADR       RO      0           0       Failing L2 Tag Address (10-bit Index)                    
                                               When L2T_ERR[SEC_ERR] or L2T_ERR[DED_ERR] are set,
                                               the FADR contains the lower 10bit cacheline index 
                                               into the L2 Tag Store. 

<23:21> FSET       RO      0           0       Failing L2 Tag Hit Set# (1-of-8)                         
                                               When L2T_ERR[SEC_ERR] or L2T_ERR[DED_ERR] are set and
                                               (FSYN != 0), the FSET specifies the failing hit-set. 
                                               NOTE: During a force-hit (L2T/L2D/L2T=1), the hit-set
                                               is specified by the L2C_DBG[SET]. 

<24>    LCKERR     R/W1C   0           0       SW attempted to LOCK DOWN the last available set of      
                                               the INDEX (which is ignored by HW - but reported to SW).
                                               The LDD(L1 load-miss) for the LOCK operation is completed 
                                               successfully, however the address is NOT locked.

                                               NOTE: 'Available' sets takes the L2C_SPAR*[UMSK*]
                                               into account. For example, if diagnostic PPx has 
                                               UMSKx defined to only use SETs [1:0], and SET1 had
                                               been previously LOCKED, then an attempt to LOCK the
                                               last available SET0 would result in a LCKERR. (This
                                               is to ensure that at least 1 SET at each INDEX is
                                               not LOCKED for general use by other PPs).

<25>    LCK_INTENA R/W     0           1       L2 Tag Lock Error Interrupt Enable bit                   

<26>    LCKERR2    R/W1C   0           0       HW detected a case where a Rd/Wr Miss from PP#n          
                                               could not find an available/unlocked set (for 
                                               replacement).
                                               Most likely, this is a result of SW mixing SET 
                                               PARTITIONING with ADDRESS LOCKING. If SW allows 
                                               another PP to LOCKDOWN all SETs available to PP#n, 
                                               then a Rd/Wr Miss from PP#n will be unable
                                               to determine a 'valid' replacement set (since LOCKED 
                                               addresses should NEVER be replaced).
                                               If such an event occurs, the HW will select the smallest
                                               available SET(specified by UMSK'x)' as the replacement
                                               set, and the address is unlocked. 
                                               *** NOTE: PASS2 Addition

<27>   LCK_INTENA2 R/W     0           1       L2 Tag Lock Error2 Interrupt Enable bit                  
                                               *** NOTE: PASS2 Addition

<28>   FADRU      RO      0           0        Failing L2 Tag Upper Address Bit (Index[10])             
                                               When L2T_ERR[SEC_ERR] or L2T_ERR[DED_ERR] are set,
                                               the FADRU contains the upper(MSB bit) cacheline index 
                                               into the L2 Tag Store. 

<63:29> NS         RAZ     0           0       RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_ERR = L2 Data Errors
 *
 * Description: L2 Data ECC SEC/DED Errors and Interrupt Enable
 *

     ==============================================================
     L2D_ERR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     ECC_ENA     R/W    0           1  L2 Data ECC Enable                                            
                                          When set, enables 10-bit SEC/DED codeword for 128bit L2 
                                          Data Arrays.                                                           
<1>     SEC_INTENA  R/W    0           1  L2 Data ECC Single Error Correct(SEC) Interrupt Enable bit    
                                          When set, allows interrupts to be reported on single bit                                 
                                          (correctable) errors from the L2 Data Arrays.                                         
<2>     DED_INTENA  R/W    0           1  L2 Data ECC Double Error Detect(DED) Interrupt Enable bit     
                                          When set, allows interrupts to be reported on double bit                                 
                                          (uncorrectable) errors from the L2 Data Arrays.                                             
<3>     SEC_ERR     R/W1C  0           0  L2D Single Error corrected (SEC)                              
<4>     DED_ERR     R/W1C  0           0  L2D Double Error detected (DED)                               
                      
<5>     BMHCLSEL    R/W    0           0  L2 Bit Map Half CacheLine ECC Selector                        
                                          *** NOTE: PASS2 Addition
                                          When L2C_DBG[L2T]=1/L2D_ERR[ECC_ENA]=0, the BMHCLSEL selects
                                          which half cacheline to conditionally latch into 
                                          the L2D_FSYN0/L2D_FSYN1 registers when an LDD command
                                          is detected from the diagnostic PP (see L2C_DBG[PPNUM]).
                                          0: OW[0-3] ECC (from first 1/2 cacheline) is selected to
                                             be conditionally latched into the L2D_FSYN0/1 CSRs. 
                                          1: OW[4-7] ECC (from last 1/2 cacheline) is selected to 
                                             be conditionally latched into
                                             the L2D_FSYN0/1 CSRs.
                                               
<63:6>  NS          RAZ    0           0  RESERVED                                                      
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_FADR = L2 Failing Address
 *
 * Description: L2 Data ECC SEC/DED Failing Address
 *

     ==============================================================
     L2D_FADR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>  FADR           RO  0           0       Failing L2 Data Store Lower Index bits                    
                                               (NOTE: L2 Data Store Index is for each 1/2 cacheline)
                                                  {FADRU, FADR[10:1]}: cacheline index[17:7]
                                                  FADR[0]: 1/2 cacheline index
                                               NOTE: FADR[1] is used to select between upper/lower 1MB
                                               physical L2 Data Store banks. 
<13:11> FSET           RO  0           0       Failing SET#                                              
<17:14> FOWMSK         RO  0           0       Failing OW Mask (which one of 4 OWs contained SEC/DED     
                                                error)
<18>    FADRU          RO  0           0       Failing L2 Data Store Upper Index bit(MSB)                
<63:19> NS             RAZ 0           0       RESERVED                                                  

NOTES: When L2D_SEC_ERR or L2D_DED_ERR are set, this field contains the failing L2 Data store index. 
       (A DED Error will always overwrite a SEC Error SYNDROME and FADR). 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_FSYN0 = L2 Failing Syndrome [OW0,4 / OW1,5] 
 *
 * Description: L2 Data ECC SEC/DED Failing Syndrome for lower cache line
 *

     ==============================================================
     L2D_FSYN0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<9:0>   FSYN_OW0      RO   0           0         Failing L2 Data Store SYNDROME OW[0,4]                 
                                                 When L2D_ERR[ECC_ENA]=1 and either L2D_ERR[SEC_ERR] 
                                                 or L2D_ERR[DED_ERR] are set, this field represents 
                                                 the failing OWECC syndrome for the half cacheline
                                                 indexed by L2D_FADR[FADR]. 
                                                 NOTE: The L2D_FADR[FOWMSK] further qualifies which
                                                 OW lane(1of4) detected the error.  

                                                 When L2C_DBG[L2T]=1 and L2D_ERR[ECC_ENA]=0, an LDD
                                                 (L1 load-miss) from the diagnostic PP will conditionally 
                                                 latch the raw OWECC for the selected half cacheline.
                                                 (see: L2D_ERR[BMHCLSEL]

<19:10> FSYN_OW1      RO   0           0         Failing L2 Data Store SYNDROME OW[1,5]                 
                                                 When L2D_ERR[ECC_ENA]=1 and either L2D_ERR[SEC_ERR] 
                                                 or L2D_ERR[DED_ERR] are set, this field represents 
                                                 the failing OWECC syndrome for the half cacheline
                                                 indexed by L2D_FADR[FADR].
                                                 NOTE: The L2D_FADR[FOWMSK] further qualifies which
                                                 OW lane(1of4) detected the error.  

                                                 When L2C_DBG[L2T]=1 and L2D_ERR[ECC_ENA]=0, an LDD
                                                 command from the diagnostic PP will conditionally latch
                                                 the raw OWECC for the selected half cacheline.
                                                 (see: L2D_ERR[BMHCLSEL]


<63:20> NS            RAZ  0           0         RESERVED                                               

 NOTES: When L2D_SEC_ERR or L2D_DED_ERR are set, this field contains the failing L2 Data ECC 10b syndrome. 
       (A DED Error will always overwrite a SEC Error SYNDROME and FADR). 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_FSYN1 = L2 Failing Syndrome [OW2,6 / OW3,7]
 *
 * Description: L2 Data ECC SEC/DED Failing Syndrome for upper cache line
 *

     ==============================================================
     L2D_FSYN1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<9:0>   FSYN_OW2   RO      0           0         Failing L2 Data Store SYNDROME OW[2,5]                 
<19:10> FSYN_OW3   RO      0           0         Failing L2 Data Store SYNDROME OW[3,7]                 
<63:20> NS         RAZ     0           0         RESERVED                                               

NOTES: When L2D_SEC_ERR or L2D_DED_ERR are set, this field contains the failing L2 Data ECC 10b syndrome. 
       (A DED Error will always overwrite a SEC Error SYNDROME and FADR). 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_DBG = L2C DEBUG Register
 *
 * Description: L2C Tag/Data Store Debug Register
 *

     ==============================================================
     L2C_DBG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     L2T           R/W   0           0  When enabled, L2 Tag information {V,D,L,U,phys_addr[33:18]}  
                                           is returned on the data bus starting at +32(and +96) bytes 
                                           offset from the beginning of cacheline when an LDD
                                           (L1 load-miss) command is issued from a PP determined by 
                                           the L2C_DBG[PPNUM] field. 
                                           The selected L2 set# is determined by the L2C_DBG[SET] 
                                           field, and the L2 index is determined from the 
                                           phys_addr[17:7] associated with the LDD command.                 
                                           This 'L2 force-hit' will NOT alter the current L2 Tag
                                           state OR the DuTag state.
                                           NOTE: The diagnostic PP should issue a d-stream load
                                           to an aligned cacheline+0x20(+0x60) in order to have the 
                                           return VDLUTAG information (in OW2/OW6) written directly 
                                           into the proper PP register. The diagnostic PP should also 
                                           flush it's local L1 cache after use(to ensure data 
                                           coherency).
                                           NOTE: The position of the VDLUTAG data in the destination
                                           register is dependent on the endian mode(big/little).  

                                           NOTE: N3K-Pass2 modification. (This bit's functionality 
                                           has changed since Pass1-in the following way). 
                                           NOTE: (For L2C BitMap testing of L2 Data Store OW ECC): 
                                           If L2D_ERR[ECC_ENA]=0, the OW ECC from the selected 
                                           half cacheline (see: L2D_ERR[BMHCLSEL] is also 
                                           conditionally latched into the L2D_FSYN0/1 CSRs if an 
                                           LDD command is detected from the diagnostic PP(L2C_DBG[PPNUM]). 

<1>     L2D           R/W   0           0  When enabled (and L2C_DBG[L2T]=0), fill data is               
                                           returned directly from the L2 Data Store                                                    
                                           (regardless of hit/miss) when an LDD(L1 load-miss) command 
                                           is issued from a PP determined by the L2C_DBG[PPNUM]
                                           field. The selected set# is determined by the                      
                                           L2C_DBG[SET] field, and the index is determined                                             
                                           from the address[17:7] associated with the LDD                             
                                           command.                                                                 
                                           This 'force-hit' will NOT alter the current L2 Tag                                          
                                           state OR the DuTag state.                                                                   
<2>     FINV          R/W   0           0  Flush-Invalidate.                                             
                                           When flush-invalidate is enable (FINV=1), all STF                                           
                                           (L1 store-miss) commands generated from the diagnostic PP
                                           (L2C_DBG[PPNUM]) will invalidate the specified set                           
                                           (L2C_DBG[SET]) at the index specified in the STF                                            
                                           address[17:7]. If a dirty block is detected (D=1), it is                                    
                                           written back to memory. The contents of the invalid                                         
                                           L2 Cache line is also 'scrubbed' with the STF write data.                                   

                                           NOTE: If L2C_CFG[IDXALIAS]=1, the index specified in 
                                           STF address[17:7] refers to the 'aliased' address. 
                                              
                                           NOTE: An STF command with write data=ZEROES can be                                          
                                           generated by SW using the Prefetch instruction with                                         
                                           Hint=30d "prepare for Store", followed by a SYNCW.                                          
                                           What is seen at the L2C as an STF w/wrdcnt=0 with all                           
                                           of its mask bits clear (indicates zero-fill data).                                          
                                           A flush-invalidate will 'force-hit' the L2 cache at                                         
                                           [index,set] and invalidate the entry (V=0/D=0/L=0/U=0).                         
                                           If the cache block is dirty, it is also written back                                  
                                           to memory. The DuTag state is probed/updated as normal                     
                                           for an STF request.

                                           TYPICAL APPLICATIONS:                                                             
                                              1) L2 Tag/Data ECC SW Recovery                                                   
                                              2) Cache Unlocking
                                           
                                           NOTE: If the cacheline had been previously LOCKED(L=1), 
                                           a flush-invalidate operation will explicitly UNLOCK 
                                           (L=0) the set/index specified.  
                         
                                           NOTE: The diagnostic PP cores can generate STF 
                                           commands to the L2 Cache whenever all 128 bytes in a 
                                           block are written. SW must take this into consideration
                                           to avoid 'errant' Flush-Invalidates. 

<5:3>   SET           R/W   0           0  When L2C_DBG[L2T] or L2C_DBG[L2D] or L2C_DBG[FINV]             
                                           is enabled, this field determines 1-of-n targeted                                           
                                           sets to act upon.
                                           NOTE: L2C_DBG[SET] must never equal a crippled or 
                                           unusable set (see UMSK* registers and Cripple mode
                                           fuses). 
                                                                               
<9:6>   PPNUM         R/W   0           0  When L2C_DBG[L2T] or L2C_DBG[L2D] or L2C_DBG[FINV]             
                                           is enabled, this field determines which one-of-16                                           
                                           PPs is selected as the diagnostic PP.                                               

<10>    LFB_DMP       R/W   0           0  LFB Dump Enable: When written(=1), the contents of             
                                           the LFB specified by LFB_ENUM[3:0] are captured                                             
                                           into the L2C_LFB(0/1/2) registers. 
                                           NOTE: Some fields of the LFB entry are unpredictable
                                           and dependent on usage. This is only intended to be
                                           used for HW debug.                           

<14:11> LFB_ENUM      R/W   0           0  Specifies the LFB Entry# which is to be captured.              
<63:15> NS            RAZ   0           0  RESERVED                                                       

NOTES: 
    (1) When using the L2T, L2D or FINV Debug probe feature, the LDD command WILL NOT update the DuTags.
    (2) L2T, L2D, FINV MUST BE mutually exclusive (only one set)
    (3) Force Invalidate is intended as a means for SW to invalidate the L2 Cache while also writing back
        dirty data to memory to maintain coherency. 
    (4) L2 Cache Lock Down feature MUST BE disabled (L2C_LCKBASE[LCK_ENA]=0) if ANY of the L2C debug
        features (L2T, L2D, FINV) are enabled.
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_LFB0 = L2C LFB DEBUG 0 Register
 *
 * Description: L2C LFB Contents (Status Bits)
 *

     ==============================================================
     L2C_LFB0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     VLD           RO   0           0         LFB Valid                                              
<4:1>   CMD           RO   0           0         LFB Command                                            
<13:5>  SID           RO   0           0         LFB Source ID                                          
<17:14> VABNUM        RO   0           0         VAB# used for LMC Miss Launch(valid only if VAM=1)     
<20:18> SET           RO   0           0         SET# used for DS-OP (hit=hset/miss=rset)               
<21>    IHD           RO   0           0         LFB Head of List Indicator                             
<22>    ITL           RO   0           0         LFB Tail of List Indicator                             
<26:23> INXT          RO   0           0         Next LFB Pointer(invalid if ITL=1)                     
<27>    VAM           RO   0           0         Valid Full Address Match Status                        
<28>    STCFL         RO   0           0         LFB STC=FAIL Status                                    
<29>    STINV         RO   0           0         LFB ST* Invalidate Status                              
<30>    STPND         RO   0           0         LFB ST* Pending Status                                 
<31>    STCPND        RO   0           0         LFB STC Pending Status                                 
<63:32> NS            RAZ  0           0         RESERVED                                               
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_LFB1 = L2C LFB DEBUG 1 Register
 *
 * Description: L2C LFB Contents (Wait Bits)
 *

     ==============================================================
     L2C_LFB1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     VLD           RO     0         0  LFB Valid                                                     
<1>     WTPRB         RO     0         0  LFB Waiting for Probe                                         
<2>     PRBRTY        RO     0         0  Probe-Retry Detected - waiting for probe completion           
<3>     WTMFL         RO     0         0  LFB Waiting for Memory Fill completion to MRB                 
<4>     WTVTM         RO     0         0  LFB Waiting for Victim Read L2 DS-RD completion               
<5>     WTSTRSC       RO     0         0  LFB Waiting for ST RSC-Only to be issued on RSP               
                                          (no-invalidates)                                                     
<6>     WTSTRSP       RO     0         0  LFB Waiting for ST RSC/RSD to be issued on RSP                
                                          (with invalidates)                                                   
<7>     WTSTDT        RO     0         0  LFB Waiting for all ST write Data to arrive on XMD bus        
<8>     WTRDA         RO     0         0  LFB Waiting for Read-Miss L2 DS-WR completion                 
<9>     WTSTM         RO     0         0  LFB Waiting for Write-Miss L2 DS-WR completion                
<10>    WTWRM         RO     0         0  LFB Waiting for Write-Miss L2 DS-WR completion                
<11>    WTWHF         RO     0         0  LFB Waiting for Write-Hit Full L2 DS-WR completion            
<12>    WTWHP         RO     0         0  LFB Waiting for Write-Hit Partial L2 DS-WR completion         
<13>    WTDQ          RO     0         0  LFB Waiting for LFB-DQ                                        
<14>    WTDW          RO     0         0  LFB Waiting for DS-WR completion                              
<15>    WTRSP         RO     0         0  LFB Waiting for RSC Response [FILL,STRSP] completion          
<17:16> BID           RO     0         0  LFB DS Bid#                                                   
<18>    DSGOING       RO     0         0  LFB DS Going (in flight)                                      
<63:19> NS            RAZ    0         0  RESERVED                                                      
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_LFB2 = L2C LFB DEBUG 2 Register
 *
 * Description: L2C LFB Contents Tag/Index
 *

     ==============================================================
     L2C_LFB2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>  LFB_IDX      RO    0           0         LFB IDX[17:7]                                          
<26:11> LFB_TAG      RO    0           0         LFB TAG[33:18]                                         
<63:27> NS           RAZ   0           0         RESERVED                                               
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_DUT = L2C DUTAG Register
 *
 * Description: L2C Duplicate Tag State Register
 *

     ==============================================================
     L2C_DUT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<28:0>  DT_TAG     RO      0           0      Duplicate L1 Tag[35:7] latched in for previous            
                                              LDD(L1 load-miss) command sourced by diagnostic PP.
 
<29>    DT_VLD     RO      0           0      Duplicate L1 Tag Valid bit latched in for previous        
                                              LDD(L1 load-miss) command sourced by diagnostic PP.                   
 
<30>    NS         RAZ     0           0      RESERVED                                                  
 
<31>    DTENA      R/W     0           0      DuTag Diagnostic read enable.                             
                                              When L2C_DUT[DTENA]=1, all LDD(L1 load-miss) 
                                              commands issued from the diagnostic PP 
                                              (L2C_DBG[PPNUM]) will capture the DuTag state (V|L1TAG)
                                              of the PP#(specified in the LDD address[29:26] into 
                                              the L2C_DUT CSR register. This allows the diagPP to
                                              read ALL DuTags (from any PP). 
                                              The DuTag Set# to capture is extracted from the LDD 
                                              address[25:20]. The diagnostic PP would issue the 
                                              LDD then read the L2C_DUT register (one at a time). 
                                              This LDD 'L2 force-hit' will NOT alter the current L2 
                                              Tag State OR the DuTag state.

                                              NOTE: For O9N the DuTag SIZE has doubled (to 16KB)
                                              where each DuTag is organized as 2x 64-way entries.
                                              The LDD address[7] determines which 1(of-2) internal 
                                              64-ways to select.
                                               
                                              The fill data is returned directly from the L2 Data 
                                              Store(regardless of hit/miss) when an LDD command
                                              is issued from a PP determined by the L2C_DBG[PPNUM] 
                                              field. The selected L2 Set# is determined by the 
                                              L2C_DBG[SET] field, and the index is determined                                          
                                              from the address[17:7] associated with the LDD                          
                                              command.                                                              
                                              This 'L2 force-hit' will NOT alter the current L2 Tag
                                              state OR the DuTag state. 
 
                                              NOTE: In order for the DiagPP to generate an LDD command
                                              to the L2C, it must first force an L1 Dcache flush. 

<63:32> NS           RAZ   0           0      RESERVED                                                  

NOTES: 
    (1) When using the L2T, L2D or FINV Debug probe feature, an LDD command issued by the diagnostic PP
        WILL NOT update the DuTags.
    (2) L2T, L2D, FINV MUST BE mutually exclusive (only one enabled at a time).
    (3) Force Invalidate is intended as a means for SW to invalidate the L2 Cache while also writing back
        dirty data to memory to maintain coherency. (A side effect of FINV is that an LDD L2 fill is 
        launched which fills data into the L2 DS).
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_LCKBASE = L2C LockDown Base Register
 *
 * Description: L2C LockDown Base Register 
 *

     ==============================================================
     L2C_LCKBASE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     LCK_ENA        R/W    0        0  L2 Cache Lock Enable                                          
                                          When the LCK_ENA=1, all LDI(I-stream Load) or                                           
                                          LDD(L1 load-miss) commands issued from the                                                 
                                          diagnostic PP (specified by the L2C_DBG[PPNUM]),                                        
                                          which fall within a predefined lockdown address                                          
                                          range (specified by: [lck_base:lck_base+lck_offset])                                       
                                          are LOCKED in the L2 cache. The LOCKED state is                                         
                                          denoted using an explicit L2 Tag bit (L=1).

                                          If the LOCK request L2-Hits (on ANY SET), then data is 
                                          returned from the L2 and the hit set is updated to the 
                                          LOCKED state. NOTE: If the Hit Set# is outside the 
                                          available sets for a given PP (see UMSK'x'), the
                                          the LOCK bit is still SET. If the programmer's intent
                                          is to explicitly LOCK addresses into 'available' sets,
                                          care must be taken to flush-invalidate the cache first
                                          (to avoid such situations). Not following this procedure
                                          can lead to LCKERR2 interrupts. 
                                                                                                                                
                                          If the LOCK request L2-Misses, a replacment set is 
                                          chosen(from the available sets (UMSK'x').
                                          If the replacement set contains a dirty-victim it is                                       
                                          written back to memory. Memory read data is then written                              
                                          into the replacement set, and the replacment SET is                                        
                                          updated to the LOCKED state(L=1).   
                                          NOTE: SETs that contain LOCKED addresses are                                               
                                          excluded from the replacement set selection algorithm.
                                
                                          NOTE: The LDD command will allocate the DuTag as normal.

                                          NOTE: If L2C_CFG[IDXALIAS]=1, the address is 'aliased' first
                                          before being checked against the lockdown address                                        
                                          range. To ensure an 'aliased' address is properly locked, 
                                          it is recommmended that SW preload the 'aliased' locked adddress
                                          into the L2C_LCKBASE[LCK_BASE] register (while keeping 
                                          L2C_LCKOFF[LCK_OFFSET]=0). 
                                          
                                          NOTE: The OCTEON(N3) implementation only supports 16GB(MAX) of 
                                          physical memory. Therefore, only byte address[33:0] are used
                                          (ie: address[35:34] are ignored).

<3:1>   NS             RAZ    0        0  RESERVED                                                       

<30:4>  LCK_BASE       R/W    0        0  Base Memory block address[33:7]. Specifies the                 
                                          starting address of the lockdown region.                                          

<63:31> NS             RAZ    0        0  RESERVED                                                       
 
NOTES: 
    (1) SW RESTRICTION #1: SW must manage the L2 Data Store lockdown space such that at least 1
        set per cache line remains in the 'unlocked' (normal) state to allow general caching operations.
        If SW violates this restriction, a status bit is set (LCK_ERR) and an interrupt is posted.  
        [this limits the total lockdown space to 7/8ths of the total L2 data store = 896KB]
    (2) IOB initiated LDI commands are ignored (only PP initiated LDI/LDD commands are considered
        for lockdown). 
    (3) To 'unlock' a locked cache line, SW can use the FLUSH-INVAL CSR mechanism (see L2C_DBG[FINV]). 
    (4) LCK_ENA MUST only be activated when debug modes are disabled (L2C_DBG[L2T], L2C_DBG[L2D], L2C_DBG[FINV]).
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_LCKOFF = L2C LockDown OFFSET Register
 *
 * Description: L2C LockDown OFFSET Register 
 *

     ==============================================================
     L2C_LCKOFF Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<9:0>  LCK_OFFSET  R/W     0           0      LockDown block Offset. Used in determining                
                                                the ending block address of the lockdown                                      
                                                region:                                                                       
                                                End Lockdown block Address[33:7] =                                            
                                                LCK_BASE[33:7]+LCK_OFFSET[9:0]                                        
<63:10> NS         RAZ     0           0      RESERVED                                                  

NOTES: 
    (1) The generation of the end lockdown block address will 'wrap'.
    (2) The minimum granularity for lockdown is 1 cache line (= 128B block)
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_SPAR0 = L2 Set Partitioning Register (PP0-3)
 *
 * Description: L2 Set Partitioning Register 
 *

     ==============================================================
     L2C_SPAR0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<7:0>   UMSK0     R/W      0           0        PP[0] L2 'DO NOT USE' set partition mask                
<15:8>  UMSK1     R/W      0           0        PP[1] L2 'DO NOT USE' set partition mask                
<23:16> UMSK2     R/W      0           0        PP[2] L2 'DO NOT USE' set partition mask                
<31:24> UMSK3     R/W      0           0        PP[3] L2 'DO NOT USE' set partition mask                
<63:32> NS        RAZ      0           0        RESERVED                                                

 NOTES:
    - When a bit is set in the UMSK'x' register, a memory command issued from PP='x' will NOT select that
      set for replacement.
    - There MUST ALWAYS BE at least 1 bit clear in each UMSK'x' register for proper L2 cache operation 
    - NOTES: When L2C FUSE[136] is blown(CRIP_1024K), then SETS#7-4 are SET in all UMSK'x' registers 
             When L2C FUSE[137] is blown(CRIP_512K), then SETS#7-2 are SET in all UMSK'x' registers 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_SPAR1 = L2 Set Partitioning Register (PP4-7)
 *
 * Description: L2 Set Partitioning Register 
 *

     ==============================================================
     L2C_SPAR1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<7:0>   UMSK4      R/W     0           0        PP[4] L2 'DO NOT USE' set partition mask                
<15:8>  UMSK5      R/W     0           0        PP[5] L2 'DO NOT USE' set partition mask                
<23:16> UMSK6      R/W     0           0        PP[6] L2 'DO NOT USE' set partition mask                
<31:24> UMSK7      R/W     0           0        PP[7] L2 'DO NOT USE' set partition mask                
<63:32> NS         RAZ     0           0        RESERVED                                                

 NOTES:
    - When a bit is set in the UMSK'x' register, a memory command issued from PP='x' will NOT select that
      set for replacement.
    - There should ALWAYS BE at least 1 bit clear in each UMSK'x' register for proper L2 cache operation 
    - NOTES: When L2C FUSE[136] is blown(CRIP_1024K), then SETS#7-4 are SET in all UMSK'x' registers 
             When L2C FUSE[137] is blown(CRIP_512K), then SETS#7-2 are SET in all UMSK'x' registers 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_SPAR2 = L2 Set Partitioning Register (PP8-11)
 *
 * Description: L2 Set Partitioning Register 
 *

     ==============================================================
     L2C_SPAR2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<7:0>   UMSK8      R/W     0           0         PP[8] L2 'DO NOT USE' set partition mask               
<15:8>  UMSK9      R/W     0           0         PP[9] L2 'DO NOT USE' set partition mask               
<23:16> UMSK10     R/W     0           0         PP[10] L2 'DO NOT USE' set partition mask              
<31:24> UMSK11     R/W     0           0         PP[11] L2 'DO NOT USE' set partition mask              
<63:32> NS         RAZ     0           0         RESERVED                                               

NOTES:
    - When a bit is set in the UMSK'x' register, a memory command issued from PP='x' will NOT select that
      set for replacement.
    - There should ALWAYS BE at least 1 bit clear in each UMSK'x' register for proper L2 cache operation 
    - NOTES: When L2C FUSE[136] is blown(CRIP_1024K), then SETS#7-4 are SET in all UMSK'x' registers 
             When L2C FUSE[137] is blown(CRIP_512K), then SETS#7-2 are SET in all UMSK'x' registers 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_SPAR3 = L2 Set Partitioning Register (PP12-15)
 *
 * Description: L2 Set Partitioning Register 
 *

     ==============================================================
     L2C_SPAR3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<7:0>   UMSK12     R/W     0           0        PP[12] L2 'DO NOT USE' set partition mask               
<15:8>  UMSK13     R/W     0           0        PP[13] L2 'DO NOT USE' set partition mask               
<23:16> UMSK14     R/W     0           0        PP[14] L2 'DO NOT USE' set partition mask               
<31:24> UMSK15     R/W     0           0        PP[15] L2 'DO NOT USE' set partition mask               
<63:32> NS         RAZ     0           0        RESERVED                                                

NOTES:
    - When a bit is set in the UMSK'x' register, a memory command issued from PP='x' will NOT select that
      set for replacement.
    - There should ALWAYS BE at least 1 bit clear in each UMSK'x' register for proper L2 cache operation 
    - NOTES: When L2C FUSE[136] is blown(CRIP_1024K), then SETS#7-4 are SET in all UMSK'x' registers 
             When L2C FUSE[137] is blown(CRIP_512K), then SETS#7-2 are SET in all UMSK'x' registers 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_SPAR4 = L2 Set Partitioning Register (IOB)
 *
 * Description: L2 Set Partitioning Register 
 *

     ==============================================================
     L2C_SPAR4 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<7:0>   UMSKIOB    R/W     0           0         IOB L2 'DO NOT USE' set partition mask                 
<63:8>  NS         RAZ     0           0         RESERVED                                               

NOTES:
    - When a bit is set in the UMSK'x' register, a memory command issued from PP='x' will NOT select that
      set for replacement.
    - There should ALWAYS BE at least 1 bit clear in each UMSK'x' register for proper L2 cache operation 
    - NOTES: When L2C FUSE[136] is blown(CRIP_1024K), then SETS#7-4 are SET in all UMSK'x' registers 
             When L2C FUSE[137] is blown(CRIP_512K), then SETS#7-2 are SET in all UMSK'x' registers 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_PFCTL = L2 Performance Counter Control Register
 *
 * Description: Controls the actions of the 4 Performance Counters
 *

     ==============================================================
     L2C_PFCTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<5:0>   CNT0SEL    R/W     0           0         Performance Counter 0 Event Selector                   
                                                 (see list of selectable events to count in NOTES)   
<6>     CNT0CLR    R/W     0           0         Performance Counter 0 Clear                            
                                                 When the CSR write occurs, if this bit is set,
                                                 the performance counter is cleared. Otherwise,
                                                 it will resume counting from its current value.  
<7>     CNT0ENA    R/W     0           0         Performance Counter 0 Enable                           
                                                 When this bit is set, the performance counter 
                                                 is enabled.   

<13:8>  CNT1SEL    R/W     0           0         Performance Counter 1 Event Selector                   
                                                 (see list of selectable events to count in NOTES)   
<14>    CNT1CLR    R/W     0           0         Performance Counter 1 Clear                            
                                                 When the CSR write occurs, if this bit is set,
                                                 the performance counter is cleared. Otherwise,
                                                 it will resume counting from its current value.  
<15>    CNT1ENA    R/W     0           0         Performance Counter 1 Enable                           
                                                 When this bit is set, the performance counter 
                                                 is enabled.    

<21:16> CNT2SEL    R/W     0           0         Performance Counter 2 Event Selector                   
                                                 (see list of selectable events to count in NOTES)   
<22>    CNT2CLR    R/W     0           0         Performance Counter 2 Clear                            
                                                 When the CSR write occurs, if this bit is set,
                                                 the performance counter is cleared. Otherwise,
                                                 it will resume counting from its current value.  
<23>    CNT2ENA    R/W     0           0         Performance Counter 2 Enable                           
                                                 When this bit is set, the performance counter 
                                                 is enabled.    

<29:24> CNT3SEL    R/W     0           0         Performance Counter 3 Event Selector                   
                                                 (see list of selectable events to count in NOTES)   
<30>    CNT3CLR    R/W     0           0         Performance Counter 3 Clear                            
                                                 When the CSR write occurs, if this bit is set,
                                                 the performance counter is cleared. Otherwise,
                                                 it will resume counting from its current value.  
<31>    CNT3ENA    R/W     0           0         Performance Counter 3 Enable                           
                                                 When this bit is set, the performance counter 
                                                 is enabled.    

<32>    CNT0RDCLR  R/W     0           0         Performance Counter 0 Read Clear                       
                                                 When set, all CSR reads of the L2C_PFC0 
                                                 register will 'auto-clear' the counter. This allows 
                                                 SW to maintain accurate 'cumulative' counters. 
                                                 NOTE: If the CSR read occurs in the same cycle as 
                                                 the 'event' to be counted, the counter will
                                                 properly reflect the event. 
                                                 *** NOTE: PASS2 Addition

<33>    CNT1RDCLR  R/W     0           0         Performance Counter 1 Read Clear                       
                                                 When set, all CSR reads of the L2C_PFC1
                                                 register will auto-clear the counter. This allows 
                                                 SW to maintain 'cumulative' counters in SW. 
                                                 NOTE: If the CSR read occurs in the same cycle as 
                                                 the 'event' to be counted, the counter will
                                                 properly reflect the event. 
                                                 *** NOTE: PASS2 Addition

<34>    CNT2RDCLR  R/W     0           0         Performance Counter 2 Read Clear                       
                                                 When set, all CSR reads of the L2C_PFC2
                                                 register will auto-clear the counter. This allows 
                                                 SW to maintain 'cumulative' counters in SW. 
                                                 NOTE: If the CSR read occurs in the same cycle as 
                                                 the 'event' to be counted, the counter will
                                                 properly reflect the event. 
                                                 *** NOTE: PASS2 Addition

<35>    CNT3RDCLR  R/W     0           0         Performance Counter 3 Read Clear                       
                                                 When set, all CSR reads of the L2C_PFC3
                                                 register will auto-clear the counter. This allows 
                                                 SW to maintain 'cumulative' counters in SW. 
                                                 NOTE: If the CSR read occurs in the same cycle as 
                                                 the 'event' to be counted, the counter will
                                                 properly reflect the event. 
                                                 *** NOTE: PASS2 Addition

<63:36> NS         RAZ     0           0         RESERVED                                               

NOTES:
   - There are four 36b performance counter registers which can simultaneously count events.
     Each Counter's event is programmably selected via the corresponding CNTxSEL field: 

                     |Bus 
        CNTxSEL[5:0] |Dependent| Event
        -------------+-----------------------
                 0   |   no    | Cycles
                 1   |   no    | L2 LDI Command Miss (NOTE: Both PP and IOB are cabable of generating LDI)
                 2   |   no    | L2 LDI Command Hit  (NOTE: Both PP and IOB are cabable of generating LDI)
                 3   |   no    | L2 non-LDI Command Miss
                 4   |   no    | L2 non-LDI Command Hit
                 5   |   no    | L2 Miss (total)
                 6   |   no    | L2 Hit (total)
                 7   |   no    | L2 Victim Buffer Hit (Retry Probe)
                 8   |   no    | LFB-NQ Index Conflict
                 9   |   no    | L2 Tag Probe (issued - could be VB-Retried)
                10   |   no    | L2 Tag Update (completed - note: some CMD types do not update)
                11   |   no    | L2 Tag Probe Completed (beyond VB-RTY window) 
                12   |   no    | L2 Tag Dirty Victim
                13   |   no    | L2 Data Store NOP
                14   |   no    | L2 Data Store READ
                15   |   no    | L2 Data Store WRITE 
                16   |   no    | Memory Fill Data valid (1 strobe/32B) 
                17   |   no    | Memory Write Request
                18   |   no    | Memory Read Request
                19   |   no    | Memory Write Data valid (1 strobe/32B)
                20   |   no    | ADD NOP (ADD Bus Idle)
                21   |   no    | ADD LDT (Load-Through Request)
                22   |   no    | ADD LDI (L2 Load I-Stream Request)
                23   |   no    | ADD LDD (L2 Load D-stream Request)
                24   |   no    | ADD STF (L2 Store Full cacheline Request)
                25   |   no    | ADD STT (L2 Store Through Request)
                26   |   no    | ADD STP (L2 Store Partial Request)
                27   |   no    | ADD STC (L2 Store Conditional Request)
                28   |   no    | ADD DWB (L2 Don't WriteBack Request)
                29   |   no    | ADD PL2 (L2 Prefetch Request)
                30   |   no    | ADD PSL1 (L1 Prefetch Request)
                31   |   no    | ADD IOBLD
                32   |   no    | ADD IOBST
                33   |   no    | ADD IOBDMA
                34   |   no    | ADD IOBRSP
                35   |   no    | STORE Bus valid (all) 
                36   |   no    | STORE Bus valid (DST=L2C) Memory Data
                37   |   no    | STORE Bus valid (DST=IOB) REFL Data
                38   |   no    | STORE Bus valid (DST=PP) IOBRSP Data
                39   |   yes   | COMMIT[0,1] NOP     NOTE: L2C_PFC0,2=COMMIT0  L2C_PFC1,3=COMMIT1    
                40   |   yes   | COMMIT[0,1] STDN    NOTE: L2C_PFC0,2=COMMIT0  L2C_PFC1,3=COMMIT1 
                41   |   yes   | COMMIT[0,1] FILL    NOTE: L2C_PFC0,2=COMMIT0  L2C_PFC1,3=COMMIT1 
                42   |   yes   | COMMIT[0,1] REFL    NOTE: L2C_PFC0,2=COMMIT0  L2C_PFC1,3=COMMIT1 
                43   |   yes   | COMMIT[0,1] STIN    NOTE: L2C_PFC0,2=COMMIT0  L2C_PFC1,3=COMMIT1 
                44   |   yes   | COMMIT[0,1] SCIN    NOTE: L2C_PFC0,2=COMMIT0  L2C_PFC1,3=COMMIT1 
                45   |   yes   | COMMIT[0,1] SCFL    NOTE: L2C_PFC0,2=COMMIT0  L2C_PFC1,3=COMMIT1 
                46   |   yes   | COMMIT[0,1] SCDN    NOTE: L2C_PFC0,2=COMMIT0  L2C_PFC1,3=COMMIT1 
                47   |   yes   | FILL[0,1] Data Valid         NOTE: L2C_PFC0,2=FILL0  L2C_PFC1,3=FILL1 
                48   |   yes   | FILL[0,1] Data Valid (FILL)  NOTE: L2C_PFC0,2=FILL0  L2C_PFC1,3=FILL1 
                49   |   yes   | FILL[0,1] Data Valid (STRSP) NOTE: L2C_PFC0,2=FILL0  L2C_PFC1,3=FILL1 
                50   |   yes   | FILL[0,1] Data Valid (REFL)  NOTE: L2C_PFC0,2=FILL0  L2C_PFC1,3=FILL1 
                51   |   no    | LRF-REQ (LFB-NQ)
                52   |   no    | DT RD-ALLOC (LDD/PSL1 Commands)
                53   |   no    | DT WR-INVAL (ST* Commands)

   - Documentation/Internal Bus Naming equivalence chart: 
        - ADD Bus = XMC Bus
        - STORE Bus = XMD Bus
        - COMMIT Bus = RSC Bus
        - FILL Bus = RSD Bus
   - NOTE: CNTxSEL = [39...50] are Bus dependent based on dual-COMMIT/FILL busses. 
        For instance: 
           + L2C_PFC0/L2C_PFC2 counters track COMMIT0/FILL0 on channel 0 of dual COMMIT/FILL busses. 
           + L2C_PFC1/L2C_PFC3 counters track COMMIT1/FILL1 on channel 1 of dual COMMIT/FILL busses.

----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_PFC0 = L2 Performance Counter #0
 *
 * Description: 
 *

     ==============================================================
     L2C_PFC0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<35:0>   PFCNT0    RO      0           0         Performance Counter #0                                 

<63:36>  NS        RAZ     0           0         RESERVED                                               

NOTES:
   - L2C_PFCTL[CNT0SEL]=[39..50] allow L2C_PFC0 counter to track COMMIT0/FILL0 on channel 0 of dual COMMIT/FILL busses. 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_PFC1 = L2 Performance Counter #1
 *
 * Description: 
 *

     ==============================================================
     L2C_PFC1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<35:0>   PFCNT1    RO      0           0         Performance Counter #1                                 
 
<63:36>  NS        RAZ     0           0         RESERVED                                               

NOTES:
   - L2C_PFCTL[CNT1SEL]=[39..50] allow L2C_PFC1 counter to track COMMIT1/FILL1 on channel 1 of dual COMMIT/FILL busses. 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_PFC2 = L2 Performance Counter #2
 *
 * Description: 
 *

     ==============================================================
     L2C_PFC2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<35:0>   PFCNT2    RO      0           0         Performance Counter #2                                 

<63:36>  NS        RAZ     0           0         RESERVED                                               

NOTES:
   - L2C_PFCTL[CNT2SEL]=[39..50] allow L2C_PFC2 counter to track COMMIT0/FILL0 on channel 0 of dual COMMIT/FILL busses. 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_PFC3 = L2 Performance Counter #3
 *
 * Description: 
 *

     ==============================================================
     L2C_PFC3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<35:0>   PFCNT3    RO      0           0         Performance Counter #3                                 
 
<63:36>  NS        RAZ     0           0         RESERVED                                               

NOTES:
   - L2C_PFCTL[CNT3SEL]=[39..50] allow L2C_PFC3 counter to track COMMIT1/FILL1 on channel 1 of dual COMMIT/FILL busses. 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_LFB3 = L2C LFB DEBUG 3 Register
 *
 * Description: LFB High Water Mark Register
 *

     ==============================================================
     L2C_LFB3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   LFB_HWM  R/W       0xF        0xF    LFB High Water Mark                                        
                                             Determines #of LFB Entries in use before backpressure
                                             is asserted.
                                                HWM=0:   1 LFB Entry available
                                                           ...  
                                                HWM=15: 16 LFB Entries available
                                             *** NOTE: PASS2 Addition

<4>     STPARTDIS R/W      0x0        0x0    STP/C Performance Enhancement Disable                      
                                             When clear, all STP/C(store partials) will take 2 cycles
                                             to complete (power-on default).   
                                             When set, all STP/C(store partials) will take 4 cycles
                                             to complete. 
                                             NOTE: It is recommended to keep this bit ALWAYS ZERO. 
                                             *** NOTE: PASS2 Addition
                                             
<63:5>  NS       RAZ       0           0     RESERVED                                                   
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_BST0 = L2C Data Store QUAD0 BIST Status Register
 *

     ==============================================================
     L2D_BST0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<33:0>  Q0STAT     RO      0           0       Bist Results for QUAD0                                   
                                                Failure #1 Status
                                                  [16:14] bad bank 
                                                  [13:7] bad high column 
                                                  [6:0] bad low column
                                                Failure #2 Status
                                                  [33:31] bad bank 
                                                  [30:24] bad high column
                                                  [23:17] bad low column
                                                NOTES: For bad high/low column reporting:  
                                                   0x7f:   No failure 
                                                   0x7e:   Fatal Defect: 2 or more bad columns
                                                   0-0x45: Bad column
                                                NOTE: If there are less than 2 failures then the 
                                                   bad bank will be 0x7. 
 
<34>    FTL        RO      0           0       L2C Data Store Fatal Defect(across all QUADs)            
                                               2 or more columns were detected bad across all
                                               QUADs[0-3]. Please refer to individual quad failures
                                               for bad column = 0x7e to determine which QUAD was in
                                               error.
 
<63:35>  NS        RAZ     0           0       RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_BST1 = L2C Data Store QUAD1 BIST Status Register
 *

     ==============================================================
     L2D_BST1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<33:0>  Q1STAT     RO      0           0       Bist Results for QUAD1                                   
                                               Failure #1 Status
                                                  [16:14] bad bank 
                                                  [13:7] bad high column 
                                                  [6:0] bad low column
                                                Failure #2 Status
                                                  [33:31] bad bank 
                                                  [30:24] bad high column
                                                  [23:17] bad low column
                                                NOTES: For bad high/low column reporting:  
                                                   0x7f:   No failure 
                                                   0x7e:   Fatal Defect: 2 or more bad columns
                                                   0-0x45: Bad column
                                                NOTE: If there are less than 2 failures then the 
                                                   bad bank will be 0x7. 

<63:34>  NS       RAZ     0           0        RESERVED                                                
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_BST2 = L2C Data Store QUAD2 BIST Status Register
 *

     ==============================================================
     L2D_BST2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<33:0>  Q2STAT     RO      0           0       Bist Results for QUAD2                                   
                                               Failure #1 Status
                                                  [16:14] bad bank 
                                                  [13:7] bad high column 
                                                  [6:0] bad low column
                                                Failure #2 Status
                                                  [33:31] bad bank 
                                                  [30:24] bad high column
                                                  [23:17] bad low column
                                                NOTES: For bad high/low column reporting:  
                                                   0x7f:   No failure 
                                                   0x7e:   Fatal Defect: 2 or more bad columns
                                                   0-0x45: Bad column
                                                NOTE: If there are less than 2 failures then the 
                                                   bad bank will be 0x7. 

<63:34>  NS        RAZ     0           0       RESERVED                                                
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_BST3 = L2C Data Store QUAD3 BIST Status Register
 *

     ==============================================================
     L2D_BST3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<33:0>  Q3STAT     RO      0           0       Bist Results for QUAD3                                   
                                               Failure #1 Status
                                                  [16:14] bad bank 
                                                  [13:7] bad high column 
                                                  [6:0] bad low column
                                                Failure #2 Status
                                                  [33:31] bad bank 
                                                  [30:24] bad high column
                                                  [23:17] bad low column
                                                NOTES: For bad high/low column reporting:  
                                                   0x7f:   No failure 
                                                   0x7e:   Fatal Defect: 2 or more bad columns
                                                   0-0x45: Bad column
                                                NOTE: If there are less than 2 failures then the 
                                                   bad bank will be 0x7. 

<63:34>  NS        RAZ     0           0       RESERVED                                                
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_FUS0 = L2C Data Store QUAD0 Fuse Register
 *

     ==============================================================
     L2D_FUS0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<33:0>  Q0FUS     RO      0           0       Fuse Register for QUAD0                                   
                                              This is purely for debug and not needed in the general 
                                              manufacturing flow. 
                                              Note that the fuse are complementary (Assigning a 
                                              fuse to 1 will read as a zero). This means the case 
                                              where no fuses are blown result in these csr's showing 
                                              all ones.
                                               Failure #1 Fuse Mapping
                                                  [16:14] bad bank 
                                                  [13:7] bad high column 
                                                  [6:0] bad low column
                                                Failure #2 Fuse Mapping
                                                  [33:31] bad bank 
                                                  [30:24] bad high column
                                                  [23:17] bad low column

<63:34>  NS        RAZ     0           0       RESERVED                                                
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_FUS1 = L2C Data Store QUAD1 Fuse Register
 *

     ==============================================================
     L2D_FUS1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<33:0>  Q1FUS     RO      0           0       Fuse Register for QUAD1                                   
                                              This is purely for debug and not needed in the general 
                                              manufacturing flow. 
                                              Note that the fuse are complementary (Assigning a 
                                              fuse to 1 will read as a zero). This means the case 
                                              where no fuses are blown result in these csr's showing 
                                              all ones.
                                               Failure #1 Fuse Mapping
                                                  [16:14] bad bank 
                                                  [13:7] bad high column 
                                                  [6:0] bad low column
                                                Failure #2 Fuse Mapping
                                                  [33:31] bad bank 
                                                  [30:24] bad high column
                                                  [23:17] bad low column

<63:34>  NS        RAZ     0           0       RESERVED                                                
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_FUS2 = L2C Data Store QUAD2 Fuse Register
 *

     ==============================================================
     L2D_FUS2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<33:0>  Q2FUS     RO      0           0       Fuse Register for QUAD2                                   
                                              This is purely for debug and not needed in the general 
                                              manufacturing flow. 
                                              Note that the fuse are complementary (Assigning a 
                                              fuse to 1 will read as a zero). This means the case 
                                              where no fuses are blown result in these csr's showing 
                                              all ones.
                                               Failure #1 Fuse Mapping
                                                  [16:14] bad bank 
                                                  [13:7] bad high column 
                                                  [6:0] bad low column
                                                Failure #2 Fuse Mapping
                                                  [33:31] bad bank 
                                                  [30:24] bad high column
                                                  [23:17] bad low column

<63:34>  NS        RAZ     0           0       RESERVED                                                
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2D_FUS3 = L2C Data Store QUAD3 Fuse Register
 *

     ==============================================================
     L2D_FUS3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<33:0>  Q3FUS     RO      0           0       Fuse Register for QUAD3                                   
                                              This is purely for debug and not needed in the general 
                                              manufacturing flow. 
                                              Note that the fuses are complementary (Assigning a 
                                              fuse to 1 will read as a zero). This means the case 
                                              where no fuses are blown result in these csr's showing 
                                              all ones.
                                               Failure #1 Fuse Mapping
                                                  [16:14] bad bank 
                                                  [13:7] bad high column 
                                                  [6:0] bad low column
                                                Failure #2 Fuse Mapping
                                                  [33:31] bad bank 
                                                  [30:24] bad high column
                                                  [23:17] bad low column

<34>     CRIP_1024K RO      0           0    This is purely for debug and not needed in the general    
                                              manufacturing flow. 
                                              If the FUSE is not-blown, then this bit should read 
                                              as 0. If the FUSE is blown, then this bit should read 
                                              as 1.  
                                              *** NOTE: Pass2 Addition 

<35>     CRIP_512K RO      0           0     This is purely for debug and not needed in the general    
                                              manufacturing flow. 
                                              If the FUSE is not-blown, then this bit should read 
                                              as 0. If the FUSE is blown, then this bit should read 
                                              as 1.  
                                              *** NOTE: Pass2 Addition 

<36>     FUS_SPARE RO      0           0     This is purely for debug and not needed in the general    
                                              manufacturing flow. 
                                              If the FUSE is not-blown, then this bit should read 
                                              as 0. If the FUSE is blown, then this bit should read 
                                              as 1.  

<38:37>  EMA_CTL   RO      0           0     L2 Data Store EMA Control                                 
                                              These bits are used to 'observe' the EMA[1:0] inputs
                                              for the L2 Data Store RAMs which are controlled by 
                                              either FUSES[141:140] or by MIO_FUSE_EMA[EMA] CSR. 
                                              From poweron (dc_ok), the EMA_CTL are driven from 
                                              FUSE[141:140]. However after the 1st CSR write to the 
                                              MIO_FUSE_EMA[EMA] bits, the EMA_CTL will source 
                                              from the MIO_FUSE_EMA[EMA] register permanently
                                              (until dc_ok). 
                                              NOTE: O9N Addition

<63:39>  NS        RAZ     0           0     RESERVED                                                  
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_BST2 = L2C BIST 2 CTL/STAT
 *

     ==============================================================
     L2C_BST2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     XRDDAT    RO       0           0         Bist Results for RFB XRD-DAT RAM                       
                                                 0: GOOD (or bist in progress/never run)                                          
                                                 1: BAD                                                                          
 
<1>     XRDMSK    RO       0           0         Bist Results for RFB XRD-MSK RAM                       
                                                 0: GOOD (or bist in progress/never run)                                          
                                                 1: BAD                                                                          
 
<2>     PICBST    RO       0           0         Bist Results for RFB PIC RAM                           
                                                 1: BAD                                                                               
 
<3>     IPCBST    RO       0           0         Bist Results for RFB IPC RAM                           
                                                 1: BAD                                                                          
 
<7:4>   RHDB      RO       0           0         Bist Results for RHDB RAMs                             
                                                 0: GOOD (or bist in progress/never run)                                          
                                                 1: BAD                                                                          
 
<11:8>  RMDB      RO       0           0         Bist Results for RMDB RAMs                             
                                                 0: GOOD (or bist in progress/never run)                                          
                                                 1: BAD                                                                           
 
<15:12> MRB       RO       0           0         Bist Results for MRB RAMs                              
                                                 0: GOOD (or bist in progress/never run)                                         
                                                 1: BAD                                                                          

<63:16> NS        RAZ      0           0         RESERVED                                               
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_BST1 = L2C BIST 1 CTL/STAT
 *

     ==============================================================
     L2C_BST1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<8:0>   L2T        RO      0           0        Bist Results for L2T (USE+8SET RAMs)                    
                                                0: GOOD (or bist in progress/never run)                                           
                                                1: BAD  
                                                                           
<9>     VAB_VWCF   RO      0           0        Bist Results for VAB VWCF_MEM                           
                                                0: GOOD (or bist in progress/never run)                                           
                                                1: BAD  
    
<11:10> LRF        RO      0           0        Bist Results for LRF RAMs (PLC+ILC)                     
                                                0: GOOD (or bist in progress/never run)                                           
                                                1: BAD
                                                                                  
<15:12> VWDF       RO      0           0        Bist Results for VWDF RAMs                              
                                                0: GOOD (or bist in progress/never run)                                           
                                                1: BAD                                                                            

<63:16> NS         RAZ     0           0        RESERVED                                               
----------------------------------------------------------------------------------------------------
===
 *
 *                  L2C_BST0 = L2C BIST 0 CTL/STAT
 *

     ==============================================================
     L2C_BST0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   WLB_DAT   RO       0           0     Bist Results for WLB-DAT RAM [DP0-3]                      
                                             0: GOOD (or bist in progress/never run)                                              
                                             1: BAD                                                                               
<4>     STIN_MSK  RO       0           0     Bist Results for STIN-MSK RAM                             
                                             0: GOOD (or bist in progress/never run)                                                
                                             1: BAD                                                                                 

<5>     DT        RO       0           0     Bist Results for DuTAG RAM(s)                             
                                             0: GOOD (or bist in progress/never run)                                                
                                             1: BAD     
                                                                            
<18:6>  DTCNT     RO       0           0     DuTag BiST Counter (used to help isolate the failure)     
                                               [12]:    i (0=FORWARD/1=REVERSE pass)
                                               [11:10]: j (Pattern# 1 of 4)
                                               [9:4]:   k (DT Index 1 of 64)
                                               [3:0]:   l (DT# 1 of 16 DTs)

<22:19> WLB_MSK   RO       0           0     Bist Results for WLB-MSK RAM [DP0-3]                      
                                             0: GOOD (or bist in progress/never run)                                              
                                             1: BAD
                                                                                  
<23>    DTBNK     RO       0           0     DuTag Bank#                                               
                                             When DT=1(BAD), this field provides additional information
                                             about which DuTag Bank (0/1) failed. 
                                             *** NOTE: O9N PASS1 Addition                     

<63:24> NS        RAZ      0           0     RESERVED                                                  
----------------------------------------------------------------------------------------------------
===
 * Specify the RSL base addresses for the block

 *
 *                  LMC_MEM_CFG0 = LMC Memory Configuration Register0
 *
 * This register controls certain parameters of  Memory Configuration 
 *

     ==============================================================
     LMC(0)_MEM_CFG0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>      INIT_START  R/W     0       0      A 0->1 transition starts the DDR memory initialization   
                                            sequence. 
 
<1>      ECC_ENA     R/W     0       1      ECC Enable: When set will enable the 8b ECC              
                                            check/correct logic. Should be 1 when used with DIMMs
                                            with ECC. 0, otherwise. 
                                            When this mode is turned on, DQ[71:64] and DQ[143:137]     
                                            on writes, will contain the ECC code generated for 
                                            the lower 64 and upper 64 bits of data which will 
                                            written in the memory and then later on reads, used
                                            to check for Single bit error (which will be auto-
                                            corrected) and Double Bit error (which will be 
                                            reported). When not turned on, DQ[71:64] and DQ[143:137]
                                            are driven to 0.  Please refer to SEC_ERR, DED_ERR, 
                                            LMC_FADR, and LMC_ECC_SYND registers
                                            for diagnostics information when there is an error.
 
<4:2>    ROW_LSB     R/W    0x3     NS      Encoding used to determine which memory address          
                                            bit position represents the low order DDR ROW address.

                                            The processor's memory address[33:7] needs to be 
                                            translated to DRAM addresses (bnk,row,col,rank and dimm)
                                            and that is a function of the following:
                                            1. # Banks (4 or 8) - spec'd by BANK8
                                            2. Datapath Width(64 or 128) - MODE128b 
                                            3. # Ranks in a DIMM - spec'd by BUNK_ENA
                                            4. # DIMM's in the system 
                                            5. # Column Bits of the memory part - spec'd indirectly
                                            by this register.
                                            6. # Row Bits of the memory part - spec'd indirectly
                                            by the register below (PBANK_LSB).
                        
                                            Illustration: For Micron's MT18HTF6472A,512MB DDR2 
                                            Unbuffered DIMM which uses 256Mb parts (8M x 8 x 4), 
                                            # Banks = 4 -> 2 bits of BA
                                            # Columns = 1K -> 10 bits of Col
                                            # Rows = 8K -> 13 bits of Row
                                            Assuming that the total Data width is 128, this is how 
                                            we arrive at row_lsb:
                                            Col Address starts from mem_addr[4] for 128b (16Bytes) 
                                            dq width or from mem_addr[3] for 64b (8Bytes) dq width
                                            # col + # bank = 12. Hence row_lsb is mem_adr[15] for 
                                            64bmode or mem_adr[16] for 128b mode. Hence row_lsb 
                                            parameter should be set to 001 (64b) or 010 (128b).
                                                 000: row_lsb = mem_adr[14]
                                                 001: row_lsb = mem_adr[15] 
                                                 010: row_lsb = mem_adr[16] 
                                                 011: row_lsb = mem_adr[17] 
                                                 100: row_lsb = mem_adr[18]
                                                 101-111:row_lsb = RESERVED
 
<8:5>   PBANK_LSB    R/W    0x5     NS      Physical Bank address select                             
                                            Reverting to the explanation for ROW_LSB, 
                                            PBank_LSB would be Row_LSB bit + #rowbits
                                            + #rankbits
                                            In the 512MB DIMM Example, assuming no rank bits:
                                            pbank_lsb=mem_addr[15+13] for 64 b mode
                                                     =mem_addr[16+13] for 128b mode
                                            Hence the parameter
                                            
                    0000:pbank[1:0] = mem_adr[28:27]    / rank = mem_adr[26] (if bunk_ena)
                    0001:pbank[1:0] = mem_adr[29:28]    / rank = mem_adr[27]      "
                    0010:pbank[1:0] = mem_adr[30:29]    / rank = mem_adr[28]      "
                    0011:pbank[1:0] = mem_adr[31:30]    / rank = mem_adr[29]      "
                    0100:pbank[1:0] = mem_adr[32:31]    / rank = mem_adr[30]      "
                    0101:pbank[1:0] = mem_adr[33:32]    / rank = mem_adr[31]      "
                    0110:pbank[1:0] ={1'b0,mem_adr[33]} / rank = mem_adr[32]      "
                    0111:pbank[1:0] ={2'b0}             / rank = mem_adr[33]      "
                    1000-1111: RESERVED
 
<14:9>  REF_INT      R/W    0x1     0x2     Refresh interval represented in #of 512 dclk increments. 
                                            Program this to RND-DN(tREFI/clkPeriod/512)
                                               000000: RESERVED 
                                               000001: 1 * 512  = 512 dclks
                                                ...  
                                               111111: 63 * 512 = 32256 dclks 
 
<18:15>  TCL         R/W    0x3     NS      This register is not used                                

<19>  INTR_SEC_ENA   R/W     0       1      ECC Single Error Correct(SEC) Interrupt Enable bit       
                                            When set, the memory controller raises a processor
                                            interrupt on detecting a correctable Single Bit ECC
                                            error.
 
<20>  INTR_DED_ENA   R/W     0       1      ECC Double Error Detect(DED) Interrupt Enable bit        
                                            When set, the memory controller raises a processor
                                            interrupt on detecting an uncorrectable Dbl Bit ECC
                                            error.
 
<24:21> SEC_ERR     R/W1C   0x0     0x0     Single Error (corrected) of Rd Data                      
                                            In 128b mode, ecc is calulated on 1 cycle worth of data
                                            [21] corresponds to DQ[63:0], Phase0
                                            [22] corresponds to DQ[127:64], Phase0
                                            [23] corresponds to DQ[63:0], Phase1
                                            [24] corresponds to DQ[127:64], Phase1
                                            In 64b mode, ecc is calculated on 2 cycle worth of data
                                            [21] corresponds to DQ[63:0], Phase0, cycle0
                                            [22] corresponds to DQ[63:0], Phase0, cycle1
                                            [23] corresponds to DQ[63:0], Phase1, cycle0
                                            [24] corresponds to DQ[63:0], Phase1, cycle1
                                            Write of 1 will clear the corresponding error bit
                                            
<28:25> DED_ERR     R/W1C   0x0     0x0     Double Error detected (DED) of Rd Data                   
                                            In 128b mode, ecc is calulated on 1 cycle worth of data
                                            [25] corresponds to DQ[63:0], Phase0
                                            [26] corresponds to DQ[127:64], Phase0
                                            [27] corresponds to DQ[63:0], Phase1
                                            [28] corresponds to DQ[127:64], Phase1
                                            In 64b mode, ecc is calculated on 2 cycle worth of data
                                            [25] corresponds to DQ[63:0], Phase0, cycle0
                                            [26] corresponds to DQ[63:0], Phase0, cycle1
                                            [27] corresponds to DQ[63:0], Phase1, cycle0
                                            [28] corresponds to DQ[63:0], Phase1, cycle1
                                            Write of 1 will clear the corresponding error bit

<29>    BUNK_ENA     R/W     0      NS      Bunk Enable aka RANK ena (for use with dual-rank DIMMs)  
                                            For dual-rank DIMMs, the bunk_ena bit will enable
                                            the drive of the CS_N[1:0] pins based on the 
                                            (pbank_lsb-1) address bit. 
                                            Write 0 for SINGLE ranked DIMM's.

<30>    SILO_QC      R/W    0x0     NS      Adds a Quarter Cycle granularity to generate             
                                            dqs pulse generation for silo. 
                                            Combination of Silo_HC and Silo_QC gives the 
                                            ability to position the read enable with quarter
                                            cycle resolution. This is applied on all the bytes
                                            uniformly.

<31>    RESET        RAZ     NS     NS      Reset oneshot pulse for refresh counter,                 
                                            and LMC_OPS_CNT_*, LMC_IFB_CNT_*, and LMC_DCLK_CNT_*
                                            CSR's. SW should write this to a one, then re-write
                                            it to a zero to cause the reset.

<63:32> NS           RAZ     NS     NS      RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *
 *                  LMC_MEM_CFG1 = LMC Memory Configuration Register1
 *
 * This register controls the External Memory Configuration Timing Parameters. Please refer to the
 * appropriate DDR2 part spec from your memory vendor for the various values in this CSR.
 * The details of each of these timing parameters can be found in the JEDEC spec or the vendor
 * spec of the memory parts.

     ==============================================================
     LMC(0)_MEM_CFG1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<4:0>    TRAS        R/W    0xc     0xc     tRAS Cycles = RNDUP[tRAS(ns)/tcyc(ns)]                   
                                            (Represented in tCYC cycles == 1 dclk)
                                                00000-0001: RESERVED
                                                00010: 2
                                                ..
                                                11111: 31
 
<8:5>    TRCD        R/W    0x4     0x4     tRCD Cycles = RNDUP[tRCD(ns)/tcyc(ns)]                   
                                            (Represented in tCYC cycles == 1dclk)
                                            TYP=15ns (66MHz=1,167MHz=3,400MHz=6 for TYP)
                                                0000: RESERVED 
                                                0001: 2 (2 is the smallest value allowed)
                                                0002: 2
                                                ..
                                                1001: 9
                                                1010-1111: RESERVED
                                            In 2T mode, make this register TRCD-1, not going
                                            below 2.

<12:9>    TWTR       R/W    0x2     0x2     tWTR Cycles = RNDUP[tWTR(ns)/tcyc(ns)]                   
                                            Last Wr Data to Rd Command time.
                                            (Represented in tCYC cycles == 1dclks)
                                            TYP=15ns (66MHz=1,167MHz=3,400MHz=6, for TYP)
                                                0000: RESERVED
                                                0001: 1
                                                ..
                                                0111: 7
                                                1000-1111: RESERVED 
 
<16:13>  TRP         R/W    0x5     0x4     tRP Cycles = RNDUP[tRP(ns)/tcyc(ns)]                     
                                            (Represented in tCYC cycles == 1dclk)
                                            TYP=15ns (66MHz=1,167MHz=3,400MHz=6 for TYP)
                                                0000: RESERVED
                                                0001: 1
                                                ..
                                                1001: 9
                                                1010-1111: RESERVED 
                                            When using parts with 8 banks (LMC_DDR2_CTL->BANK8 
                                            is 1), load tRP cycles + 1 into this register.
 
<21:17>  TRFC        R/W    0x6     0x7     Indicates tRFC constraints.                            
                                            Set TRFC (CSR field) = RNDUP[tRFC(ns)/4*tcyc(ns)],
                                            where tRFC is from the DDR2 spec, and tcyc(ns)
                                            is the DDR clock frequency (not data rate).
                                            For example, with 2Gb, DDR2-667 parts,
                                            typ tRFC=195ns, so TRFC (CSR field) = 0x11.
                                                
                                                TRFC (binary): Corresponding tRFC Cycles
                                                ----------------------------------------
                                                00000-00001: RESERVED
                                                00010: 0-8
                                                00011: 9-12
                                                00100: 13-16
                                                ...
                                                11110: 117-120
                                                11111: 121-124
  
<24:22>  TMRD        R/W    0x2     0x2     tMRD Cycles                                            
                                            (Represented in dclk tCYC)
                                            For DDR2, its TYP 2*tCYC)
                                                000: RESERVED
                                                001: 1
                                                010: 2
                                                011: 3
                                                100: 4
                                                101-111: RESERVED 
 
<27:25>  CASLAT      R/W    0x4     0x4     CAS Latency Encoding which is loaded into each DDR       
                                            SDRAM device (MRS[6:4]) upon power-up (INIT_START=1). 
                                            (Represented in tCYC cycles == 1 dclks)
                                               000 RESERVED
                                               001 RESERVED
                                               010 2.0 tCYC
                                               011 3.0 tCYC 
                                               100 4.0 tCYC 
                                               101 5.0 tCYC 
                                               110 6.0 tCYC
                                               111 RESERVED
                                            eg). The parameters TSKW, SILO_HC, and SILO_QC can
                                            account for 1/4 cycle granularity in board/etch delays.
 
 
<30:28>  TRRD        R/W    0x2     0x2     tRRD cycles: ACT-ACT timing parameter for different      
                                            banks. (Represented in tCYC cycles == 1dclks) 
                                            TYP=15ns (66MHz=1,167MHz=3,200MHz=3)
                                            For DDR2, TYP=7.5ns
                                               000: RESERVED 
                                               001: 1 tCYC
                                               010: 2 tCYC
                                               011: 3 tCYC
                                               100: 4 tCYC
                                               101: 5 tCYC
                                               110: 6 tCYC
                                               111: 7 tCYC
 
 
<63:31>  NS          RAZ     NS      NS     RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_CTL = LMC Control
 * This register is an assortment of various control fields needed by the memory controller
 *   

     ==============================================================
     LMC(0)_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<1:0>    DIC         R/W     0       0      Drive Strength Control:                                  
                                            DIC[0] is              
                                            loaded into the Extended Mode Register (EMRS) A1 bit
                                            during initialization.
                                                0 = Normal 
                                                1 = Reduced 
                                            DIC[1] is used to load into EMRS
                                            bit 10 - DQSN Enable/Disable field. By default, we
                                            program the DDR's to drive the DQSN also. Set it to
                                            1 if DQSN should be Hi-Z.
                                                0 - DQSN Enable
                                                1 - DQSN Disable

<3:2>    QS_DIC      R/W    0x2      2      DDR2 Termination Resistor Setting                        
                                            A non Zero value in this register
                                            enables the On Die Termination (ODT) in DDR parts.
                                            These two bits are loaded into the RTT 
                                            portion of the EMRS register bits A6 & A2. If DDR2's
                                            termination (for the memory's DQ/DQS/DM pads) is not 
                                            desired, set it to 00. If it is, chose between 
                                            01 for 75 ohm and 10 for 150 ohm termination.
                                                00 = ODT Disabled
                                                01 = 75 ohm Termination 
                                                10 = 150 ohm Termination
                                                11 = 50 ohm Termination
                                            Octeon, on writes, by default, drives the 4/8 ODT
                                            pins (64/128b mode) based on what the masks 
                                            (LMC_WODT_CTL) are programmed to. 
                                            LMC_DDR2_CTL->ODT_ENA enables Octeon to drive ODT pins 
                                            for READS. LMC_RODT_CTL needs to be programmed based
                                            on the system's needs for ODT.
                                           
<5:4>  TSKW          R/W    0x0     0x1     This component is a representation of total BOARD        
                                            DELAY on DQ (used in the controller to determine the
                                            R->W spacing to avoid DQS/DQ bus conflicts). Enter  
                                            the largest of the per byte Board delay
                                                00: 0 dclk
                                                01: 1 dclks
                                                10: 2 dclks
                                                11: 3 dclks
 
<7:6>  SIL_LAT       R/W    0x1     0x1     SILO Latency: On reads, determines how many additional   
                                            dclks to wait (on top of TCL+1+TSKW) before pulling 
                                            data out of the pad silos. 
                                                00: illegal
                                                01: 1 dclks
                                                10: 2 dclks
                                                11: illegal
                                            This should always be set to 1.
 
<8>    BPRCH         R/W     0       NS     Back Porch Enable: When set, the turn-on time for        
                                            the DDR_DQ/DQS drivers is delayed an additional DCLK 
                                            cycle. This should be set to one whenever both SILO_HC
                                            and SILO_QC are set.
 
<9>    FPRCH2        R/W     0       1      Front Porch Enable: When set, the turn-off               
                                            time for the DDR_DQ/DQS drivers is 1 dclk earlier.

                                            This bit should typically be set.

<10>   MODE128b      R/W     1       1      128b data Path Mode                                      
                                            Set to 1 if we use all 128 DQ pins
                                            0 for 64b DQ mode.

<11>   DRESET        R/W    0x1     0x0     Dclk domain reset.  The reset signal that is used by the 
                                            Dclk domain is (DRESET || ECLK_RESET).

<12>   INORDER_MRF   R/W     0       0      Always clear to zero                                     
 
<13>   INORDER_MWF   RAZ     0       0      Reads as zero                                            

<14>    R2R_SLOT     R/W     0       0      R2R Slot Enable: When set, all read-to-read trans        
                                            will slot an additional 1 cycle data bus bubble to 
                                            avoid DQ/DQS bus contention. This is only a CYA bit, 
                                            in case the "built-in" DIMM and RANK crossing logic 
                                            which should auto-detect and perfectly slot 
                                            read-to-reads to the same DIMM/RANK. 
 
<15>    RDIMM_ENA    R/W     0       NS     Registered DIMM Enable - When set allows the use         
                                            of JEDEC Registered DIMMs which require Write 
                                            data to be registered in the controller. 

<16>     SPAREF      R/W    0x0     0x0     Keep this as 0.                                          

<17>     SPARE1      R/W    0x0     0x0     Keep this as 0.                                          

<21:18>  MAX_WRITE_BATCH R/W 0x8    0x8     Maximum number of consecutive writes to service before   
                                            allowing reads to interrupt.

<22>     XOR_BANK    R/W    0x0     0x1     If (XOR_BANK == 1), then                                 
                                              bank[n:0]=address[n+7:7] ^ address[n+7+5:7+5]
                                            else
                                              bank[n:0]=address[n+7:7]
                                            where n=1 for a 4 bank part and n=2 for an 8 bank part

<23>     SLOW_SCF    R/W    0x0     0x0     Should be cleared to zero                                

<27:24>  DDR__PCTL   RO      NS      NS     DDR pctl from compensation circuit                       
                                            The encoded value on this will adjust the drive strength
                                            of the DDR DQ pullup.

<31:28>  DDR__NCTL   RO      NS      NS     DDR nctl from compensation circuit                       
                                            The encoded value on this will adjust the drive strength
                                            of the DDR DQ pulldns.

<63:32>  NS          RAZ     NS      NS     RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_DDR2_CTL = LMC DDR2 & DLL Control Register
 *   

     ==============================================================
     LMC(0)_DDR2_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>      DDR2        R/W    0x1     0x1     Should be set                                            

<1>      RDQS        R/W     0       0      DDR2 RDQS mode. When set, configures memory subsystem to 
                                            use unidirectional DQS pins. RDQS/DM - Rcv & DQS - Xmit                               

<2>      DLL90_BYP   R/W     0       0      DDR DLL90 Bypass: When set, the DDR90 DLL is to be       
                                            bypassed and the setting is defined by DLL90_VLU

<7:3>    DLL90_VLU   R/W     0      NS      Contains the open loop setting value for the DDR90 delay 
                                            line.                                                                                 

<8>      QDLL_ENA    R/W     0       0      DDR Quad DLL Enable: A 0->1 transition on this bit after 
                                            DCLK init sequence will reset the DDR 90 DLL. Should                            
                                            happen at startup before any activity in DDR.
                                            DRESET should be asserted before and for 10 usec
                                            following the 0->1 transition on QDLL_ENA.

<9>     ODT_ENA      R/W     0       0      Enable Obsolete ODT on Reads                             
                                            Obsolete Read ODT wiggles DDR_ODT_* pins on reads.
                                            Should normally be cleared to zero.
                                            When this is on, the following fields must also be 
                                            programmed:
                                                LMC_CTL->QS_DIC - programs the termination value
                                                LMC_RODT_CTL - programs the ODT I/O mask for Reads

<10>      DDR2T      R/W     0      NS      Turn on the DDR 2T mode. 2 cycle window for CMD and      
                                            address. This mode helps relieve setup time pressure
                                            on the Address and command bus which nominally have
                                            a very large fanout. Please refer to Micron's tech 
                                            note tn_47_01 titled "DDR2-533 Memory Design Guide 
                                            for Two Dimm Unbuffered Systems" for physical details.
                                                
                                            BURST8 should be set when DDR2T is set to minimize
                                            add/cmd loss.
                                            
<11>     CRIP_MODE   R/W     0       0      Cripple Mode - When set, the LMC allows only             
                                            1 inflight transaction (.vs. 8 in normal mode). 
                                            This bit is ONLY to be set at power-on and
                                            should not be set for normal use.

<16:12> TFAW         R/W     0       9      tFAW - Cycles = RNDUP[tFAW(ns)/tcyc(ns)] - 1             
                                            Four Access Window time. Relevant only in DDR2 AND in 
                                            8-bank parts. 
                                                tFAW = 5'b0 in DDR2-4bank
                                                tFAW = RNDUP[tFAW(ns)/tcyc(ns)] - 1 
                                                         in DDR2-8bank

<20:17>  DDR_EOF     R/W    0x0      0      Early Fill Counter Init.                                 
                                            L2 needs to know a few cycle before a fill completes so 
                                            it can get its Control pipe started (for better overall 
                                            performance). This counter contains  an init value which 
                                            is a function of Eclk/Dclk ratio to account for the 
                                            asynchronous boundary between L2 cache and the DRAM 
                                            controller. This init value will 
                                            determine when to safely let the L2 know that a fill 
                                            termination is coming up. 
                                            
                                            Set DDR_EOF according to the following rule:
                                            eclkFreq/dclkFreq = dclkPeriod/eclkPeriod = RATIO
                                                   RATIO < 6/6  -> illegal
                                            6/6 <= RATIO < 6/5  -> DDR_EOF=3
                                            6/5 <= RATIO < 6/4  -> DDR_EOF=3
                                            6/4 <= RATIO < 6/3  -> DDR_EOF=2
                                            6/3 <= RATIO < 6/2  -> DDR_EOF=1
                                            6/2 <= RATIO < 6/1  -> DDR_EOF=0
                                            6/1 <= RATIO        -> DDR_EOF=0
                                            
<21>     SILO_HC     R/W    0x1     NS      Delays the read sample window by a Half Cycle.           

<24:22>  TWR         R/W    0x3     0x1     DDR Write Recovery time (tWR). Last Wr Brst to Pre delay 
                                            This is not a direct encoding of the value. Its 
                                            programmed as below per DDR2 spec. The decimal number 
                                            on the right is RNDUP(tWR(ns) / tCYC(ns))
                                             TYP=15ns 
                                                000: RESERVED
                                                001: 2
                                                010: 3
                                                011: 4
                                                100: 5
                                                101: 6
                                                110: 7
                                                111: 8

<25>     BWCNT       R/W     0      0x0     Bus utilization counter Clear.                           
                                            Clears the LMC_OPS_CNT_*, LMC_IFB_CNT_*, and
                                            LMC_DCLK_CNT_* registers. SW should first write this
                                            field to a one, then write this field to a zero to
                                            clear the CSR's.

<26>     POCAS       R/W     0       0      Enable the Posted CAS feature of DDR2.                   
                                                
<29:27>  ADDLAT      R/W    0x0     0x0     Additional Latency for posted CAS                        
                                            When Posted CAS is on, this configures the additional
                                            latency. This should be set to
                                                   1 .. LMC_MEM_CFG1[TRCD]-2 
                                            (Note the implication that posted CAS should not
                                            be used when tRCD is two.)

<30>     BURST8      R/W     0       1      8-burst mode.                                            
                                            1 - DDR data transfer happens in burst of 8
                                            0 - DDR data transfer happens in burst of 4

                                            BURST8 should be set when DDR2T is set
                                            to minimize the command bandwidth loss.

<31>     BANK8       R/W     0      NS      For 8 bank DDR2 parts                                    
                                            1 - DDR2 parts have 8 internal banks (BA is 3 bits 
                                            wide).
                                            0 - DDR2 parts have 4 internal banks (BA is 2 bits
                                            wide).
   
<63:32>  UNUSED      RAZ     0       0      Unused                                                   
----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_FADR = LMC Failing Address Register (SEC/DED)
 *
 *This register only captures the first transaction with ecc errors. A DBE error can 
 *over-write this register with its failing addresses. If you write
 *LMC_MEM_CFG0->SEC_ERR/DED_ERR then it will clear the error bits and capture the
 *next failing address.
 *If failing dimm is 2 that means the error is in the higher bits dimm.  

     ==============================================================
     LMC(0)_FADR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<11:0>   FCOL        RO      0       0      Failing Column Start Address[11:0]                       
                                            Represents the Failing read's starting column address 
                                            (and not the exact column address in which the SEC/DED
                                            was detected)
 
<25:12>  FROW        RO      0       0      Failing Row Address[13:0]                                

<28:26>  FBANK       RO      0       0      Failing Bank[2:0]                                        
 
<29>     FBUNK       RO      0       0      Failing Rank                                             
 
<31:30>  FDIMM       RO      0       0      Failing DIMM#                                            
 
<63:32>  NS          RAZ     NS      NS     RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_COMP_CTL = LMC Compensation control
 *   

     ==============================================================
     LMC(0)_COMP_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32>  UNUSED     RAZ      0       0      Unused                                                     
<31:28>  NCTL_CSR   R/W     0xf     NS      Compensation control bits                                  
<27:24>  UNUSED24   R/W     0x0     NS      MBZ                                                        
<23:20>  UNUSED20   R/W     0x0     NS      MBZ                                                        
<19:16>  NCTL_DAT   R/W     0x0     NS      Compensation control bits                                  
<15:12>  PCTL_CSR   R/W     0xf     NS      Compensation control bits                                  
<11:8>   UNUSED08   R/W     0x0     NS      MBZ                                                        
<7:4>    UNUSED04   R/W     0x0     NS      MBZ                                                        
<3:0>    PCTL_DAT   R/W     0x0     NS      Compensation control bits                                  
----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_WODT_CTL = LMC Write OnDieTermination control
 * System designers may desire to terminate DQ/DQS/DM lines for higher frequency DDR operations 
 * (667MHz and faster), especially on a multi-rank system. DDR2 DQ/DM/DQS I/O's have built in 
 * Termination resistor that cab turned on or off by the controller, after meeting tAOND and tAOF
 * timing requirements. Each Rank has its own ODT pin that fans out to all the memory parts
 * in that DIMM. System designers may prefer different combinations of ODT ON's for read and write
 * into different ranks. Octeon supports full programmability by way of the mask register below.
 * Each Rank position has its own 4/8-bit programmable field (depending on 64/128b mode). 
 * When the controller does a write to that rank, it sets the 4/8 ODT pins to the MASK pins below.
 * For eg., When doing a write into Rank0, a system designer may desire to terminate the lines
 * with the resistor on Rank1. The mask WODT_HI0 and WODT_LO0 would then be {0010 & 0010}. 
 * If ODT feature is not desired, the DDR parts can be programmed to not look at these pins by
 * writing 0 in QS_DIC. Octeon drives the appropriate mask values on the ODT pins by default. 
 * If this feature is not required, write 0 in this register.

     ==============================================================
     LMC(0)_WODT_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32>  UNUSED      RAZ    NS      NS      Unused                                                     
<31:28>  WODT_HI3    R/W    0xf     0xf     Write ODT mask for position 3, data[127:64]                
<27:24>  WODT_HI2    R/W    0xf     0xf     Write ODT mask for position 2, data[127:64]                
<23:20>  WODT_HI1    R/W    0xf     0xf     Write ODT mask for position 1, data[127:64]                
<19:16>  WODT_HI0    R/W    0xf     0xf     Write ODT mask for position 0, data[127:64]                
<15:12>  WODT_LO3    R/W    0xf     0xf     Write ODT mask for position 3, data[ 63: 0]                
<11:8>   WODT_LO2    R/W    0xf     0xf     Write ODT mask for position 2, data[ 63: 0]                
<7:4>    WODT_LO1    R/W    0xf     0xf     Write ODT mask for position 1, data[ 63: 0]                
<3:0>    WODT_LO0    R/W    0xf     0xf     Write ODT mask for position 0, data[ 63: 0]                

Notes:
When a given RANK in position N is selected, the WODT _HI and _LO masks for that position are used.
Mask[3:0] is used for WODT control of the RANKs in positions 3, 2, 1, and 0, respectively.
In  64b mode, DIMMs are assumed to be ordered in the following order:
 position 3: {unused        , DIMM1_RANK1_LO}
 position 2: {unused        , DIMM1_RANK0_LO}
 position 1: {unused        , DIMM0_RANK1_LO}
 position 0: {unused        , DIMM0_RANK0_LO}
In 128b mode, DIMMs are assumed to be ordered in the following order:
 position 3: {DIMM3_RANK1_HI, DIMM1_RANK1_LO}
 position 2: {DIMM3_RANK0_HI, DIMM1_RANK0_LO}
 position 1: {DIMM2_RANK1_HI, DIMM0_RANK1_LO}
 position 0: {DIMM2_RANK0_HI, DIMM0_RANK0_LO}
----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_ECC_SYND = MRD ECC Syndromes
 *   

     ==============================================================
     LMC(0)_ECC_SYND Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<7:0>    MRDSYN0     RO      0       0      MRD ECC Syndrome Quad0                                   
                                            In 128b mode, ecc is calulated on 1 cycle worth of data
                                            SYND0 corresponds to DQ[63:0], Phase0
                                            In 64b mode, ecc is calculated on 2 cycle worth of data
                                            SYND0 corresponds to DQ[63:0], Phase0, cycle0

<15:8>   MRDSYN1     RO      0       0      MRD ECC Syndrome Quad1                                   
                                            128b mode -  corresponds to DQ[127:64], Phase0
                                            64b mode  -  corresponds to DQ[127:64], Phase0, cycle1

<23:16>  MRDSYN2     RO      0       0      MRD ECC Syndrome Quad2                                   
                                            128b mode -  corresponds to DQ[63:0], Phase1
                                            64b mode  -  corresponds to DQ[63:0], Phase1, cycle0
 
<31:24>  MRDSYN3     RO      0       0      MRD ECC Syndrome Quad3                                   
                                            128b mode -  corresponds to DQ[127:64], Phase1
                                            64b mode  -  corresponds to DQ[127:64], Phase1, cycle1

<63:32>  NS          RAZ     NS      NS       RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *   
 *                  LMC_IFB_CNT_LO  = Performance Counters
 *   

     ==============================================================
     LMC(0)_IFB_CNT_LO Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>   IFBCNT_LO   RO      0       0      Performance Counter                                      
                                            Low 32-bits of 64-bit counter that increments every
                                            cycle there is something in the in-flight buffer.
<63:32>  NS          RAZ     NS      NS     RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *   
 *                  LMC_IFB_CNT_HI  = Performance Counters
 *   

     ==============================================================
     LMC(0)_IFB_CNT_HI Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>   IFBCNT_HI   RO      0       0      Performance Counter to measure Bus Utilization           
                                            Upper 32-bits of 64-bit counter that increments every
                                            cycle there is something in the in-flight buffer.
<63:32>  NS          RAZ     NS      NS     RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *   
 *                  LMC_OPS_CNT_LO  = Performance Counters
 *   

     ==============================================================
     LMC(0)_OPS_CNT_LO Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>   OPSCNT_LO   RO      0       0      Performance Counter                                      
                                            Low 32-bits of 64-bit counter
                                              DRAM bus utilization = LMC_OPS_CNT_*/LMC_DCLK_CNT_*
<63:32>  NS          RAZ     NS      NS     RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *   
 *                  LMC_OPS_CNT_HI  = Performance Counters
 *   

     ==============================================================
     LMC(0)_OPS_CNT_HI Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>   OPSCNT_HI   RO      0       0      Performance Counter to measure Bus Utilization           
                                            Upper 32-bits of 64-bit counter
                                              DRAM bus utilization = LMC_OPS_CNT_*/LMC_DCLK_CNT_*
<63:32>  NS          RAZ     NS      NS     RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *   
 *                  LMC_DCLK_CNT_LO  = Performance Counters
 *   

     ==============================================================
     LMC(0)_DCLK_CNT_LO Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>   DCLKCNT_LO  RO      0       0      Performance Counter that counts dclks                    
                                            Lower 32-bits of a 64-bit counter.
<63:32>  NS          RAZ     NS      NS     RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *   
 *                  LMC_DCLK_CNT_HI  = Performance Counters
 *   

     ==============================================================
     LMC(0)_DCLK_CNT_HI Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>   DCLKCNT_HI  RO      0       0      Performance Counter that counts dclks                    
                                            Upper 32-bits of a 64-bit counter.
<63:32>  NS          RAZ     NS      NS     RESERVED                                                 
----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_RODT_CTL = Obsolete LMC Read OnDieTermination control
 *  See Description on LMC_WODT_CTL - same applies for masks on READs. ODT_ENA also needs to be a 1
 *  for Octeon to wiggle the ODT pins on reads.

     ==============================================================
     LMC(0)_RODT_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32>  UNUSED      RAZ    NS      NS      Unused                                                    
<31:28>  RODT_HI3    R/W    0xf     0x0     Read ODT mask for position 3, data[127:64]                
<27:24>  RODT_HI2    R/W    0xf     0x0     Read ODT mask for position 2, data[127:64]                
<23:20>  RODT_HI1    R/W    0xf     0x0     Read ODT mask for position 1, data[127:64]                
<19:16>  RODT_HI0    R/W    0xf     0x0     Read ODT mask for position 0, data[127:64]                
<15:12>  RODT_LO3    R/W    0xf     0x0     Read ODT mask for position 3, data[ 63: 0]                
<11:8>   RODT_LO2    R/W    0xf     0x0     Read ODT mask for position 2, data[ 63: 0]                
<7:4>    RODT_LO1    R/W    0xf     0x0     Read ODT mask for position 1, data[ 63: 0]                
<3:0>    RODT_LO0    R/W    0xf     0x0     Read ODT mask for position 0, data[ 63: 0]                

Notes:
Due to a pass 1 bug, LMC*_DDR2_CTL[ODT_ENA] does not properly disable this ... LMC*_RODT_CTL
must also be cleared to zero to disable this obsolete read ODT feature.
When a given RANK in position N is selected, the RODT _HI and _LO masks for that position are used.
Mask[3:0] is used for RODT control of the RANKs in positions 3, 2, 1, and 0, respectively.
In  64b mode, DIMMs are assumed to be ordered in the following order:
 position 3: {unused        , DIMM1_RANK1_LO}
 position 2: {unused        , DIMM1_RANK0_LO}
 position 1: {unused        , DIMM0_RANK1_LO}
 position 0: {unused        , DIMM0_RANK0_LO}
In 128b mode, DIMMs are assumed to be ordered in the following order:
 position 3: {DIMM3_RANK1_HI, DIMM1_RANK1_LO}
 position 2: {DIMM3_RANK0_HI, DIMM1_RANK0_LO}
 position 1: {DIMM2_RANK1_HI, DIMM0_RANK1_LO}
 position 0: {DIMM2_RANK0_HI, DIMM0_RANK0_LO}
----------------------------------------------------------------------------------------------------
===
 *
 *                  LMC_DELAY_CFG = Open-loop delay line settings
 *

     ==============================================================
     LMC(0)_DELAY_CFG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:15>  UNUSED     RAZ    NS      NS        RESERVED                                                 
<14>     RESERVED14 R/W    0       0         RESERVED.  Must set to 0.                                
<13:10>  DQ         R/W    0       0         Setting for DQ  delay line                               
<9>      RESERVED9  R/W    0       0         RESERVED   Must set to 0.                                
<8:5>    CMD        R/W    0       0         Setting for CMD delay line                               
<4>      RESERVED4  R/W    0       0         RESERVED   Must set to 0.                                
<3:0>    CLK        R/W    0       0         Setting for CLK delay line                               

Notes:
The DQ bits add OUTGOING delay only to dq, dqs_{p,n}, cb, cbs_{p,n}, dqm.  Delay is approximately
50-80ps per setting depending on process/voltage.  There is no need to add incoming delay since by
default all strobe bits are delayed internally by 90 degrees (as was always the case in previous
passes and past chips. 

The CMD add delay to all command bits DDR_RAS, DDR_CAS, DDR_A<15:0>, DDR_BA<2:0>, DDR_n_CS<1:0>_L,
DDR_WE, DDR_CKE and DDR_ODT_<7:0>. Again, delay is 50-80ps per tap. 

The CLK bits add delay to all clock signals DDR_CK_<5:0>_P and DDR_CK_<5:0>_N. Again, delay is
50-80ps per tap. 


The usage scenario is the following: There is too much delay on command signals and setup on command
is not met. The user can then delay the clock until setup is met. 

At the same time though, dq/dqs should be delayed because there is also a DDR spec tying dqs with
clock. If clock is too much delayed with respect to dqs, writes will start to fail. 

This scheme should eliminate the board need of adding routing delay to clock signals to make high
frequencies work. 
----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_CTL1 = LMC Control1
 * This register is an assortment of various control fields needed by the memory controller
 *   

     ==============================================================
     LMC(0)_CTL1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:10> UNUSED10     RAZ     NS      NS     RESERVED                                                 
<9>     SIL_MODE     R/W    0x0      1      Read Silo mode.  0=envelope, 1=self-timed.               
<8>     DCC_ENABLE   R/W    0x0      0      Duty Cycle Corrector Enable.                             
                                            0=disable, 1=enable
                                            If the memory part does not support DCC, then this bit
                                            must be set to 0.
<7:0>   RESERVED0    R/W    0x0      NS     MBZ                                                      
----------------------------------------------------------------------------------------------------
===
 *
 *                  LMC_DUAL_MEMCFG = LMC Dual Memory Configuration Register
 *
 * This register controls certain parameters of Dual Memory Configuration 
 *

     ==============================================================
     LMC(0)_DUAL_MEMCFG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> NS           RAZ     NS     NS      RESERVED                                                 
<31:20> UNUSED20     R/W    0x0     NS      MBZ                                                      
<19>    BANK8        R/W    0x0     NS      See LMC_DDR2_CTL[BANK8]                                  
<18:16> ROW_LSB      R/W    0x3     NS      See LMC_MEM_CFG0[ROW_LSB]                                
<15:8>  UNUSED8      R/W    0x0     NS      MBZ                                                      
<7:0>   CS_MASK      R/W    0x0     NS      Chip select mask.                                        
                                            This mask corresponds to the 8 chip selects for a memory
                                            configuration.  Each reference address will assert one of
                                            the chip selects.  If that chip select has its
                                            corresponding CS_MASK bit set, then the "config1"
                                            parameters are used, otherwise the "config0" parameters
                                            are used.  See additional notes below.

Notes:  
 This register enables the design to have two, separate memory configurations, selected dynamically
 by the reference address.  Note however, that both configurations share LMC_CTL[MODE128b],
 LMC_CTL[XOR_BANK], LMC_MEM_CFG0[PBANK_LSB], LMC_MEM_CFG0[BUNK_ENA], and all timing parameters.
 In this description, "config0" refers to the normal memory configuration that is defined by the
 LMC_MEM_CFG0[ROW_LSB] andLMC_DDR2_CTL[BANK8] parameters and "config1" refers to the dual (or second)
 memory configuration that is defined by this register.  

 Memory config0 must be programmed for the part with the most strict timing requirements.  If a mix of
 4 bank and 8 bank parts is used, then config0 must be used for the 8 bank part (because the timing
 requirements of tFAW and tRP are more strict for 8 bank parts than they are for 4 bank parts).

 Enable mask to chip select mapping is shown below:
   CS_MASK[7] -> DDR_3_CS_<1>
   CS_MASK[6] -> DDR_3_CS_<0>

   CS_MASK[5] -> DDR_2_CS_<1>
   CS_MASK[4] -> DDR_2_CS_<0>

   CS_MASK[3] -> DDR_1_CS_<1>
   CS_MASK[2] -> DDR_1_CS_<0>

   CS_MASK[1] -> DDR_0_CS_<1>
   CS_MASK[0] -> DDR_0_CS_<0>

 the DIMMS are arranged in one of the following arrangements:
   LMC_CTL[MODE128b] == 1                                    LMC_CTL[MODE128b] == 0

   DIMM3_RANK1  | DIMM1_RANK1  highest address               DIMM3_RANK1  highest addres     
   DIMM3_RANK0  | DIMM1_RANK0                                DIMM3_RANK0              
                |                                                                     
   DIMM2_RANK1  | DIMM0_RANK1                                DIMM2_RANK1              
   DIMM2_RANK0  | DIMM0_RANK0  lowest address                DIMM2_RANK0              
                |                                                                     
   data[127:64] | data_[63:0]                                DIMM1_RANK1              
                                                             DIMM1_RANK0              
                                                                                      
                                                             DIMM0_RANK1              
                                                             DIMM0_RANK0  lowest address
                                                                                      
                                                             data_[63:0]                

  DIMM n uses the pair of chip selects DDR_n_CS_<1:0>.  When LMC_CTL[BUNK_ENA] == 1, each
  chip select in the pair asserts independently.  When LMC_CTL[BUNK_ENA] == 0, both chip
  selects in the pair assert together.

  Programming restrictions for CS_MASK:
    when LMC_CTL[BUNK_ENA] == 0, CS_MASK[2n + 1] = CS_MASK[2n], where 0 <= n <= 3
    when LMC_CTL[MODE128b] == 1, CS_MASK[ n + 4] = CS_MASK[ n], where 0 <= n <= 3

----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_RODT_COMP_CTL = LMC Compensation control
 *   

     ==============================================================
     LMC(0)_RODT_COMP_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:17>  UNUSED17   R/W     0x0     NS      MBZ                                                        
<16>     ENABLE     R/W     0x0     NS      0=not enabled, 1=enable                                    
<15:12>  UNUSED12   R/W     0x0     NS      MBZ                                                        
<11:8>   NCTL       R/W     0x0     NS      Compensation control bits                                  
<7:5>    UNUSED05   R/W     0x0     NS      MBZ                                                        
<4:0>    PCTL       R/W     0x0     NS      Compensation control bits                                  
----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_PLL_CTL = LMC pll control
 *   

     ==============================================================
     LMC(0)_PLL_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:28>  UNUSED28   R/W     0x0     NS      MBZ                                                        
<27>     DIV_RESET  R/W     0x1      0      Analog pll divider reset                                   
                                            De-assert at least 500*(CLKR+1) reference clock
                                            cycles following RESET_N de-assertion.
<26>     RESET_N    R/W     0x0      1      Analog pll reset                                           
                                            De-assert at least 5 usec after CLKF, CLKR,
                                            and EN* are set up.
<25:14>  CLKF       R/W      31     NS      Multiply reference by CLKF + 1                             
                                            CLKF must be <= 128
<13:8>   CLKR       R/W     0x0     NS      Divide reference by CLKR + 1                               
<7:6>    UNUSED06   R/W     0x0     NS      MBZ                                                        
<5:5>    EN16       R/W     0x0     NS      Divide output by 16                                        
<4:4>    EN12       R/W     0x0     NS      Divide output by 12                                        
<3:3>    EN8        R/W     0x1     NS      Divide output by 8                                         
<2:2>    EN6        R/W     0x0     NS      Divide output by 6                                         
<1:1>    EN4        R/W     0x0     NS      Divide output by 4                                         
<0:0>    EN2        R/W     0x0     NS      Divide output by 2                                         

Notes:

Exactly one of EN2, EN4, EN6, EN8, EN12, EN16 must be set.

The resultant DDR_CK frequency is the DDR2_REF_CLK
frequency multiplied by:

    (CLKF + 1) / ((CLKR + 1) * EN(2,4,6,8,12,16))

The PLL frequency, which is:

    (DDR2_REF_CLK freq) * ((CLKF + 1) / (CLKR + 1))

must reside between 1.2 and 2.5 GHz. A faster PLL frequency is desirable if there is a choice.

----------------------------------------------------------------------------------------------------
===
 *   
 *                    LMC_PLL_STATUS = LMC pll status
 *   

     ==============================================================
     LMC(0)_PLL_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>   UNUSED02   RAZ     X       NS      MBZ                                                        
<1:1>    RFSLIP     R/W1C   0x0     NS      Reference clock slip                                       
<0:0>    FBSLIP     R/W1C   0x0     NS      Feedback clock slip                                        

Notes:
----------------------------------------------------------------------------------------------------
===


 *
 * MIO_BOOT_REG_CFG = MIO Boot Region Config Register (1 per region * 8 regions)
 *
 * Contains region enable, region or, region ALE/SAM mode, region width, region size, and region base
 * address parameters.
 *
 * Region or bit will assert the given region's chip enable when there is an address hit in the previous
 * region (no function for region 0, since there is no previous region).  This is useful for CF cards
 * because it allows the use of 2 separate timing configurations for common memory and attribute memory.
 *
 * ALE (address latch enable) mode enables the multiplexed address/data bus mode.  The reset value for
 * region 0 is the value of boot_adr[19] on the de-assertion of reset.  This pin has an internal pulldown,
 * so place a pullup on boot_adr[19] to enable this mode out of reset for region 0.
 *
 * SAM (strobe AND mode) internally combines the output enable and write enable strobes into a single
 * strobe that is then driven onto both boot_oe_n and boot_we_n.  This is useful for parts that use a
 * single strobe along with a read/write bit (the read/write bit can be driven from an address pin).
 *
 * Bus width can be specified as either 8 bits (WIDTH low) or 16 bits (WIDTH high).  The reset value for
 * region 0 is the value of boot_adr[18] on the de-assertion of reset.  This pin has an internal pulldown,
 * so place a pullup on boot_adr[18] if a 16 bit bus is desired out of reset for region 0.
 *
 * Region size is in 64k blocks and in -1 notation (i.e. 0 = 1 64k block, 1 = 2 64k blocks, etc.).
 *
 * Base address specifies address bits [31:16] of the first 64k block of the region.
 *

     ==============================================================
     MIO_BOOT_REG_CFG0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:37> RSVD     RAZ      NS          NS        Reserved                                           |   
<36>    SAM      R/W      0x0         NS        Region 0 SAM                                       |   
<35:34> WE_EXT   R/W      0x0         NS        Region 0 write enable count extension              |   
<33:32> OE_EXT   R/W      0x0         NS        Region 0 output enable count extension             |   
<31>    EN       R/W      0x1         0x1       Region 0 enable                                    |   
<30>    OR       R/W      0x0         0x0       No function for region 0                           |   
<29>    ALE      R/W      0x0         NS        Region 0 ALE mode                                  |   
<28>    WIDTH    R/W      0x0         NS        Region 0 bus width                                 |   
<27:16> SIZE     R/W      0xfff       NS        Region 0 size                                      |   
<15:0>  BASE     R/W      0x1fc0      0x1fc0    Region 0 base address                              |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_BOOT_REG_CFG(0..7) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:37> RSVD     RAZ      NS          NS        Reserved                                           |   
<36>    SAM      R/W      0x0         NS        Region @ SAM mode                                  |   
<35:34> WE_EXT   R/W      0x0         NS        Region @ write enable count extension              |   
<33:32> OE_EXT   R/W      0x0         NS        Region @ output enable count extension             |   
<31>    EN       R/W      0x0         NS        Region @ enable                                    |   
<30>    OR       R/W      0x0         NS        Region @ or bit                                    |   
<29>    ALE      R/W      0x0         NS        Region @ ALE mode                                  |   
<28>    WIDTH    R/W      0x0         NS        Region @ bus width                                 |   
<27:16> SIZE     R/W      0x0         NS        Region @ size                                      |   
<15:0>  BASE     R/W      0x0         NS        Region @ base address                              |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_BOOT_REG_TIM = MIO Boot Region Timing Register (1 per region * 8 regions)
 *
 * Contains page mode, wait mode, page size, and region timing parameters.
 *
 * Page size is encoded as follows: 0 = 8 bytes, 1 = 2 bytes, 2 = 4 bytes, 3 = 8 bytes.
 *
 * Note: OE, WE, PAGE, and ALE must be non-zero to ensure legal transitions on the corresponding boot bus outputs.
 *
 * Note: WAIT must be non-zero if WAITM is set.
 *

     ==============================================================
     MIO_BOOT_REG_TIM0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63>    PAGEM    R/W      0x0         NS        Region 0 page mode                                 |   
<62>    WAITM    R/W      0x0         NS        Region 0 wait mode                                 |   
<61:60> PAGES    R/W      0x0         NS        Region 0 page size                                 |   
<59:54> ALE      R/W      4           NS        Region 0 ALE count                                 |   
<53:48> PAGE     R/W      63          NS        Region 0 page count                                |   
<47:42> WAIT     R/W      63          NS        Region 0 wait count                                |   
<41:36> PAUSE    R/W      17          NS        Region 0 pause count                               |   
<35:30> WR_HLD   R/W      63          NS        Region 0 write hold count                          |   
<29:24> RD_HLD   R/W      5           NS        Region 0 read hold count                           |   
<23:18> WE       R/W      63          NS        Region 0 write enable count                        |   
<17:12> OE       R/W      63          NS        Region 0 output enable count                       |   
<11:6>  CE       R/W      5           NS        Region 0 chip enable count                         |   
<5:0>   ADR      R/W      8           NS        Region 0 address count                             |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_BOOT_REG_TIM(0..7) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63>    PAGEM    R/W      0x0         NS        Region @ page mode                                 |   
<62>    WAITM    R/W      0x0         NS        Region @ wait mode                                 |   
<61:60> PAGES    R/W      0x0         NS        Region @ page size                                 |   
<59:54> ALE      R/W      63          NS        Region @ ALE count                                 |   
<53:48> PAGE     R/W      63          NS        Region @ page count                                |   
<47:42> WAIT     R/W      63          NS        Region @ wait count                                |   
<41:36> PAUSE    R/W      63          NS        Region @ pause count                               |   
<35:30> WR_HLD   R/W      63          NS        Region @ write hold count                          |   
<29:24> RD_HLD   R/W      63          NS        Region @ read hold count                           |   
<23:18> WE       R/W      63          NS        Region @ write enable count                        |   
<17:12> OE       R/W      63          NS        Region @ output enable count                       |   
<11:6>  CE       R/W      63          NS        Region @ chip enable count                         |   
<5:0>   ADR      R/W      63          NS        Region @ address count                             |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_BOOT_LOC_CFG = MIO Boot Local Region Config Register (1 per region * 2 regions)
 *
 * Contains local region enable and local region base address parameters.  Each local region is 128
 * bytes organized as 16 entries x 8 bytes.
 *
 * Base address specifies address bits [31:7] of the region.
 *

     ==============================================================
     MIO_BOOT_LOC_CFG(0..1) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD2    RAZ      NS          NS        Reserved                                           |   
<31>    EN       R/W      0x0         NS        Local region @ enable                              |   
<30:28> RSVD1    RAZ      NS          NS        Reserved                                           |   
<27:3>  BASE     R/W      0x0         NS        Local region @ base address                        |   
<2:0>   RSVD0    RAZ      NS          NS        Reserved                                           |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_BOOT_LOC_ADR = MIO Boot Local Memory Address Register
 *
 * Specifies the address for reading or writing the local memory.  This address will post-increment
 * following an access to the MIO Boot Local Memory Data Register (MIO_BOOT_LOC_DAT).
 *
 * Local memory region 0 exists from addresses 0x00 - 0x78.
 * Local memory region 1 exists from addresses 0x80 - 0xf8.
 *

     ==============================================================
     MIO_BOOT_LOC_ADR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD1    RAZ      NS          NS        Reserved                                           |   
<7:3>   ADR      R/W      0x0         NS        Local memory address                               |   
<2:0>   RSVD0    RAZ      NS          NS        Reserved                                           |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_BOOT_LOC_DAT = MIO Boot Local Memory Data Register
 *
 * This is a pseudo-register that will read/write the local memory at the address specified by the MIO
 * Boot Local Address Register (MIO_BOOT_LOC_ADR) when accessed.
 *

     ==============================================================
     MIO_BOOT_LOC_DAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  DATA     R/W      NS          NS        Local memory data                                  |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_BOOT_ERR = MIO Boot Error Register
 *
 * Contains the address decode error and wait mode error bits.  Address decode error is set when a
 * boot bus access does not hit in any of the 8 remote regions or 2 local regions.  Wait mode error is
 * set when wait mode is enabled and the external wait signal is not de-asserted after 16k eclk cycles.
 *

     ==============================================================
     MIO_BOOT_ERR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  RSVD     RAZ      NS          NS        Reserved                                           |   
<1>     WAIT_ERR R/W1C    0x0         0x0       Wait mode error                                    |   
<0>     ADR_ERR  R/W1C    0x0         0x0       Address decode error                               |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_BOOT_INT = MIO Boot Interrupt Register
 *
 * Contains the interrupt enable bits for address decode error and wait mode error.
 *

     ==============================================================
     MIO_BOOT_INT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  RSVD     RAZ      NS          NS        Reserved                                           |   
<1>     WAIT_INT R/W      0x0         NS        Wait mode error interrupt enable                   |   
<0>     ADR_INT  R/W      0x0         NS        Address decode error interrupt enable              |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_BOOT_THR = MIO Boot Threshold Register
 *
 * Contains MIO Boot threshold values:
 *
 * FIF_THR = Assert ncb__busy when the Boot NCB input FIFO reaches this level (not typically for
 *           customer use).
 *

     ==============================================================
     MIO_BOOT_THR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:14> RSVD1    RAZ      NS          NS        Reserved                                           |   
<13:8>  FIF_CNT  RO       0x0         NS        Current NCB FIFO count                             |   
<7:6>   RSVD0    RAZ      NS          NS        Reserved                                           |   
<5:0>   FIF_THR  R/W      26          26        NCB busy threshold                                 |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_BOOT_BIST_STAT = MIO Boot BIST Status Register
 *
 * Contains the BIST status for the MIO boot memories.  '0' = pass, '1' = fail.
 *

     ==============================================================
     MIO_BOOT_BIST_STAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  RSVD     RAZ      NS          NS        Reserved                                           |   
<2>     NCBO     RO       0x0         0x0       NCB output FIFO BIST status                        |   
<1>     LOC      RO       0x0         0x0       Local memory BIST status                           |   
<0>     NCBI     RO       0x0         0x0       NCB input FIFO BIST status                         |   
----------------------------------------------------------------------------------------------------
===



 *
 * MIO_UART@_RBR = MIO UART@ Receive Buffer Register
 *
 * The Receive Buffer Register (RBR) is a read-only register that contains the data byte received on the
 * serial input port (sin). The data in this register is valid only if the Data Ready (DR) bit in the
 * Line status Register (LSR) is set. When the FIFOs are programmed OFF, the data in the RBR must be
 * read before the next data arrives, otherwise it is overwritten, resulting in an overrun error. When
 * the FIFOs are programmed ON, this register accesses the head of the receive FIFO. If the receive FIFO
 * is full (64 characters) and this register is not read before the next data character arrives, then the
 * data already in the FIFO is preserved, but any incoming data is lost. An overrun error also occurs.
 *
 * Note: The Divisor Latch Address Bit (DLAB) of the Line Control Register (LCR) must be clear to access
 * this register.
 *
 * Note: The address below is an alias to simplify these CSR descriptions. It should be known that the
 * RBR, THR, and DLL registers are the same.
 *

     ==============================================================
     MIO_UART(0..1)_RBR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD     RAZ      NS          NS        Reserved                                           |   
<7:0>   RBR      RO       0x0         NS        Receive Buffer Register                            |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_THR = MIO UART@ Transmit Holding Register
 *
 * Transmit Holding Register (THR) is a write-only register that contains data to be transmitted on the
 * serial output port (sout). Data can be written to the THR any time that the THR Empty (THRE) bit of
 * the Line Status Register (LSR) is set.
 *
 * If FIFOs are not enabled and THRE is set, writing a single character to the THR clears the THRE. Any
 * additional writes to the THR before the THRE is set again causes the THR data to be overwritten.
 *
 * If FIFOs are enabled and THRE is set (and Programmable THRE mode disabled), 64 characters of data may
 * be written to the THR before the FIFO is full. Any attempt to write data when the FIFO is full results
 * in the write data being lost.
 *
 * Note: The Divisor Latch Address Bit (DLAB) of the Line Control Register (LCR) must be clear to access
 * this register.
 *
 * Note: The address below is an alias to simplify these CSR descriptions. It should be known that the
 * RBR, THR, and DLL registers are the same.
 *

     ==============================================================
     MIO_UART(0..1)_THR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD     WO       NS          NS        Reserved                                           |   
<7:0>   THR      WO       0x0         NS        Transmit Holding Register                          |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_DLL = MIO UART@ Divisor Latch Low Register
 *
 * The DLH (Divisor Latch High) register in conjunction with DLL (Divisor Latch Low) register form a
 * 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. It is
 * accessed by first setting the DLAB bit (bit 7) in the Line Control Register (LCR). The output baud
 * rate is equal to eclk frequency divided by sixteen times the value of the baud rate divisor, as
 * follows: baud rate = eclk / (16 * divisor).
 *
 * Note that the BUSY bit (bit 0) of the UART Status Register (USR) must be clear before writing this
 * register. BUSY bit is always clear in PASS3.
 *
 * Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled
 * and no serial communications will occur. Also, once the DLL or DLH is set, at least 8 clock cycles
 * of eclk should be allowed to pass before transmitting or receiving data.
 *
 * Note: The address below is an alias to simplify these CSR descriptions. It should be known that the
 * RBR, THR, and DLL registers are the same.
 *

     ==============================================================
     MIO_UART(0..1)_DLL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD     RAZ      NS          NS        Reserved                                           |   
<7:0>   DLL      R/W      0x0         NS        Divisor Latch Low Register                         |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_IER = MIO UART@ Interrupt Enable Register
 *
 * Interrupt Enable Register (IER) is a read/write register that contains four bits that enable
 * the generation of interrupts. These four bits are the Enable Received Data Available Interrupt
 * (ERBFI), the Enable Transmitter Holding Register Empty Interrupt (ETBEI), the Enable Receiver Line
 * Status Interrupt (ELSI), and the Enable Modem Status Interrupt (EDSSI).
 *
 * The IER also contains an enable bit (PTIME) for the Programmable THRE Interrupt mode.
 *
 * Note: The Divisor Latch Address Bit (DLAB) of the Line Control Register (LCR) must be clear to access
 * this register.
 *
 * Note: The address below is an alias to simplify these CSR descriptions. It should be known that the
 * IER and DLH registers are the same.
 *

     ==============================================================
     MIO_UART(0..1)_IER Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD1    RAZ      NS          NS        Reserved                                           |   
<7>     PTIME    R/W      0x0         NS        Programmable THRE Interrupt mode enable            |   
<6:4>   RSVD0    RAZ      0x0         NS        Reserved                                           |   
<3>     EDSSI    R/W      0x0         NS        Enable Modem Status Interrupt                      |   
<2>     ELSI     R/W      0x0         NS        Enable Receiver Line Status Interrupt              |   
<1>     ETBEI    R/W      0x0         NS        Enable Transmitter Holding Register Empty Interrupt|   
<0>     ERBFI    R/W      0x0         NS        Enable Received Data Available Interrupt           |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_DLH = MIO UART@ Divisor Latch High Register
 *
 * The DLH (Divisor Latch High) register in conjunction with DLL (Divisor Latch Low) register form a
 * 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART. It is
 * accessed by first setting the DLAB bit (bit 7) in the Line Control Register (LCR). The output baud
 * rate is equal to eclk frequency divided by sixteen times the value of the baud rate divisor, as
 * follows: baud rate = eclk / (16 * divisor).
 *
 * Note that the BUSY bit (bit 0) of the UART Status Register (USR) must be clear before writing this
 * register. BUSY bit is always clear in PASS3.
 *
 * Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled
 * and no serial communications will occur. Also, once the DLL or DLH is set, at least 8 clock cycles
 * of eclk should be allowed to pass before transmitting or receiving data.
 *
 * Note: The address below is an alias to simplify these CSR descriptions. It should be known that the
 * IER and DLH registers are the same.
 *

     ==============================================================
     MIO_UART(0..1)_DLH Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD     RAZ      NS          NS        Reserved                                           |   
<7:0>   DLH      R/W      0x0         NS        Divisor Latch High Register                        |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_IIR = MIO UART@ Interrupt Identity Register
 *
 * The Interrupt Identity Register (IIR) is a read-only register that identifies the source of an
 * interrupt. The upper two bits of the register are FIFO-enabled bits. These bits are '00' if the FIFOs
 * are disabled, and '11' if they are enabled. The lower four bits identify the highest priority pending
 * interrupt. The following table defines interrupt source decoding, interrupt priority, and interrupt
 * reset control:
 *
 * Interrupt   Priority   Interrupt         Interrupt                                       Interrupt
 * ID          Level      Type              Source                                          Reset By
 * ---------------------------------------------------------------------------------------------------------------------------------
 * 0001        -          None              None                                            -
 *
 * 0110        Highest    Receiver Line     Overrun, parity, or framing errors or break     Reading the Line Status Register
 *                        Status            interrupt
 *
 * 0100        Second     Received Data     Receiver data available (FIFOs disabled) or     Reading the Receiver Buffer Register
 *                        Available         RX FIFO trigger level reached (FIFOs            (FIFOs disabled) or the FIFO drops below
 *                                          enabled)                                        the trigger level (FIFOs enabled)
 *
 * 1100        Second     Character         No characters in or out of the RX FIFO          Reading the Receiver Buffer Register
 *                        Timeout           during the last 4 character times and there
 *                        Indication        is at least 1 character in it during this
 *                                          time
 *
 * 0010        Third      Transmitter       Transmitter Holding Register Empty              Reading the Interrupt Identity Register
 *                        Holding           (Programmable THRE Mode disabled) or TX         (if source of interrupt) or writing into
 *                        Register          FIFO at or below threshold (Programmable        THR (FIFOs or THRE Mode disabled) or TX
 *                        Empty             THRE Mode enabled)                              FIFO above threshold (FIFOs and THRE
 *                                                                                          Mode enabled)
 *
 * 0000        Fourth     Modem Status      Clear To Send (CTS) or Data Set Ready (DSR)     Reading the Modem Status Register
 *                        Changed           or Ring Indicator (RI) or Data Carrier
 *                                          Detect (DCD) changed (note: if auto flow
 *                                          control mode is enabled, a change in CTS
 *                                          will not cause an interrupt)
 *
 * 0111        Fifth      Busy Detect       Software has tried to write to the Line         Reading the UART Status Register
 *                        Indication        Control Register while the BUSY bit of the
 *                                          UART Status Register was set
 *
 * Note: The Busy Detect Indication interrupt has been removed from PASS3 and will never assert.
 *
 * Note: The address below is an alias to simplify these CSR descriptions. It should be known that the
 * IIR and FCR registers are the same.
 *

     ==============================================================
     MIO_UART(0..1)_IIR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD1    RAZ      NS          NS        Reserved                                           |   
<7:6>   FEN      RO       0x0         NS        FIFO-enabled bits                                  |   
<5:4>   RSVD0    RAZ      0x0         NS        Reserved                                           |   
<3:0>   IID      RO       0x1         NS        Interrupt ID                                       |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_FCR = MIO UART@ FIFO Control Register
 *
 * The FIFO Control Register (FCR) is a write-only register that controls the read and write data FIFO
 * operation. When FIFOs and Programmable THRE Interrupt mode are enabled, this register also controls
 * the THRE Interrupt empty threshold level.
 *
 * Setting bit 0 of the FCR enables the transmit and receive FIFOs. Whenever the value of this bit is
 * changed both the TX and RX FIFOs will be reset.
 *
 * Writing a '1' to bit 1 of the FCR resets and flushes data in the receive FIFO. Note that this bit is
 * self-clearing and it is not necessary to clear this bit.
 *
 * Writing a '1' to bit 2 of the FCR resets and flushes data in the transmit FIFO. Note that this bit is
 * self-clearing and it is not necessary to clear this bit.
 *
 * If the FIFOs and Programmable THRE Interrupt mode are enabled, bits 4 and 5 control the empty
 * threshold level at which THRE Interrupts are generated when the mode is active.  See the following
 * table for encodings:
 *
 * TX Trigger
 * ----------
 * 00 = empty FIFO
 * 01 = 2 chars in FIFO
 * 10 = FIFO 1/4 full
 * 11 = FIFO 1/2 full
 *
 * If the FIFO mode is enabled (bit 0 of the FCR is set to '1') bits 6 and 7 are active. Bit 6 and bit 7
 * set the trigger level in the receiver FIFO for the Enable Received Data Available Interrupt (ERBFI).
 * In auto flow control mode the trigger is used to determine when the rts_n signal will be deasserted.
 * See the following table for encodings:
 *
 * RX Trigger
 * ----------
 * 00 = 1 char in FIFO
 * 01 = FIFO 1/4 full
 * 10 = FIFO 1/2 full
 * 11 = FIFO 2 chars less than full
 *
 * Note: The address below is an alias to simplify these CSR descriptions. It should be known that the
 * IIR and FCR registers are the same.
 *

     ==============================================================
     MIO_UART(0..1)_FCR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD1    WO       NS          NS        Reserved                                           |   
<7:6>   RXTRIG   WO       0x0         NS        RX Trigger                                         |   
<5:4>   TXTRIG   WO       0x0         NS        TX Trigger                                         |   
<3>     RSVD0    WO       0x0         NS        Reserved                                           |   
<2>     TXFR     WO       0x0         NS        TX FIFO reset                                      |   
<1>     RXFR     WO       0x0         NS        RX FIFO reset                                      |   
<0>     EN       WO       0x0         NS        FIFO enable                                        |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_LCR = MIO UART@ Line Control Register
 *
 * The Line Control Register (LCR) controls the format of the data that is transmitted and received by
 * the UART.
 *
 * LCR bits 0 and 1 are the Character Length Select field. This field is used to select the number of
 * data bits per character that are transmitted and received. See the following table for encodings:
 *
 * CLS
 * ---
 * 00 = 5 bits (bits 0-4 sent)
 * 01 = 6 bits (bits 0-5 sent)
 * 10 = 7 bits (bits 0-6 sent)
 * 11 = 8 bits (all bits sent)
 *
 * LCR bit 2 controls the number of stop bits transmitted. If bit 2 is a '0', one stop bit is transmitted
 * in the serial data. If bit 2 is a '1' and the data bits are set to '00', one and a half stop bits are
 * generated. Otherwise, two stop bits are generated and transmitted in the serial data out. Note that
 * regardless of the number of stop bits selected the receiver will only check the first stop bit.
 *
 * LCR bit 3 is the Parity Enable bit. This bit is used to enable and disable parity generation and
 * detection in transmitted and received serial character respectively.
 *
 * LCR bit 4 is the Even Parity Select bit. If parity is enabled, bit 4 selects between even and odd
 * parity. If bit 4 is a '1', an even number of ones is transmitted or checked. If bit 4 is a '0', an odd
 * number of ones is transmitted or checked.
 *
 * LCR bit 6 is the Break Control bit. Setting the Break bit sends a break signal by holding the sout
 * line low (when not in Loopback mode, as determined by Modem Control Register bit 4). When in Loopback
 * mode, the break condition is internally looped back to the receiver.
 *
 * LCR bit 7 is the Divisor Latch Address bit. Setting this bit enables reading and writing of the
 * Divisor Latch register (DLL and DLH) to set the baud rate of the UART. This bit must be cleared after
 * initial baud rate setup in order to access other registers.
 *
 * Note: The LCR is writeable only when the UART is not busy (when the BUSY bit (bit 0) of the UART
 * Status Register (USR) is clear). The LCR is always readable. In PASS3, the LCR is always writable
 * because the BUSY bit is always clear.
 *

     ==============================================================
     MIO_UART(0..1)_LCR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD1    RAZ      NS          NS        Reserved                                           |   
<7>     DLAB     R/W      0x0         NS        Divisor Latch Address bit                          |   
<6>     BREAK    R/W      0x0         NS        Break Control bit                                  |   
<5>     RSVD0    RAZ      0x0         NS        Reserved                                           |   
<4>     EPS      R/W      0x0         NS        Even Parity Select bit                             |   
<3>     PEN      R/W      0x0         NS        Parity Enable bit                                  |   
<2>     STOP     R/W      0x0         NS        Stop Control bit                                   |   
<1:0>   CLS      R/W      0x0         NS        Character Length Select                            |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_MCR = MIO UART@ Modem Control Register
 *
 * The lower four bits of the Modem Control Register (MCR) directly manipulate the outputs of the UART.
 * The DTR (bit 0), RTS (bit 1), OUT1 (bit 2), and OUT2 (bit 3) bits are inverted and then drive the
 * corresponding UART outputs, dtr_n, rts_n, out1_n, and out2_n.  In loopback mode, these outputs are
 * driven inactive high while the values in these locations are internally looped back to the inputs.
 *
 * Note: When Auto RTS is enabled, the rts_n output is controlled in the same way, but is also gated
 * with the receiver FIFO threshold trigger (rts_n is inactive high when above the threshold). The
 * rts_n output will be de-asserted whenever RTS (bit 1) is set low.
 *
 * Note: The dtr_n, out1_n, and out2_n outputs are not present on the pins of the chip, but the DTR,
 * OUT1, and OUT2 bits still function in Loopback mode.
 *
 * MCR bit 4 is the Loopback bit. When set, data on the sout line is held high, while serial data output
 * is looped back to the sin line, internally. In this mode all the interrupts are fully functional. This
 * feature is used for diagnostic purposes. Also, in loopback mode, the modem control inputs (dsr_n,
 * cts_n, ri_n, dcd_n) are disconnected and the four modem control outputs (dtr_n, rts_n, out1_n, out1_n)
 * are looped back to the inputs, internally.
 *
 * MCR bit 5 is the Auto Flow Control Enable (AFCE) bit. When FIFOs are enabled and this bit is set,
 * 16750-compatible Auto RTS and Auto CTS serial data flow control features are enabled.
 *
 * Auto RTS becomes active when the following occurs:
 * 1. MCR bit 1 is set
 * 2. FIFOs are enabled by setting FIFO Control Register (FCR) bit 0
 * 3. MCR bit 5 is set (must be set after FCR bit 0)
 *
 * When active, the rts_n output is forced inactive-high when the receiver FIFO level reaches the
 * threshold set by FCR[7:6]. When rts_n is connected to the cts_n input of another UART device, the
 * other UART stops sending serial data until the receiver FIFO has available space.
 *
 * The selectable receiver FIFO threshold values are: 1, 1/4, 1/2, and 2 less than full. Since one
 * additional character may be transmitted to the UART after rts_n has become inactive (due to data
 * already having entered the transmitter block in the other UART), setting the threshold to 2 less
 * than full allows maximum use of the FIFO with a safety zone of one character.
 * 
 * Once the receiver FIFO becomes completely empty by reading the Receiver Buffer Register (RBR), rts_n
 * again becomes active-low, signalling the other UART to continue sending data. It is important to note
 * that, even if everything else is set to Enabled and the correct MCR bits are set, if the FIFOs are
 * disabled through FCR[0], Auto Flow Control is also disabled. When Auto RTS is disabled or inactive,
 * rts_n is controlled solely by MCR[1].
 *
 * Auto CTS becomes active when the following occurs:
 * 1. FIFOs are enabled by setting FIFO Control Register (FCR) bit 0
 * 2. MCR bit 5 is set (must be set after FCR bit 0)
 *
 * When active, the UART transmitter is disabled whenever the cts_n input becomes inactive-high. This
 * prevents overflowing the FIFO of the receiving UART.
 *
 * Note that, if the cts_n input is not inactivated before the middle of the last stop bit, another
 * character is transmitted before the transmitter is disabled. While the transmitter is disabled, the
 * transmitter FIFO can still be written to, and even overflowed. Therefore, when using this mode, either
 * the true FIFO depth (64 characters) must be known to software, or the Programmable THRE Interrupt mode
 * must be enabled to access the FIFO full status through the Line Status Register. When using the FIFO
 * full status, software can poll this before each write to the Transmitter FIFO.
 *
 * Note: FIFO full status is also available in the UART Status Register (USR) or the actual level of the
 * FIFO may be read through the Transmit FIFO Level (TFL) register.
 *
 * When the cts_n input becomes active-low again, transmission resumes. It is important to note that,
 * even if everything else is set to Enabled, Auto Flow Control is also disabled if the FIFOs are
 * disabled through FCR[0]. When Auto CTS is disabled or inactive, the transmitter is unaffected by
 * cts_n.
 *

     ==============================================================
     MIO_UART(0..1)_MCR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD1    RAZ      NS          NS        Reserved                                           |   
<7:6>   RSVD0    RAZ      0x0         NS        Reserved                                           |   
<5>     AFCE     R/W      0x0         NS        Auto Flow Control Enable bit                       |   
<4>     LOOP     R/W      0x0         NS        Loopback bit                                       |   
<3>     OUT2     R/W      0x0         NS        OUT2 output bit                                    |   
<2>     OUT1     R/W      0x0         NS        OUT1 output bit                                    |   
<1>     RTS      R/W      0x0         NS        Request To Send output bit                         |   
<0>     DTR      R/W      0x0         NS        Data Terminal Ready output bit                     |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_LSR = MIO UART@ Line Status Register
 *
 * The Line Status Register (LSR) contains status of the receiver and transmitter data transfers. This
 * status can be read by the user at anytime.
 *
 * LSR bit 0 is the Data Ready (DR) bit. When set, this bit indicates the receiver contains at least one
 * character in the RBR or the receiver FIFO. This bit is cleared when the RBR is read in the non-FIFO
 * mode, or when the receiver FIFO is empty, in FIFO mode.
 *
 * LSR bit 1 is the Overrun Error (OE) bit. When set, this bit indicates an overrun error has occurred
 * because a new data character was received before the previous data was read. In the non-FIFO mode, the
 * OE bit is set when a new character arrives in the receiver before the previous character was read from
 * the RBR. When this happens, the data in the RBR is overwritten. In the FIFO mode, an overrun error
 * occurs when the FIFO is full and a new character arrives at the receiver. The data in the FIFO is
 * retained and the data in the receive shift register is lost.
 *
 * LSR bit 2 is the Parity Error (PE) bit. This bit is set whenever there is a parity error in the
 * receiver if the Parity Enable (PEN) bit in the LCR is set. In the FIFO mode, since the parity error is
 * associated with a character received, it is revealed when the character with the parity error arrives
 * at the top of the FIFO. It should be noted that the Parity Error (PE) bit will be set if a break
 * interrupt has occurred, as indicated by the Break Interrupt (BI) bit.
 *
 * LSR bit 3 is the Framing Error (FE) bit. This bit is set whenever there is a framing error in the
 * receiver. A framing error occurs when the receiver does not detect a valid STOP bit in the received
 * data. In the FIFO mode, since the framing error is associated with a character received, it is
 * revealed when the character with the framing error is at the top of the FIFO. When a framing error
 * occurs the UART will try resynchronize. It does this by assuming that the error was due to the start
 * bit of the next character and then continues receiving the other bits (i.e. data and/or parity and
 * stop). It should be noted that the Framing Error (FE) bit will be set if a break interrupt has
 * occurred, as indicated by the Break Interrupt (BI) bit.
 *
 * Note: The OE, PE, and FE bits are reset when a read of the LSR is performed.
 *
 * LSR bit 4 is the Break Interrupt (BI) bit. This bit is set whenever the serial input (sin) is held in
 * a 0 state for longer than the sum of start time + data bits + parity + stop bits. A break condition on
 * sin causes one and only one character, consisting of all zeros, to be received by the UART. In the
 * FIFO mode, the character associated with the break condition is carried through the FIFO and is
 * revealed when the character is at the top of the FIFO. Reading the LSR clears the BI bit. In the non-
 * FIFO mode, the BI indication occurs immediately and persists until the LSR is read.
 *
 * LSR bit 5 is the Transmitter Holding Register Empty (THRE) bit. When Programmable THRE Interrupt mode
 * is disabled, this bit indicates that the UART can accept a new character for transmission. This bit is
 * set whenever data is transferred from the THR (or TX FIFO) to the transmitter shift register and no
 * new data has been written to the THR (or TX FIFO). This also causes a THRE Interrupt to occur, if the
 * THRE Interrupt is enabled. When FIFOs and Programmable THRE Interrupt mode are enabled, LSR bit 5
 * functionality is switched to indicate the transmitter FIFO is full, and no longer controls THRE
 * Interrupts, which are then controlled by the FCR[5:4] threshold setting.
 *
 * LSR bit 6 is the Transmitter Empty (TEMT) bit. In the FIFO mode, this bit is set whenever the
 * Transmitter Shift Register and the FIFO are both empty. In the non-FIFO mode, this bit is set whenever
 * the Transmitter Holding Register and the Transmitter Shift Register are both empty. This bit is
 * typically used to make sure it is safe to change control registers. Changing control registers while
 * the transmitter is busy can result in corrupt data being transmitted.
 *
 * LSR bit 7 is the Error in Receiver FIFO (FERR) bit. This bit is active only when FIFOs are enabled. It
 * is set when there is at least one parity error, framing error, or break indication in the FIFO. This
 * bit is cleared when the LSR is read and the character with the error is at the top of the receiver
 * FIFO and there are no subsequent errors in the FIFO.
 *

     ==============================================================
     MIO_UART(0..1)_LSR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD     RAZ      NS          NS        Reserved                                           |   
<7>     FERR     RC       0x0         NS        Error in Receiver FIFO bit                         |   
<6>     TEMT     RO       0x1         NS        Transmitter Empty bit                              |   
<5>     THRE     RO       0x1         NS        Transmitter Holding Register Empty bit             |   
<4>     BI       RC       0x0         NS        Break Interrupt bit                                |   
<3>     FE       RC       0x0         NS        Framing Error bit                                  |   
<2>     PE       RC       0x0         NS        Parity Error bit                                   |   
<1>     OE       RC       0x0         NS        Overrun Error bit                                  |   
<0>     DR       RO       0x0         NS        Data Ready bit                                     |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_MSR = MIO UART@ Modem Status Register
 *
 * The Modem Status Register (MSR) contains the current status of the modem control input lines and if
 * they changed.
 *
 * DCTS (bit 0), DDSR (bit 1), and DDCD (bit 3) bits record whether the modem control lines (cts_n,
 * dsr_n, and dcd_n) have changed since the last time the user read the MSR. TERI (bit 2) indicates ri_n
 * has changed from an active-low, to an inactive-high state since the last time the MSR was read. In
 * Loopback mode, DCTS reflects changes on MCR bit 1 (RTS), DDSR reflects changes on MCR bit 0 (DTR), and
 * DDCD reflects changes on MCR bit 3 (Out2), while TERI reflects when MCR bit 2 (Out1) has changed state
 * from a high to a low.
 *
 * Note: if the DCTS bit is not set and the cts_n signal is asserted (low) and a reset occurs (software
 * or otherwise), then the DCTS bit will get set when the reset is removed if the cts_n signal remains
 * asserted.
 *
 * The CTS, DSR, RI, and DCD Modem Status bits contain information on the current state of the modem
 * control lines. CTS (bit 4) is the compliment of cts_n, DSR (bit 5) is the compliment of dsr_n, RI
 * (bit 6) is the compliment of ri_n, and DCD (bit 7) is the compliment of dcd_n. In Loopback mode, CTS
 * is the same as MCR bit 1 (RTS), DSR is the same as MCR bit 0 (DTR), RI is the same as MCR bit 2
 * (Out1), and DCD is the same as MCR bit 3 (Out2).
 *
 * Note: The dsr_n, ri_n, and dcd_n inputs are internally tied to power and not present on the pins of
 * chip. Thus the DSR, RI, and DCD bits will be '0' when not in Loopback mode.
 *

     ==============================================================
     MIO_UART(0..1)_MSR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD     RAZ      NS          NS        Reserved                                           |   
<7>     DCD      RO       0x0         NS        Data Carrier Detect input bit                      |   
<6>     RI       RO       0x0         NS        Ring Indicator input bit                           |   
<5>     DSR      RO       0x0         NS        Data Set Ready input bit                           |   
<4>     CTS      RO       NS          NS        Clear To Send input bit                            |   
<3>     DDCD     RC       0x0         NS        Delta Data Carrier Detect bit                      |   
<2>     TERI     RC       0x0         NS        Trailing Edge of Ring Indicator bit                |   
<1>     DDSR     RC       0x0         NS        Delta Data Set Ready bit                           |   
<0>     DCTS     RC       0x0         NS        Delta Clear To Send bit                            |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_SCR = MIO UART@ Scratchpad Register
 *
 * The Scratchpad Register (SCR) is an 8-bit read/write register for programmers to use as a temporary
 * storage space.
 *

     ==============================================================
     MIO_UART(0..1)_SCR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD     RAZ      NS          NS        Reserved                                           |   
<7:0>   SCR      R/W      0x0         NS        Scratchpad Register                                |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_FAR = MIO UART@ FIFO Access Register
 *
 * The FIFO Access Register (FAR) is used to enable a FIFO access mode for testing, so that the receive
 * FIFO can be written by software and the transmit FIFO can be read by software when the FIFOs are
 * enabled. When FIFOs are not enabled it allows the RBR to be written by software and the THR to be read
 * by software. Note, that when the FIFO access mode is enabled/disabled, the control portion of the
 * receive FIFO and transmit FIFO is reset and the FIFOs are treated as empty.
 *

     ==============================================================
     MIO_UART(0..1)_FAR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVD     RAZ      NS          NS        Reserved                                           |   
<0>     FAR      R/W      0x0         NS        FIFO Access Register                               |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_TFR = MIO UART@ Transmit FIFO Read Register
 *
 * The Transmit FIFO Read Register (TFR) is only valid when FIFO access mode is enabled (FAR bit 0 is
 * set). When FIFOs are enabled, reading this register gives the data at the top of the transmit FIFO.
 * Each consecutive read pops the transmit FIFO and gives the next data value that is currently at the
 * top of the FIFO. When FIFOs are not enabled, reading this register gives the data in the THR.
 *

     ==============================================================
     MIO_UART(0..1)_TFR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD     RAZ      NS          NS        Reserved                                           |   
<7:0>   TFR      RO       0x0         NS        Transmit FIFO Read Register                        |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_RFW = MIO UART@ Receive FIFO Write Register
 *
 * The Receive FIFO Write Register (RFW) is only valid when FIFO access mode is enabled (FAR bit 0 is
 * set). When FIFOs are enabled, this register is used to write data to the receive FIFO. Each
 * consecutive write pushes the new data to the next write location in the receive FIFO. When FIFOs are
 * not enabled, this register is used to write data to the RBR.
 *

     ==============================================================
     MIO_UART(0..1)_RFW Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:10> RSVD     WO       NS          NS        Reserved                                           |   
<9>     RFFE     WO       0x0         NS        Receive FIFO Framing Error                         |   
<8>     RFPE     WO       0x0         NS        Receive FIFO Parity Error                          |   
<7:0>   RFWD     WO       0x0         NS        Receive FIFO Write Data                            |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_USR = MIO UART@ UART Status Register
 *
 * The UART Status Register (USR) contains UART status information.
 *
 * USR bit 0 is the BUSY bit.  When set this bit indicates that a serial transfer is in progress, when
 * clear it indicates that the UART is idle or inactive.
 *
 * Note: In PASS3, the BUSY bit will always be clear.
 *
 * USR bits 1-4 indicate the following FIFO status: TX FIFO Not Full (TFNF), TX FIFO Empty (TFE), RX
 * FIFO Not Empty (RFNE), and RX FIFO Full (RFF).
 *

     ==============================================================
     MIO_UART(0..1)_USR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:5>  RSVD     RAZ      NS          NS        Reserved                                           |   
<4>     RFF      RO       0x0         NS        RX FIFO Full                                       |   
<3>     RFNE     RO       0x0         NS        RX FIFO Not Empty                                  |   
<2>     TFE      RO       0x1         NS        TX FIFO Empty                                      |   
<1>     TFNF     RO       0x1         NS        TX FIFO Not Full                                   |   
<0>     BUSY     RO       0x0         NS        Busy bit (always 0 in PASS3)                       |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_TFL = MIO UART@ Transmit FIFO Level Register
 *
 * The Transmit FIFO Level Register (TFL) indicates the number of data entries in the transmit FIFO.
 *

     ==============================================================
     MIO_UART(0..1)_TFL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:7>  RSVD     RAZ      NS          NS        Reserved                                           |   
<6:0>   TFL      RO       0x0         NS        Transmit FIFO Level Register                       |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_RFL = MIO UART@ Receive FIFO Level Register
 *
 * The Receive FIFO Level Register (RFL) indicates the number of data entries in the receive FIFO.
 *

     ==============================================================
     MIO_UART(0..1)_RFL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:7>  RSVD     RAZ      NS          NS        Reserved                                           |   
<6:0>   RFL      RO       0x0         NS        Receive FIFO Level Register                        |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_SRR = MIO UART@ Software Reset Register
 *
 * The Software Reset Register (SRR) is a write-only register that resets the UART and/or the receive
 * FIFO and/or the transmit FIFO.
 *
 * Bit 0 of the SRR is the UART Soft Reset (USR) bit.  Setting this bit resets the UART.
 *
 * Bit 1 of the SRR is a shadow copy of the RX FIFO Reset bit (FCR bit 1). This can be used to remove
 * the burden on software having to store previously written FCR values (which are pretty static) just
 * to reset the receive FIFO.
 *
 * Bit 2 of the SRR is a shadow copy of the TX FIFO Reset bit (FCR bit 2). This can be used to remove
 * the burden on software having to store previously written FCR values (which are pretty static) just
 * to reset the transmit FIFO.
 *

     ==============================================================
     MIO_UART(0..1)_SRR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  RSVD     WO       NS          NS        Reserved                                           |   
<2>     STFR     WO       0x0         NS        Shadow TX FIFO Reset                               |   
<1>     SRFR     WO       0x0         NS        Shadow RX FIFO Reset                               |   
<0>     USR      WO       0x0         NS        UART Soft Reset                                    |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_SRTS = MIO UART@ Shadow Request To Send Register
 *
 * The Shadow Request To Send Register (SRTS) is a shadow register for the RTS bit (MCR bit 1) that can
 * be used to remove the burden of having to perform a read-modify-write on the MCR.
 *

     ==============================================================
     MIO_UART(0..1)_SRTS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVD     RAZ      NS          NS        Reserved                                           |   
<0>     SRTS     R/W      0x0         NS        Shadow Request To Send                             |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_SBCR = MIO UART@ Shadow Break Control Register
 *
 * The Shadow Break Control Register (SBCR) is a shadow register for the BREAK bit (LCR bit 6) that can
 * be used to remove the burden of having to perform a read-modify-write on the LCR.
 *

     ==============================================================
     MIO_UART(0..1)_SBCR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVD     RAZ      NS          NS        Reserved                                           |   
<0>     SBCR     R/W      0x0         NS        Shadow Break Control                               |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_SFE = MIO UART@ Shadow FIFO Enable Register
 *
 * The Shadow FIFO Enable Register (SFE) is a shadow register for the FIFO enable bit (FCR bit 0) that
 * can be used to remove the burden of having to store the previously written value to the FCR in memory
 * and having to mask this value so that only the FIFO enable bit gets updated.
 *

     ==============================================================
     MIO_UART(0..1)_SFE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVD     RAZ      NS          NS        Reserved                                           |   
<0>     SFE      R/W      0x0         NS        Shadow FIFO Enable                                 |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_SRT = MIO UART@ Shadow RX Trigger Register
 *
 * The Shadow RX Trigger Register (SRT) is a shadow register for the RX Trigger bits (FCR bits 7:6) that
 * can be used to remove the burden of having to store the previously written value to the FCR in memory
 * and having to mask this value so that only the RX Trigger bits get updated.
 *

     ==============================================================
     MIO_UART(0..1)_SRT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  RSVD     RAZ      NS          NS        Reserved                                           |   
<1:0>   SRT      R/W      0x0         NS        Shadow RX Trigger                                  |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_STT = MIO UART@ Shadow TX Trigger Register
 *
 * The Shadow TX Trigger Register (STT) is a shadow register for the TX Trigger bits (FCR bits 5:4) that
 * can be used to remove the burden of having to store the previously written value to the FCR in memory
 * and having to mask this value so that only the TX Trigger bits get updated.
 *

     ==============================================================
     MIO_UART(0..1)_STT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  RSVD     RAZ      NS          NS        Reserved                                           |   
<1:0>   STT      R/W      0x0         NS        Shadow TX Trigger                                  |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_UART@_HTX = MIO UART@ Halt TX Register
 *
 * The Halt TX Register (HTX) is used to halt transmissions for testing, so that the transmit FIFO can be
 * filled by software when FIFOs are enabled. If FIFOs are not enabled, setting the HTX register will
 * have no effect.
 *

     ==============================================================
     MIO_UART(0..1)_HTX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVD     RAZ      NS          NS        Reserved                                           |   
<0>     HTX      R/W      0x0         NS        Halt TX                                            |   
----------------------------------------------------------------------------------------------------
===




     ==============================================================
     MIO_FUS_DAT0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> NS       RAZ      NS          NS        Reserved                                           |   
<31:0>  MAN_INFO RO       NS          NS        Fuse information - manufacturing info [31:0]       |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_DAT1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> NS       RAZ      NS          NS        Reserved                                           |   
<31:0>  MAN_INFO RO       NS          NS        Fuse information - manufacturing info [63:32]      |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_DAT2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> NS        RAZ     NS          NS        Reserved                                           |   
<31:30> SPARE     RO      NS          NS        Spare Fuses                                        |   
<29>    NOKASU    RO      NS          NS        Fuse information - Disable Kasumi                  |   
<28>    NODFA_CP2 RO      NS          NS        Fuse information - DFA Disable (CP2)               |   
<27>    NOMUL     RO      NS          NS        Fuse information - VMUL disable                    |   
<26>    NOCRYPTO  RO      NS          NS        Fuse information - AES/DES/HASH disable            |   
<25>    RST_SHT   RO      NS          NS        Fuse information - When set, use short reset count |   
<24>    BIST_DIS  RO      NS          NS        Fuse information - BIST Disable                    |   
<23:16> CHIP_ID   RO      NS          NS        Fuse information - CHIP_ID                         |   
<15:0>  PP_DIS    RO      NS          NS        Fuse information - PP_DISABLES                     |   

Notes:
CHIP_ID is consumed in several places within Octeon.

   * Core COP0 ProcessorIdentification[Revision]
   * Core EJTAG DeviceIdentification[Version]
   * PCI_CFG02[RID]
   * JTAG controller

Note: The JTAG controller gets CHIP_ID[3:0] solely from the laser fuses.
Modification to the efuses will not change what the JTAG controller reports
for CHIP_ID.
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_DAT3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> NS       RAZ      NS          NS        Reserved                                           |   
<31>    SPARE    RO       NS          NS        Spare Fuses                                        |   
<30:29> ZIP_CRIP RO       NS          NS        Fuse information - Zip Cripple                     |   
<28>    BAR2_EN  RO       NS          NS        Fuse information - BAR2 Enable (when blown '1')    |   
<27>    EFUS_LCK RO       NS          NS        Fuse information - efuse lockdown                  |   
<26>    EFUS_IGN RO       NS          NS        Fuse information - efuse ignore                    |   
                                                  This bit only has side effects when blown in      |
                                                  the laser fuses.  It is ignore if only set in     |
                                                  efuse store.                                      |
<25>    NOZIP    RO       NS          NS        Fuse information - ZIP disable                     |   
<24>    NODFA_DTE RO      NS          NS        Fuse information - DFA Disable (DTE)               |   
<23:0>  ICACHE   RO       NS          NS        Fuse information - ICACHE Hard Repair Data         |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_RCMD Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:24> NS       RAZ      NS          NS        Reserved                                           |   
<23:16> DAT      RO       NS          NS        8bits of fuse data                                 |   
<15:13> NS       RAZ      NS          NS        Reserved                                           |   
<12>    PEND     R/W      0           0         SW sets this bit on a write to start FUSE read     |   
                                                  operation.  HW clears when read is complete and   |
                                                  the DAT is valid                                  |
<11:9>  NS       RAZ      NS          NS        Reserved                                           |   
<8>     EFUSE    R/W      0           0         When set, return data from the efuse storage       |   
                                                  rather than the local storage for the 320 HW fuses|
<7>     NS       RAZ      NS          NS        Reserved                                           |   
<6:0>   ADDR     R/W      0           0         The byte address of the fuse to read               |   

Notes:
To read an efuse, SW writes MIO_FUS_RCMD[ADDR,PEND] with the byte address of
the fuse in question, then SW can poll MIO_FUS_RCMD[PEND].  When PEND is
clear, then MIO_FUS_RCMD[DAT] is valid.  In addition, if the efuse read went
to the efuse banks (e.g. ADDR > (320/8) || EFUSE is set) SW can read
MIO_FUS_BNK_DATX which contains all 256 fuses in the bank associated in
ADDR.
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_WADR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  NS       RAZ      NS          NS        Reserved                                           |   
<1:0>   ADDR     R/W      NS          NS        Which of the four banks of 256 fuses to blow       |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_PROG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  NS       RAZ      NS          NS        Reserved                                           |   
<0>     PROG     R/W      NS          NS        Blow the fuse bank                                 |   
                                                  SW will set PROG, and then the HW will clear      |
                                                  when the PROG bank is complete                    |

Notes:
To write a bank of fuses, SW must set MIO_FUS_WADR[ADDR] to the bank to be
programmed and then set each bit within MIO_FUS_BNK_DATX to indicate which
fuses to blow.  Once ADDR, and DAT are setup, SW can write to
MIO_FUS_PROG[PROG] to start the bank write and poll on PROG.  Once PROG is
clear, the bank write is complete.
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_PROG_TIMES Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:33> NS       RAZ      NS          NS        Reserved                                           |   
<32>    PROG_PIN RO       0           0         efuse program pin                                  |   
<31:24> OUT      R/W      3           NS        efuse timing param (ref_clks to delay 10ns)        |   
<23:20> SCLK_LO  R/W      2           NS        efuse timing param (ref_clks to delay 5ns)         |   
<19:8>  SCLK_HI  R/W      100         NS        efuse timing param (ref_clks to delay 1000ns)      |   
<7:0>   SETUP    R/W      3           NS        efuse timing param (ref_clks to delay 10ns)        |   

Notes:
All values must be > 0 for correct electrical operation.

The reset values are a conservative version for a 50MHz ref_clk.
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_BNK_DAT(0..3) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  DAT      R/W      NS          NS        Efuse bank store                                   |   
                                                 For reads, the DAT gets the fus bank last read     |
                                                 For write, the DAT determines which fuses to blow  |

Notes:
The intial state of MIO_FUS_BNK_DAT* is as if bank1 was just read i.e. DAT* = fus[511:256]
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_SPR_REPAIR_SUM Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  NS       RAZ      NS          NS        Reserved                                           |   
<0>     TOO_MANY RO       0           0         Too Many Defects - cannot repair - bad part        |   

Notes:
Pass3 Only
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_SPR_REPAIR_RES Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:42> NS       RAZ      NS          NS        Reserved                                           |   
<41:28> REPAIR2  RO       0           0         SPR BISR Results                                   |   
<27:14> REPAIR1  RO       0           0         SPR BISR Results                                   |   
<13:0>  REPAIR0  RO       0           0         SPR BISR Results                                   |   

Notes:
Pass3 Only
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_EMA Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  NS       RAZ      NS          NS        Reserved                                           |   
<1:0>   EMA      R/W      NS          0         EMA Settings                                       |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     MIO_FUS_PLL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  NS       RAZ      NS          NS        Reserved                                           |   
<1>     RFSLIP   R/W1C    0x0         NS        PLL reference clock slip                           |   
<0>     FBSLIP   R/W1C    0x0         NS        PLL feedback clock slip                            |   
----------------------------------------------------------------------------------------------------
===




     ==============================================================
     CIU_INT(0..32)_SUM0 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:56> RSVRD    RAZ      NS          NS        Reserved                                           |   
<55:52> TIMER    R/W1C    0           0         General timer interrupts                           |   
<51>    KEY_ZERO R/W1C    0           0         Key Zeroization interrupt                          |   
                                                  KEY_ZERO will be set when the external ZERO_KEYS  |
                                                  pin is sampled high.  KEY_ZERO is cleared by SW   |
<50>    IPD_DRP  R/W1C    0           0         IPD QOS packet drop                                |   
<49:48> GMX_DRP  R/W1C    0           0         GMX packet drop                                    |   
<47>    TRACE    RO       0           0         L2C has the CMB trace buffer                       |   
<46>    RML      RO       0           0         RML Interrupt                                      |   
<45>    TWSI     RO       0           0         TWSI Interrupt                                     |   
<44>    WDOG_SUM RO       0           0         Watchdog summary                                   |   
                                                  PPs use CIU_INTx_SUM0 where x=0-31.               |
                                                  PCI uses the CIU_INTx_SUM0 where x=32.            |
                                                  Even INTx registers report WDOG to IP2            |
                                                  Odd INTx registers report WDOG to IP3             |
<43:40> PCI_MSI  RO       0           0         PCI MSI                                            |   
                                                  [43] is the or of <63:48>                         |
                                                  [42] is the or of <47:32>                         |
                                                  [41] is the or of <31:16>                         |
                                                  [40] is the or of <15:0>                          |
<39:36> PCI_INT  RO       0           0         PCI INTA/B/C/D                                     |   
<35:34> UART     RO       0           0         Two UART interrupts                                |   
<33:32> MBOX     RO       0           0         Two mailbox interrupts for entries 0-31            |   
                                                  [33] is the or of <31:16>                         |
                                                  [32] is the or of <15:0>                          |
                                                 Two PCI internal interrupts for entry 32           |
                                                  CIU_PCI_INTA                                      |
<31:16> GPIO     RO       0           0         16 GPIO interrupts                                 |   
<15:0>  WORKQ    RO       0           0         16 work queue interrupts                           |   
                                                  1 bit/group. A copy of the R/W1C bit in the POW.  |
----------------------------------------------------------------------------------------------------
===
   

     ==============================================================
     CIU_INT_SUM1 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  WDOG     RO       0           0         16 watchdog interrupts                             |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_INT(0..32)_EN0 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:56> RSVRD1   RAZ      NS          NS        Reserved                                           |   
<55:52> TIMER    R/W      0           0         General timer interrupts                           |   
<51>    KEY_ZERO R/W      0           0         Key Zeroization interrupt                          |   
<50>    IPD_DRP  R/W      0           0         IPD QOS packet drop                                |   
<49:48> GMX_DRP  R/W      0           0         GMX packet drop                                    |   
<47>    TRACE    R/W      0           0         L2C has the CMB trace buffer                       |   
<46>    RML      R/W      0           0         RML Interrupt                                      |   
<45>    TWSI     R/W      0           0         TWSI Interrupt                                     |   
<44>    RSVRD0   RAZ      NS          NS        Reserved                                           |   
<43:40> PCI_MSI  R/W      0           0         PCI MSI                                            |   
<39:36> PCI_INT  R/W      0           0         PCI INTA/B/C/D                                     |   
<35:34> UART     R/W      0           0         Two UART interrupts                                |   
<33:32> MBOX     R/W      0           0         Two mailbox/PCI interrupts                         |   
<31:16> GPIO     R/W      0           0         16 GPIO interrupts                                 |   
<15:0>  WORKQ    R/W      0           0         16 work queue interrupts                           |   

Notes:
CIU_INT0_EN0:  PP0 /IP2
CIU_INT1_EN0:  PP0 /IP3
...
CIU_INT30_EN0: PP15/IP2
CIU_INT31_EN0: PP15/IP3
CIU_INT32_EN0: PCI /IP
CIU_INT33_EN0: PCI /IP
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_INT(0..32)_EN1 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  WDOG     R/W      0           0         Watchdog summary interrupt enable vectory          |   

Notes:
@verbatim
PPx/IP2 will be raised when...

   n = x*2
   PPx/IP2 = |({CIU_INT_SUM1, CIU_INTn_SUM0} & {CIU_INTn_EN1, CIU_INTn_EN0})

PPx/IP3 will be raised when...

   n = x*2 + 1
   PPx/IP3 =  |({CIU_INT_SUM1, CIU_INTn_SUM0} & {CIU_INTn_EN1, CIU_INTn_EN0})

PCI/INT will be raised when...

   PCI/INT = |({CIU_INT_SUM1, CIU_INT32_SUM0} & {CIU_INT32_EN1, CIU_INT32_EN0})
@endverbatim
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_INT(0..15)_SUM4 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:56> RSVRD    RAZ      NS          NS        Reserved                                           |   
<55:52> TIMER    R/W1C    0           0         General timer interrupts                           |   
<51>    KEY_ZERO R/W1C    0           0         Key Zeroization interrupt                          |   
                                                  KEY_ZERO will be set when the external ZERO_KEYS  |
                                                  pin is sampled high.  KEY_ZERO is cleared by SW   |
<50>    IPD_DRP  R/W1C    0           0         IPD QOS packet drop                                |   
<49:48> GMX_DRP  R/W1C    0           0         GMX packet drop                                    |   
<47>    TRACE    RO       0           0         L2C has the CMB trace buffer                       |   
<46>    RML      RO       0           0         RML Interrupt                                      |   
<45>    TWSI     RO       0           0         TWSI Interrupt                                     |   
<44>    WDOG_SUM RO       0           0         Watchdog summary                                   |   
                                                  These registers report WDOG to IP4                |
<43:40> PCI_MSI  RO       0           0         PCI MSI                                            |   
                                                  [43] is the or of <63:48>                         |
                                                  [42] is the or of <47:32>                         |
                                                  [41] is the or of <31:16>                         |
                                                  [40] is the or of <15:0>                          |
<39:36> PCI_INT  RO       0           0         PCI INTA/B/C/D                                     |   
<35:34> UART     RO       0           0         Two UART interrupts                                |   
<33:32> MBOX     RO       0           0         Two mailbox interrupts for entries 0-31            |   
                                                  [33] is the or of <31:16>                         |
                                                  [32] is the or of <15:0>                          |
                                                 Two PCI internal interrupts for entry 32           |
                                                  CIU_PCI_INTA                                      |
<31:16> GPIO     RO       0           0         16 GPIO interrupts                                 |   
<15:0>  WORKQ    RO       0           0         16 work queue interrupts                           |   
                                                  1 bit/group. A copy of the R/W1C bit in the POW.  |
----------------------------------------------------------------------------------------------------
===
   

     ==============================================================
     CIU_INT(0..15)_EN4_0 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:56> RSVRD1   RAZ      NS          NS        Reserved                                           |   
<55:52> TIMER    R/W      0           0         General timer interrupts                           |   
<51>    KEY_ZERO R/W      0           0         Key Zeroization interrupt                          |   
<50>    IPD_DRP  R/W      0           0         IPD QOS packet drop                                |   
<49:48> GMX_DRP  R/W      0           0         GMX packet drop                                    |   
<47>    TRACE    R/W      0           0         L2C has the CMB trace buffer                       |   
<46>    RML      R/W      0           0         RML Interrupt                                      |   
<45>    TWSI     R/W      0           0         TWSI Interrupt                                     |   
<44>    RSVRD0   RAZ      NS          NS        Reserved                                           |   
<43:40> PCI_MSI  R/W      0           0         PCI MSI                                            |   
<39:36> PCI_INT  R/W      0           0         PCI INTA/B/C/D                                     |   
<35:34> UART     R/W      0           0         Two UART interrupts                                |   
<33:32> MBOX     R/W      0           0         Two mailbox/PCI interrupts                         |   
<31:16> GPIO     R/W      0           0         16 GPIO interrupts                                 |   
<15:0>  WORKQ    R/W      0           0         16 work queue interrupts                           |   

Notes:
CIU_INT0_EN4_0:   PP0  /IP4
CIU_INT1_EN4_0:   PP1  /IP4
...
CIU_INT15_EN4_0:  PP15 /IP4
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_INT(0..15)_EN4_1 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  WDOG     R/W      0           0         Watchdog summary interrupt enable vectory          |   

Notes:
  PPx/IP4 will be raised when...
  PPx/IP4 = |({CIU_INT_SUM1, CIU_INTx_SUM4} & {CIU_INTx_EN4_1, CIU_INTx_EN4_0})
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_TIM(0..3) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:37> RSVRD    RAZ      NS          NS        Reserved                                           |   
<36>    ONE_SHOT R/W      0           0         One-shot mode                                      |   
<35:0>  LEN      R/W      0           0         Timeout length in core clock cycles                |   
                                                  Periodic interrupts will occur every LEN+1 core   |
                                                  clock cycles when ONE_SHOT==0                     |
                                                  Timer disabled when LEN==0                        |
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_WDOG(0..15) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:46> RSVRD    RAZ      NS          NS        Reserved                                           |   
<45>    GSTOPEN  R/W      0           0         GSTOPEN                                            |   
<44>    DSTOP    R/W      0           0         DSTOP                                              |   
<43:20> CNT      RO       0           0         Number of 256-cycle intervals until next watchdog  |   
                                                  expiration.  Cleared on write to associated       |
                                                  CIU_PP_POKE register.                             |                                             
<19:4>  LEN      R/W      0           0         Watchdog time expiration length                    |   
                                                  The 16 bits of LEN represent the most significant |
                                                  bits of a 24 bit decrementer that decrements      |
                                                  every 256 cycles.                                 |
                                                  LEN must be set > 0                               |
<3:2>   STATE    RO       0           0         Watchdog state                                     |   
                                                  number of watchdog time expirations since last    |
                                                  PP poke.  Cleared on write to associated          |
                                                  CIU_PP_POKE register.                             |
<1:0>   MODE     R/W      0           0         Watchdog mode                                      |   
                                                  0 = Off                                           |
                                                  1 = Interrupt Only                                |
                                                  2 = Interrupt + NMI                               |
                                                  3 = Interrupt + NMI + Soft-Reset                  |
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_PP_POKE(0..15) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  POKE     RAZ      NS          NS        Reserved                                           |   

Notes:
Any write to a CIU_PP_POKE register clears any pending interrupt generated
by the associated watchdog, resets the CIU_WDOG[STATE] field, and set
CIU_WDOG[CNT] to be (CIU_WDOG[LEN] << 8).

Reads to this register will return the associated CIU_WDOG register.
----------------------------------------------------------------------------------------------------
===
 


     ==============================================================
     CIU_MBOX_SET(0..15) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  SET      R/W1     0           0         On writes, set corresponding bit in MBOX register  |   
                                                  on reads, return the MBOX register                |
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_MBOX_CLR(0..15) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  CLR      R/W1C    0           0         On writes, clr corresponding bit in MBOX register  |   
                                                  on reads, return the MBOX register                |
----------------------------------------------------------------------------------------------------
===


 * Contains the reset control for each PP.  Value of '1' will hold a PP in reset, '0' will release.
 * Resets to 0xffff when PCI boot is enabled, 0xfffe otherwise. 
 *

     ==============================================================
     CIU_PP_RST Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:1>  RST      R/W      0x7fff      0         PP Rst for PP's 15-1                               |   
<0>     RST0     R/W      NS          NS        PP Rst for PP0                                     |   
                                                  depends on standalone mode                        |
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_PP_DBG Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  PPDBG    RO       0           0         Debug[DM] value for each PP                        |   
                                                  whether the PP's are in debug mode or not         |
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_GSTOP Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<0>     GSTOP    R/W      0           0         GSTOP bit                                          |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_NMI Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  NMI      WO       0           0         Send NMI pulse to PP vector                        |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_DINT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  DINT     WO       0           0         Send DINT pulse to PP vector                       |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_FUSE Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  FUSE     RO       NS          NS        Physical PP is present                             |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_BIST Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4> RSVRD    RAZ      NS          NS        Reserved                                            |   
<3:0>  BIST     RO       0x0         0         BIST Results.                                       |   
                                                  HW sets a bit in BIST for for memory that fails   |
                                                  BIST.                                             |
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_SOFT_BIST Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1> RSVRD     RAZ      NS          NS        Reserved                                           |   
<0>    SOFT_BIST R/W      0x0         0         Run BIST on soft reset.                            |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_SOFT_RST Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1> RSVRD     RAZ      NS          NS        Reserved                                           |   
<0>    SOFT_RST  WO       0x0         0         Resets Octeon                                      |   
                                                  When soft reseting Octeon from a remote PCI host, |
                                                  always read CIU_SOFT_RST (and wait for result)    |
                                                  before writing SOFT_RST to '1'.                   |
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_SOFT_PRST Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3> RSVRD     RAZ      NS          NS        Reserved                                           |   
<2>    HOST64    R/W      0x1         1         PCX Host Mode Device Capability (0=32b/1=64b)      |   
<1>    NPI       R/W      0x0         0         When PCI soft reset is asserted, also reset the    |   
                                                  NPI and PNI logic                                 |
<0>    SOFT_PRST R/W      0x1         0         Reset the PCI bus.  Only works when Octane is      |   
                                                 configured as a HOST. When OCTEON is a PCI host    |
                                                 (i.e. when PCI_HOST_MODE = 1), This controls       |
                                                 PCI_RST_L. Refer to section 10.11.1.               |
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     CIU_PCI_INTA Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2> RSVRD     RAZ      NS          NS        Reserved                                           |   
<1:0>  INT       R/W      0x0         0         PCI interrupt                                      |   
                                                  These bits are observed in CIU_INT32_SUM0<33:32>  |
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     GPIO_BIT_CFG(0..15) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:12> RSVRD    RAZ      NS          NS        Reserved                                           |   
<11:8>  FIL_SEL  R/W      0x0         0         Global counter bit-select (controls sample rate)   |   
<7:4>   FIL_CNT  R/W      0x0         0         Number of consecutive samples to change state      |   
<3>     INT_TYPE R/W      0x0         0         Type of interrupt                                  |   
                                                  0 = level (default)                               |   
                                                  1 = rising edge                                   |
<2>     INT_EN   R/W      0x0         0         Bit mask to indicate which bits to raise interrupt |   
<1>     RX_XOR   R/W      0x0         0         Invert the GPIO pin                                |   
<0>     TX_OE    R/W      0x0         0         Drive the GPIO pin as an output pin                |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     GPIO_RX_DAT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  DAT      RO       0x0         0         GPIO Read Data                                     |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     GPIO_TX_SET Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  SET      WO       0x0         0         Bit mask to indicate which bits to drive to '1'.   |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     GPIO_TX_CLR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  CLR      WO       0x0         0         Bit mask to indicate which bits to drive to '0'.   |   
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     GPIO_INT_CLR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  TYPE     WO       0x0         0         Clear the interrupt rising edge detector           |   
----------------------------------------------------------------------------------------------------
===


 *
 * LED_EN = LED Interface Enable
 *

     ==============================================================
     LED_EN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<0>     EN       R/W      0x0         1         Enable the LED interface shift-chain               |   

Notes:
The LED interface is comprised of a shift chain with a parallel latch.  LED
data is shifted out on each fallingg edge of led_clk and then captured by
led_lat.

The LED shift chain is comprised of the following...

     32  - UDD header
     6x8 - per port status
     17  - debug port
     32  - UDD trailer

for a total of 129 bits.

UDD header is programmable from 0-32 bits (LED_UDD_CNT0) and will shift out
LSB to MSB (LED_UDD_DAT0[0], LED_UDD_DAT0[1],
... LED_UDD_DAT0[LED_UDD_CNT0].

The per port status is also variable.  Systems can control which ports send
data (LED_PRT) as well as the status content (LED_PRT_FMT and
LED_PRT_STATUS*).  When multiple ports are enabled, they come out in lowest
port to highest port (prt0, prt1, ...).

The debug port data can also be added to the LED chain (LED_DBG).  When
enabled, the debug data shifts out LSB to MSB.

The UDD trailer data is identical to the header data, but uses LED_UDD_CNT1
and LED_UDD_DAT1.
----------------------------------------------------------------------------------------------------
===
 

 *
 * LED_CLK_PHASE = LED Clock Phase (in 64 eclks)
 *

     ==============================================================
     LED_CLK_PHASE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:7>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<6:0>   PHASE    R/W      0x4         4         Number of 64 eclks in order to create the led_clk  |   

Notes:
Example:
        Given a 2ns eclk, an LED_CLK_PHASE[PHASE] = 1, indicates that each
        led_clk phase is 64 eclks, or 128ns.  The led_clk period is 2*phase,
        or 256ns which is 3.9MHz.  The default value of 4, yields an led_clk
        period of 64*4*2ns*2 = 1024ns or ~1MHz (977KHz).
----------------------------------------------------------------------------------------------------
===
 

 *
 * LED_PRT = LED Port status information
 *

     ==============================================================
     LED_PRT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<7:0>   PRT_EN   R/W      0x0         NS        Which ports are enabled to display status          |   
                                                  PRT_EN<3:0> coresponds to RGMII ports 3-0 on int0 |
                                                  PRT_EN<7:4> coresponds to RGMII ports 7-4 on int1 |
                                                  Only applies when interface is in RGMII mode      |
                                                  The status format is defined by LED_PRT_FMT       |

Notes:
Note:
        the PRT vector enables information of the 8 RGMII ports connected to
        Octane.  It does not reflect the actual programmed PHY addresses.
----------------------------------------------------------------------------------------------------
===


 *
 * LED_DBG = LED Debug Port information
 *

     ==============================================================
     LED_DBG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<0>     DBG_EN   R/W      0x0         0x0       Add Debug Port Data to the LED shift chain         |   
                                                  Debug Data is shifted out LSB to MSB              |
----------------------------------------------------------------------------------------------------
===


 *
 * LED_UDD_CNT = LED UDD Counts
 *

     ==============================================================
     LED_UDD_CNT(0..1) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:6>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<5:0>   CNT      R/W      0x0         0x0       Number of bits of user-defined data to include in  |   
                                                  the LED shift chain.  Legal values: 0-32.         |
----------------------------------------------------------------------------------------------------
===


 *
 * LED_PRT_FMT = LED Port Status Infomation Format
 *

     ==============================================================
     LED_PRT_FMT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<3:0>   FORMAT   R/W      0x0         NS        Port Status Information for each enabled port in   |   
                                                  LED_PRT.  The formats are below                   |
                                                  0x0: { LED_PRT_STATUS[0]            }             |
                                                  0x1: { LED_PRT_STATUS[1:0]          }             |
                                                  0x2: { LED_PRT_STATUS[3:0]          }             |
                                                  0x3: { LED_PRT_STATUS[5:0]          }             |
                                                  0x4: { (RX|TX), LED_PRT_STATUS[0]   }             |
                                                  0x5: { (RX|TX), LED_PRT_STATUS[1:0] }             |
                                                  0x6: { (RX|TX), LED_PRT_STATUS[3:0] }             |
                                                  0x8: { Tx, Rx, LED_PRT_STATUS[0]    }             |
                                                  0x9: { Tx, Rx, LED_PRT_STATUS[1:0]  }             |
                                                  0xa: { Tx, Rx, LED_PRT_STATUS[3:0]  }             |

Notes:
TX: RGMII TX block is sending packet data or extends on the port
RX: RGMII RX block has received non-idle cycle

For short transfers, LEDs will remain on for at least one blink cycle
----------------------------------------------------------------------------------------------------
===


 *
 * LED_UDD_DAT = User defined data (header or trailer)
 *

     ==============================================================
     LED_UDD_DAT(0..1) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  DAT      R/W      0x0         NS        Header or trailer UDD data to be displayed on      |   
                                                  the LED shift chain.  Number of bits to include   |
                                                  is controled by LED_UDD_CNT                       |

Notes:
Bits come out LSB to MSB on the shift chain.  If LED_UDD_CNT is set to 4
then the bits comes out LED_UDD_DAT[0], LED_UDD_DAT[1], LED_UDD_DAT[2],
LED_UDD_DAT[3].
----------------------------------------------------------------------------------------------------
===


 *
 * LED_BLINK = LED Blink Rate (in led_clks)
 *

     ==============================================================
     LED_BLINK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8> RSVRD    RAZ       NS          NS        Reserved                                           |   
<7:0>  RATE     R/W       0x4         4         LED Blink rate in led_latch clks                   |   
                                                  RATE must be > 0                                  |
----------------------------------------------------------------------------------------------------
===


 *
 * LED_POLARITY = LED Polarity
 *

     ==============================================================
     LED_POLARITY Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVRD    RAZ       NS          NS        Reserved                                          |   
<0>     POLARITY R/W       0x0         0         LED active polarity                               |   
                                                   0 = active HIGH LED                              |
                                                   1 = active LOW LED (invert led_dat)              |
----------------------------------------------------------------------------------------------------
===


 *
 * LED_PRT_STATUS = LED Port Status information
 *

     ==============================================================
     LED_PRT_STATUS(0..7) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:6>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<5:0>   STATUS   R/W      0x0         0x0       Bits that software can set to be added to the      |   
                                                  LED shift chain - depending on LED_PRT_FMT        |
                                                  LED_PRT_STATUS(3..0) corespond to RGMII ports 3-0 |
                                                   on interface0                                    |
                                                  LED_PRT_STATUS(7..4) corespond to RGMII ports 7-4 |
                                                   on interface1                                    |
                                                  Only applies when interface is in RGMII mode      |
----------------------------------------------------------------------------------------------------
===


 *
 * LED_UDD_DAT_SET = User defined data (header or trailer)
 *

     ==============================================================
     LED_UDD_DAT_SET(0..1) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  SET      WO       0x0         NS        Bitwise set for the Header or trailer UDD data to  |   
                                                  be displayed on the LED shift chain.              |
----------------------------------------------------------------------------------------------------
===


 *
 * LED_UDD_DAT_CLR = User defined data (header or trailer)
 *

     ==============================================================
     LED_UDD_DAT_CLR(0..1) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  CLR      WO       0x0         NS        Bitwise clear for the Header or trailer UDD data to|   
                                                  be displayed on the LED shift chain.              |
----------------------------------------------------------------------------------------------------
===


 *
 * LED_CYLON = LED CYLON Effect (should remain undocumented)
 *

     ==============================================================
     LED_CYLON Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  RATE     R/W      0x0         0         LED Cylon Effect when RATE!=0                      |   
                                                  Changes at RATE*LATCH period                      |
----------------------------------------------------------------------------------------------------
===


 *
 * SMI_CMD = Force a Read/Write command to the PHY
 *

     ==============================================================
     SMI_CMD Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:17> RSVRD    RAZ      NS          NS        Reserved                                           |   
<16>    PHY_OP   R/W      0           NS        PHY Opcode                                         |   
                                                  0=write                                           |
                                                  1=read                                            |
<15:13> RSVRD1   RAZ      NS          NS        Reserved                                           |   
<12:8>  PHY_ADR  R/W      0           NS        PHY Address                                        |   
<7:5>   RSVRD0   RAZ      NS          NS        Reserved                                           |   
<4:0>   REG_ADR  R/W      0           NS        PHY Register Offset                                |   

Notes:
Writes to this register will create SMI xactions.  Software will poll on (depending on the xaction type).
----------------------------------------------------------------------------------------------------
===


 *
 * SMI_WR_DAT = SMI Write Data
 *

     ==============================================================
     SMI_WR_DAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:18> RSVRD    RAZ      NS          NS        Reserved                                           |   
<17>    PENDING  RO       0           NS        Write Xaction Pending                              |   
<16>    VAL      RO       0           NS        Write Data Valid                                   |   
<15:0>  DAT      R/W      0           NS        Write Data                                         |   

Notes:
VAL will assert when the write xaction completes.  A read to this register
will clear VAL.  PENDING indicates that an SMI WR transaction is in flight.
----------------------------------------------------------------------------------------------------
===


 *
 * SMI_RD_DAT = SMI Read Data
 *

     ==============================================================
     SMI_RD_DAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:18> RSVRD    RAZ      NS          NS        Reserved                                           |   
<17>    PENDING  RO       0           NS        Read Xaction Pending                               |   
<16>    VAL      RO       0           NS        Read Data Valid                                    |   
<15:0>  DAT      RO       0           NS        Read Data                                          |   

Notes:
VAL will assert when the read xaction completes.  A read to this register
will clear VAL.  PENDING indicates that an SMI RD transaction is in flight.
----------------------------------------------------------------------------------------------------
===


 *
 * SMI_CLK = Clock Control Register
 *

     ==============================================================
     SMI_CLK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:21> RSVRD0   RAZ      NS          NS        Reserved                                           |   
<20:16> SAMPLE_HI R/W     0           0         When to sample read data (extended bits)           |   
<15>    SAMPLE_MODE RAZ   0           0         Read Data sampling mode                            |   
                                                  According to the 802.3 spec, on reads, the STA    |
                                                  transitions MDC and the PHY drives MDIO with      |
                                                  some delay relative to that edge.  This is edge1. |
                                                  The STA then samples MDIO on the next rising edge |
                                                  of MDC.  This is edge2. Octeon can sample the     |
                                                  read data relative to either edge.                |
                                                   0={SAMPLE_HI,SAMPLE} specify the sample time     |
                                                     relative to edge2                              |
                                                   1={SAMPLE_HI,SAMPLE} specify the sample time     |
                                                     relative to edge1                              |
<14>    NS       RAZ      NS          NS        Reserved                                           |   
<13>    CLK_IDLE R/W      0           0         Do not toggle MDC on idle cycles                   |   
<12>    PREAMBLE R/W      1           1         Send PREAMBLE on SMI transacton                    |   
<11:8>  SAMPLE   R/W      2           2         When to sample read data                           |   
                                                  (number of eclks after the rising edge of mdc)    |
                                                  ( {SAMPLE_HI,SAMPLE} > 1 )                        |
                                                  ( {SAMPLE_HI, SAMPLE} + 3 <= 2*PHASE )            |
<7:0>   PHASE    R/W      100         100       MDC Clock Phase                                    |   
                                                  (number of eclks that make up an mdc phase)       |
                                                  (PHASE > 2)                                       |
----------------------------------------------------------------------------------------------------
===


 *
 * SMI_EN = Enable the SMI interface
 *

     ==============================================================
     SMI_EN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<0>     EN       R/W      0           1         Interface enable                                   |   
                                                  0=SMI Interface is down / no transactions, no MDC |
                                                  1=SMI Interface is up                             |
----------------------------------------------------------------------------------------------------
===
 


 *
 * MIO_TWS_SW_TWSI = Software to TWSI Register
 *
 * This register allows software to
 *    - initiate TWSI interface master-mode operations with a write and read the result with a read
 *    - load four bytes for later retrieval (slave mode) with a write and check validity with a read
 *    - launch a TWSI controller configuration read/write with a write and read the result with a read
 *
 * This register should be read or written by software, and read by the TWSI device. The TWSI device can
 * use either two-byte or five-byte reads to reference this register.
 *
 * The TWSI device considers this register valid when V==1 and SLONLY==1.
 *

     ==============================================================
     MIO_TWS_SW_TWSI Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  D        R/W      0x0         NS        Data Field                                         |   
                                                 Used on a write when                               |
                                                   - initiating a master-mode write (SLONLY==0)     |
                                                   - writing a TWSI config register (SLONLY==0)     |
                                                   - a slave mode write (SLONLY==1)                 |
                                                 The read value is updated by                       |
                                                   - a write to this register                       |
                                                   - master mode completion (contains result or     |
                                                     error code)                                    |
                                                   - TWSI config register read (contains result)    |
<34:32> EOP_IA   R/W      0x0         NS        Extra opcode (when OP<3:0> == 0110 and SLONLY==0): |   
                                                   000 => TWSI Slave Address Register               |
                                                   001 => TWSI Data Register                        |
                                                   010 => TWSI Control Register                     |
                                                   011 => TWSI Clock Control Register (when R == 0) |
                                                   011 => TWSI Status Register (when R == 1)        |
                                                   100 => TWSI Extended Slave Register              |
                                                   111 => TWSI Soft Reset Register                  |
                                                 Also the lower 3 bits of Internal Address when     |
                                                   launching a master mode combined read / write    |
                                                   with internal address                            |
<39:35> IA       R/W      0x0         NS        Internal Address - Used when launching a master    |   
                                                   mode combined read / write with internal address |
                                                   (lower 3 bits are contained in the EOP_IA field) |
<49:40> A        R/W      0x0         NS        Address field                                      |   
                                                   - the address of the remote device for a master  |
                                                     mode operation                                 |
                                                   - A<9:7> are only used for 10-bit addressing     |
                                                  Note that when mastering a 7-bit OP, A<6:0> should|
                                                  not take any of the values 0x78, 0x79, 0x7A nor   |
                                                  0x7B (these 7-bit addresses are reserved to       |
                                                  extend to 10-bit addressing).                     |
<51:50> SCR      R/W      0x0         NS        Scratch - unused, but retain state                 |   
<54:52> SIZE     R/W      0x0         NS        Size in bytes of Master Mode Op if the Size        |   
                                                  Override bit is set.  Specified in -1 notation    |
                                                  (i.e. 0 = 1 byte, 1 = 2 bytes ... 7 = 8 bytes)    |
                                                  (NOT IN PASS 1)                                   |
<55>    SOVR     R/W      0x0         NS        Size Override - if set, use the SIZE field to      |   
                                                  determine Master Mode Op size rather than what    |
                                                  the Opcode field specifies.  For operations       |
                                                  greater than 4 bytes, the additional data will be |
                                                  contained in the D field of MIO_TWS_SW_TWSI_EXT   |
                                                  (NOT IN PASS 1)                                   |
<56>    R        R/W      0x0         NS        Read bit or result                                 |   
                                                   - If set on a write when SLONLY==0, the          |
                                                     operation is a read                            |
                                                   - On a read, this bit returns the result         |
                                                     indication for the most recent master mode     |
                                                     operation (1 = success, 0 = fail)              |
<60:57> OP       R/W      0x0         NS        Opcode field - When the register is written with   |   
                                                 SLONLY==0, initiate a read or write:               |
                                                   0000 => 7-bit Byte Master Mode TWSI Op           |
                                                   0001 => 7-bit Byte Combined Read Master Mode Op  |
                                                           7-bit Byte Write w/ IA Master Mode Op    |
                                                   0010 => 10-bit Byte Master Mode TWSI Op          |
                                                   0011 => 10-bit Byte Combined Read Master Mode Op |
                                                           10-bit Byte Write w/ IA Master Mode Op   |
                                                   0100 => TWSI Master Clock Register               |
                                                   0110 => See EOP field                            |
                                                   1000 => 7-bit 4-byte Master Mode TWSI Op         |
                                                   1001 => 7-bit 4-byte Comb. Read Master Mode Op   |
                                                           7-bit 4-byte Write w/ IA Master Mode Op  |
                                                   1010 => 10-bit 4-byte Master Mode TWSI Op        |
                                                   1011 => 10-bit 4-byte Comb. Read Master Mode Op  |
                                                           10-bit 4-byte Write w/ IA Master Mode Op |
<61>    EIA      R/W      0x0         NS        Extended Internal Address - send additional        |   
                                                  internal address byte (MSB of IA is from IA field |
                                                  of MIO_TWS_SW_TWSI_EXT) (NOT IN PASS 1)           |
<62>    SLONLY   R/W      0x0         NS        Slave Only Mode                                    |   
                                                   - No operation is initiated with a write when    |
                                                     this bit is set - only D field is updated in   |
                                                     this case                                      |
                                                   - When clear, a write initiates either a TWSI    |
                                                     master-mode operation or a TWSI configuration  |
                                                     register access                                |
<63>    V        RC/W     0x0         NS        Valid bit                                          |   
                                                   - Set on a write (should always be written with  |
                                                     a 1)                                           |
                                                   - Cleared when a TWSI master mode op completes   |
                                                   - Cleared when a TWSI configuration register     |
                                                     access completes                               |
                                                   - Cleared when the TWSI device reads the         |
                                                     register if SLONLY==1                          |
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_TWS_TWSI_SW = TWSI to Software Register
 *
 * This register allows the TWSI device to transfer data to software and later check that software has
 * received the information.
 *
 * This register should be read or written by the TWSI device, and read by software. The TWSI device can
 * use one-byte or four-byte payload writes, and two-byte payload reads.
 *
 * The TWSI device considers this register valid when V==1.
 *

     ==============================================================
     MIO_TWS_TWSI_SW Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  D        R/W      NS          NS        Data Field - updated on a write by the TWSI device |   
<61:32> RSVD     RAZ      NS          NS        Reserved                                           |   
<63:62> V        RC/W     0x0         NS        Valid Bits                                         |   
                                                   - Not directly writable                          |
                                                   - Set to 1 on any write by the TWSI device       |
                                                   - Cleared on any read by software                |
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_TWS_INT = TWSI Interrupt Register
 *
 * This register contains the TWSI interrupt enable mask and the interrupt source bits.  Note: the
 * interrupt source bit for the TWSI core interrupt (CORE_INT) is read-only, the appropriate sequence
 * must be written to the TWSI core to clear this interrupt.  The other interrupt source bits are write-
 * one-to-clear.  TS_INT is set on the update of the MIO_TWS_TWSI_SW register (i.e. when it is written
 * by a TWSI device).  ST_INT is set whenever the valid bit of the MIO_TWS_SW_TWSI is cleared (see above
 * for reasons).
 *
 * Note: When using the high-level controller, CORE_EN should be clear and CORE_INT should be ignored.
 * Conversely, when the high-level controller is disabled, ST_EN / TS_EN should be clear and ST_INT /
 * TS_INT should be ignored.
 *
 * This register also contains a read-only copy of the TWSI bus (SCL and SDA) as well as control bits to
 * override the current state of the TWSI bus (SCL_OVR and SDA_OVR).  Setting an override bit high will
 * result in the open drain driver being activated, thus driving the corresponding signal low.
 *

     ==============================================================
     MIO_TWS_INT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:12> RSVD2    RAZ      NS          NS        Reserved                                           |   
<11>    SCL      RO       NS          NS        SCL (NOT IN PASS1 OR PASS2)                        |   
<10>    SDA      RO       NS          NS        SDA (NOT IN PASS1 OR PASS2)                        |   
<9>     SCL_OVR  R/W      0x0         NS        SCL override (NOT IN PASS1 OR PASS2)               |   
<8>     SDA_OVR  R/W      0x0         NS        SDA override (NOT IN PASS1 OR PASS2)               |   
<7>     RSVD1    RAZ      NS          NS        Reserved                                           |   
<6>     CORE_EN  R/W      0x0         NS        TWSI core interrupt enable                         |   
<5>     TS_EN    R/W      0x0         NS        MIO_TWS_TWSI_SW register update interrupt enable   |   
<4>     ST_EN    R/W      0x0         NS        MIO_TWS_SW_TWSI register update interrupt enable   |   
<3>     RSVD0    RAZ      NS          NS        Reserved                                           |   
<2>     CORE_INT RO       0x0         NS        TWSI core interrupt                                |   
<1>     TS_INT   R/W1C    0x0         NS        MIO_TWS_TWSI_SW register update interrupt          |   
<0>     ST_INT   R/W1C    0x0         NS        MIO_TWS_SW_TWSI register update interrupt          |   
----------------------------------------------------------------------------------------------------
===

 *
 * MIO_TWS_SW_TWSI_EXT = Software to TWSI Extension Register (NOT IN PASS 1)
 *
 * This register contains an additional byte of internal address and 4 additional bytes of data to be
 * used with TWSI master mode operations.  IA will be sent as the first byte of internal address when
 * performing master mode combined read / write with internal address operations and the EIA bit of
 * MIO_TWS_SW_TWSI is set.  D extends the data field of MIO_TWS_SW_TWSI for a total of 8 bytes (SOVR
 * must be set to perform operations greater than 4 bytes).
 *

     ==============================================================
     MIO_TWS_SW_TWSI_EXT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  D        R/W      0x0         NS        Extended Data Field                                |   
<39:32> IA       R/W      0x0         NS        Extended Internal Address                          |   
<63:40> RSVD     RAZ      NS          NS        Reserved                                           |   
----------------------------------------------------------------------------------------------------
===


 *
 *                  RSL_INT_BLOCKS = RSL Interrupt Blocks Register
 *
 * Reading this register will return a vector with a bit set '1' for a corresponding RSL block
 * that presently has an interrupt pending. The Field Description below supplies the name of the
 * register that software should read to find out why that intterupt bit is set.
 *

     ==============================================================
     NPI_RSL_INT_BLOCKS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     MIO      RO       0x0         0         MIO_BOOT_ERR                                           
<1>     GMX0     RO       0x0         0         GMX0_RX*_INT_REG & GMX0_TX_INT_REG                     
<2>     GMX1     RO       0x0         0         GMX1_RX*_INT_REG & GMX1_TX_INT_REG                     
<3>     NPI      RO       0x0         0         NPI_INT_SUM                                            
<4>     KEY      RO       0x0         0         KEY_INT_SUM                                            
<5>     FPA      RO       0x0         0         FPA_INT_SUM                                            
<6>     DFA      RO       0x0         0         DFA_ERR                                                
<7>     ZIP      RO       0x0         0         ZIP_ERROR                                              
<8>     RINT_8   RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<9>     IPD      RO       0x0         0         IPD_INT_SUM                                            
<10>    PKO      RO       0x0         0         PKO_REG_ERROR                                          
<11>    TIM      RO       0x0         0         TIM_REG_ERROR                                          
<12>    POW      RO       0x0         0         POW_ECC_ERR                                            
<13>    RINT_13  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<14>    RINT_14  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<15>    RINT_15  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<16>    L2C      RO       0x0         0         L2T_ERR & L2D_ERR                                      
<17>    LMC      RO       0x0         0         LMC_MEM_CFG0                                           
<18>    SPX0     RO       0x0         0         SPX0_INT_REG & STX0_INT_REG                            
<19>    SPX1     RO       0x0         0         SPX1_INT_REG & STX1_INT_REG                            
<20>    PIP      RO       0x0         0         PIP_INT_REG.                                           
<21>    RINT_21  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<22>    ASX0     RO       0x0         0         ASX0_INT_REG                                           
<23>    ASX1     RO       0x0         0         ASX1_INT_REG                                           
<24>    RINT_24  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<25>    RINT_25  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<26>    RINT_26  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<27>    RINT_27  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<28>    RINT_28  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<29>    RINT_29  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<30>    IOB      RO       0x0         0         IOB_INT_SUM                                            
<31>    RINT_31  RO       0x0         0         Set '1' when RSL bLock has an interrupt.               
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


*
*                  NPI_DBG_SELECT = Debug Select Register
*
* Contains the debug select value in last written to the RSLs.
*

     ==============================================================
     NPI_DBG_SELECT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  DBG_SEL  R/W      0           NS        When this register is written its value is sent to     
                                                 all RSLs.
<63:16> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_CTL_STATUS = NPI's Control Status Register
*
* Contains control ans status for NPI.
* Writes to this register are not ordered with writes/reads to the PCI Memory space.
* To ensure that a write has completed the user must read the register before
* making an access(i.e. PCI memory space) that requires the value of this register to be updated.
*

     ==============================================================
     NPI_CTL_STATUS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<9:0>   TIMER    R/W      0           50        When the NPI starts a PP to PCI write it will wait     
                                                 no longer than the value of TIMER in eclks to
                                                 merge additional writes from the PPs into 1
                                                 large write. The values for this field is 1 to
                                                 1024 where a value of '0' is treated as 1024.
<31:10> SPARES0  R/W      0           0         These bits are reserved and should be set to 0.        
<36:32> MAX_WORD R/W      2           0         The maximum number of words to merge into a single     
                                                 write operation from the PPs to the PCI. Legal 
                                                 values are 1 to 32, where a '0' is treated as 32.
<39:37> SPARES1  R/W      0           0         These bits are reserved and should be set to 0.        
<40>    WAIT_COM R/W      0           1         When set '1' casues the NPI to wait for a commit       
                                                 from the L2C before sending additional access to
                                                 the L2C from the PCI.
<41>    PCI_WDIS  R/W     0           0         When set '1' disables access to registers in           
                                                 PNI address range 0x1000 - 0x17FF from the PCI.
<42>    INS0_64B R/W      0           NS        When asserted '1' the instructions read by the         
                                                 gather0 engine are 64-Byte instructions, when  
                                                 de-asserted '0' instructions are 32-byte.
<43>    INS1_64B R/W      0           NS        When asserted '1' the instructions read by the         
                                                 gather1 engine are 64-Byte instructions, when
                                                 de-asserted '0' instructions are 32-byte.
<44>    INS2_64B R/W      0           NS        When asserted '1' the instructions read by the         
                                                 gather2 engine are 64-Byte instructions, when
                                                 de-asserted '0' instructions are 32-byte.
<45>    INS3_64B R/W      0           NS        When asserted '1' the instructions read by the         
                                                 gather3 engine are 64-Byte instructions, when
                                                 de-asserted '0' instructions are 32-byte.
<46>    INS0_ENB  R/W     0           1         When asserted '1' the gather0 engine is enabled.       
                                                 After enabling the values of the associated
                                                 Address and Size Register should not be changed.
<47>    INS1_ENB  R/W     0           1         When asserted '1' the gather1 engine is enabled.       
                                                 After enabling the values of the associated
                                                 Address and Size Register should not be changed.
<48>    INS2_ENB  R/W     0           1         When asserted '1' the gather2 engine is enabled.       
                                                 After enabling the values of the associated
                                                 Address and Size Register should not be changed.
<49>    INS3_ENB  R/W     0           1         When asserted '1' the gather3 engine is enabled.       
                                                 After enabling the values of the associated
                                                 Address and Size Register should not be changed.
<50>    OUT0_ENB  R/W     0           1         When asserted '1' the output0 engine is enabled.       
                                                 After enabling the values of the associated
                                                 Address and Size Register should not be changed.
<51>    OUT1_ENB  R/W     0           1         When asserted '1' the output1 engine is enabled.       
                                                 After enabling the values of the associated
                                                 Address and Size Register should not be changed.
<52>    OUT2_ENB  R/W     0           1         When asserted '1' the output2 engine is enabled.       
                                                 After enabling the values of the associated
                                                 Address and Size Register should not be changed.
<53>    OUT3_ENB  R/W     0           1         When asserted '1' the output3 engine is enabled.       
                                                 After enabling the values of the associated
                                                 Address and Size Register should not be changed.
<54>    DIS_PNIW  R/W     0           1         When asserted '1' access from the PNI Window           
                                                 Registers are disabled.
<62:55> CHIP_REV  RO      NS          NS        The revision of the N3.                                
<63>    NS        RAZ     NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  NPI_INTERRUPT_SUM = NPI Interrupt Summary Register
 *
 * Set when an interrupt condition occurs, write '1' to clear.
 *

     ==============================================================
     NPI_INT_SUM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     RML_RTO  R/W1C    0x0         0         Set '1' when the RML does not receive read data        
                                                 back from a RSL after sending a read command to
                                                 a RSL.                                                                     
<1>     RML_WTO  R/W1C    0x0         0         Set '1' when the RML does not receive a commit         
                                                 back from a RSL after sending a write command to
                                                 a RSL.                                                                     
<2>     PCI_RSL  RO       0x0         0         This '1' when a bit in PCI_INT_SUM2 is SET and the     
                                                 corresponding bit in the PCI_INT_ENB2 is SET.
<3>     PO0_2SML R/W1C    0x0         0         The packet being sent out on Port0 is smaller          
                                                 than the NPI_BUFF_SIZE_OUTPUT0[ISIZE] field.
<4>     PO1_2SML R/W1C    0x0         0         The packet being sent out on Port1 is smaller          
                                                 than the NPI_BUFF_SIZE_OUTPUT1[ISIZE] field.
<5>     PO2_2SML R/W1C    0x0         0         The packet being sent out on Port2 is smaller          
                                                 than the NPI_BUFF_SIZE_OUTPUT2[ISIZE] field.
<6>     PO3_2SML R/W1C    0x0         0         The packet being sent out on Port3 is smaller          
                                                 than the NPI_BUFF_SIZE_OUTPUT3[ISIZE] field.
<7>     I0_RTOUT R/W1C    0x0         0         Port-0 had a read timeout while attempting to          
                                                 read instructions.
<8>     I1_RTOUT R/W1C    0x0         0         Port-1 had a read timeout while attempting to          
                                                 read instructions.
<9>     I2_RTOUT R/W1C    0x0         0         Port-2 had a read timeout while attempting to          
                                                 read instructions.
<10>    I3_RTOUT R/W1C    0x0         0         Port-3 had a read timeout while attempting to          
                                                 read instructions.
<11>    I0_OVERF R/W1C    0x0         0         Port-0 had a doorbell overflow. Bit[31] of the         
                                                 doorbell count was set.
<12>    I1_OVERF R/W1C    0x0         0         Port-1 had a doorbell overflow. Bit[31] of the         
                                                 doorbell count was set.
<13>    I2_OVERF R/W1C    0x0         0         Port-2 had a doorbell overflow. Bit[31] of the         
                                                 doorbell count was set.
<14>    I3_OVERF R/W1C    0x0         0         Port-3 had a doorbell overflow. Bit[31] of the         
                                                 doorbell count was set.
<15>    P0_RTOUT R/W1C    0x0         0         Port-0 had a read timeout while attempting to          
                                                 read packet data.
<16>    P1_RTOUT R/W1C    0x0         0         Port-1 had a read timeout while attempting to          
                                                 read packet data.
<17>    P2_RTOUT R/W1C    0x0         0         Port-2 had a read timeout while attempting to          
                                                 read packet data.
<18>    P3_RTOUT R/W1C    0x0         0         Port-3 had a read timeout while attempting to          
                                                 read packet data.
<19>    P0_PERR  R/W1C    0x0         0         If a parity error occured on the port's packet         
                                                 data this bit may be set.
<20>    P1_PERR  R/W1C    0x0         0         If a parity error occured on the port's packet         
                                                 data this bit may be set.
<21>    P2_PERR  R/W1C    0x0         0         If a parity error occured on the port's packet         
                                                 data this bit may be set.
<22>    P3_PERR  R/W1C    0x0         0         If a parity error occured on the port's packet         
                                                 data this bit may be set.
<23>    G0_RTOUT R/W1C    0x0         0         Port-0 had a read timeout while attempting to          
                                                 read a gather list.
<24>    G1_RTOUT R/W1C    0x0         0         Port-1 had a read timeout while attempting to          
                                                 read a gather list.
<25>    G2_RTOUT R/W1C    0x0         0         Port-2 had a read timeout while attempting to          
                                                 read a gather list.
<26>    G3_RTOUT R/W1C    0x0         0         Port-3 had a read timeout while attempting to          
                                                 read a gather list.
<27>    P0_PPERR R/W1C    0x0         0         If a parity error occured on the port DATA/INFO        
                                                 pointer-pair, this bit may be set.
<28>    P1_PPERR R/W1C    0x0         0         If a parity error occured on the port DATA/INFO        
                                                 pointer-pair, this bit may be set.
<29>    P2_PPERR R/W1C    0x0         0         If a parity error occured on the port DATA/INFO        
                                                 pointer-pair, this bit may be set.
<30>    P3_PPERR R/W1C    0x0         0         If a parity error occured on the port DATA/INFO        
                                                 pointer-pair, this bit may be set.
<31>    P0_PTOUT R/W1C    0x0         0         Port-0 output had a read timeout on a DATA/INFO         
                                                 pair.
<32>    P1_PTOUT R/W1C    0x0         0         Port-1 output had a read timeout on a DATA/INFO         
                                                 pair.
<33>    P2_PTOUT R/W1C    0x0         0         Port-2 output had a read timeout on a DATA/INFO         
                                                 pair.
<34>    P3_PTOUT R/W1C    0x0         0         Port-3 output had a read timeout on a DATA/INFO         
                                                 pair.
<35>    I0_PPERR R/W1C    0x0         0         If a parity error occured on the port's instruction     
                                                 this bit may be set.
<36>    I1_PPERR R/W1C    0x0         0         If a parity error occured on the port's instruction     
                                                 this bit may be set.
<37>    I2_PPERR R/W1C    0x0         0         If a parity error occured on the port's instruction     
                                                 this bit may be set.
<38>    I3_PPERR R/W1C    0x0         0         If a parity error occured on the port's instruction     
                                                 this bit may be set.
<39>    WIN_RTO  R/W1C    0x0         0         Windowed Load Timed Out.                                
<40>    P_DPERR  R/W1C    0x0         0         If a parity error occured on data written to L2C        
                                                 from the PCI this bit may be set.
<41>    IOBDMA   R/W1C    0x0         0         Requested IOBDMA read size exceeded 128 words.          
<42>    FCR_S_E  R/W1C    0x0         0         Attempted to subtract when FPA Credits is empty.       
                                                 PASS3 Field.
<43>    FCR_A_F  R/W1C    0x0         0         Attempted to add when FPA Credits is full.             
                                                 PASS3 Field.
<44>    PCR_S_E  R/W1C    0x0         0         Attempted to subtract when POW Credits is empty.       
                                                 PASS3 Field.
<45>    PCR_A_F  R/W1C    0x0         0         Attempted to add when POW Credits is full.             
                                                 PASS3 Field.
<46>    Q2_S_E   R/W1C    0x0         0         Attempted to subtract when Queue-2 FIFO is empty.      
                                                 PASS3 Field.
<47>    Q2_A_F   R/W1C    0x0         0         Attempted to add when Queue-2 FIFO is full.            
                                                 PASS3 Field.
<48>    Q3_S_E   R/W1C    0x0         0         Attempted to subtract when Queue-3 FIFO is empty.      
                                                 PASS3 Field.
<49>    Q3_A_F   R/W1C    0x0         0         Attempted to add when Queue-3 FIFO is full.            
                                                 PASS3 Field.
<50>    COM_S_E  R/W1C    0x0         0         Attempted to subtract when PCN-Commit Counter is 0.    
                                                 PASS3 Field.
<51>    COM_A_F  R/W1C    0x0         0         Attempted to add when PCN-Commit Counter is max.       
                                                 PASS3 Field.
<52>    PNC_S_E  R/W1C    0x0         0         Attempted to subtract when PNI-NPI Credits are 0.      
                                                 PASS3 Field.
<53>    PNC_A_F  R/W1C    0x0         0         Attempted to add when PNI-NPI Credits are max.         
                                                 PASS3 Field.
<54>    RWX_S_E  R/W1C    0x0         0         Attempted to subtract when RDN-XFR-Wait count is 0.    
                                                 PASS3 Field.
<55>    RDX_S_E  R/W1C    0x0         0         Attempted to subtract when DPI-XFR-Wait count is 0.    
                                                 PASS3 Field.
<56>    PCF_P_E  R/W1C    0x0         0         Attempted to pop an empty PCN-CNT-FIFO.                
                                                 PASS3 Field.
<57>    PCF_P_F  R/W1C    0x0         0         Attempted to push a full PCN-CNT-FIFO.                 
                                                 PASS3 Field.
<58>    PDF_P_E  R/W1C    0x0         0         Attempted to pop an empty PCN-DATA-FIFO.               
                                                 PASS3 Field.
<59>    PDF_P_F  R/W1C    0x0         0         Attempted to push a full PCN-DATA-FIFO.                
                                                 PASS3 Field.
<60>    Q1_S_E   R/W1C    0x0         0         Attempted to subtract when Queue-1 FIFO is empty.      
                                                 PASS3 Field.
<61>    Q1_A_F   R/W1C    0x0         0         Attempted to add when Queue-1 FIFO is full.            
                                                 PASS3 Field.
<63:62> NS       RAZ      NS          NS        Reserved                                                
----------------------------------------------------------------------------------------------------
===
     
 
*
*                  NPI_INTERRUPT_ENB = NPI's Interrupt Enable Register
*
* Used to enable the various interrupting conditions of NPI
*

     ==============================================================
     NPI_INT_ENB Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     RML_RTO  R/W      0x0         1         Enables NPI_INT_SUM[RML_RTO] to generate an            
                                                 interrupt.
<1>     RML_WTO  R/W      0x0         1         Enables NPI_INT_SUM[RML_WTO] to generate an            
                                                 interrupt.
<2>     PCI_RSL  R/W      0x0         1         Enables NPI_INT_SUM[PCI_RSL] to generate an            
                                                 interrupt.
<3>     PO0_2SML R/W      0x0         1         Enables NPI_INT_SUM[PO0_2SML] to generate an           
                                                 interrupt.
<4>     PO1_2SML R/W      0x0         1         Enables NPI_INT_SUM[PO1_2SML] to generate an           
                                                 interrupt.
<5>     PO2_2SML R/W      0x0         1         Enables NPI_INT_SUM[PO2_2SML] to generate an           
                                                 interrupt.
<6>     PO3_2SML R/W      0x0         1         Enables NPI_INT_SUM[PO3_2SML] to generate an           
                                                 interrupt.

<7>     I0_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[I0_RTOUT] to generate an           
                                                 interrupt.
<8>     I1_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[I1_RTOUT] to generate an           
                                                 interrupt.
<9>     I2_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[I2_RTOUT] to generate an           
                                                 interrupt.
<10>    I3_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[I3_RTOUT] to generate an           
                                                 interrupt.
<11>    I0_OVERF R/W      0x0         1         Enables NPI_INT_SUM[I0_OVERF] to generate an           
                                                 interrupt.
<12>    I1_OVERF R/W      0x0         1         Enables NPI_INT_SUM[I1_OVERF] to generate an           
                                                 interrupt.
<13>    I2_OVERF R/W      0x0         1         Enables NPI_INT_SUM[I2_OVERF] to generate an           
                                                 interrupt.
<14>    I3_OVERF R/W      0x0         1         Enables NPI_INT_SUM[I3_OVERF] to generate an           
                                                 interrupt.
<15>    P0_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[P0_RTOUT] to generate an           
                                                 interrupt.
<16>    P1_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[P1_RTOUT] to generate an           
                                                 interrupt.
<17>    P2_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[P2_RTOUT] to generate an           
                                                 interrupt.
<18>    P3_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[P3_RTOUT] to generate an           
                                                 interrupt.
<19>    P0_PERR  R/W      0x0         1         Enables NPI_INT_SUM[P0_PERR] to generate an           
                                                 interrupt.
<20>    P1_PERR  R/W      0x0         1         Enables NPI_INT_SUM[P1_PERR] to generate an           
                                                 interrupt.
<21>    P2_PERR  R/W      0x0         1         Enables NPI_INT_SUM[P2_PERR] to generate an           
                                                 interrupt.
<22>    P3_PERR  R/W      0x0         1         Enables NPI_INT_SUM[P3_PERR] to generate an           
                                                 interrupt.
<23>    G0_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[G0_RTOUT] to generate an           
                                                 interrupt.
<24>    G1_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[G1_RTOUT] to generate an           
                                                 interrupt.
<25>    G2_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[G2_RTOUT] to generate an           
                                                 interrupt.
<26>    G3_RTOUT R/W      0x0         1         Enables NPI_INT_SUM[G3_RTOUT] to generate an           
                                                 interrupt.
<27>    P0_PPERR R/W      0x0         1         Enables NPI_INT_SUM[P0_PPERR] to generate an           
                                                 interrupt.
<28>    P1_PPERR R/W      0x0         1         Enables NPI_INT_SUM[P1_PPERR] to generate an           
                                                 interrupt.
<29>    P2_PPERR R/W      0x0         1         Enables NPI_INT_SUM[P2_PPERR] to generate an           
                                                 interrupt.
<30>    P3_PPERR R/W      0x0         1         Enables NPI_INT_SUM[P3_PPERR] to generate an           
                                                 interrupt.
<31>    P0_PTOUT R/W      0x0         1         Enables NPI_INT_SUM[P0_PTOUT] to generate an           
                                                 interrupt.
<32>    P1_PTOUT R/W      0x0         1         Enables NPI_INT_SUM[P1_PTOUT] to generate an           
                                                 interrupt.
<33>    P2_PTOUT R/W      0x0         1         Enables NPI_INT_SUM[P2_PTOUT] to generate an           
                                                 interrupt.
<34>    P3_PTOUT R/W      0x0         1         Enables NPI_INT_SUM[P3_PTOUT] to generate an           
                                                 interrupt.
<35>    I0_PPERR R/W      0x0         1         Enables NPI_INT_SUM[I0_PPERR] to generate an           
                                                 interrupt.
<36>    I1_PPERR R/W      0x0         1         Enables NPI_INT_SUM[I1_PPERR] to generate an           
                                                 interrupt.
<37>    I2_PPERR R/W      0x0         1         Enables NPI_INT_SUM[I2_PPERR] to generate an           
                                                 interrupt.
<38>    I3_PPERR R/W      0x0         1         Enables NPI_INT_SUM[I3_PPERR] to generate an           
                                                 interrupt.
<39>    WIN_RTO  R/W      0x0         1         Enables NPI_INT_SUM[WIN_RTO] to generate an            
                                                 interrupt.
<40>    P_DPERR  R/W      0x0         1         Enables NPI_INT_SUM[P_DPERR] to generate an            
                                                 interrupt.
<41>    IOBDMA   R/W      0x0         1         Enables NPI_INT_SUM[IOBDMA] to generate an             
                                                 interrupt.
<42>    FCR_S_E  R/W      0x0         1         Enables NPI_INT_SUM[FCR_S_E] to generate an            
                                                 interrupt.
<43>    FCR_A_F  R/W      0x0         1         Enables NPI_INT_SUM[FCR_A_F] to generate an            
                                                 interrupt.
<44>    PCR_S_E  R/W      0x0         1         Enables NPI_INT_SUM[PCR_S_E] to generate an            
                                                 interrupt.
<45>    PCR_A_F  R/W      0x0         1         Enables NPI_INT_SUM[PCR_A_F] to generate an            
                                                 interrupt.
<46>    Q2_S_E   R/W      0x0         1         Enables NPI_INT_SUM[Q2_S_E] to generate an             
                                                 interrupt.
<47>    Q2_A_F   R/W      0x0         1         Enables NPI_INT_SUM[Q2_A_F] to generate an             
                                                 interrupt.
<48>    Q3_S_E   R/W      0x0         1         Enables NPI_INT_SUM[Q3_S_E] to generate an             
                                                 interrupt.
<49>    Q3_A_F   R/W      0x0         1         Enables NPI_INT_SUM[Q3_A_F] to generate an             
                                                 interrupt.
<50>    COM_S_E  R/W      0x0         1         Enables NPI_INT_SUM[COM_S_E] to generate an            
                                                 interrupt.
<51>    COM_A_F  R/W      0x0         1         Enables NPI_INT_SUM[COM_A_F] to generate an            
                                                 interrupt.
<52>    PNC_S_E  R/W      0x0         1         Enables NPI_INT_SUM[PNC_S_E] to generate an            
                                                 interrupt.
<53>    PNC_A_F  R/W      0x0         1         Enables NPI_INT_SUM[PNC_A_F] to generate an            
                                                 interrupt.
<54>    RWX_S_E  R/W      0x0         1         Enables NPI_INT_SUM[RWX_S_E] to generate an            
                                                 interrupt.
<55>    RDX_S_E  R/W      0x0         1         Enables NPI_INT_SUM[RDX_S_E] to generate an            
                                                 interrupt.
<56>    PCF_P_E  R/W      0x0         1         Enables NPI_INT_SUM[PCF_P_E] to generate an            
                                                 interrupt.
<57>    PCF_P_F  R/W      0x0         1         Enables NPI_INT_SUM[PCF_P_F] to generate an            
                                                 interrupt.
<58>    PDF_P_E  R/W      0x0         1         Enables NPI_INT_SUM[PDF_P_E] to generate an            
                                                 interrupt.
<59>    PDF_P_F  R/W      0x0         1         Enables NPI_INT_SUM[PDF_P_F] to generate an            
                                                 interrupt.
<60>    Q1_S_E   R/W      0x0         1         Enables NPI_INT_SUM[Q1_S_E] to generate an             
                                                 interrupt.
<61>    Q1_A_F   R/W      0x0         1         Enables NPI_INT_SUM[Q1_A_F] to generate an             
                                                 interrupt.
<63:62> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_MEM_ACCESS_SUBID3 = Memory Access SubId 3Register
*
* Carries Read/Write parameters for PP access to PCI memory that use NPI SubId3.
* Writes to this register are not ordered with writes/reads to the PCI Memory space.
* To ensure that a write has completed the user must read the register before
* making an access(i.e. PCI memory space) that requires the value of this register to be updated.
*

     ==============================================================
     NPI_MEM_ACCESS_SUBID3 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<27:0>  BA       R/W      0x0         NS        PCI Address bits [63:36].                              
<28>    ROW      R/W      0x0         NS        Relax Order on write.                                  
<29>    ROR      R/W      0x0         NS        Relax Read on read.                                    
<30>    NSW      R/W      0x0         NS        No-Snoop on write.                                     
<31>    NSR      R/W      0x0         NS        No-Snoop on read.                                      
<33:32> ESW      R/W      0x0         NS        Endian-Swap on write.                                  
<35:34> ESR      R/W      0x0         NS        Endian-Swap on read.                                   
<36>    NMERGE   R/W      0x0         NS        No Merge. (NOT IN PASS 1 NOR PASS 2)                   
<37>    SHORT    R/W      0x0         NS        Generate CMD-6 on PCI(x) when '1'.                     
                                                 Loads from the cores to the corresponding subid
                                                 that are 32-bits or smaller:
                                                 - Will generate the PCI-X "Memory Read DWORD"
                                                   command in PCI-X mode. (Note that "Memory
                                                   Read DWORD" appears much like an IO read on
                                                   the PCI-X bus.)
                                                 - Will generate the PCI "Memory Read" command
                                                   in PCI-X mode, irrespective of the
                                                   NPI_PCI_READ_CMD[CMD_SIZE] value.
                                                 NOT IN PASS 1 NOR PASS 2
<63:38> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_MEM_ACCESS_SUBID4 = Memory Access SubId 4 Register
*
* Carries Read/Write parameters for PP access to PCI memory that use NPI SubId4.
* Writes to this register are not ordered with writes/reads to the PCI Memory space.
* To ensure that a write has completed the user must read the register before
* making an access(i.e. PCI memory space) that requires the value of this register to be updated.
*

     ==============================================================
     NPI_MEM_ACCESS_SUBID4 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<27:0>  BA       R/W      0x0         NS        PCI Address bits [63:36].                              
<28>    ROW      R/W      0x0         NS        Relax Order on write.                                  
<29>    ROR      R/W      0x0         NS        Relax Read on read.                                    
<30>    NSW      R/W      0x0         NS        No-Snoop on write.                                     
<31>    NSR      R/W      0x0         NS        No-Snoop on read.                                      
<33:32> ESW      R/W      0x0         NS        Endian-Swap on write.                                  
<35:34> ESR      R/W      0x0         NS        Endian-Swap on read.                                   
<36>    NMERGE   R/W      0x0         NS        No Merge. (NOT IN PASS 1 NOR PASS 2)                   
<37>    SHORT    R/W      0x0         NS        Generate CMD-6 on PCI(x) when '1'.                     
                                                 Loads from the cores to the corresponding subid
                                                 that are 32-bits or smaller:
                                                 - Will generate the PCI-X "Memory Read DWORD"
                                                   command in PCI-X mode. (Note that "Memory
                                                   Read DWORD" appears much like an IO read on
                                                   the PCI-X bus.)
                                                 - Will generate the PCI "Memory Read" command
                                                   in PCI-X mode, irrespective of the
                                                   NPI_PCI_READ_CMD[CMD_SIZE] value.
                                                 NOT IN PASS 1 NOR PASS 2
<63:38> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_MEM_ACCESS_SUBID5 = Memory Access SubId 5 Register
*
* Carries Read/Write parameters for PP access to PCI memory that use NPI SubId5.
* Writes to this register are not ordered with writes/reads to the PCI Memory space.
* To ensure that a write has completed the user must read the register before
* making an access(i.e. PCI memory space) that requires the value of this register to be updated.
*

     ==============================================================
     NPI_MEM_ACCESS_SUBID5 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<27:0>  BA       R/W      0x0         NS        PCI Address bits [63:36].                              
<28>    ROW      R/W      0x0         NS        Relax Order on write.                                  
<29>    ROR      R/W      0x0         NS        Relax Read on read.                                    
<30>    NSW      R/W      0x0         NS        No-Snoop on write.                                     
<31>    NSR      R/W      0x0         NS        No-Snoop on read.                                      
<33:32> ESW      R/W      0x0         NS        Endian-Swap on write.                                  
<35:34> ESR      R/W      0x0         NS        Endian-Swap on read.                                   
<36>    NMERGE   R/W      0x0         NS        No Merge. (NOT IN PASS 1 NOR PASS 2)                   
<37>    SHORT    R/W      0x0         NS        Generate CMD-6 on PCI(x) when '1'.                     
                                                 Loads from the cores to the corresponding subid
                                                 that are 32-bits or smaller:
                                                 - Will generate the PCI-X "Memory Read DWORD"
                                                   command in PCI-X mode. (Note that "Memory
                                                   Read DWORD" appears much like an IO read on
                                                   the PCI-X bus.)
                                                 - Will generate the PCI "Memory Read" command
                                                   in PCI-X mode, irrespective of the
                                                   NPI_PCI_READ_CMD[CMD_SIZE] value.
                                                 NOT IN PASS 1 NOR PASS 2
<63:38> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_MEM_ACCESS_SUBID6 = Memory Access SubId 6 Register
*
* Carries Read/Write parameters for PP access to PCI memory that use NPI SubId6.
* Writes to this register are not ordered with writes/reads to the PCI Memory space.
* To ensure that a write has completed the user must read the register before
* making an access(i.e. PCI memory space) that requires the value of this register to be updated.
*

     ==============================================================
     NPI_MEM_ACCESS_SUBID6 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<27:0>  BA       R/W      0x0         NS        PCI Address bits [63:36].                              
<28>    ROW      R/W      0x0         NS        Relax Order on write.                                  
<29>    ROR      R/W      0x0         NS        Relax Read on read.                                    
<30>    NSW      R/W      0x0         NS        No-Snoop on write.                                     
<31>    NSR      R/W      0x0         NS        No-Snoop on read.                                      
<33:32> ESW      R/W      0x0         NS        Endian-Swap on write.                                  
<35:34> ESR      R/W      0x0         NS        Endian-Swap on read.                                   
<36>    NMERGE   R/W      0x0         NS        No Merge. (NOT IN PASS 1 NOR PASS 2)                   
<37>    SHORT    R/W      0x0         NS        Generate CMD-6 on PCI(x) when '1'.                     
                                                 Loads from the cores to the corresponding subid
                                                 that are 32-bits or smaller:
                                                 - Will generate the PCI-X "Memory Read DWORD"
                                                   command in PCI-X mode. (Note that "Memory
                                                   Read DWORD" appears much like an IO read on
                                                   the PCI-X bus.)
                                                 - Will generate the PCI "Memory Read" command
                                                   in PCI-X mode, irrespective of the
                                                   NPI_PCI_READ_CMD[CMD_SIZE] value.
                                                 NOT IN PASS 1 NOR PASS 2
<63:38> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_PCI_READ_CMD = NPI PCI Read Command Register
*
* Controls the type of read command sent.
* Writes to this register are not ordered with writes/reads to the PCI Memory space.
* To ensure that a write has completed the user must read the register before
* making an access(i.e. PCI memory space) that requires the value of this register to be updated.
* Also any previously issued reads/writes to PCI memory space, still stored in the outbound
* FIFO will use the value of this register after it has been updated.
*

     ==============================================================
     NPI_PCI_READ_CMD Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<10:0>  CMD_SIZE R/W      0x9         9         Number bytes to be read is equal to or exceeds this    
                                                 size will cause the PCI in PCI mode to use a
                                                 Memory-Read-Multiple. This register has a value
                                                 from 8 to 2048. A value of 0-7 will be treated as
                                                 a value of 2048.
<63:11> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NUM_DESC_OUTPUT0 = Number Of Descriptors Available For Output 0
*
* The size of the Buffer/Info Pointer Pair ring for Output-0.
*

     ==============================================================
     NPI_NUM_DESC_OUTPUT0 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  SIZE     R/W      0x0         NS        The size of the Buffer/Info Pointer Pair ring.         
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NUM_DESC_OUTPUT1 = Number Of Descriptors Available For Output 1
*
* The size of the Buffer/Info Pointer Pair ring for Output-1.
*

     ==============================================================
     NPI_NUM_DESC_OUTPUT1 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  SIZE     R/W      0x0         NS        The size of the Buffer/Info Pointer Pair ring.         
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NUM_DESC_OUTPUT2 = Number Of Descriptors Available For Output 2
*
* The size of the Buffer/Info Pointer Pair ring for Output-2.
*

     ==============================================================
     NPI_NUM_DESC_OUTPUT2 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  SIZE     R/W      0x0         NS        The size of the Buffer/Info Pointer Pair ring.         
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NUM_DESC_OUTPUT3 = Number Of Descriptors Available For Output 3
*
* The size of the Buffer/Info Pointer Pair ring for Output-3.
*

     ==============================================================
     NPI_NUM_DESC_OUTPUT3 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  SIZE     R/W      0x0         NS        The size of the Buffer/Info Pointer Pair ring.         
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BASE_ADDR_INPUT0 = NPI's Base Address Input 0 Register
*
* The address to start reading Instructions from for Input-0.
*

     ==============================================================
     NPI_BASE_ADDR_INPUT0 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  BADDR    R/W      0x0         NS        The address to read Instruction from for output 0.     
                                                 This address is 8-byte aligned, for this reason
                                                 address bits [2:0] will always be zero.
<2:0>   NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_SIZE_INPUT0 = NPI's Size for Input 0 Register
*
* The size (in instructions) of Instruction Queue-0.
*

     ==============================================================
     NPI_SIZE_INPUT0 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  SIZE     R/W      0x0         NS        The size of the Instruction Queue used by Octane.      
                                                 The value [SIZE] is in Instructions.
                                                 A value of 0 in this field is illegal.
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BASE_ADDR_INPUT1 = NPI's Base Address Input 1 Register
*
* The address to start reading Instructions from for Input-1.
*

     ==============================================================
     NPI_BASE_ADDR_INPUT1 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  BADDR    R/W      0x0         NS        The address to read Instruction from for output 0.     
                                                 This address is 8-byte aligned, for this reason
                                                 address bits [2:0] will always be zero.
<2:0>   NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_SIZE_INPUT1 = NPI's Size for Input 1 Register
*
* The size (in instructions) of Instruction Queue-1.
*

     ==============================================================
     NPI_SIZE_INPUT1 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  SIZE     R/W      0x0         NS        The size of the Instruction Queue used by Octane.      
                                                 The value [SIZE] is in Instructions.
                                                 A value of 0 in this field is illegal.
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BASE_ADDR_INPUT2 = NPI's Base Address Input 2 Register
*
* The address to start reading Instructions from for Input-2.
*

     ==============================================================
     NPI_BASE_ADDR_INPUT2 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  BADDR    R/W      0x0         NS        The address to read Instruction from for output 0.     
                                                 This address is 8-byte aligned, for this reason
                                                 address bits [2:0] will always be zero.
<2:0>   NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_SIZE_INPUT2 = NPI's Size for Input 2 Register
*
* The size (in instructions) of Instruction Queue-2.
*

     ==============================================================
     NPI_SIZE_INPUT2 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  SIZE     R/W      0x0         NS        The size of the Instruction Queue used by Octane.      
                                                 The value [SIZE] is in Instructions.
                                                 A value of 0 in this field is illegal.
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BASE_ADDR_INPUT3 = NPI's Base Address Input 3 Register
*
* The size (in instructions) of Instruction Queue-3.
*

     ==============================================================
     NPI_BASE_ADDR_INPUT3 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  BADDR    R/W      0x0         NS        The address to read Instruction from for output 0.     
                                                 This address is 8-byte aligned, for this reason
                                                 address bits [2:0] will always be zero.
<2:0>   NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_SIZE_INPUT3 = NPI's Size for Input 3 Register
*
* The address to start reading Instructions from for Input-3.
*

     ==============================================================
     NPI_SIZE_INPUT3 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  SIZE     R/W      0x0         NS        The size of the Instruction Queue used by Octane.      
                                                 The value [SIZE] is in Instructions.
                                                 A value of 0 in this field is illegal.
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  PCI_READ_TIMEOUT = PCI Read Timeour Register
*
* The address to start reading Instructions from for Input-3.
*

     ==============================================================
     PCI_READ_TIMEOUT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<30:0>  CNT      R/W      10000       10000     The number of eclk cycles to wait after issuing        
                                                 a read request to the PNI before setting a
                                                 timeout and not expecting the data to return.
                                                 This is considered a fatal condition by the NPI.
<31>    ENB      R/W      0x0         0x1       Enable the use of the Timeout function.                
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


*
*                  NPI_BASE_ADDR_OUTPUT0 = NPI's Base Address Output 0 Register
*
* The address to start reading Instructions from for Output-0.
*

     ==============================================================
     NPI_BASE_ADDR_OUTPUT0 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  BADDR    R/W      0x0         NS        The address to read Instruction from for output 0.     
                                                 This address is 8-byte aligned, for this reason
                                                 address bits [2:0] will always be zero.
<2:0>   NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BASE_ADDR_OUTPUT1 = NPI's Base Address Output 1 Register
*
* The address to start reading Instructions from for Output-1.
*

     ==============================================================
     NPI_BASE_ADDR_OUTPUT1 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  BADDR    R/W      0x0         NS        The address to read Instruction from for output 1.     
                                                 This address is 8-byte aligned, for this reason
                                                 address bits [2:0] will always be zero.
<2:0>   NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BASE_ADDR_OUTPUT2 = NPI's Base Address Output 2 Register
*
* The address to start reading Instructions from for Output-2.
*

     ==============================================================
     NPI_BASE_ADDR_OUTPUT2 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  BADDR    R/W      0x0         NS        The address to read Instruction from for output 2.     
                                                 This address is 8-byte aligned, for this reason
                                                 address bits [2:0] will always be zero.
<2:0>   NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BASE_ADDR_OUTPUT3 = NPI's Base Address Output 3 Register
*
* The address to start reading Instructions from for Output-3.
*

     ==============================================================
     NPI_BASE_ADDR_OUTPUT3 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  BADDR    R/W      0x0         NS        The address to read Instruction from for output 3.     
                                                 This address is 8-byte aligned, for this reason
                                                 address bits [2:0] will always be zero.
<2:0>   NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_PCI_BURST_SIZE = NPI PCI Burst Size Register
*
* Control the number of words the NPI will attempt to read / write to/from the PCI.
*

     ==============================================================
     NPI_PCI_BURST_SIZE Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<6:0>   RD_BRST  R/W      17          64        Number of 8B words to read from PCI in any one         
                                                 read operation. Legal values are 1 to 127, where
                                                 a 0 will be treated as a 1.
                                                 "For reading of packet data value is limited to 64
                                                 in PASS-2."
                                                 This value does not control the size of a read
                                                 caused by an IOBDMA from a PP.
<13:7>  WR_BRST  R/W      16          64        The number of 8B words to write to PCI in any one      
                                                 write operation. A zero is equal to 128. This
                                                 value is used the packet reads and is clamped at
                                                 a max of 112 for dma writes.
<63:14> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BUFF_SIZE_OUTPUT0 = NPI's D/I Buffer Sizes For Output 0
*
* The size in bytes of the Data Bufffer and Information Buffer for output 0.
*

     ==============================================================
     NPI_BUFF_SIZE_OUTPUT0 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  BSIZE    R/W      0x400       NS        The size in bytes of the area pointed to by            
                                                 buffer pointer for output packet data.
<22:16> ISIZE    R/W      0x0         NS        The number of bytes to move to the Info-Pointer        
                                                 from the front of the packet.
                                                 Legal values are 0-120.
<63:23> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BUFF_SIZE_OUTPUT1 = NPI's D/I Buffer Sizes For Output 1
*
* The size in bytes of the Data Bufffer and Information Buffer for output 1.
*

     ==============================================================
     NPI_BUFF_SIZE_OUTPUT1 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  BSIZE    R/W      0x400       NS        The size in bytes of the area pointed to by            
                                                 buffer pointer for output packet data.
<22:16> ISIZE    R/W      0x0         NS        The number of bytes to move to the Info-Pointer        
                                                 from the front of the packet.
                                                 Legal values are 0-120.
<63:23> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BUFF_SIZE_OUTPUT2 = NPI's D/I Buffer Sizes For Output 2
*
* The size in bytes of the Data Bufffer and Information Buffer for output 2.
*

     ==============================================================
     NPI_BUFF_SIZE_OUTPUT2 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  BSIZE    R/W      0x400       NS        The size in bytes of the area pointed to by            
                                                 buffer pointer for output packet data.
<22:16> ISIZE    R/W      0x0         NS        The number of bytes to move to the Info-Pointer        
                                                 from the front of the packet.
                                                 Legal values are 0-120.
<63:23> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BUFF_SIZE_OUTPUT3 = NPI's D/I Buffer Sizes For Output 3
*
* The size in bytes of the Data Bufffer and Information Buffer for output 3.
*

     ==============================================================
     NPI_BUFF_SIZE_OUTPUT3 Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  BSIZE    R/W      0x400       NS        The size in bytes of the area pointed to by            
                                                 buffer pointer for output packet data.
<22:16> ISIZE    R/W      0x0         NS        The number of bytes to move to the Info-Pointer        
                                                 from the front of the packet.
                                                 Legal values are 0-120.
<63:23> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_OUTPUT_CONTROL = NPI's Output Control Register
*
* The address to start reading Instructions from for Output-3.
*

     ==============================================================
     NPI_OUTPUT_CONTROL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     ROR_SL0  R/W      0x0         NS        Enables '1' Relaxed Ordering for Slist0 reads.         
<1>     NSR_SL0  R/W      0x0         NS        Enables '1' NoSnoop for Slist0 reads.                  
<3:2>   ESR_SL0  R/W      0x0         NS        The Endian-Swap-Mode for Slist0 reads.                 
<4>     ROR_SL1  R/W      0x0         NS        Enables '1' Relaxed Ordering for Slist1 reads.         
<5>     NSR_SL1  R/W      0x0         NS        Enables '1' NoSnoop for Slist1 reads.                  
<7:6>   ESR_SL1  R/W      0x0         NS        The Endian-Swap-Mode for Slist1 reads.                 
<8>     ROR_SL2  R/W      0x0         NS        Enables '1' Relaxed Ordering for Slist2 reads.         
<9>     NSR_SL2  R/W      0x0         NS        Enables '1' NoSnoop for Slist2 reads.                  
<11:10> ESR_SL2  R/W      0x0         NS        The Endian-Swap-Mode for Slist2 reads.                 
<12>    ROR_SL3  R/W      0x0         NS        Enables '1' Relaxed Ordering for Slist3 reads.         
<13>    NSR_SL3  R/W      0x0         NS        Enables '1' NoSnoop for Slist3 reads.                  
<15:14> ESR_SL3  R/W      0x0         NS        The Endian-Swap-Mode for Slist3 reads.                 
<16>    IPTR_O0  R/W      0x0         1         Uses the Info-Pointer to store length and data         
                                                 for output-0.
<17>    IPTR_O1  R/W      0x0         1         Uses the Info-Pointer to store length and data         
                                                 for output-1.
<18>    IPTR_O2  R/W      0x0         1         Uses the Info-Pointer to store length and data         
                                                 for output-2.
<19>    IPTR_O3  R/W      0x0         1         Uses the Info-Pointer to store length and data         
                                                 for output-3.
<23:20> SPR0     R/W      0x0         0         Spare-0. PASS3 Change.                                 
<24>    O0_CSRM  R/W      0x0         1         When '1' the address[63:60] to write packet data,      
                                                 comes from the DPTR[63:60] in the scatter-list pair,
                                                 and the RO, NS, ES values come from the O0_ES, 
                                                 O0_NS, O0_RO. When '0' the RO == DPTR[60],
                                                 NS == DPTR[61], ES == DPTR[63:62], the address the
                                                 packet will be written to is ADDR[63:60] ==
                                                 O0_ES[1:0], O0_NS, O0_RO. For Output Port-0.
<25>    O1_CSRM  R/W      0x0         1         When '1' the address[63:60] to write packet data,      
                                                 comes from the DPTR[63:60] in the scatter-list pair,
                                                 and the RO, NS, ES values come from the O1_ES, 
                                                 O1_NS, O1_RO. When '0' the RO == DPTR[60],
                                                 NS == DPTR[61], ES == DPTR[63:62], the address the
                                                 packet will be written to is ADDR[63:60] ==
                                                 O1_ES[1:0], O1_NS, O1_RO. For Output Port-1.
<26>    O2_CSRM  R/W      0x0         1         When '1' the address[63:60] to write packet data,      
                                                 comes from the DPTR[63:60] in the scatter-list pair,
                                                 and the RO, NS, ES values come from the O2_ES, 
                                                 O2_NS, O2_RO. When '0' the RO == DPTR[60],
                                                 NS == DPTR[61], ES == DPTR[63:62], the address the
                                                 packet will be written to is ADDR[63:60] ==
                                                 O2_ES[1:0], O2_NS, O2_RO. For Output Port-2.
<27>    O3_CSRM  R/W      0x0         1         When '1' the address[63:60] to write packet data,      
                                                 comes from the DPTR[63:60] in the scatter-list pair,
                                                 and the RO, NS, ES values come from the O3_ES, 
                                                 O3_NS, O3_RO. When '0' the RO == DPTR[60],
                                                 NS == DPTR[61], ES == DPTR[63:62], the address the
                                                 packet will be written to is ADDR[63:60] ==
                                                 O3_ES[1:0], O3_NS, O3_RO. For Output Port-3.
<28>    O0_RO    R/W      0x0         NS        Relaxed Ordering Enable for Output0 Data.              
<29>    O0_NS    R/W      0x0         NS        NoSnoop Enable for Output0 Data.                       
<31:30> O0_ES    R/W      0x0         NS        Endian Swap for Output0 Data.                          
<32>    O1_RO    R/W      0x0         NS        Relaxed Ordering Enable for Output1 Data.              
<33>    O1_NS    R/W      0x0         NS        NoSnoop Enable for Output1 Data.                       
<35:34> O1_ES    R/W      0x0         NS        Endian Swap for Output1 Data.                          
<36>    O2_RO    R/W      0x0         NS        Relaxed Ordering Enable for Output2 Data.              
<37>    O2_NS    R/W      0x0         NS        NoSnoop Enable for Output2 Data.                       
<39:38> O2_ES    R/W      0x0         NS        Endian Swap for Output2 Data.                          
<40>    O3_RO    R/W      0x0         NS        Relaxed Ordering Enable for Output3 Data.              
<41>    O3_NS    R/W      0x0         NS        NoSnoop Enable for Output3 Data.                       
<43:42> O3_ES    R/W      0x0         NS        Endian Swap for Output3 Data.                          
<44>    P0_BMODE R/W      0x0         0         When set '1' PCI_PKTS_SENT0 register will be           
                                                 updated with the number of bytes in the packet
                                                 sent, when '0' the register will have a value
                                                 of '1' added.
<45>    P1_BMODE R/W      0x0         0         When set '1' PCI_PKTS_SENT1 register will be           
                                                 updated with the number of bytes in the packet
                                                 sent, when '0' the register will have a value
                                                 of '1' added.
<46>    P2_BMODE R/W      0x0         0         When set '1' PCI_PKTS_SENT2 register will be           
                                                 updated with the number of bytes in the packet
                                                 sent, when '0' the register will have a value
                                                 of '1' added.
<47>    P3_BMODE R/W      0x0         0         When set '1' PCI_PKTS_SENT3 register will be           
                                                 updated with the number of bytes in the packet
                                                 sent, when '0' the register will have a value
                                                 of '1' added.
<48>    PKT_RR   R/W      0x0         0         When set '1' the output packet selection will be       
                                                 made with a Round Robin arbitration. When '0'
                                                 the output packet port is fixed in priority,
                                                 where the lower port number has higher priority.
                                                 PASS3 Field
<63:49> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_LOWP_IBUFF_SADDR = DMA Low Priority's Instruction Buffer Starting Address
*
* The address to start reading Instructions from for LOWP.
*

     ==============================================================
     NPI_LOWP_IBUFF_SADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<35:0>  SADDR    R/W      0x0         NS        The starting address to read the first instruction.    
<63:36> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_HIGHP_IBUFF_SADDR = DMA High Priority Instruction Buffer Starting Address
*
* The address to start reading Instructions from for HIGHP.
*

     ==============================================================
     NPI_HIGHP_IBUFF_SADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<35:0>  SADDR    R/W      0x0         NS        The starting address to read the first instruction.    
<63:36> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_LOWP_DBELL = Low Priority Door Bell
*
* The door bell register for the low priority DMA queue.
*

     ==============================================================
     NPI_LOWP_DBELL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  DBELL    R/W      0x0         NS        The value written to this register is added to the     
                                                 number of 8byte words to be read and processes for
                                                 the low priority dma queue.
<63:16> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_HIGHP_DBELL = High Priority Door Bell
*
* The door bell register for the high priority DMA queue.
*

     ==============================================================
     NPI_HIGHP_DBELL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  DBELL    R/W      0x0         NS        The value written to this register is added to the     
                                                 number of 8byte words to be read and processes for
                                                 the high priority dma queue.
<63:16> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_DMA_CONTROL = DMA Control Register
*
* Controls operation of the DMA IN/OUT of the NPI.
*

     ==============================================================
     NPI_DMA_CONTROL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<13:0>  CSIZE    R/W      0x0         NS        The size in words of the DMA Instruction Chunk.        
                                                 This value should only be written once. After
                                                 writing this value a new value will not be
                                                 recognized until the end of the DMA I-Chunk is
                                                 reached.
<14>    LP_ENB   R/W      0x0         1         Enables the Low Priority DMA.                          
                                                 While this bit is disabled '0' then the value
                                                 in the NPI_LOWP_IBUFF_SADDR is re-loaded to the
                                                 starting address of the Low Priority DMA engine.
                                                 PASS-2: When this bit is '0' the value in the
                                                 CSIZE field will be reloaded, for the Low Priority
                                                 DMA Engine.
<15>    HP_ENB   R/W      0x0         1         Enables the High Priority DMA.                         
                                                 While this bit is disabled '0' then the value
                                                 in the NPI_HIGHP_IBUFF_SADDR is re-loaded to the
                                                 starting address of the High Priority DMA engine.
                                                 CSIZE field will be reloaded, for the High Priority
                                                 DMA Engine.
<16>    O_MODE   R/W      0x0         1         Select PCI_POINTER MODE to be used.                    
                                                 '1' use pointer values for address and register
                                                 values for RO, ES, and NS, '0' use register
                                                 values for address and pointer values for
                                                 RO, ES, and NS.
<18:17> O_ES     R/W      0x0         NS        Endian Swap Mode for DMA.                              
<19>    O_NS     R/W      0x0         NS        Nosnoop For DMA.                                       
<20>    O_RO     R/W      0x0         NS        Relaxed Ordering Mode for DMA.                         
<21>    O_ADD1   R/W      0x0         1         When set '1' 1 will be added to the DMA counters,      
                                                 if '0' then the number of bytes in the dma transfer
                                                 will be added to the count register.
<24:22> FPA_QUE  R/W      0x0         NS        The FPA queue that the instruction-chunk page will     
                                                 be returned to when used.
<33:25> DWB_ICHK R/W      0x0         NS        When Instruction Chunks for DMA operations are freed   
                                                 this value is used for the DWB field of the
                                                 operation.
<34>    DWB_DENB R/W      0x0         1         When set '1' the NPI will send a value in the DWB      
                                                 field for a free page operation for the memory
                                                 that contained the data in N3.
<35>    B0_LEND  R/W      0x0         0         When set '1' and the NPI is in the mode to write       
                                                 0 to L2C memory when a DMA is done, the address
                                                 to be written to will be treated as a Little
                                                 Endian address. This field is new to PASS-2.
<63:36> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_PCI_INT_ARB_CFG = Configuration For PCI Arbiter
*
* Controls operation of the Internal PCI Arbiter.  This register should
* only be written when PRST# is asserted.  NPI_PCI_INT_ARB_CFG[EN] should
* only be set when Octane is a host.
*

     ==============================================================
     NPI_PCI_INT_ARB_CFG Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<2:0>  PARK_DEV R/W       0x0         NS        Bus park device. 0-3 External device, 4 = Octane.       
<3>    PARK_MOD R/W       0x0         NS        Bus park mode. 0=park on last, 1=park on device.        
<4>    EN       R/W       0x0         NS        Internal arbiter enable.                                
<7:5>  NS       RAZ       NS          NS        Reserved                                                
<11:8> PCI_OVR  R/W       0x0         NS        PCI Host Mode Bus Speed/Type Override                   
                                                 When in Host Mode(PCI_HOSTMODE pin =1), OCTEON acting
                                                 as the PCI Central Agent, samples the PCI_PCI100, 
                                                 PCI_M66EN and PCI_PCIXCAP pins to determine the 
                                                 'sampled' PCI Bus speed and Bus Type (PCI or PCIX). 
                                                 (see: PCI_CNT_REG[HM_SPEED,HM_PCIX]) 

                                                 However, in some cases, SW may want to override the 
                                                 the 'sampled' PCI Bus Type/Speed, and use some 
                                                 SLOWER Bus frequency.
        
                                                 The PCI_OVR field encoding represents the 'override' 
                                                 PCI Bus Type/Speed which will be used to generate the
                                                 PCI_CLK_OUT and determines the PCI initialization pattern
                                                 driven during PCI_RST_N deassertion. 
  
                                                     PCI_OVR[3]: OVERRIDE (0:DISABLE/1:ENABLE)
                                                     PCI_OVR[2]: BUS TYPE(0:PCI/1:PCIX)
                                                     PCI_OVR[1:0]: BUS SPEED(0:33/1:66/2:100/3:133)

                                                OVERRIDE TYPE SPEED |  Override Configuration 
                                                   [3]   [2]  [1:0] | TYPE       SPEED
                                                  ------------------+-------------------------------
                                                    0     x      xx | No override(uses 'sampled' 
                                                                    | Bus Speed(HM_SPEED) and Bus Type(HM_PCIX)                 
                                                    1     0      00 | PCI Mode    33MHz
                                                    1     0      01 | PCI Mode    66MHz
                                                    1     0      10 | RESERVED (DO NOT USE)
                                                    1     0      11 | RESERVED (DO NOT USE)
                                                    1     1      00 | RESERVED (DO NOT USE)
                                                    1     1      01 | PCIX Mode   66MHz
                                                    1     1      10 | PCIX Mode  100MHz
                                                    1     1      11 | PCIX Mode  133MHz

                                                 NOTES:  
                                                 - NPI_PCI_INT_ARB_CFG[PCI_OVR] has NO EFFECT on 
                                                   PCI_CNT_REG[HM_SPEED,HM_PCIX] (ie: the sampled PCI Bus
                                                   Type/Speed), but WILL EFFECT PCI_CTL_STATUS_2[AP_PCIX]
                                                   which reflects the actual PCI Bus Type(0:PCI/1:PCIX).

                                                 - Software should never 'up' configure the recommended values. 
                                                   In other words, if the 'sampled' Bus Type=PCI(HM_PCIX=0), 
                                                   then SW should NOT attempt to set TYPE[2]=1 for PCIX Mode. 
                                                   Likewise, if the sampled Bus Speed=66MHz(HM_SPEED=01),
                                                   then SW should NOT attempt to 'speed up' the bus [ie:
                                                   SPEED[1:0]=10(100MHz)].     

                                                 - If PCI_OVR<3> is set prior to PCI reset de-assertion 
                                                   in host mode, NPI_PCI_INT_ARB_CFG[PCI_OVR]
                                                   indicates the Bus Type/Speed that OCTEON drove on the 
                                                   DEVSEL/STOP/TRDY pins during reset de-assertion. (user 
                                                   should then ignore the 'sampled' Bus Type/Speed 
                                                   contained in the PCI_CNT_REG[HM_PCIX, HM_SPEED]) fields.

                                                 - If PCI_OVR<3> is clear prior to PCI reset de-assertion 
                                                   in host mode, PCI_CNT_REG[HM_PCIX,HM_SPEED])
                                                   indicates the Bus Type/Speed that OCTEON drove on the 
                                                   DEVSEL/STOP/TRDY pins during reset de-assertion. 
                                      
                                                 *** NOTE: O9N PASS1 Addition

<12>   HOSTMODE RO        NS          NS        PCI Host Mode Pin (sampled for use by software).        
                                                 This bit reflects the sampled PCI_HOSTMODE pin. 
                                                 In HOST Mode, OCTEON drives the PCI_CLK_OUT and 
                                                 PCI initialization pattern during PCI_RST_N deassertion). 

                                                 *** NOTE: O9N PASS1 Addition
 
<63:13> NS      RAZ       NS          NS        Reserved                                                
----------------------------------------------------------------------------------------------------
===


*
*                  NPI_INPUT_CONTROL = NPI's Input Control Register
*
* Control for reads for gather list and instructions.
*

     ==============================================================
     NPI_INPUT_CONTROL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     ROR      R/W      0x0         NS        Enables '1' Relaxed Ordering for reading of            
                                                 gather list and gather instruction.
<2:1>   ESR      R/W      0x0         NS        The Endian-Swap-Mode for reading of                    
                                                 gather list and gather instruction.
<3>     NSR      R/W      0x0         NS        Enables '1' NoSnoop for reading of                     
                                                 gather list and gather instruction.
<4>     USE_CSR  R/W      0x0         1         When set '1' the csr value will be used for            
                                                 ROR, ESR, and NSR. When clear '0' the value in
                                                 DPTR will be used. In turn the bits not used for
                                                 ROR, ESR, and NSR, will be used for bits [63:60]
                                                 of the address used to fetch packet data. 
<5>     D_ROR    R/W      0x0         NS        Enables '1' Relaxed Ordering for reading of            
                                                 gather data.
<7:6>   D_ESR    R/W      0x0         NS        The Endian-Swap-Mode for reading of                    
                                                 gather data.
<8>     D_NSR    R/W      0x0         NS        Enables '1' NoSnoop for reading of                     
                                                 gather data.
<21:9>  PBP_DHI  R/W      0x0         NS        Field when in [PBP] is set to be used in               
                                                 calculating a DPTR.
<22>    PKT_RR   R/W      0x0         0         When set '1' the input packet selection will be        
                                                 made with a Round Robin arbitration. When '0'
                                                 the input packet port is fixed in priority,
                                                 where the lower port number has higher priority.
                                                 PASS3 Field
<63:23> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_DMA_LOWP_COUNTS = NPI's Low Priority DMA Counts
*
* Values for determing the number of instructions for Low Priority DMA in the NPI.
*

     ==============================================================
     NPI_DMA_LOWP_COUNTS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  DBELL    RO       0x0         0         Number of available words of Instructions to read.     
<38:32> FCNT     RO       0x0         0         Number of words in the Instruction FIFO.               
<63:39> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_DMA_HIGHP_COUNTS = NPI's High Priority DMA Counts
*
* Values for determing the number of instructions for High Priority DMA in the NPI.
*

     ==============================================================
     NPI_DMA_HIGHP_COUNTS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  DBELL    RO       0x0         0         Number of available words of Instructions to read.     
<38:32> FCNT     RO       0x0         0         Number of words in the Instruction FIFO.               
<63:39> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_DMA_LOWP_NADDR = NPI's Low Priority DMA Next Ichunk Address
*
* Place NPI will read the next Ichunk data from. This is valid when state is 0
*

     ==============================================================
     NPI_DMA_LOWP_NADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<35:0>  ADDR     RO       0x0         NS        The next L2C address to read DMA instructions          
                                                 from for the Low Priority DMA engine.
<39:36> STATE    RO       0x0         0         The DMA instruction engine state vector.               
                                                 Typical value is 0 (IDLE).
<63:40> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_DMA_HIGHP_NADDR = NPI's High Priority DMA Next Ichunk Address
*
* Place NPI will read the next Ichunk data from. This is valid when state is 0
*

     ==============================================================
     NPI_DMA_HIGHP_NADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<35:0>  ADDR     RO       0x0         NS        The next L2C address to read DMA instructions          
                                                 from for the High Priority DMA engine.
<39:36> STATE    RO       0x0         0         The DMA instruction engine state vector.               
                                                 Typical value is 0 (IDLE).
<63:40> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P0_PAIR_CNTS = NPI's Port-0 Instruction Counts For Packets Out.
*
* Used to determine the number of instruction in the NPI and to be fetched for Output-Packets.
*

     ==============================================================
     NPI_P0_PAIR_CNTS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  AVAIL    RO       0x0         0         Doorbell count to be read.                             
<36:32> FCNT     RO       0x0         0         16 - number entries in the D/I Pair FIFO.              
<63:37> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P1_PAIR_CNTS = NPI's Port-1 Instruction Counts For Packets Out.
*
* Used to determine the number of instruction in the NPI and to be fetched for Output-Packets.
*

     ==============================================================
     NPI_P1_PAIR_CNTS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  AVAIL    RO       0x0         0         Doorbell count to be read.                             
<36:32> FCNT     RO       0x0         0         16 - number entries in the D/I Pair FIFO.              
<63:37> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P2_PAIR_CNTS = NPI's Port-2 Instruction Counts For Packets Out.
*
* Used to determine the number of instruction in the NPI and to be fetched for Output-Packets.
*

     ==============================================================
     NPI_P2_PAIR_CNTS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  AVAIL    RO       0x0         0         Doorbell count to be read.                             
<36:32> FCNT     RO       0x0         0         16 - number entries in the D/I Pair FIFO.              
<63:37> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P3_PAIR_CNTS = NPI's Port-3 Instruction Counts For Packets Out.
*
* Used to determine the number of instruction in the NPI and to be fetched for Output-Packets.
*

     ==============================================================
     NPI_P3_PAIR_CNTS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  AVAIL    RO       0x0         0         Doorbell count to be read.                             
<36:32> FCNT     RO       0x0         0         16 - number entries in the D/I Pair FIFO.              
<63:37> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P0_DBPAIR_ADDR = NPI's Port-0 DATA-BUFFER Pair Next Read Address.
*
* Contains the next address to read for Port's-0 Data/Buffer Pair.
*

     ==============================================================
     NPI_P0_DBPAIR_ADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<60:0>  NADDR    RO       0x0         NS        Bits [63:3] of the next Data-Info Pair to read.        
                                                 Value is only valid when STATE == 0.
<62:61> STATE    RO       0x0         0         POS state machine vector. Used to tell when NADDR      
                                                 is valid (when STATE == 0).
<63>    NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P1_DBPAIR_ADDR = NPI's Port-1 DATA-BUFFER Pair Next Read Address.
*
* Contains the next address to read for Port's-1 Data/Buffer Pair.
*

     ==============================================================
     NPI_P1_DBPAIR_ADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<60:0>  NADDR    RO       0x0         NS        Bits [63:3] of the next Data-Info Pair to read.        
                                                 Value is only valid when STATE == 0.
<62:61> STATE    RO       0x0         0         POS state machine vector. Used to tell when NADDR      
                                                 is valid (when STATE == 0).
<63>    NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P2_DBPAIR_ADDR = NPI's Port-2 DATA-BUFFER Pair Next Read Address.
*
* Contains the next address to read for Port's-2 Data/Buffer Pair.
*

     ==============================================================
     NPI_P2_DBPAIR_ADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<60:0>  NADDR    RO       0x0         NS        Bits [63:3] of the next Data-Info Pair to read.        
                                                 Value is only valid when STATE == 0.
<62:61> STATE    RO       0x0         0         POS state machine vector. Used to tell when NADDR      
                                                 is valid (when STATE == 0).
<63>    NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P3_DBPAIR_ADDR = NPI's Port-3 DATA-BUFFER Pair Next Read Address.
*
* Contains the next address to read for Port's-3 Data/Buffer Pair.
*

     ==============================================================
     NPI_P3_DBPAIR_ADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<60:0>  NADDR    RO       0x0         NS        Bits [63:3] of the next Data-Info Pair to read.        
                                                 Value is only valid when STATE == 0.
<62:61> STATE    RO       0x0         0         POS state machine vector. Used to tell when NADDR      
                                                 is valid (when STATE == 0).
<63>    NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P0_INSTR_CNTS = NPI's Port-0 Instruction Counts For Packets In.
*
* Used to determine the number of instruction in the NPI and to be fetched for Input-Packets.
*

     ==============================================================
     NPI_P0_INSTR_CNTS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  AVAIL    RO       0x0         0         Doorbell count to be read.                             
<37:32> FCNT     RO       0x0         0         Number entries in the Instruction FIFO.                
<63:38> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P1_INSTR_CNTS = NPI's Port-1 Instruction Counts For Packets In.
*
* Used to determine the number of instruction in the NPI and to be fetched for Input-Packets.
*

     ==============================================================
     NPI_P1_INSTR_CNTS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  AVAIL    RO       0x0         0         Doorbell count to be read.                             
<37:32> FCNT     RO       0x0         0         Number entries in the Instruction FIFO.                
<63:38> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P2_INSTR_CNTS = NPI's Port-2 Instruction Counts For Packets In.
*
* Used to determine the number of instruction in the NPI and to be fetched for Input-Packets.
*

     ==============================================================
     NPI_P2_INSTR_CNTS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  AVAIL    RO       0x0         0         Doorbell count to be read.                             
<37:32> FCNT     RO       0x0         0         Number entries in the Instruction FIFO.                
<63:38> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P3_INSTR_CNTS = NPI's Port-3 Instruction Counts For Packets In.
*
* Used to determine the number of instruction in the NPI and to be fetched for Input-Packets.
*

     ==============================================================
     NPI_P3_INSTR_CNTS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  AVAIL    RO       0x0         0         Doorbell count to be read.                             
<37:32> FCNT     RO       0x0         0         Number entries in the Instruction FIFO.                
<63:38> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P0_INSTR_ADDR = NPI's Port-0 Instruction Next Read Address.
*
* Contains the next address to read for Port's-0 Instructions.
*

     ==============================================================
     NPI_P0_INSTR_ADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<60:0>  NADDR    RO       0x0         NS        Bits [63:3] of the next Instruction to read.           
                                                 Value is only valid when STATE == 0.
<63:61> STATE    RO       0x0         0         Gather engine state vector. Used to tell when          
                                                 NADDR is valid (when STATE == 0).
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P1_INSTR_ADDR = NPI's Port-1 Instruction Next Read Address.
*
* Contains the next address to read for Port's-1 Instructions.
*

     ==============================================================
     NPI_P1_INSTR_ADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<60:0>  NADDR    RO       0x0         NS        Bits [63:3] of the next Instruction to read.           
                                                 Value is only valid when STATE == 0.
<63:61> STATE    RO       0x0         0         Gather engine state vector. Used to tell when          
                                                 NADDR is valid (when STATE == 0).
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P2_INSTR_ADDR = NPI's Port-2 Instruction Next Read Address.
*
* Contains the next address to read for Port's-2 Instructions.
*

     ==============================================================
     NPI_P2_INSTR_ADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<60:0>  NADDR    RO       0x0         NS        Bits [63:3] of the next Instruction to read.           
                                                 Value is only valid when STATE == 0.
<63:61> STATE    RO       0x0         0         Gather engine state vector. Used to tell when          
                                                 NADDR is valid (when STATE == 0).
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_P3_INSTR_ADDR = NPI's Port-3 Instruction Next Read Address.
*
* Contains the next address to read for Port's-3 Instructions.
*

     ==============================================================
     NPI_P3_INSTR_ADDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<60:0>  NADDR    RO       0x0         NS        Bits [63:3] of the next Instruction to read.           
                                                 Value is only valid when STATE == 0.
<63:61> STATE    RO       0x0         0         Gather engine state vector. Used to tell when          
                                                 NADDR is valid (when STATE == 0).
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_WIN_READ_TO = NPI WINDOW READ Timeout Register
*
* Number of core clocks to wait before timing out on a WINDOW-READ to the NCB.
*

     ==============================================================
     NPI_WIN_READ_TO Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  TIME     R/W      0x0         0x20000   Time to wait in core clocks. A value of 0 will         
                                                 cause no timeouts.
<63:32> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  DBG_DATA = Debug Data Register
*
* Value returned on the debug-data lines from the RSLs
*

     ==============================================================
     DBG_DATA Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<16:0>  DATA      RO       0x0         NS        Value on the debug data lines.                         
<17>    DSEL_EXT  R/W      1           0         Allows changes in the external pins to set the         
                                                  debug select value.
<22:18>  C_MUL     RO       NS          NS        C_MUL pins sampled at DCOK assertion                   
<28:23>  REM       RO       NS          NS        Remaining debug_select pins sampled at DCOK            
<63:29>  NS        RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_PORT_BP_CONTROL = Port Backpressure Control
*
* Enables Port Level Backpressure
*

     ==============================================================
     NPI_PORT_BP_CONTROL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   ENB      R/W      0xF         0xF       Enables port level backpressure from the IPD.          
<7:4>   BP_ON    RO       0x0         0x0       Port 35-32 port level backpressure applied.            
<63:8>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_PORT32_INSTR_HDR = NPI Port 32 Instruction Header
*
* Contains bits [62:42] of the Instruction Header for port 32. Added for PASS-2.
*

     ==============================================================
     NPI_PORT32_INSTR_HDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<5:0>   RSV_A    R/W      0x0         NS        Reserved                                               
<12:6>  SKP_LEN  R/W      0x0         NS        Skip Length. Used when USE_IHDR is set and packet      
                                                 is not raw and PBP is not set.
<13>    RSV_B    R/W      0x0         NS        Reserved                                               
                                                 instruction header sent to IPD.
<15:14> PAR_MODE R/W      0x0         NS        Parse Mode. Used when USE_IHDR is set and packet       
                                                 is not raw and PBP is not set.
<20:16> RSV_C    R/W      0x0         NS        Reserved                                               
<21>    USE_IHDR R/W      0x0         NS        When set '1' the instruction header will be sent       
                                                 as part of the packet data, regardless of the
                                                 value of bit [63] of the instruction header.
                                                 USE_IHDR must be set whenever PBP is set.
<27:22> RSV_D    R/W      0x0         NS        Reserved                                               
<34:28> RSKP_LEN R/W      0x8         NS        Skip Length. Used when packet is raw and PBP==0.       
<35>    RSV_E    R/W      0x0         NS        Reserved                                               
<37:36> RPARMODE R/W      0x0         NS        Parse Mode. Used when packet is raw and PBP==0.        
<42:38> RSV_F    R/W      0x0         NS        Reserved                                               
<43>    PBP      R/W      0x0         NS        Enable Packet-by-packet mode.                          
<63:44> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


*                  NPI_PORT33_INSTR_HDR = NPI Port 33 Instruction Header
*
* Contains bits [62:42] of the Instruction Header for port 33. Added for PASS-2.
*

     ==============================================================
     NPI_PORT33_INSTR_HDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<5:0>   RSV_A    R/W      0x0         NS        Reserved                                               
<12:6>  SKP_LEN  R/W      0x0         NS        Skip Length. Used when USE_IHDR is set and packet      
                                                 is not raw and PBP is not set.
<13>    RSV_B    R/W      0x0         NS        Reserved                                               
                                                 instruction header sent to IPD.
<15:14> PAR_MODE R/W      0x0         NS        Parse Mode. Used when USE_IHDR is set and packet       
                                                 is not raw and PBP is not set.
<20:16> RSV_C    R/W      0x0         NS        Reserved                                               
<21>    USE_IHDR R/W      0x0         NS        When set '1' the instruction header will be sent       
                                                 as part of the packet data, regardless of the
                                                 value of bit [63] of the instruction header.
                                                 USE_IHDR must be set whenever PBP is set.
<27:22> RSV_D    R/W      0x0         NS        Reserved                                               
<34:28> RSKP_LEN R/W      0x8         NS        Skip Length. Used when packet is raw and PBP==0.       
<35>    RSV_E    R/W      0x0         NS        Reserved                                               
<37:36> RPARMODE R/W      0x0         NS        Parse Mode. Used when packet is raw and PBP==0.        
<42:38> RSV_F    R/W      0x0         NS        Reserved                                               
<43>    PBP      R/W      0x0         NS        Enable Packet-by-packet mode.                          
<63:44> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


*                  NPI_PORT34_INSTR_HDR = NPI Port 34 Instruction Header
*
* Contains bits [62:42] of the Instruction Header for port 34. Added for PASS-2.
*

     ==============================================================
     NPI_PORT34_INSTR_HDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<5:0>   RSV_A    R/W      0x0         NS        Reserved                                               
<12:6>  SKP_LEN  R/W      0x0         NS        Skip Length. Used when USE_IHDR is set and packet      
                                                 is not raw and PBP is not set.
<13>    RSV_B    R/W      0x0         NS        Reserved                                               
                                                 instruction header sent to IPD.
<15:14> PAR_MODE R/W      0x0         NS        Parse Mode. Used when USE_IHDR is set and packet       
                                                 is not raw and PBP is not set.
<20:16> RSV_C    R/W      0x0         NS        Reserved                                               
<21>    USE_IHDR R/W      0x0         NS        When set '1' the instruction header will be sent       
                                                 as part of the packet data, regardless of the
                                                 value of bit [63] of the instruction header.
                                                 USE_IHDR must be set whenever PBP is set.
<27:22> RSV_D    R/W      0x0         NS        Reserved                                               
<34:28> RSKP_LEN R/W      0x8         NS        Skip Length. Used when packet is raw and PBP==0.       
<35>    RSV_E    R/W      0x0         NS        Reserved                                               
<37:36> RPARMODE R/W      0x0         NS        Parse Mode. Used when packet is raw and PBP==0.        
<42:38> RSV_F    R/W      0x0         NS        Reserved                                               
<43>    PBP      R/W      0x0         NS        Enable Packet-by-packet mode.                          
<63:44> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


*                  NPI_PORT35_INSTR_HDR = NPI Port 35 Instruction Header
*
* Contains bits [62:42] of the Instruction Header for port 35. Added for PASS-2.
*

     ==============================================================
     NPI_PORT35_INSTR_HDR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<5:0>   RSV_A    R/W      0x0         NS        Reserved                                               
<12:6>  SKP_LEN  R/W      0x0         NS        Skip Length. Used when USE_IHDR is set and packet      
                                                 is not raw and PBP is not set.
<13>    RSV_B    R/W      0x0         NS        Reserved                                               
                                                 instruction header sent to IPD.
<15:14> PAR_MODE R/W      0x0         NS        Parse Mode. Used when USE_IHDR is set and packet       
                                                 is not raw and PBP is not set.
<20:16> RSV_C    R/W      0x0         NS        Reserved                                               
<21>    USE_IHDR R/W      0x0         NS        When set '1' the instruction header will be sent       
                                                 as part of the packet data, regardless of the
                                                 value of bit [63] of the instruction header.
                                                 USE_IHDR must be set whenever PBP is set.
<27:22> RSV_D    R/W      0x0         NS        Reserved                                               
<34:28> RSKP_LEN R/W      0x8         NS        Skip Length. Used when packet is raw and PBP==0.       
<35>    RSV_E    R/W      0x0         NS        Reserved                                               
<37:36> RPARMODE R/W      0x0         NS        Parse Mode. Used when packet is raw and PBP==0.        
<42:38> RSV_F    R/W      0x0         NS        Reserved                                               
<43>    PBP      R/W      0x0         NS        Enable Packet-by-packet mode.                          
<63:44> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*                  NPI_COMP_CTL = PCI Compensation Control
*
* PCI Compensation Control
*

     ==============================================================
     NPI_COMP_CTL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<4:0>   NCTL     R/W      0x10        NS        Bypass value for NCTL                                  
<9:5>   PCTL     R/W      0x10        NS        Bypass value for PCTL                                  
<63:10> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  NPI_BIST_STATUS = NPI's BIST Status Register
*
* Results from BIST runs of NPI's memories.
*

     ==============================================================
     NPI_BIST_STATUS Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     DPI_BS   RO       0x0         0         BIST Status for the dpi_fifo                           
<1>     PDF_BS   RO       0x0         0         BIST Status for the pdf_fifo                           
<2>     DOB_BS   RO       0x0         0         BIST Status for the dob_fifo                           
<3>     NUS_BS   RO       0x0         0         BIST Status for the nus_fifo                           
<4>     POS_BS   RO       0x0         0         BIST Status for the pos_fifo                           
<5>     POF3_BS  RO       0x0         0         BIST Status for the pof3_fifo                          
<6>     POF2_BS  RO       0x0         0         BIST Status for the pof2_fifo                          
<7>     POF1_BS  RO       0x0         0         BIST Status for the pof1_fifo                          
<8>     POF0_BS  RO       0x0         0         BIST Status for the pof0_fifo                          
<9>     PIG_BS   RO       0x0         0         BIST Status for the pig_fifo                           
<10>    PGF_BS   RO       0x0         0         BIST Status for the pgf_fifo                           
<11>    RDNL_BS  RO       0x0         0         BIST Status for the rdn_length_fifo                    
<12>    PCAD_BS  RO       0x0         0         BIST Status for the pca_data_fifo                      
<13>    PCAC_BS  RO       0x0         0         BIST Status for the pca_cmd_fifo                       
<14>    RDN_BS   RO       0x0         0         BIST Status for the rdn_fifo                           
<15>    PCN_BS   RO       0x0         0         BIST Status for the pcn_fifo                           
<16>    PCNC_BS  RO       0x0         0         BIST Status for the pcn_cnt_fifo                       
<17>    RDP_BS   RO       0x0         0         BIST Status for the rdp_fifo                           
<18>    DIF_BS   RO       0x0         0         BIST Status for the dif_fifo                           
<19>    CSR_BS   RO       0x0         0         BIST Status for the csr_fifo                           
<63:20> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===



//                Registers at address 0x1000 -> 0x17FF are PNI
// Start at 0x100 into range
// these are shifted by 2 to the left to make address

//                Registers at address 0x1800 -> 0x18FF are CFG
// these are shifted by 2 to the left to make address


//
//           PCI_CFG00 = First 32-bits of PCI config space (PCI Vendor + Device)
//
// This register contains the first 32-bits of the PCI config space registers
//

     ==============================================================
     PCI_CFG00 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:16> DEVID     RO       0x40         0x40     This is the device ID for OCTEON (90nm shhrink)        
<15:0>  VENDID    RO       0x177D      0x177D    This is the Cavium's vendor ID                         
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG01 = Second 32-bits of PCI config space (Command/Status Register)
//

     ==============================================================
     PCI_CFG01 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31>    DPE       R/W1C    0           0         Detected Parity Error                                   
<30>    SSE       R/W1C    0           0         Signaled System Error                                   
<29>    RMA       R/W1C    0           0         Received Master Abort                                   
<28>    RTA       R/W1C    0           0         Received Target Abort                                   
<27>    STA       R/W1C    0           0         Signaled Target Abort                                   
<26:25> DEVT      RO       1           1         DEVSEL# timing (for PCI only/for PCIX = don't care)     
<24>    MDPE      R/W1C    0           0         Master Data Parity Error                                
<23>    FBB       RO       1           NS        Fast Back-to-Back Transactions Capable                  
                                                 Mode Dependent (1 = PCI Mode / 0 = PCIX Mode)
<22>    NS        RAZ      NS          NS        Reserved                                                
<21>    M66       RO       1           1         66MHz Capable                                           
<20>    CLE       RO       1           1         Capabilities List Enable                                
<19>    I_STAT    RO       0           0         When INTx# is asserted by OCTEON this bit will be set.  
                                                 When deasserted by OCTEON this bit will be cleared.
<18:11> NS        RAZ      NS          NS        Reserved                                                
<10>    I_DIS     R/W      0           0         When asserted '1' disables the generation of INTx#      
                                                 by OCTEON. When disabled '0' allows assertion of INTx# 
                                                 by OCTEON.
<9>     FBBE      R/W      0           1         Fast Back to Back Transaction Enable                    
<8>     SEE       R/W      0           1         System Error Enable                                     
<7>     ADS       RO       0           0         Address/Data Stepping                                   
                                                 NOTE: Octeon does NOT support address/data stepping.
<6>     PEE       R/W      0           1         PERR# Enable                                            
<5>     VPS       RO       0           0         VGA Palette Snooping                                    
<4>     MWICE     R/W      0           0         Memory Write & Invalidate Command Enable                
<3>     SCSE      RO       0           0         Special Cycle Snooping Enable                           

<2>     ME        R/W      0           1         Master Enable                                           
                                                 Must be set for OCTEON to master a PCI/PCI-X
                                                 transaction. This should always be set any time
                                                 that OCTEON is connected to a PCI/PCI-X bus.

<1>     MSAE      R/W      0           1         Memory Space Access Enable                              
                                                 Must be set to recieve a PCI/PCI-X memory space
                                                 transaction. This must always be set any time that
                                                 OCTEON is connected to a PCI/PCI-X bus.

<0>     ISAE      RO       0           0         I/O Space Access Enable                                 
                                                 NOTE: For OCTEON, this bit MUST NEVER be set
                                                 (it is read-only and OCTEON does not respond to I/O
                                                 Space accesses).
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG02 = Third 32-bits of PCI config space (Class Code / Revision ID)
//

     ==============================================================
     PCI_CFG02 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:8>  CC        RO       0x0B3000   0x0B3000    Class Code (Processor/MIPS)                            
                                                  (was 0x100000 in pass 1 and pass 2)
<7:0>   RID       RO       0x0          0x0       Revision ID                                            
                                                  (0 in pass 1, 1 in pass 1.1, 8 in pass 2.0)
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG03 = Fourth 32-bits of PCI config space (BIST, HEADER Type, Latency timer, line size)
//

     ==============================================================
     PCI_CFG03 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31>    BCAP      RO       0           0         BIST Capable                                           
<30>    BRB       R/W      0           0         BIST Request/busy bit                                  
                                                  Note: OCTEON does not support PCI BIST, therefore
                                                  this bit should remain zero. 
<29:28> NS        RAZ      NS          NS        Reserved                                               
<27:24> BCOD      RO       0           0         BIST Code                                              
<23:16> HT        RO       0           0         Header Type (Type 0)                                   
<15:8>  LT        R/W      0           0x40      Latency Timer                                          
                                                  (0=PCI)                 (0=PCI)                                               
                                                  (0x40=PCIX)             (0x40=PCIX)                                   
<7:0>   CLS       R/W      0           NS        Cache Line Size                                        
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG04 = Fifth 32-bits of PCI config space (Base Address Register 0 - Low)
// 
// Description: BAR0: 4KB 64-bit Prefetchable Memory Space 
//       [0]:     0 (Memory Space)
//       [2:1]:   2 (64bit memory decoder)
//       [3]:     1 (Prefetchable)
//       [11:4]:  RAZ (to imply 4KB space)
//       [31:12]: RW (User may define base address)
// 

     ==============================================================
     PCI_CFG04 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:12> LBASE     R/W      0x0         NS        Base Address[31:12]                                    
                                                 Base Address[30:12] read as zero if
                                                 PCI_CTL_STATUS_2[BB0] is set (in pass 3+)
<11:4>  LBASEZ    RO       0x0         0x0       Base Address[11:4] (Read as Zero)                      
<3>     PF        RO       1           1         Prefetchable Space                                     
<2:1>   TYP       RO       0x2         0x2       Type (00=32b/01=below 1MB/10=64b/11=RSV)               
<0>     MSPC      RO       0           0         Memory Space Indicator                                 
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG05 = Sixth 32-bits of PCI config space (Base Address Register 0 - High)
//

     ==============================================================
     PCI_CFG05 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  HBASE     R/W      0x0         NS        Base Address[63:32]                                    
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG06 = Seventh 32-bits of PCI config space (Base Address Register 1 - Low)
//  
// Description: BAR1: 128MB 64-bit Prefetchable Memory Space
//       [0]:     0 (Memory Space)
//       [2:1]:   2 (64bit memory decoder)
//       [3]:     1 (Prefetchable)
//       [26:4]:  RAZ (to imply 128MB space)
//       [31:27]: RW (User may define base address)
//

     ==============================================================
     PCI_CFG06 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:27> LBASE     R/W      0x0         NS        Base Address[31:27]                                    
                                                 In pass 3+:
                                                   Base Address[29:27] read as zero if
                                                    PCI_CTL_STATUS_2[BB1] is set
                                                   Base Address[30] reads as zero if
                                                    PCI_CTL_STATUS_2[BB1] is set and
                                                    PCI_CTL_STATUS_2[BB1_SIZE] is set
<26:4>  LBASEZ    RO       0x0         0x0       Base Address[26:4] (Read as Zero)                      
<3>     PF        RO       1           1         Prefetchable Space                                     
<2:1>   TYP       RO       0x2         0x2       Type (00=32b/01=below 1MB/10=64b/11=RSV)               
<0>     MSPC      RO       0           0         Memory Space Indicator                                 
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG07 = Eighth 32-bits of PCI config space (Base Address Register 1 - High)
//

     ==============================================================
     PCI_CFG07 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  HBASE     R/W      0x0         NS        Base Address[63:32]                                    
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG08 = Ninth 32-bits of PCI config space (Base Address Register 2 - Low)
//
// Description: BAR1: 2^39 (512GB) 64-bit Prefetchable Memory Space
//       [0]:     0 (Memory Space)
//       [2:1]:   2 (64bit memory decoder)
//       [3]:     1 (Prefetchable)
//       [31:4]:  RAZ 
//

     ==============================================================
     PCI_CFG08 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:4>  LBASEZ    RO       0x0         0x0       Base Address[31:4] (Read as Zero)                      
<3>     PF        RO       1           1         Prefetchable Space                                     
<2:1>   TYP       RO       0x2         0x2       Type (00=32b/01=below 1MB/10=64b/11=RSV)               
<0>     MSPC      RO       0           0         Memory Space Indicator                                 
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG09 = Tenth 32-bits of PCI config space (Base Address Register 2 - High)
//

     ==============================================================
     PCI_CFG09 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:7>  HBASE     R/W      0x0         NS        Base Address[63:39]                                    
<6:0>   HBASEZ    RO       0x0         0x0       Base Address[38:31]  (Read as Zero)                    
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG10 = Eleventh 32-bits of PCI config space (Card Bus CIS Pointer)
//

     ==============================================================
     PCI_CFG10 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  CISP      RO       0           0         CardBus CIS Pointer (UNUSED)                           
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG11 = Twelfth 32-bits of PCI config space (SubSystem ID/Subsystem Vendor ID Register)
//

     ==============================================================
     PCI_CFG11 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:16> SSID      RO       1           1         SubSystem ID                                           
<15:0>  SSVID     RO       0x177D      0x177D    Subsystem Vendor ID                                    
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG12 = Thirteenth 32-bits of PCI config space (Expansion ROM Base Address Register)
//

     ==============================================================
     PCI_CFG12 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:16> ERBAR     R/W      0           NS        Expansion ROM Base Address[31:16] 64KB in size         
<15:11> ERBARZ    RO       0x0         0x0       Expansion ROM Base Base Address (Read as Zero)         
<10:1>  NS        RAZ      NS          NS        Reserved                                               
<0>     ERBAR_EN  R/W      0           0         Expansion ROM Address Decode Enable                    
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG13 = Fourteenth 32-bits of PCI config space (Capabilities Pointer Register)
//

     ==============================================================
     PCI_CFG13 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:8>  NS        RAZ       NS          NS        Reserved                                              
<7:0>   CP        RO        0xE0        0xE0      Capabilities Pointer                                  
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG15 = Sixteenth 32-bits of PCI config space (INT/ARB/LATENCY Register)
//

     ==============================================================
     PCI_CFG15 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:24> ML        RO       0x40        0x40      Maximum Latency                                        
<23:16> MG        RO       0x40        0x40      Minimum Grant                                          
<15:8>  INTA      RO       1           1         Interrupt Pin (INTA#)                                  
<7:0>   IL        R/W      0           NS        Interrupt Line                                         
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG16 = Seventeenth 32-bits of PCI config space (Target Implementation Register)
//

     ==============================================================
     PCI_CFG16 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31>    TRDNPR    R/W1C    0            0        Target Read Delayed Transaction for I/O and            
                                                  non-prefetchable regions discarded.
<30>    TRDARD    R/W1C    0            0        Target Read Delayed Transaction for all regions        
                                                  discarded.  
<29>    RDSATI    R/W      0            0        Target(I/O and Memory) Read Delayed/Split at           
                                                  timeout/immediately (default timeout).
                                                 Note: OCTEON requires that this bit MBZ(must be zero). 
<28>    TRDRS     R/W      0            0        Target(I/O and Memory) Read Delayed/Split or Retry     
                                                  select (of the application interface is not ready)
                                                   0 = Delayed Split Transaction
                                                   1 = Retry Transaction (always Immediate Retry, no
                                                       AT_REQ to application).
<27>    TRTAE     R/W      0            0        Target(I/O and Memory) Read Target Abort Enable        
                                                  (if application interface is not ready at the
                                                  latency timeout).
                                                  Note: OCTEON as target will never target-abort,
                                                  therefore this bit should never be set.
<26>    TWSEI     R/W      0            0        Target(I/O) Write Split Enable (at timeout /           
                                                  immediately; default timeout)
<25>    TWSEN     R/W      0            0        T(I/O) write split Enable (if the application          
                                                  interface is not ready)
<24>    TWTAE     R/W      0            0        Target(I/O and Memory) Write Target Abort Enable       
                                                  (if the application interface is not ready at the
                                                  start of the cycle).
                                                  Note: OCTEON as target will never target-abort,
                                                  therefore this bit should never be set.
<23>    TMAE      R/W      0            0        Target(Read/Write) Master Abort Enable; check          
                                                  at the start of each transaction.
                                                  Note: This bit can be used to force a Master
                                                  Abort when OCTEON is acting as the intended target
                                                  device.
<22:20> TSLTE     R/W      0            0        Target Subsequent(2nd-last) Latency Timeout Enable     
                                                  Valid range: [1..7] and 0=8. 
<19:16> TILT      R/W      0            0        Target Initial(1st data) Latency Timeout in PCI        
                                                  ModeValid range: [8..15] and 0=16. 
<15:4>  PBE       R/W      0            0        Programmable Boundary Enable to disconnect/prefetch    
                                                  for target burst read cycles to prefetchable
                                                  region in PCI. A value of 1 indicates end of
                                                  boundary (64 KB down to 16 Bytes).
<3>     DPPMR     R/W      0            0        Disconnect/Prefetch to prefetchable memory             
                                                  regions Enable. Prefetchable memory regions
                                                  are always disconnected on a region boundary.
                                                  Non-prefetchable regions for PCI are always
                                                  disconnected on the first transfer.
                                                  Note: OCTEON as target will never target-disconnect,
                                                  therefore this bit should never be set.
<2>     NS        RAZ      NS           NS       Reserved                                               
<1>     TSWC      R/W      0            0        Target Split Write Control                             
                                                    0 = Blocks all requests except PMW
                                                    1 = Blocks all requests including PMW until
                                                        split completion occurs.
<0>     MLTD      R/W      0            1        Master Latency Timer Disable                           
                                                 Note: For OCTEON, it is recommended that this bit
                                                 be set(to disable the Master Latency timer).
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG17 = Eighteenth 32-bits of PCI config space (Target Split Completion Message
//           Enable Register)
//

     ==============================================================
     PCI_CFG17 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  TSCME     R/W1C    0            NS       Target Split Completion Message Enable                 
                                                  [31:30]: 00
                                                  [29]: Split Completion Error Indication
                                                  [28]: 0
                                                  [27:20]: Split Completion Message Index
                                                  [19:0]: 0x00000
                                                 For OCTEON, this register is intended for debug use 
                                                 only. (as such, it is recommended NOT to be written 
                                                 with anything other than ZEROES).                    
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG18 = Nineteenth 32-bits of PCI config space (Target Delayed/Split Request
//                        Pending Sequences)
//

     ==============================================================
     PCI_CFG18 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  TDSRPS    R/W1C    0            0        Target Delayed/Split Request Pending Sequences         
                                                 The application uses this address to remove a 
                                                 pending split sequence from the target queue by 
                                                 clearing the appropriate bit. Example: Clearing [14] 
                                                 clears the pending sequence #14. An application
                                                 or configuration write to this address can clear this 
                                                 register. 
                                                 For OCTEON, this register is intended for debug use 
                                                 only and MUST NEVER be written with anything other 
                                                 than ZEROES.                                                      
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG19 = Twentieth 32-bits of PCI config space (Master/Target Implementation Register)
//

     ==============================================================
     PCI_CFG19 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31>    MRBCM     R/W      1           1         Master Request (Memory Read) Byte Count/Byte           
                                                 Enable select.
                                                   0 = Byte Enables valid. In PCI mode, a burst
                                                       transaction cannot be performed using
                                                       Memory Read command=4'h6.
                                                   1 = DWORD Byte Count valid (default). In PCI
                                                       Mode, the memory read byte enables are
                                                       automatically generated by the core.
                                                  NOTE:  For OCTEON, this bit must always be one
                                                  for proper operation.
<30>    MRBCI     R/W      0           0         Master Request (I/O and CR cycles) byte count/byte     
                                                 enable select.
                                                   0 = Byte Enables valid (default)
                                                   1 = DWORD byte count valid
                                                  NOTE: For OCTEON, this bit must always be zero
                                                  for proper operation (in support of
                                                  Type0/1 Cfg Space accesses which require byte
                                                  enable generation directly from a read mask). 
<29>    MDWE      R/W      0           0         Master (Retry) Deferred Write Enable (allow            
                                                 read requests to pass).
                                                  NOTE: Applicable to PCI Mode I/O and memory
                                                  transactions only.
                                                   0 = New read requests are NOT accepted until
                                                       the current write cycle completes. [Reads
                                                       cannot pass writes]
                                                   1 = New read requests are accepted, even when
                                                       there is a write cycle pending [Reads can
                                                       pass writes].
                                                  NOTE: For OCTEON, this bit must always be zero
                                                  for proper operation.
<28>    MDRE      R/W      0           0         Master (Retry) Deferred Read Enable (Allows            
                                                 read/write requests to pass).
                                                  NOTE: Applicable to PCI mode I/O and memory
                                                  transactions only.
                                                   0 = New read/write requests are NOT accepted
                                                       until the current read cycle completes.
                                                       [Read/write requests CANNOT pass reads]
                                                   1 = New read/write requests are accepted, even
                                                       when there is a read cycle pending.
                                                       [Read/write requests CAN pass reads]
                                                  NOTE: For OCTEON, this bit must always be zero
                                                  for proper operation.
<27>    MDRIMC    R/W      0           0         Master I/O Deferred/Split Request Outstanding          
                                                 Maximum Count
                                                   0 = MDRRMC[26:24]
                                                   1 = 1
<26:24> MDRRMC    R/W      2           2         Master Deferred Read Request Outstanding Max           
                                                 Count (PCI only).
                                                  CR4C[26:24]  Max SAC cycles   MAX DAC cycles
                                                   000              8                4
                                                   001              1                0
                                                   010              2                1
                                                   011              3                1
                                                   100              4                2
                                                   101              5                2
                                                   110              6                3
                                                   111              7                3
                                                  For example, if these bits are programmed to
                                                  100, the core can support 2 DAC cycles, 4 SAC
                                                  cycles or a combination of 1 DAC and 2 SAC cycles.
                                                  NOTE: For the PCI-X maximum outstanding split
                                                  transactions, refer to CRE0[22:20] 
<23:16> TMES      RO        0          0         Target/Master Error Sequence #                         
<15>    TECI      RO        0          0         Target Error Command Indication                        
                                                  0 = Delayed/Split
                                                  1 = Others
<14>    TMEI      RO        0          0         Target/Master Error Indication                         
                                                  0 = Target
                                                  1 = Master 
<13>    TMSE      R/W1C     0          0         Target/Master System Error. This bit is set            
                                                  whenever ATM_SERR_O is active.
<12>    TMDPES    R/W1C     0          0         Target/Master Data PERR# error status. This            
                                                  bit is set whenever ATM_DATA_PERR_O is active. 
<11>    TMAPES    R/W1C     0          0         Target/Master Address PERR# error status. This         
                                                  bit is set whenever ATM_ADDR_PERR_O is active. 
<10:9>  NS        RAZ       NS         NS        Reserved      
<8>     TIBCD     R/W1C     0          0         Target Illegal I/O DWORD byte combinations detected.   
<7>     TIBDE     R/W       0          0         Target Illegal I/O DWORD byte detection enable         
<6>     NS        RAZ       NS         NS        Reserved      
<5>     TIDOMC    R/W       0          0         Target I/O Delayed/Split request outstanding           
                                                  maximum count.
                                                   0 = TDOMC[4:0]
                                                   1 = 1
<4:0>   TDOMC     R/W       1          1         Target Delayed/Split request outstanding maximum       
                                                  count. [1..31] and 0=32.
                                                  NOTE: If the user programs these bits beyond the
                                                  Designed Maximum outstanding count, then the
                                                  designed maximum table depth will be used instead.
                                                  No additional Deferred/Split transactions will be
                                                  accepted if this outstanding maximum count
                                                  is reached. Furthermore, no additional 
                                                  deferred/split transactions will be accepted if
                                                  the I/O delay/ I/O Split Request outstanding 
                                                  maximum is reached. 
                                                  NOTE: For OCTEON in PCI Mode, this field MUST BE
                                                  programmed to 1. (OCTEON can only handle 1 delayed 
                                                  read at a time).
                                                  For OCTEON in PCIX Mode, this field can range from 
                                                  1-4. (The designed maximum table depth is 4 
                                                  for PCIX mode splits).
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG20 = Twenty-first 32-bits of PCI config space (Master Deferred/Split Sequence Pending)
//

     ==============================================================
     PCI_CFG20 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  MDSP      R/W1C    0            NS       Master Deferred/Split sequence Pending                 
                                                 For OCTEON, this register is intended for debug use 
                                                 only and MUST NEVER be written with anything other 
                                                 than ZEROES.                                                      
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG21 = Twenty-second 32-bits of PCI config space (Master Split Completion Message Register)
//

     ==============================================================
     PCI_CFG21 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  SCMRE      R/W1C    0          NS        Master Split Completion message received with          
                                                 error message. 
                                                 For OCTEON, this register is intended for debug use 
                                                 only and MUST NEVER be written with anything other 
                                                 than ZEROES.                                                      
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG22 = Twenty-third 32-bits of PCI config space (Master Arbiter Control Register)
//

     ==============================================================
     PCI_CFG22 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:25> MAC       R/W      0            0        Master Arbiter Control                                 
                                                  [31:26]: Used only in Fixed Priority mode
                                                           (when [25]=1)
                                                  [31:30]: MSI Request
                                                     00 = Highest Priority
                                                     01 = Medium Priority
                                                     10 = Lowest Priority
                                                     11 = RESERVED
                                                  [29:28]: Target Split Completion
                                                     00 = Highest Priority
                                                     01 = Medium Priority
                                                     10 = Lowest Priority
                                                     11 = RESERVED
                                                  [27:26]: New Request; Deferred Read,Deferred Write
                                                     00 = Highest Priority
                                                     01 = Medium Priority
                                                     10 = Lowest Priority
                                                     11 = RESERVED
                                                  [25]: Fixed/Round Robin Priority Selector
                                                     0 = Round Robin
                                                     1 = Fixed 
                                                  NOTE: When [25]=1(fixed priority), the three levels
                                                  [31:26] MUST BE programmed to have mutually exclusive 
                                                  priority levels for proper operation. (Failure to do
                                                  so may result in PCI hangs).
                                        
<24:19> NS         RAZ     NS           NS       Reserved                                               
<18>    FLUSH      R/W     1            1        AM_DO_FLUSH_I control                                  
                                                 NOTE: This bit MUST BE ONE for proper OCTEON operation
<17>    MRA        R/W1C   0            0        Master Retry Aborted                                   
<16>    MTTA       R/W1C   0            0        Master TRDY timeout aborted                            
<15:8>  MRV        R/W     0            0xFF     Master Retry Value [1..255] and 0=infinite             
<7:0>   MTTV       R/W     0            0        Master TRDY timeout value [1..255] and 0=disabled      
                                                  NOTE: For OCTEON, this bit must always be zero
                                                  for proper operation. (OCTEON does not support 
                                                  master TRDY timeout - target is expected to be 
                                                  well behaved).
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG56 = Fifty-seventh 32-bits of PCI config space (PCIX Capabilities Register)
//

     ==============================================================
     PCI_CFG56 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:23> NS        RAZ       NS          NS       RESERVED                                               
<22:20> MOST      R/W       0x3         0x3      Maximum outstanding Split transactions                 
                                                   Encoded Value    #Max outstanding splits
                                                       000                   1
                                                       001                   2
                                                       010                   3
                                                       011                   4
                                                       100                   8
                                                       101                   8(clamped)
                                                       110                   8(clamped)
                                                       111                   8(clamped)
                                                 NOTE: OCTEON only supports upto a MAXIMUM of 8 
                                                 outstanding master split transactions. 
<19:18> MMBC      R/W       0           0        Maximum Memory Byte Count                              
                                                         [0=512B,1=1024B,2=2048B,3=4096B]                        
                                                 NOTE: OCTEON does not support this field and has
                                                 no effect on limiting the maximum memory byte count. 
<17>    ROE       R/W       1           1        Relaxed Ordering Enable                                
<16>    DPERE     R/W       0           0        Data Parity Error Recovery Enable                      
<15:8>  NCP       RO        0xE8        0xE8     Next Capability Pointer                                
<7:0>   PXCID     RO        7           7        PCI-X Capability ID                                    
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG57 = Fifty-eigth 32-bits of PCI config space (PCIX Status Register)
//

     ==============================================================
     PCI_CFG57 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:30> NS        RAZ       NS          NS        RESERVED                                              
<29>    SCEMR     R/W1C     0           NS        Split Completion Error Message Received               
<28:26> MCRSD     RO        7           7         Maximum Cumulative Read Size designed                 
<25:23> MOSTD     RO        3           3         Maximum Outstanding Split transaction designed        
<22:21> MMRBCD    RO        2           2         Maximum Memory Read byte count designed               
<20>    DC        RO        0           0         Device Complexity                                     
                                                          0 = Simple Device
                                                          1 = Bridge Device
<19>    USC       R/W1C     0           NS        Unexpected Split Completion                           
<18>    SCD       R/W1C     0           NS        Split Completion Discarded                            
<17>    M133      RO        1           1         133MHz Capable                                        
<16>    W64       RO        1           1         Indicates a 32b(=0) or 64b(=1) device                 
<15:8>  BN        RO        0x11        NS        Bus Number. Updated on all configuration write        
                           (0x11=PCI)             cycles. Its value is dependent upon the PCI/X
                           (0xFF=PCIX)            mode. 
<7:3>   DN        RO        0x1F        0x1F      Device Number. Updated on all configuration           
                                                  write cycles. 
<2:0>   FN        RO        0           0         Function Number                                       
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG58 = Fifty-ninth 32-bits of PCI config space (Power Management Capabilities Register)
//

     ==============================================================
     PCI_CFG58 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:27> PMES       RO       0          0          PME Support (D0 to D3cold)                            
<26>    D2S        RO       0          0          D2_Support                                            
<25>    D1S        RO       0          0          D1_Support                                            
<24:22> AUXC       RO       0          0          AUX_Current (0..375mA)                                
<21>    DSI        RO       0          0          Device Specific Initialization                        
<20>    NS         RAZ      NS         NS         Reserved                                              
<19>    PMEC       RO       0          0          PME Clock                                             
<18:16> PCIMIV     RO       2          2          Indicates the version of the PCI                      
                                                   Management      
                                                    Interface Specification with which the core
                                                    complies.
                                                      010b = Complies with PCI Management Interface
                                                      Specification Revision 1.1 
<15:8>  NCP        RO       0xF0       0xF0       Next Capability Pointer                               
<7:0>   PMCID      RO       1          1          Power Management Capability ID                        
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG59 = Sixtieth 32-bits of PCI config space (Power Management Data/PMCSR Register(s))
//

     ==============================================================
     PCI_CFG59 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:24> PMDIA      RO       0          0          Power Management data input from application          
                                                        (PME_DATA)
<23>    BPCCEN     RO       0          0          BPCC_En (bus power/clock control) enable              
<22>    BD3H       RO       0          0          B2_B3#, B2/B3 Support for D3hot                       
<21:16> NS         RAZ      NS         NS         Reserved                                              
<15>    PMESS      R/W1C    0          0          PME_Status sticky bit                                 
<14:13> PMEDSIA    RO       0          0          PME_Data_Scale input from application                 
                                Device                  (PME_DATA_SCALE[1:0])
                                Specific
<12:9>  PMDS       R/W      0          0          Power Management Data_select                          
<8>     PMEENS     R/W       0          0          PME_En sticky bit      
<7:2>   NS         RAZ      NS         NS         RESERVED                                              
<1:0>   PS         R/W      0          0          Power State (D0 to D3)                                
                                                   The N2 DOES NOT support D1/D2 Power Management
                                                   states, therefore writing to this register has
                                                   no effect (please refer to the PCI Power 
                                                   Management
                                                   Specification v1.1 for further details about
                                                   it?s R/W nature. This is not a conventional
                                                   R/W style register.
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG60 = Sixty-first 32-bits of PCI config space (MSI Capabilities Register)
//

     ==============================================================
     PCI_CFG60 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:24> NS         RAZ      NS          NS       RESERVED                                               
<23>    M64        RO       1           1        32/64 b message                                        
<22:20> MME        R/W      0           0        Multiple Message Enable(1,2,4,8,16,32)                 
<19:17> MMC        RO       0           0        Multiple Message Capable(0=1,1=2,2=4,3=8,4=16,5=32)    
<16>    MSIEN      R/W      0           0        MSI Enable                                             
<15:8>  NCP        RO       0           0        Next Capability Pointer                                
<7:0>   MSICID     RO       0x5         0x5      MSI Capability ID                                      
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG61 = Sixty-second 32-bits of PCI config space (MSI Lower Address Register)
//

     ==============================================================
     PCI_CFG61 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:2>  MSI31t2    R/W      0          NS        App Specific    MSI Address [31:2]                     
<1:0>   NS         RAZ      NS         NS        RESERVED                                               
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG62 = Sixty-third 32-bits of PCI config space (MSI Upper Address Register)
//

     ==============================================================
     PCI_CFG62 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  MSI        R/W      0          NS         MSI Address [63:32]                                   
----------------------------------------------------------------------------------------------------
===

//
//           PCI_CFG63 = Sixty-fourth 32-bits of PCI config space (MSI Message Data Register)
//

     ==============================================================
     PCI_CFG63 Type=PCICONFIG
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:16> NS         RAZ      NS         NS         RESERVED                                              
<15:0>  MSIMD      R/W      0          NS         MSI Message Data                                      
----------------------------------------------------------------------------------------------------
===


 *
 * PIP_BIST_STATUS = PIP's BIST Results
 *

     ==============================================================
     PIP_BIST_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:18> RSVRD    RAZ      NS          NS        Reserved                                           |   
<17:0>  BIST     RO       0x0         0         BIST Results.                                      |   
                                                  HW sets a bit in BIST for for memory that fails   |
                                                  BIST.                                             |
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_INT_REG = PIP's Interrupt Register
 *
 * Any exception event that occurs is captured in the PIP_INT_REG.
 * PIP_INT_REG will set the exception bit regardless of the value
 * of PIP_INT_EN.  PIP_INT_EN only controls if an interrupt is
 * raised to software.
 *

     ==============================================================
     PIP_INT_REG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:9>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<8>     BEPERR   R/W1C    0x0         0         Parity Error in back end memory                    |   
<7>     FEPERR   R/W1C    0x0         0         Parity Error in front end memory                   |   
<6>     TODOOVR  R/W1C    0x0         0         Todo list overflow (see PIP_BCK_PRS[HIWATER])      |   
<5>     SKPRUNT  R/W1C    0x0         0         Packet was engulfed by skipper                     |   
                                                  This interrupt can occur with received PARTIAL    |
                                                  packets that are truncated to SKIP bytes or       |
                                                  smaller.                                          |
<4>     BADTAG   R/W1C    0x0         0         A bad tag was sent from IPD                        |   
<3>     PRTNXA   R/W1C    0x0         0         Non-existent port                                  |   
<2>     BCKPRS   R/W1C    0x0         0         PIP asserted backpressure                          |   
<1>     CRCERR   R/W1C    0x0         0         PIP calculated bad CRC                             |   
<0>     PKTDRP   R/W1C    0x0         0         Packet Dropped due to QOS                          |   

Notes:
* TODOOVR
  The PIP Todo list stores packets that have been received and require work
  queue entry generation.  PIP will normally assert backpressure when the
  list fills up such that any error is normally is result of a programming
  the PIP_BCK_PRS[HIWATER] incorrectly.  PIP itself can handle 29M
  packets/sec @500MHz or 15Gbs @ 64B packets.

* SKPRUNT
  If a packet size is less then the amount programmed in the per port
  skippers, then there will be nothing to parse and the entire packet will
  basically be skipped over.  This is probably not what the user desired, so
  there is an indication to software.

* BADTAG
  A tag is considered bad when it is resued by a new packet before it was
  released by PIP.  PIP considers a tag released by one of two methods.
  . QOS dropped so that it is released over the pip__ipd_release bus.
  . WorkQ entry is validated by the pip__ipd_done signal

* PRTNXA
  If PIP receives a packet that is not in the valid port range, the port
  processed will be mapped into the valid port space (the mapping is
  currently unpredictable) and the PRTNXA bit will be set.  PRTNXA will be
  set for packets received under the following conditions:

  * packet ports (ports 0-31)
    - GMX_INF_MODE[TYPE]==0 (RGMII),  received port is 4-15 or 20-31
    - GMX_INF_MODE[TYPE]==1 (SPI4.2), all ports are valid and PRTNXA will not assert
  * upper ports (pci ports 32-63)
    - received port is 40-63

* BCKPRS
  PIP can assert backpressure to the receive logic when the todo list
  exceeds a high-water mark (see PIP_BCK_PRS for more details).  When this
  occurs, PIP can raise an interrupt to software.

* CRCERR
  Octane can compute CRC in two places.  Each RGMII port will compute its
  own CRC, but Spi4 CRC will be computed in PIP.  PCI will never include CRC
  - that bus is parity protected.  If PIP computes a bad Spi4 CRC (or RGMII
  CRC if the user has enabled it), then PIP will raise an interrupt.

* PKTDRP
  PIP can drop packets based on QOS results received from IPD.  If the QOS
  algorithm decides to drop a packet, PIP will assert an interrupt.
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_INT_EN = PIP's Interrupt Enable Register
 *
 * Determines if hardward should raise an interrupt to software
 * when an exception event occurs.
 *

     ==============================================================
     PIP_INT_EN Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:9>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<8>     BEPERR   R/W      0x0         0         Parity Error in back end memory                    |   
<7>     FEPERR   R/W      0x0         0         Parity Error in front end memory                   |   
<6>     TODOOVR  R/W      0x0         0         Todo list overflow (see PIP_BCK_PRS[HIWATER])      |   
<5>     SKPRUNT  R/W      0x0         0         Packet was engulfed by skipper                     |   
<4>     BADTAG   R/W      0x0         0         A bad tag was sent from IPD                        |   
<3>     PRTNXA   R/W      0x0         0         Non-existent port                                  |   
<2>     BCKPRS   R/W      0x0         0         PIP asserted backpressure                          |   
<1>     CRCERR   R/W      0x0         0         PIP calculated bad CRC                             |   
<0>     PKTDRP   R/W      0x0         0         Packet Dropped due to QOS                          |   
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_STAT_CTL = PIP's Stat Control Register
 *
 * Controls how the PIP statistics counters are handled.
 *

     ==============================================================
     PIP_STAT_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<0>     RDCLR    R/W      0x1         1         Stat registers are read and clear                  |   
                                                  0 = stat registers hold value when read           |
                                                  1 = stat registers are cleared when read          |
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_GBL_CTL = PIP's Global Control Register
 *
 * Global control information.  These are the global checker enables for
 * IPv4/IPv6 and TCP/UDP parsing.  The enables effect all ports.
 *

     ==============================================================
     PIP_GBL_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:20> RSVRD1   RAZ      0           NS        Reserved                                           |   
<19:17> SPARE    R/W      0           0         Spare Bits                                         |   
<16>    IGNRS    R/W      0           0         Ignore the PKT_INST_HDR[RS] bit when set           |   
                                                  Only applies to the packet interface prts (0-31)  |
                                                  When using 2-byte instruction header words,       |
                                                  either PIP_PRT_CFG[DYN_RS] or IGNRS should be set |
                                                  (PASS2 only)                                      |
<15>    VS_WQE   R/W      0           0         Which VLAN CFI and ID to use when VLAN Stacking    |   
                                                  0=use the 1st (network order) VLAN                |
                                                  1=use the 2nd (network order) VLAN                |
                                                  (PASS2 only)                                      |
<14>    VS_QOS   R/W      0           0         Which VLAN priority to use when VLAN Stacking      |   
                                                  0=use the 1st (network order) VLAN                |
                                                  1=use the 2nd (network order) VLAN                |
                                                  (PASS2 only)                                      |
<13>    L2_MAL   R/W      1           1         Enable L2 malformed packet check                   |   
<12>    TCP_FLAG R/W      1           1         Enable TCP flags checks                            |   
<11>    L4_LEN   R/W      1           1         Enable TCP/UDP length check                        |   
<10>    L4_CHK   R/W      1           1         Enable TCP/UDP checksum check                      |   
<9>     L4_PRT   R/W      1           1         Enable TCP/UDP illegal port check                  |   
<8>     L4_MAL   R/W      1           1         Enable TCP/UDP malformed packet check              |   
<7:6>   RSVRD0   RAZ      0           NS        Reserved                                           |   
<5:4>   IP6_EEXT R/W      1           3         Enable IPv6 early extension headers                |   
<3>     IP4_OPTS R/W      1           1         Enable IPv4 options check                          |   
<2>     IP_HOP   R/W      1           1         Enable TTL (IPv4) / hop (IPv6) check               |   
<1>     IP_MAL   R/W      1           1         Enable malformed check                             |   
<0>     IP_CHK   R/W      1           1         Enable IPv4 header checksum check                  |   

Notes:
The following text describes the conditions in which each checker will
assert and flag an exception.  By disabling the checker, the exception will
not be flagged and the packet will be parsed as best it can.  Note, by
disabling conditions, packets can be parsed incorrectly (.i.e. IP_MAL and
L4_MAL could cause bits to be seen in the wrong place.  IP_CHK and L4_CHK
means that the packet was corrupted).

* IP_CHK
  Indicates that an IPv4 packet contained an IPv4 header checksum
  violations.  Only applies to packets classified as IPv4.

* IP_MAL
  Indicates that the packet was malformed.  Malformed packets are defined as
  packets that are not long enough to cover the IP header or not long enough
  to cover the length in the IP header.

* IP_HOP
  Indicates that the IPv4 TTL field or IPv6 HOP field is zero.

* IP4_OPTS
  Indicates the presence of IPv4 options.  It is set when the length != 5.
  This only applies to packets classified as IPv4.

* IP6_EEXT
  Indicate the presence of IPv6 early extension headers.  These bits only
  apply to packets classified as IPv6.  Bit 0 will flag early extensions
  when next_header is any one of the following...

        - hop-by-hop (0)
        - destination (60)
        - routing (43)

  Bit 1 will flag early extentions when next_header is NOT any of the
  following...

        - TCP (6)
        - UDP (17)
        - fragmentation (44)
        - ICMP (58)
        - IPSEC ESP (50)
        - IPSEC AH (51)
        - IPCOMP

* L4_MAL
  Indicates that a TCP or UDP packet is not long enough to cover the TCP or
  UDP header.

* L4_PRT
  Indicates that a TCP or UDP packet has an illegal port number - either the
  source or destination port is zero.

* L4_CHK
  Indicates that a packet classified as either TCP or UDP contains an L4
  checksum failure

* L4_LEN
  Indicates that the TCP or UDP length does not match the the IP length.

* TCP_FLAG
  Indicates any of the following conditions...

        {URG, ACK, PSH, RST, SYN, FIN} : tcp_flag
        6'b000001: (FIN only)
        6'b000000: (0)
        6'bxxx1x1: (RST+FIN+*)
        6'b1xxx1x: (URG+SYN+*)
        6'bxxx11x: (RST+SYN+*)
        6'bxxxx11: (SYN+FIN+*)
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_GBL_CFG = PIP's Global Config Register
 *
 * Global config information that applies to all ports.
 *

     ==============================================================
     PIP_GBL_CFG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:19> RSVRD2   RAZ      NS          NS        Reserved                                           |   
<18>    TAG_SYN  R/W      0           0         Do not include src_crc for TCP/SYN&!ACK packets    |   
                                                  0 = include src_crc                               |
                                                  1 = tag hash is dst_crc for TCP/SYN&!ACK packets  |
<17>    IP6_UDP  R/W      1           1         IPv6/UDP checksum is not optional                  |   
                                                  0 = Allow optional checksum code                  |
                                                  1 = Do not allow optional checksum code           |
<16>    MAX_L2   R/W      0           0         Config bit to choose the largest L2 frame size     |   
                                                  Chooses the value of the L2 Type/Length field     |
                                                  to classify the frame as length.                  |
                                                  0 = 1500 / 0x5dc                                  |
                                                  1 = 1535 / 0x5ff                                  |
<15:11> RSVRD1   RAZ      NS          NS        Reserved                                           |   
<10:8>  RAW_SHF  R/W      0           0         RAW Packet shift amount                            |   
                                                  Number of bytes to pad a packet that has been     |
                                                  received on a PCI RAW port.                       |
<7:3>   RSVRD0   RAZ      NS          NS        Reserved                                           |   
<2:0>   NIP_SHF  R/W      0           0         Non-IP shift amount                                |   
                                                  Number of bytes to pad a packet that has been     |
                                                  classified as not IP.                             |

Notes:
* IP6_UDP
  IPv4 allows optional UDP checksum by sending the all 0's patterns.  IPv6
  outlaws this and the spec says to always check UDP checksum.  This mode
  bit allows the user to treat IPv6 as IPv4, meaning that the all 0's
  pattern will cause a UDP checksum pass.
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_SFT_RST = PIP Soft Reset
 *
 * When written to a '1', resets the pip block
 *

     ==============================================================
     PIP_SFT_RST Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  NS       RAZ      NS          NS        Reserved                                           |   
<0>     RST      R/W      0x0         0x0       Soft Reset                                         |   

Notes:
When RST is set to a '1' by SW, PIP will get a short reset pulse (3 cycles
in duration).  Although this will reset much of PIP's internal state, some
CSRs will not reset.

. PIP_BIST_STATUS
. PIP_STAT0_PRT*
. PIP_STAT1_PRT*
. PIP_STAT2_PRT*
. PIP_STAT3_PRT*
. PIP_STAT4_PRT*
. PIP_STAT5_PRT*
. PIP_STAT6_PRT*
. PIP_STAT7_PRT*
. PIP_STAT8_PRT*
. PIP_STAT9_PRT*
. PIP_STAT_INB_PKTS*
. PIP_STAT_INB_OCTS*
. PIP_STAT_INB_ERRS*
. PIP_TAG_INC*
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_BCK_PRS = PIP's Back Pressure Register
 *
 * When to assert backpressure based on the todo list filling up
 *

     ==============================================================
     PIP_BCK_PRS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63>    BCKPRS   RO       0           0         PIP is currently asserting backpressure to IOB     |   
                                                  Backpressure from PIP will assert when the        |
                                                  entries to the todo list exceed HIWATER.          |
                                                  Backpressure will be held until the todo entries  |
                                                  is less than or equal to LOWATER.                 |
<62:13> RSVRD1   RAZ      0           NS        Reserved                                           |   
<12:8>  HIWATER  R/W      24          24        Water mark in the todo list to assert backpressure |   
                                                  Legal values are 1-26.  A 0 value will deadlock   |
                                                  the machine.  A value > 26, will trash memory     |
<7:5>   RSVRD0   RAZ      0           NS        Reserved                                           |   
<4:0>   LOWATER  R/W      4           4         Water mark in the todo list to release backpressure|   
                                                  The LOWATER value should be < HIWATER.            |
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_CRC_CTL = PIP CRC Control Register
 *
 * Controls datapath reflection when calculating CRC
 *

     ==============================================================
     PIP_CRC_CTL(0..1) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<1>     INVRES   R/W      1           1         Invert the result                                  |   
<0>     REFLECT  R/W      1           1         Reflect the bits in each byte.                     |   
                                                 Byte order does not change.                        |
                                                 0: CRC is calculated MSB to LSB                    |
                                                 1: CRC is calculated LSB to MSB                    |
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_CRC_IV = PIP CRC IV Register
 *
 * Determines the IV used by the CRC algorithm
 *

     ==============================================================
     PIP_CRC_IV(0..1) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  IV       R/W      0x46af6449  0x46af6449 IV used by the CRC algorithm.  Default is FCS32.  |   

Notes:
 * PIP_CRC_IV
   PIP_CRC_IV controls the initial state of the CRC algorithm.  Octane can
   support a wide range of CRC algorithms and as such, the IV must be
   carefully constructed to meet the specific algorithm.  The code below
   determines the value to program into Octane based on the algorthim's IV
   and width.  In the case of Octane, the width should always be 32.

   PIP_CRC_IV0 sets the IV for ports 0-15 while PIP_CRC_IV1 sets the IV for
   ports 16-31.

    unsigned octane_crc_iv(unsigned algorithm_iv, unsigned poly, unsigned w)
    {
      int i;
      int doit;
      unsigned int current_val = algorithm_iv;

      for(i = 0; i < w; i++) {
        doit = current_val & 0x1;

        if(doit) current_val ^= poly;
        assert(!(current_val & 0x1));

        current_val = (current_val >> 1) | (doit << (w-1));
      }

      return current_val;
    }
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_IP_OFFSET = Location of the IP in the workQ entry
 *
 * An 8-byte offset to find the start of the IP header in the data portion of IP workQ entires
 *

     ==============================================================
     PIP_IP_OFFSET Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<2:0>   OFFSET   R/W      0x0         0x0       Number of 8B ticks to include in workQ entry       |   
                                                  prior to IP data                                  |
                                                  0:  0 Bytes / IP start at WORD4 of workQ entry    |
                                                  1:  8 Bytes / IP start at WORD5 of workQ entry    |
                                                  2: 16 Bytes / IP start at WORD6 of workQ entry    |
                                                  3: 24 Bytes / IP start at WORD7 of workQ entry    |
                                                  4: 32 Bytes / IP start at WORD8 of workQ entry    |
                                                  5: 40 Bytes / IP start at WORD9 of workQ entry    |
                                                  6: 48 Bytes / IP start at WORD10 of workQ entry   |
                                                  7: 56 Bytes / IP start at WORD11 of workQ entry   |

Notes:
In normal configurations, OFFSET must be set in the 0..4 range to allow the
entire IP and TCP/UDP headers to be buffered in HW and calculate the L4
checksum for TCP/UDP packets.

The MAX value of OFFSET is determined by the the types of packets that can
be sent to PIP as follows...

Packet Type              MAX OFFSET
IPv4/TCP/UDP             7
IPv6/TCP/UDP             5
IPv6/without L4 parsing  6

If the L4 can be ignored, then the MAX OFFSET for IPv6 packets can increase
to 6.  Here are the following programming restrictions for IPv6 packets and
OFFSET==6:

 . PIP_GBL_CTL[TCP_FLAG] == 0
 . PIP_GBL_CTL[L4_LEN]   == 0
 . PIP_GBL_CTL[L4_CHK]   == 0
 . PIP_GBL_CTL[L4_PRT]   == 0
 . PIP_GBL_CTL[L4_MAL]   == 0
 . PIP_DEC_IPSEC[TCP]    == 0
 . PIP_DEC_IPSEC[UDP]    == 0
 . PIP_PRT_TAG[IP6_DPRT] == 0
 . PIP_PRT_TAG[IP6_SPRT] == 0
 . PIP_PRT_TAG[TCP6_TAG] == 0
 . PIP_GBL_CFG[TAG_SYN]  == 0
----------------------------------------------------------------------------------------------------
===


 *
 * PIP_TAG_SECRET = Initial value in tag generation
 *
 * The source and destination IV's provide a mechanism for each Octeon to be unique.
 *

     ==============================================================
     PIP_TAG_SECRET Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:16> DST      R/W      0x0         0x0       Secret for the destination tuple tag CRC calc      |   
<15:0>  SRC      R/W      0x0         0x0       Secret for the source tuple tag CRC calc           |   

Notes:
This register was introduced in PASS2
----------------------------------------------------------------------------------------------------
===


 *
 * PIP_TAG_MASK = Mask bit in the tag generation
 *

     ==============================================================
     PIP_TAG_MASK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  MASK     R/W      0x0         0x0       When set, MASK clears individual bits of lower 16  |   
                                                  bits of the computed tag.  Does not effect RAW    |
                                                  or INSTR HDR packets.                             |

Notes:
This register was introduced in PASS2
----------------------------------------------------------------------------------------------------
===


 *
 * PIP_TODO_ENTRY = Head entry of the Todo list (debug only)
 *
 * Summary of the current packet that has completed and waiting to be processed
 *

     ==============================================================
     PIP_TODO_ENTRY Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63>    VAL      RO       NS          NS        Entry is valid                                     |   
<62>    RSVRD    RAZ      NS          NS        Reserved                                           |   
<61:0>  ENTRY    RO       NS          NS        Todo list entry summary                            |   
----------------------------------------------------------------------------------------------------
===

 
 *
 * PIP_DEC_IPSEC = UDP or TCP ports to watch for DEC IPSEC
 *
 * PIP sets the dec_ipsec based on TCP or UDP destination port.
 *

     ==============================================================
     PIP_DEC_IPSEC(0..3) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:18> RSVRD    RAZ      NS          NS        Reserved                                           |   
<17>    TCP      R/W      0x0         0x0       This DPRT should be used for TCP packets           |   
<16>    UDP      R/W      0x0         0x0       This DPRT should be used for UDP packets           |   
<15:0>  DPRT     R/W      0x0000      0x0000    UDP or TCP destination port to match on            |   
----------------------------------------------------------------------------------------------------
===


 *
 * PIP_RAW_WORD = The RAW Word2 of the workQ entry.
 *
 * The RAW Word2 to be inserted into the workQ entry of PCI RAW packets.
 *

     ==============================================================
     PIP_RAW_WORD Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:56> RSVRD    RAZ      NS          NS        Reserved                                           |   
<55:0>  WORD     R/W      0x0         0x0       Word2 of the workQ entry                           |   
                                                  The 8-bit bufs field is still set by HW (IPD)     |
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_QOS_VLAN@ = QOS VLAN Tables
 *
 * If the PIP indentifies a packet to be VLAN tagged, then the QOS
 * can be set based on the VLAN user priority.  These eight register
 * comprise the QOS values for all VLAN user priority values.
 * 

     ==============================================================
     PIP_QOS_VLAN(0..7) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<2:0>   QOS      R/W      0x0         0x0       VLAN QOS level                                     |   
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_QOS_WATCH@ = QOS Watcher Tables
 * 
 * Sets up the Configuration CSRs for the four QOS Watchers.
 * Each Watcher can be set to look for a specific protocol
 * or TCP/UDP destination port to override the default QOS
 * value.
 * 

     ==============================================================
     PIP_QOS_WATCH(0..3) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD3   RAZ      NS          NS        Reserved                                           |   
<47:32> MASK     R/W      0x0         0x0       Mask off a range of values (PASS2 only)            |   
<31:28> RSVRD2   RAZ      NS          NS        Reserved                                           |   
<27:24> GRP      R/W      0x0         0x0       The GRP number of the watcher (PASS2 only)         |   
<23>    RSVRD1   RAZ      NS          NS        Reserved                                           |   
<22:20> WATCHER  R/W      0x0         0x0       The QOS level of the watcher                       |   
<19:18> RSVRD0   RAZ      NS          NS        Reserved                                           |   
<17:16> TYPE     R/W      0x0         0x0       The field for the watcher match against            |   
                                                  0 = disable across all ports                      |
                                                  1 = protocol (ipv4)                               |
                                                    = next_header (ipv6)                            |
                                                  2 = TCP destination port                          |
                                                  3 = UDP destination port                          |
<15:0>  MATCH    R/W      0x0000      0x0000    The value to watch for                             |   
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_PRT_CFG@ = Per port config information
 *

     ==============================================================
     PIP_PRT_CFG(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:37> RSVRD5   RAZ      NS          NS        Reserved                                           |   
<36>    RAWDRP   R/W      0x0         0x0       Allow the IPD to RED drop a packet.                |   
                                                  Normally, IPD will never drop a packet that PIP   |
                                                  indicates is RAW.
                                                  0=never drop RAW packets based on RED algorithm   |
                                                  1=allow RAW packet drops based on RED algorithm   |
                                                  (PASS2 only)                                      |
<35:34> TAG_INC  R/W      0x0         0x0       Which of the 4 PIP_TAG_INC to use when             |   
                                                  calculating mask tag hash                         |
                                                  (PASS2 only)                                      |                                             
<33>    DYN_RS   R/W      0x0         0x0       Dynamically calculate RS based on pkt size and     |   
                                                  configuration.  If DYN_RS is set then             |
                                                  PKT_INST_HDR[RS] is not used.  When using 2-byte  |
                                                  instruction header words, either DYN_RS or        |
                                                  PIP_GBL_CTL[IGNRS] should be set.                 |
                                                  (PASS2 only)                                      |
<32>    INST_HDR R/W      0x0         0x0       8-byte INST_HDR is present on all packets          |   
                                                  (not for PCI prts, 32-35)                         |
                                                  (PASS2 only)                                      |
<31:28> GRP_WAT  R/W      0x0         0x0       GRP Watcher enable                                 |   
                                                  (PASS2 only)                                      |
<27>    RSVRD4   RAZ      NS          NS        Reserved                                           |   
<26:24> QOS      R/W      0x0         0x0       Default QOS level of the port                      |   
<23:20> QOS_WAT  R/W      0x0         0x0       QOS Watcher enable                                 |   
<19>    RSVRD3   RAZ      NS          NS        Reserved                                           |   
<18>    QOS_VOD  R/W      0x0         0x0       QOS VLAN over Diffserv                             |   
                                                  if VLAN exists, it is used                        |
                                                  else if IP exists, Diffserv is used               |
                                                  else the per port default is used                 |
                                                  Watchers are still highest priority               |
<17>    QOS_DIFF R/W      0x0         0x0       QOS Diffserv                                       |   
<16>    QOS_VLAN R/W      0x0         0x0       QOS VLAN                                           |   
<15:13> RSVRD2   RAZ      NS          NS        Reserved                                           |   
<12>    CRC_EN   R/W      0x1         0x1       CRC Checking enabled (for ports 0-31 only)         |   
<11:10> RSVRD1   RAZ      NS          NS        Reserved                                           |   
<9:8>   MODE     R/W      0x0         0x0       Parse Mode                                         |   
                                                  0 = no packet inspection (Uninterpreted)          |
                                                  1 = L2 parsing / skip to L2                       |
                                                  2 = IP parsing / skip to L3                       |
                                                  3 = PCI Raw (illegal for software to set)         |
<7>     RSVRD0   RAZ      NS          NS        Reserved                                           |   
<6:0>   SKIP     R/W      0x0         0x0       Optional Skip I amount for packets.  Does not      |   
                                                  apply to packets on PCI ports when a PKT_INST_HDR |
                                                  is present.  See section 7.2.7 - Legal Skip       |
                                                  Values for further details.                       |
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_PRT_TAG@ = Per port config information
 *

     ==============================================================
     PIP_PRT_TAG(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:40> RSVRD    RAZ      NS          NS        Reserved                                           |   
<39:36> GRPTAGBASE R/W    0           0         Offset to use when computing group from tag bits   |   
                                                  when GRPTAG is set.                               |
                                                  (PASS2 only)                                      |
<35:32> GRPTAGMASK R/W    0           0         Which bits of the tag to exclude when computing    |   
                                                  group when GRPTAG is set.                         |
                                                  (PASS2 only)                                      |
<31>    GRPTAG   R/W      0x0         0x0       When set, use the lower bit of the tag to compute  |   
                                                  the group in the work queue entry                 |
                                                  GRP = WQE[TAG[3:0]] & ~GRPTAGMASK + GRPTAGBASE    |
                                                  (PASS2 only)                                      |
<30>    SPARE    R/W      0x0         0x0       Spare bit                                          |   
                                                  (PASS2 only)                                      |
<29:28> TAG_MODE R/W      0x0         0x0       Which tag algorithm to use                         |   
                                                  0 = always use tuple tag algorithm                |
                                                  1 = always use mask tag algorithm                 |
                                                  2 = if packet is IP, use tuple else use mask      |
                                                  3 = tuple XOR mask                                |
                                                  (PASS2 only)                                      |
<27:26> INC_VS   R/W      0x0         0x0       determines the VLAN ID (VID) to be included in     |   
                                                  tuple tag when VLAN stacking is detected          |
                                                  0 = do not include VID in tuple tag generation    |
                                                  1 = include VID (VLAN0) in hash                   |
                                                  2 = include VID (VLAN1) in hash                   |
                                                  3 = include VID ({VLAN0,VLAN1}) in hash           |
                                                  (PASS2 only)                                      |
<25>    INC_VLAN R/W      0x0         0x0       when set, the VLAN ID is included in tuple tag     |   
                                                  when VLAN stacking is not detected                |
                                                  0 = do not include VID in tuple tag generation    |
                                                  1 = include VID in hash                           |
                                                  (PASS2 only)                                      |
<24>    INC_PRT  R/W      0x0         0x0       sets whether the port is included in tuple tag     |   
<23>    IP6_DPRT R/W      0x0         0x0       sets whether the TCP/UDP dst port is               |   
                                                  included in tuple tag for IPv6 packets            |
<22>    IP4_DPRT R/W      0x0         0x0       sets whether the TCP/UDP dst port is               |   
                                                  included in tuple tag for IPv4                    |
<21>    IP6_SPRT R/W      0x0         0x0       sets whether the TCP/UDP src port is               |   
                                                  included in tuple tag for IPv6 packets            |
<20>    IP4_SPRT R/W      0x0         0x0       sets whether the TCP/UDP src port is               |   
                                                  included in tuple tag for IPv4                    |
<19>    IP6_NXTH R/W      0x0         0x0       sets whether ipv6 includes next header in tuple    |   
                                                  tag hash                                          |
<18>    IP4_PCTL R/W      0x0         0x0       sets whether ipv4 includes protocol in tuple       |   
                                                  tag hash                                          |
<17>    IP6_DST  R/W      0x0         0x0       sets whether ipv6 includes dst address in tuple    |   
                                                  tag hash                                          |
<16>    IP4_DST  R/W      0x0         0x0       sets whether ipv4 includes dst address in tuple    |   
                                                  tag hash                                          |
<15>    IP6_SRC  R/W      0x0         0x0       sets whether ipv6 includes src address in tuple    |   
                                                  tag hash                                          |
<14>    IP4_SRC  R/W      0x0         0x0       sets whether ipv4 includes src address in tuple    |   
                                                  tag hash                                          |
<13:12> TCP6_TAG R/W      0x0         0x0       sets the tag_type of a TCP packet (IPv6)           |   
                                                  0 = ordered tags                                  |
                                                  1 = atomic tags                                   |
                                                  2 = Null tags                                     |
<11:10> TCP4_TAG R/W      0x0         0x0       sets the tag_type of a TCP packet (IPv4)           |   
                                                  0 = ordered tags                                  |
                                                  1 = atomic tags                                   |
                                                  2 = Null tags                                     |
<9:8>   IP6_TAG  R/W      0x0         0x0       sets whether IPv6 packet tag type                  |   
                                                  0 = ordered tags                                  |
                                                  1 = atomic tags                                   |
                                                  2 = Null tags                                     |
<7:6>   IP4_TAG  R/W      0x0         0x0       sets whether IPv4 packet tag type                  |   
                                                  0 = ordered tags                                  |
                                                  1 = atomic tags                                   |
                                                  2 = Null tags                                     |
<5:4>   NON_TAG  R/W      0x0         0x0       sets whether non-IP packet tag type                |   
                                                  0 = ordered tags                                  |
                                                  1 = atomic tags                                   |
                                                  2 = Null tags                                     |
<3:0>   GRP      R/W      0x0         0x0       4-bit value indicating the group to schedule to    |   
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_QOS_DIFF@ = QOS Diffserv Tables
 *

     ==============================================================
     PIP_QOS_DIFF(0..63) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<2:0>   QOS      R/W      0x0         0x0       Diffserv QOS level                                 |   
----------------------------------------------------------------------------------------------------
===

 *
 *          PIP Statistics Counters
 * (RGMII/SPI Ports: 0-31 / PCI ports: 32-35)
 *
 * Note: special stat counter behavior
 *
 * 1) Read and write operations must arbitrate for the statistics resources
 *     along with the packet engines which are incrementing the counters.
 *     In order to not drop packet information, the packet HW is always a
 *     higher priority and the CSR requests will only be satisified when
 *     there are idle cycles.  This can potentially cause long delays if the
 *     system becomes full.
 *
 * 2) stat counters can be cleared in two ways.  If PIP_STAT_CTL[RDCLR] is
 *     set, then all read accesses will clear the register.  In addition,
 *     any write to a stats register will also reset the register to zero.
 *     Please note that the clearing operations must obey rule #1 above.
 *
 * 3) all counters are wrapping - software must ensure they are read periodically


 * PIP_STAT0_PRT = PIP_STAT_DRP_PKTS / PIP_STAT_DRP_OCTS

     ==============================================================
     PIP_STAT0_PRT(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> DRP_PKTS R/W      0x0         NS        Inbound packets marked to be dropped by the IPD    |   
                                                 QOS widget per port                                |
<31:0>  DRP_OCTS R/W      0x0         NS        Inbound octets marked to be dropped by the IPD     |   
                                                 QOS widget per port                                |
----------------------------------------------------------------------------------------------------
===

 * PIP_STAT1_PRT@ = PIP_STAT_OCTS

     ==============================================================
     PIP_STAT1_PRT(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD    RAZ      NS          NS        Reserved                                           |   
<47:0>  OCTS     R/W      0x0         NS        Number of octets received by PIP (good and bad)    |   
----------------------------------------------------------------------------------------------------
===

 * PIP_STAT2_PRT@ = PIP_STAT_PKTS     / PIP_STAT_RAW

     ==============================================================
     PIP_STAT2_PRT(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> PKTS     R/W      0x0         NS        Number of packets processed by PIP                 |   
<31:0>  RAW      R/W      0x0         NS        RAWFULL + RAWSCH Packets without an L1/L2 error    |   
                                                  received by PIP per port                          |
----------------------------------------------------------------------------------------------------
===

 * PIP_STAT3_PRT@ = PIP_STAT_BCST     / PIP_STAT_MCST

     ==============================================================
     PIP_STAT3_PRT(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> BCST     R/W      0x0         NS        Number of indentified L2 broadcast packets         |   
                                                  Does not include multicast packets                |
                                                  Only includes packets whose parse mode is         |
                                                  SKIP_TO_L2.                                       |
<31:0>  MCST     R/W      0x0         NS        Number of indentified L2 multicast packets         |   
                                                  Does not include broadcast packets                |
                                                  Only includes packets whose parse mode is         |
                                                  SKIP_TO_L2.                                       |
----------------------------------------------------------------------------------------------------
===
 
 * PIP_STAT4_PRT@ = PIP_STAT_HIST1    / PIP_STAT_HIST0

     ==============================================================
     PIP_STAT4_PRT(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> H65to127 R/W      0x0         NS        Number of 65-127B packets                          |   
<31:0>  H64      R/W      0x0         NS        Number of 1-64B packets                            |   
----------------------------------------------------------------------------------------------------
===
 
 * PIP_STAT5_PRT@ = PIP_STAT_HIST3    / PIP_STAT_HIST2

     ==============================================================
     PIP_STAT5_PRT(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> H256to511 R/W     0x0         NS        Number of 256-511B packets                         |   
<31:0>  H128to255 R/W     0x0         NS        Number of 128-255B packets                         |   
----------------------------------------------------------------------------------------------------
===
 
 * PIP_STAT6_PRT@ = PIP_STAT_HIST5    / PIP_STAT_HIST4

     ==============================================================
     PIP_STAT6_PRT(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> H1024to1518 R/W   0x0         NS        Number of 1024-1518B packets                       |   
<31:0>  H512to1023  R/W   0x0         NS        Number of 512-1023B packets                        |   
----------------------------------------------------------------------------------------------------
===
 
 * PIP_STAT7_PRT@ = PIP_STAT_FCS      / PIP_STAT_HIST6

     ==============================================================
     PIP_STAT7_PRT(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> FCS      R/W      0x0         NS        Number of packets with FCS or Align opcode errors    |   
<31:0>  H1519    R/W      0x0         NS        Number of 1519-max packets                           |   

Notes:
Note: FCS is not checked on the PCI ports 32..35.
----------------------------------------------------------------------------------------------------
===
 
 * PIP_STAT8_PRT@ = PIP_STAT_FRAG     / PIP_STAT_UNDER

     ==============================================================
     PIP_STAT8_PRT(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> FRAG     R/W     0x0          NS        Number of packets with length < min and FCS error  |   
<31:0>  UNDERSZ  R/W     0x0          NS        Number of packets with length < min                |   

Notes:
Note: FCS is not checked on the PCI ports 32..35.
----------------------------------------------------------------------------------------------------
===
 
 * PIP_STAT9_PRT@ = PIP_STAT_JABBER   / PIP_STAT_OVER

     ==============================================================
     PIP_STAT9_PRT(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> JABBER   R/W     0x0          NS        Number of packets with length > max and FCS error  |   
<31:0>  OVERSZ   R/W     0x0          NS        Number of packets with length > max                |   

Notes:
Note: FCS is not checked on the PCI ports 32..35.
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_STAT_INB_PKTS@ = Inbound packets received by PIP per port 
 *
 * Inbound stats collect all data sent to PIP from all packet interfaces.
 * Its the raw counts of everything that comes into the block.  The counts
 * will reflect all error packets and packets dropped by the PKI RED engine.
 * These counts are intended for system debug, but could convey useful
 * information in production systems.
 *

     ==============================================================
     PIP_STAT_INB_PKTS(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  PKTS     R/W      0x0         NS        Number of packets without GMX/SPX/PCI errors       |   
                                                  received by PIP                                   |
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_STAT_INB_OCTS@ = Inbound octets received by PIP per port
 *
 * Inbound stats collect all data sent to PIP from all packet interfaces.
 * Its the raw counts of everything that comes into the block.  The counts
 * will reflect all error packets and packets dropped by the PKI RED engine.
 * These counts are intended for system debug, but could convey useful
 * information in production systems.
 *

     ==============================================================
     PIP_STAT_INB_OCTS(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD    RAZ      NS          NS        Reserved                                           |   
<47:0>  OCTS     R/W      0x0         NS        Total number of octets from all packets received   |   
                                                  by PIP                                            |
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_STAT_INB_ERRS@ = Inbound error packets received by PIP per port
 *
 * Inbound stats collect all data sent to PIP from all packet interfaces.
 * Its the raw counts of everything that comes into the block.  The counts
 * will reflect all error packets and packets dropped by the PKI RED engine.
 * These counts are intended for system debug, but could convey useful
 * information in production systems.
 *

     ==============================================================
     PIP_STAT_INB_ERRS(0..35) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> RSVRD    RAZ      NS          NS        Reserved                                           |   
<15:0>  ERRS     R/W      0x0         NS        Number of packets with GMX/SPX/PCI errors          |   
                                                  received by PIP                                   |
----------------------------------------------------------------------------------------------------
===

 *
 * PIP_TAG_INC = Which bytes to include in the new tag hash algorithm
 *
*# $PIP_TAG_INC@ = 0x300+@ @=(0..63) RegType=(RSL) RtlReg=(pip_tag_inc_csr_direct_TestbuilderTask)

     ==============================================================
     PIP_TAG_INC(0..63) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<7:0>   EN       R/W      0x0         0x0       Which bytes to include in mask tag algorithm       |   
                                                  Broken into 4, 16-entry masks to cover 128B       |
                                                  PIP_PRT_CFG[TAG_INC] selects 1 of 4 to use        |
                                                  registers  0-15 map to PIP_PRT_CFG[TAG_INC] == 0  |
                                                  registers 16-31 map to PIP_PRT_CFG[TAG_INC] == 1  |
                                                  registers 32-47 map to PIP_PRT_CFG[TAG_INC] == 2  |
                                                  registers 48-63 map to PIP_PRT_CFG[TAG_INC] == 3  |
                                                  [7] coresponds to the MSB of the 8B word          |
                                                  [0] coresponds to the LSB of the 8B word          |
                                                  (PASS2 only)                                      |

Notes:
This register was introduced in PASS2
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_FLAGS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  NS       RAZ       NS          NS       RESERVED                                               
<3>     RESET    RAZ       0           0        Reset oneshot pulse                                    
<2>     STORE_BE R/W       0           0        Force STORE0 byte write address to big endian          
<1>     ENA_DWB  R/W       0           0        Set to enable DontWriteBacks                           
<0>     ENA_PKO  R/W       0           0        Set to enable the PKO picker                           

Notes:
 When set, ENA_PKO enables the PKO picker and places the PKO in normal operation.  When set, ENA_DWB
 enables the use of DontWriteBacks during the buffer freeing operations.  When not set, STORE_BE inverts
 bits[2:0] of the STORE0 byte write address.  When set, RESET causes a 1-cycle reset pulse to the
 entire box.
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     PKO_REG_READ_IDX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> NS       RAZ      NS          NS        RESERVED                                               
<15:8>  INC      R/W      0           0         Increment to add to current index for next index       
<7:0>   IDX      R/W      0           0         Index to use for next memory CSR read                  

Notes:
 Provides the read index during a CSR read operation to any of the CSRs that are physically stored
 as memories.  The names of these CSRs begin with the prefix "PKO_MEM_".
 IDX[7:0] is the read index.  INC[7:0] is an increment that is added to IDX[7:0] after any CSR read.
 The intended use is to initially write this CSR such that IDX=0 and INC=1.  Then, the entire
 contents of a CSR memory can be read with consecutive CSR read commands.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_CMD_BUF Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:23> NS       RAZ      NS          NS        RESERVED                                               
<22:20> POOL     R/W      0           0         Free list used to free command buffer segments         
<19:13> NS       R/W      0           0         MBZ                                                    
<12:0>  SIZE     R/W      0           0         Number of uint64s per command buffer segment           

Notes:
 Sets the command buffer parameters
 The size of the command buffer segments is measured in uint64s.  The pool specifies (1 of 8 free
 lists to be used when freeing command buffer segments.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_GMX_PORT_MODE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:6>  NS       RAZ      NS          NS        RESERVED                                               
<5:3>   MODE1    R/W      0           0         # of GM1 ports = 16 >> MODE1, 0 <= MODE1 <= 5          
<2:0>   MODE0    R/W      0           0         # of GM0 ports = 16 >> MODE0, 0 <= MODE0 <= 5          

Notes:
 Sets the number of GMX ports and amount of local storage per port independently for GMX0 and GMX1
 The system has a total of 16 + 16 + 4 ports (GM0 + GM1 + PCI).  This CSR sets the number of GMX
 ports that are used.  This CSR has no effect on the number of PCI ports.  When all 16 + 16 + 4
 ports are used (MODE0=0, MODE1=0), each port has 1.5kB of local storage.  Increasing the value of
 MODEn by 1 decreases the number of GMXn ports by a power of 2 and increases the local storage per
 GMXn port by a power of 2.  If one of the modes is 5, then only one of interfaces GM0 or GM1 is
 present and the storage per port of the existing interface is doubled.

 MODE[n] GM[n] PCI   GM[n]                      PCI
         ports ports storage/port               storage/port
 0       16    4     ( 1.5kB << (MODE[1-n]==5)) 1.5kB
 1        8    4     ( 3.0kB << (MODE[1-n]==5)) 1.5kB
 2        4    4     ( 6.0kB << (MODE[1-n]==5)) 1.5kB
 3        2    4     (12.0kB << (MODE[1-n]==5)) 1.5kB
 4        1    4     (24.0kB << (MODE[1-n]==5)) 1.5kB
 5        0    4     (   0kB                  ) 1.5kB
 where 0 <= n <= 1
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     PKO_REG_CRC_ENABLE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> NS       RAZ       NS          NS       RESERVED                                               
<31:0>  ENABLE   R/W       0           0        Mask for ports 31-0 to enable CRC                      
                                                 Mask bit==0 means CRC not enabled
                                                 Mask bit==1 means CRC     enabled
                                                 Note that CRC should be enabled only when using SPI4.2

Notes:
 Enables CRC for the GMX ports.  
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_CRC_CTL(0..1) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  RSVRD    RAZ      NS          NS        Reserved                                           |   
<1>     INVRES   R/W      1           1         Invert the result                                  |   
<0>     REFIN    R/W      1           1         Reflect the bits in each byte.                     |   
                                                 Byte order does not change.                        |
                                                 0: CRC is calculated MSB to LSB                    |
                                                 1: CRC is calculated MLB to MSB                    |

Notes:
 Controls datapath reflection when calculating CRC
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_CRC_IV(0..1) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  IV       R/W      0x46af6449  0x46af6449 IV used by the CRC algorithm.  Default is FCS32.  |   

Notes:
 Determines the IV used by the CRC algorithm
  * PKO_CRC_IV
   PKO_CRC_IV controls the initial state of the CRC algorithm.  Octane can
   support a wide range of CRC algorithms and as such, the IV must be
   carefully constructed to meet the specific algorithm.  The code below
   determines the value to program into Octane based on the algorthim's IV
   and width.  In the case of Octane, the width should always be 32.

   PKO_CRC_IV0 sets the IV for ports 0-15 while PKO_CRC_IV1 sets the IV for
   ports 16-31.

    @verbatim
    unsigned octane_crc_iv(unsigned algorithm_iv, unsigned poly, unsigned w)
    {
      int i;
      int doit;
      unsigned int current_val = algorithm_iv;

      for(i = 0; i < w; i++) {
        doit = current_val & 0x1;

        if(doit) current_val ^= poly;
        assert(!(current_val & 0x1));

        current_val = (current_val >> 1) | (doit << (w-1));
      }

      return current_val;
    }
    @endverbatim
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_QUEUE_MODE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  NS       RAZ      NS          NS        RESERVED                                               
<1:0>   MODE     R/W      0           0         # of queues = 256 >> MODE, 0 <= MODE <=2               

Notes:
 Sets the number of queues and amount of local storage per queue
 The system has a total of 256 queues and (256*8) words of local command storage.  This CSR sets the
 number of queues that are used.  Increasing the value of MODE by 1 decreases the number of queues
 by a power of 2 and increases the local storage per queue by a power of 2.
 MODEn queues storage/queue
 0     256     64B ( 8 words)
 1     128    128B (16 words)
 2      64    256B (32 words)
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_BIST_RESULT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:33> NS       RAZ       NS          NS       RESERVED                                               
<32:32> CSR      RO        X           0        BiST result of CSR      memories (0=pass, !0=fail)     
<31:31> IOB      RO        X           0        BiST result of IOB      memories (0=pass, !0=fail)     
<30:30> OUT_CRC  RO        X           0        BiST result of OUT_CRC  memories (0=pass, !0=fail)     
<29:27> OUT_CTL  RO        X           0        BiST result of OUT_CTL  memories (0=pass, !0=fail)     
<26:26> OUT_STA  RO        X           0        BiST result of OUT_STA  memories (0=pass, !0=fail)     
<25:25> OUT_WIF  RO        X           0        BiST result of OUT_WIF  memories (0=pass, !0=fail)     
<24:22> PRT_CHK  RO        X           0        BiST result of PRT_CHK  memories (0=pass, !0=fail)     
<21:21> PRT_NXT  RO        X           0        BiST result of PRT_NXT  memories (0=pass, !0=fail)     
<20:15> PRT_PSB  RO        X           0        BiST result of PRT_PSB  memories (0=pass, !0=fail)     
<14:13> NCB_INB  RO        X           0        BiST result of NCB_INB  memories (0=pass, !0=fail)     
<12:11> PRT_QCB  RO        X           0        BiST result of PRT_QCB  memories (0=pass, !0=fail)     
<10:8>  PRT_QSB  RO        X           0        BiST result of PRT_QSB  memories (0=pass, !0=fail)     
<7:4>   DAT_DAT  RO        X           0        BiST result of DAT_DAT  memories (0=pass, !0=fail)     
<3:0>   DAT_PTR  RO        X           0        BiST result of DAT_PTR  memories (0=pass, !0=fail)     

Notes:
 Access to the internal BiST results
 Each bit is the BiST result of an individual memory (per bit, 0=pass and 1=fail).
----------------------------------------------------------------------------------------------------
===

 

     ==============================================================
     PKO_REG_ERROR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  NS       RAZ      NS          NS        RESERVED                                               
<2>     CURRZERO R/W1C    0           0         A packet data pointer has size=0                       
<1>     DOORBELL R/W1C    0           0         A doorbell count has overflowed                        
<0>     PARITY   R/W1C    0           0         Read parity error at port data buffer                  

Notes:
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_INT_MASK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  NS       RAZ      NS          NS        RESERVED                                               
<2>     CURRZERO R/W      0           0         Bit mask corresponding to PKO_REG_ERROR[2] above       
<1>     DOORBELL R/W      0           0         Bit mask corresponding to PKO_REG_ERROR[1] above       
<0>     PARITY   R/W      0           0         Bit mask corresponding to PKO_REG_ERROR[0] above       

Notes:
 When a mask bit is set, the corresponding interrupt is enabled.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_DEBUG0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  ASSERTS  RO       0           0         Various assertion checks                               

Notes:
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_DEBUG1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  ASSERTS  RO       0           0         Various assertion checks                               

Notes:
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_DEBUG2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  ASSERTS  RO       0           0         Various assertion checks                               

Notes:
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_DEBUG3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  ASSERTS  RO       0           0         Various assertion checks                               

Notes:
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_REG_QUEUE_PTRS1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  NS       RAZ       NS          NS       NS                                                     
<1>     IDX3     R/W       0           0        [3] of Index (distance from head) in the queue array   
<0>     QID7     R/W       0           0        [7] of Queue ID                                        

Notes:
 This CSR is used with PKO_MEM_QUEUE_PTRS and PKO_MEM_QUEUE_QOS to allow access to queues 128-255
 and to allow up mapping of up to 16 queues per port.  When programming queues 128-255, the
 programming sequence must first write PKO_REG_QUEUE_PTRS1 and then write PKO_MEM_QUEUE_PTRS or
 PKO_MEM_QUEUE_QOS for each queue.
 See the descriptions of PKO_MEM_QUEUE_PTRS and PKO_MEM_QUEUE_QOS for further explanation of queue
 programming.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_QUEUE_PTRS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63>    S_TAIL   R/W       X           0        Set if this QID is the tail of the static queues       
<62>    STATIC_P R/W       X           0        Set if any QID in this PID has static priority         
<61>    STATIC_Q R/W       X           0        Set if this QID has static priority                    
<60:53> QOS_MASK R/W       X           0        Mask to control priority across 8 QOS rounds           
<52:17> BUF_PTR  R/W       X           0        Command buffer pointer, <23:17> MBZ                    
<16:16> TAIL     R/W       X           0        Set if this QID is the tail of the queue array         
<15:13> IDX      WR0       X           0        Index[2:0] (distance from head) in the queue array     
<12:7>  PID      WR0       X           0        Port ID to which this queue is mapped                  
<6:0>   QID      R/W       X           0        Queue ID[6:0]                                          

Notes:
 Sets the queue to port mapping and the initial command buffer pointer, per queue
 Each queue may map to at most one port.  No more than 16 queues may map to a port.  The set of
 queues that is mapped to a port must be a contiguous array of queues.  The port to which queue QID
 is mapped is port PID.  The index of queue QID in port PID's queue list is IDX.  The last queue in
 port PID's queue array must have its TAIL bit set.  Unused queues must be mapped to port 63.
 STATIC_Q marks queue QID as having static priority.  STATIC_P marks the port PID to which QID is
 mapped as having at least one queue with static priority.  If any QID that maps to PID has static
 priority, then all QID that map to PID must have STATIC_P set.  Queues marked as static priority
 must be contiguous and begin at IDX 0.  The last queue that is marked as having static priority
 must have its S_TAIL bit set.  
 This CSR is a memory of 256 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed.  A read of any entry that has not been
 previously written is illegal and will result in unpredictable CSR read data.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_QUEUE_QOS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:61> NS       RAZ       NS          NS       RESERVED                                               
<60:53> QOS_MASK R/W       X           0        Mask to control priority across 8 QOS rounds           
<52:13> NS       RAZ       NS          NS       RESERVED                                               
<12:7>  PID      WR0       X           0        Port ID to which this queue is mapped                  
<6:0>   QID      R/W       X           0        Queue ID                                               

Notes:
 Sets the QOS mask, per queue.  These QOS_MASK bits are logically and physically the same QOS_MASK
 bits in PKO_MEM_QUEUE_PTRS.  This CSR address allows the QOS_MASK bits to be written during PKO
 operation without affecting any other queue state.  The port to which queue QID is mapped is port
 PID.  Note that the queue to port mapping must be the same as was previously programmed via the
 PKO_MEM_QUEUE_PTRS CSR.
 This CSR is a memory of 256 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed.  A read of any entry that has not been
 previously written is illegal and will result in unpredictable CSR read data.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_COUNT0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVRD    RAZ      NS          NS        Reserved                                           |   
<31:0>  COUNT    R/W1C    X           0         Total number of packets seen by PKO                |   

Notes:
 Total number of packets seen by PKO, per port
 A write to this address will clear the entry whose index is specified as COUNT[5:0].
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed.  A read of any entry that has not been
 previously written is illegal and will result in unpredictable CSR read data.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_COUNT1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVRD    RAZ      NS          NS        Reserved                                           |   
<47:0>  COUNT    R/W1C    X           0         Total number of bytes seen by PKO                  |   

Notes:
 Total number of bytes seen by PKO, per port
 A write to this address will clear the entry whose index is specified as COUNT[5:0].
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed.  A read of any entry that has not been
 previously written is illegal and will result in unpredictable CSR read data.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:36> FAU      RO        X           0        Fetch and add command words                            
<35:22> CMD      RO        X           0        Command word                                           
<21:16> SEGS     RO        X           0        Number of segments/gather size                         
<15:0>  SIZE     RO        X           0        Packet length in bytes                                 

Notes:
 Internal per-port state intended for debug use only - pko_prt_psb.cmnd[63:0]
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     PKO_MEM_DEBUG1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:63> I        RO        X           0        "I"  value used for free operation                     
<62:59> BACK     RO        X           0        Back value used for free operation                     
<58:56> POOL     RO        X           0        Pool value used for free operation                     
<55:40> SIZE     RO        X           0        Size in bytes                                          
<39:0>  PTR      RO        X           0        Data pointer                                           

Notes:
 Internal per-port state intended for debug use only - pko_prt_psb.curr[63:0]
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:63> I        RO        X           0        "I"  value used for free operation                     
<62:59> BACK     RO        X           0        Back value used for free operation                     
<58:56> POOL     RO        X           0        Pool value used for free operation                     
<55:40> SIZE     RO        X           0        Size in bytes                                          
<39:0>  PTR      RO        X           0        Data pointer                                           

Notes:
 Internal per-port state intended for debug use only - pko_prt_psb.head[63:0]
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG3 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  DATA     RO        X           0        WorkQ data or Store0 pointer                           

Notes:
 Internal per-port state intended for debug use only - pko_prt_psb.resp[63:0]
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG4 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:61> CMND_SEGS   RO     X           0        Internal state                                         
<60:45> CMND_SIZ    RO     X           0        Internal state                                         
<44:39> CMND_OFF    RO     X           0        Internal state                                         
<38:36> UID         RO     X           0        Internal state                                         
<35:35> DREAD_SOP   RO     X           0        Internal state                                         
<34:34> INIT_DWRITE RO     X           0        Internal state                                         
<33:33> CHK_ONCE    RO     X           0        Internal state                                         
<32:32> CHK_MODE    RO     X           0        Internal state                                         
<31:31> ACTIVE      RO     X           0        Internal state                                         
<30:30> STATIC_P    RO     X           0        Internal state                                         
<29:27> QOS         RO     X           0        Internal state                                         
<26:22> QCB_RIDX    RO     X           0        Internal state                                         
<21:18> QID_OFF_MAX RO     X           0        Internal state                                         
<17:14> QID_OFF     RO     X           0        Internal state                                         
<13:6>  QID_BASE    RO     X           0        Internal state                                         
<5:5>   WAIT        RO     X           0        Internal state                                         
<4:3>   MINOR       RO     X           0        Internal state                                         
<2:0>   MAJOR       RO     X           0        Internal state                                         

Notes:
 Internal per-port state intended for debug use only - pko_prt_psb.state[63:0]
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG5 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:35> CURR_PTR  RO       X           0        Internal state                                         
<34:19> CURR_SIZ  RO       X           0        Internal state                                         
<18:3>  CURR_OFF  RO       X           0        Internal state                                         
<2:0>   CMND_SEGS RO       X           0        Internal state                                         

Notes:
 Internal per-port state intended for debug use only - pko_prt_psb.state[127:64]
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG6 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:11> NS        RO       X           0        Internal state                                         
<10:0>  CURR_PTR  RO       X           0        Internal state                                         

Notes:
 Internal per-port state intended for debug use only - pko_prt_psb.state[191:128]
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG7 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:59> QOS      RO        X           0        QOS mask to enable the queue when set                  
<58:58> TAIL     RO        X           0        This queue is the last (tail) in the queue array       
<57:45> BUF_SIZ  RO        X           0        Command buffer remaining size in words                 
<44:12> BUF_PTR  RO        X           0        Command word pointer                                   
<11:6>  QCB_WIDX RO        X           0        Buffer write index for QCB                             
<5:0>   QCB_RIDX RO        X           0        Buffer read  index for QCB                             

Notes:
 Internal per-queue state intended for debug use only - pko_prt_qsb.state[63:0]
 This CSR is a memory of 256 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG8 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:28> NS       RAZ       NS          NS       RESERVED                                               
<27:8>  DOORBELL RO        X           0        Doorbell count                                         
<7:6>   NS       RAZ       NS          NS       RESERVED                                               
<5>     STATIC_P RO        X           0        Static priority                                        
<4>     S_TAIL   RO        X           0        Static tail                                            
<3>     STATIC_Q RO        X           0        Static priority                                        
<2:0>   QOS      RO        X           0        QOS mask to enable the queue when set                  

Notes:
 Internal per-queue state intended for debug use only - pko_prt_qsb.state[91:64]
 This CSR is a memory of 256 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG9 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:49> NS       RAZ       NS          NS       RESERVED                                               
<48:32> PTRS0    RO        X           0        Internal state                                         
<31:17> NS       RAZ       NS          NS       RESERVED                                               
<16:0>  PTRS3    RO        X           0        Internal state                                         

Notes:
 Internal per-port state intended for debug use only - pko.dat.ptr.ptrs0, pko.dat.ptr.ptrs3
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG10 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:49> NS       RAZ       NS          NS       RESERVED                                               
<48:32> PTRS1    RO        X           0        Internal state                                         
<31:17> NS       RAZ       NS          NS       RESERVED                                               
<16:0>  PTRS2    RO        X           0        Internal state                                         

Notes:
 Internal per-port state intended for debug use only - pko.dat.ptr.ptrs1, pko.dat.ptr.ptrs2
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     PKO_MEM_DEBUG11 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:25> NS       RAZ       NS          NS       RESERVED                                               
<24:23> NS       RO        X           0        Internal state                                         
<22:22> MAJ      RO        X           0        Internal state                                         
<21:19> UID      RO        X           0        Internal state                                         
<18:18> SOP      RO        X           0        Internal state                                         
<17:17> LEN      RO        X           0        Internal state                                         
<16:16> CHK      RO        X           0        Internal state                                         
<15:3>  CNT      RO        X           0        Internal state                                         
<2:0>   MOD      RO        X           0        Internal state                                         

Notes:
 Internal per-port state intended for debug use only - pko.out.sta.state[22:0]
 This CSR is a memory of 36 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     PKO_MEM_DEBUG12 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:36> FAU      RO        X           0        Fetch and add command words                            
<35:22> CMD      RO        X           0        Command word                                           
<21:16> SEGS     RO        X           0        Number of segments/gather size                         
<15:0>  SIZE     RO        X           0        Packet length in bytes                                 

Notes:
 Internal per-port state intended for debug use only - pko.out.ctl.cmnd[63:0]
 This CSR is a memory of 144 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     PKO_MEM_DEBUG13 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:63> I        RO        X           0        "I"  value used for free operation                     
<62:59> BACK     RO        X           0        Back value used for free operation                     
<58:56> POOL     RO        X           0        Pool value used for free operation                     
<55:40> SIZE     RO        X           0        Size in bytes                                          
<39:0>  PTR      RO        X           0        Data pointer                                           

Notes:
 Internal per-port state intended for debug use only - pko.out.ctl.head[63:0]
 This CSR is a memory of 144 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_WIN_WR_ADDR = PCI Window Write Address Register
 *
 * Contains the address to be writen to when a write operation is started by writing the
 * PCI_WIN_WR_DATA register (see below).
 *

     ==============================================================
     PCI_WIN_WR_ADDR Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<63:49> NS       RAZ      NS          NS        Reserved                                               
<48>    IOBIT    RAZ      0x0         0x0       A 1 or 0 can be written here but this will always      
                                                 read as '0'.
<47:3>  WR_ADDR  R/W      0x0         NS        The address that will be written to when the           
                                                 PCI_WIN_WR_DATA register is written.
                                                 [47:40] = NCB_ID
                                                 [39:3]  = Address
                                                 When [47:43] == NPI & [42:0] == 0 bits [39:0] are:
                                                      [39:32] == x, Not Used
                                                      [31:27] == RSL_ID
                                                      [12:3]  == RSL Register Offset
                                                      [2:0]   == x, Not Used
<2:0>   NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_WIN_RD_ADDR = PCI Window Read Address Register
 *
 * Writing the least-significant-byte of this register will cause a read operation to take place,
 * UNLESS, a read operation is already taking place. A read is consider to end when the PCI_WIN_RD_DATA
 * register is read.
 *

     ==============================================================
     PCI_WIN_RD_ADDR Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<63:49> NS       RAZ      NS          NS        Reserved                                               
<48>    IOBIT    RAZ      0x0         0x0       A 1 or 0 can be written here but this will always      
                                                 read as '0'.
<47:3>  RD_ADDR  R/W      0x0         NS        The address to be read from. Whenever the LSB of       
                                                 this register is written, the Read Operation will
                                                 take place.
                                                 [47:40] = NCB_ID
                                                 [39:3]  = Address
                                                 When [47:43] == NPI & [42:0] == 0 bits [39:0] are:
                                                      [39:32] == x, Not Used
                                                      [31:27] == RSL_ID
                                                      [12:3]  == RSL Register Offset
                                                      [2:0]   == x, Not Used
<2:0>   NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_WIN_WR_DATA = PCI Window Write Data Register
 *
 * Contains the data to write to the address located in the PCI_WIN_WR_ADDR Register.
 * Writing the least-significant-byte of this register will cause a write operation to take place.
 *
 *

     ==============================================================
     PCI_WIN_WR_DATA Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<63:0>  WR_DATA  R/W      0x0         NS        The data to be written. Whenever the LSB of this       
                                                 register is written, the Window Write will take
                                                 place.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_WIN_WR_MASK = PCI Window Write Mask Register
 *
 * Contains the mask for the data in the PCI_WIN_WR_DATA Register.
 *

     ==============================================================
     PCI_WIN_WR_MASK Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<63:8>  NS       RAZ      NS          NS        Reserved                                               
<7:0>   WR_MASK  R/W      0x0         0x0       The data to be written. When a bit is set '1'          
                                                 the corresponding byte will not be written.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_WIN_RD_DATA = PCI Window Read Data Register
 *
 * Contains the result from the read operation that took place when the LSB of the PCI_WIN_RD_ADDR
 * register was written.
 *

     ==============================================================
     PCI_WIN_RD_DATA Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<63:0>  RD_DATA  RO       0x0         NS        The read data.                                         
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_INT_SUM = PCI Interrupt Summary
 *
 * The PCI Interrupt Summary Register.
 *

     ==============================================================
     PCI_INT_SUM Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     TR_WABT  R/W1C    0           0         PCI Target Abort detected on Master-write              
<1>     MR_WABT  R/W1C    0           0         PCI Master Abort detected on Master-write              
<2>     MR_WTTO  R/W1C    0           0         PCI Master Retry Timeout on Master-write               
<3>     TR_ABT   R/W1C    0           0         PCI Target Abort On Master-Read                        
<4>     MR_ABT   R/W1C    0           0         PCI Master Abort On Master-Read                        
<5>     MR_TTO   R/W1C    0           0         PCI Master Retry Timeout On Master-Read                
<6>     MSI_PER  R/W1C    0           0         PCI Parity Error on Master MSI                         
<7>     MSI_TABT R/W1C    0           0         PCI Target-Abort on Master MSI                         
<8>     MSI_MABT R/W1C    0           0         PCI Master Abort on Master MSI                         
 
<9>     MSC_MSG  R/W1C    0           0         Master Split Completion Message (SCM) Detected         
                                                 for either a Split-Read/Write error case. 
                                                 Set if: 
                                                    a) A Split-Write SCM is detected with SCE=1. 
                                                    b) A Split-Read SCM is detected (regardless
                                                       of SCE status). 
                                                 The Split completion message(SCM)
                                                 is also latched into the PCI_SCM_REG[SCM] to 
                                                 assist SW with error recovery.
 
<10>    TSR_ABT  R/W1C    0           0         Target Split-Read Abort Detected                       
                                                 O9N (as completer), has encountered an error
                                                 which prevents the split transaction from 
                                                 completing. In this event, the O9N (as completer),
                                                 sends a SCM (Split Completion Message) to the
                                                 initiator. See: PCIX Spec v1.0a Fig 2-40. 
                                                    [31:28]: Message Class = 2(completer error)
                                                    [27:20]: Message Index = 0x80
                                                    [18:12]: Remaining Lower Address
                                                    [11:0]: Remaining Byte Count
 
<11>    SERR     R/W1C    0           0         SERR# detected by PCX Core                             
<12>    APERR    R/W1C    0           0         Address Parity Error detected by PCX Core              
<13>    DPERR    R/W1C    0           0         Data Parity Error detected by PCX Core                 
<14>    ILL_RWR  R/W1C    0x0         0         A write to the disabled PCI registers took place.      
<15>    ILL_RRD  R/W1C    0x0         0         A read  to the disabled PCI registers took place.      
<16>    RSL_INT  RO       0           0         This bit is set when the mio_pci_inta_dr wire          
                                                 is asserted by the MIO.
<17>    PCNT0    R/W1C    0           0         This bit indicates that PCI_PKTS_SENT0                 
                                                 value is greater than the value
                                                 in the PCI_PKTS_SENT_INT_LEV0 register.
<18>    PCNT1    R/W1C    0           0         This bit indicates that PCI_PKTS_SENT1                 
                                                 value is greater than the value
                                                 in the PCI_PKTS_SENT_INT_LEV1 register.
<19>    PCNT2    R/W1C    0           0         This bit indicates that PCI_PKTS_SENT2                 
                                                 value is greater than the value
                                                 in the PCI_PKTS_SENT_INT_LEV2 register.
<20>    PCNT3    R/W1C    0           0         This bit indicates that PCI_PKTS_SENT3                 
                                                 value is greater than the value
                                                 in the PCI_PKTS_SENT_INT_LEV3 register.
<21>    PTIME0   R/W1C    0           0         When the value in the PCI_PKTS_SENT0                   
                                                 register is not 0 the Sent-0 timer counts.
                                                 When the Sent-0 timer has a value greater
                                                 than the PCI_PKTS_SENT_TIME0 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<22>    PTIME1   R/W1C    0           0         When the value in the PCI_PKTS_SENT1                   
                                                 register is not 0 the Sent-1 timer counts.
                                                 When the Sent-1 timer has a value greater
                                                 than the PCI_PKTS_SENT_TIME1 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<23>    PTIME2   R/W1C    0           0         When the value in the PCI_PKTS_SENT2                   
                                                 register is not 0 the Sent-2 timer counts.
                                                 When the Sent-2 timer has a value greater
                                                 than the PCI_PKTS_SENT_TIME2 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<24>    PTIME3   R/W1C    0           0         When the value in the PCI_PKTS_SENT3                   
                                                 register is not 0 the Sent-3 timer counts.
                                                 When the Sent-3 timer has a value greater
                                                 than the PCI_PKTS_SENT_TIME3 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<25>    DCNT0    R/W1C    0           0         This bit indicates that PCI_DMA_CNT0                   
                                                 value is greater than the value
                                                 in the PCI_DMA_INT_LEV0 register.
<26>    DCNT1    R/W1C    0           0         This bit indicates that PCI_DMA_CNT1                   
                                                 value is greater than the value
                                                 in the PCI_DMA_INT_LEV1 register.
<27>    DTIME0   R/W1C    0           0         When the value in the PCI_DMA_CNT0                     
                                                 register is not 0 the DMA_CNT0 timer counts.
                                                 When the DMA0_CNT timer has a value greater
                                                 than the PCI_DMA_TIME0 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<28>    DTIME1   R/W1C    0           0         When the value in the PCI_DMA_CNT1                     
                                                 register is not 0 the DMA_CNT1 timer counts.
                                                 When the DMA1_CNT timer has a value greater
                                                 than the PCI_DMA_TIME1 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<29>    DMA0_FI  R/W1C    0x0         0         A DMA operation operation finished that was            
                                                 required to set the FORCE-INT bit for counter 0.
<30>    DMA1_FI  R/W1C    0x0         0         A DMA operation operation finished that was            
                                                 required to set the FORCE-INT bit for counter 1.
<31>    WIN_WR   R/W1C    0x0         0         A write to the disabled Window Write Data or           
                                                 Read-Address Register took place.
<32>    ILL_WR   R/W1C    0x0         0         A write to a disabled area of bar1 or bar2,            
                                                 when the mem area is disabled.
<33>    ILL_RD   R/W1C    0x0         0         A read to a disabled area of bar1 or bar2,             
                                                 when the mem area is disabled.
<63:34> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_INT_ENB = PCI Interrupt Enable
 *
 * Enables interrupt bits in the PCI_INT_SUM register.
 * 

     ==============================================================
     PCI_INT_ENB Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     ITR_WABT  R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[0]          
<1>     IMR_WABT  R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[1]          
<2>     IMR_WTTO  R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[2]          
<3>     ITR_ABT   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[3]          
<4>     IMR_ABT   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[4]          
<5>     IMR_TTO   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[5]          
<6>     IMSI_PER  R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[6]          
<7>     IMSI_TABT R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[7]          
<8>     IMSI_MABT R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[8]          
<9>     IMSC_MSG  R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[9]          
<10>    ITSR_ABT  R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[10]         
<11>    ISERR     R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[11]         
<12>    IAPERR    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[12]         
<13>    IDPERR    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[13]         
<14>    ILL_RWR   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[14]         
<15>    ILL_RRD   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[15]         
<16>    IRSL_INT  R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[16]         
<17>    IPCNT0    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[17]         
<18>    IPCNT1    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[18]         
<19>    IPCNT2    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[19]         
<20>    IPCNT3    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[20]         
<21>    IPTIME0   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[21]         
<22>    IPTIME1   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[22]         
<23>    IPTIME2   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[23]         
<24>    IPTIME3   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[24]         
<25>    IDCNT0    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[25]         
<26>    IDCNT1    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[26]         
<27>    IDTIME0   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[27]         
<28>    IDTIME1   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[28]         
<29>    DMA0_FI   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[29]         
<30>    DMA1_FI   R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[30]         
<31>    WIN_WR    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[31]         
<32>    ILL_WR    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[32]         
<33>    ILL_RD    R/W      0           NS        INTA# Pin Interrupt Enable for PCI_INT_SUM[33]         
<63:34> NS        RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  PCI_PKTS_SENT0 = PCI Packets Sent 0
*
* Number of packets sent to the host memory from PCI Output 0
*

     ==============================================================
     PCI_PKTS_SENT0 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_CNT  RO       0           0         Each time a packet is written to the memory via        
                                                 PCI from PCI Output 0,  this counter is
                                                 incremented by 1 or the byte count of the packet
                                                 as set in NPI_OUTPUT_CONTROL[P0_BMODE].
----------------------------------------------------------------------------------------------------
===

*
*                  PCI_PKTS_SENT1 = PCI Packets Sent 1
*
* Number of packets sent to the host memory from PCI Output 1
*

     ==============================================================
     PCI_PKTS_SENT1 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_CNT  RO       0           0         Each time a packet is written to the memory via        
                                                 PCI from PCI Output 1,  this counter is                                                
                                                 incremented by 1 or the byte count of the packet
                                                 as set in NPI_OUTPUT_CONTROL[P1_BMODE].
----------------------------------------------------------------------------------------------------
===

*
*                  PCI_PKTS_SENT2 = PCI Packets Sent 2
*
* Number of packets sent to the host memory from PCI Output 2
*

     ==============================================================
     PCI_PKTS_SENT2 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_CNT  RO       0           0         Each time a packet is written to the memory via        
                                                 PCI from PCI Output 2,  this counter is
                                                 incremented by 1 or the byte count of the packet
                                                 as set in NPI_OUTPUT_CONTROL[P2_BMODE].
----------------------------------------------------------------------------------------------------
===

*
*                  PCI_PKTS_SENT3 = PCI Packets Sent 3
*
* Number of packets sent to the host memory from PCI Output 3
*

     ==============================================================
     PCI_PKTS_SENT3 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_CNT  RO       0           0         Each time a packet is written to the memory via        
                                                 PCI from PCI Output 3,  this counter is
                                                 incremented by 1 or the byte count of the packet
                                                 as set in NPI_OUTPUT_CONTROL[P3_BMODE].
----------------------------------------------------------------------------------------------------
===

*
*                  PCI_PKT_CREDITS0 = PCI Packet Credits For Output 0
*
* Used to decrease the number of packets to be processed by the host from Output-0 and return
* buffer/info pointer pairs to Output-0. The value in this register is acted upon when the
* least-significant-byte of this register is written.
*

     ==============================================================
     PCI_PKT_CREDITS0 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  PTR_CNT  R/W      0           NS        This field value is added to the                       
                                                 NPI's internal Buffer/Info Pointer Pair count.                                                 
<31:16> PKT_CNT  R/W      0           NS        The value written to this field will be                
                                                 subtracted from PCI_PKTS_SENT0[PKT_CNT].
----------------------------------------------------------------------------------------------------
===
 
 *
 *                  PCI_PKT_CREDITS1 = PCI Packet Credits For Output 1
 *
 * Used to decrease the number of packets to be processed by the host from Output-1 and return
 * buffer/info pointer pairs to Output-1. The value in this register is acted upon when the
 * least-significant-byte of this register is written.
 *

     ==============================================================
     PCI_PKT_CREDITS1 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  PTR_CNT  R/W      0           NS        This field value is added to the                       
                                                 NPI's internal Buffer/Info Pointer Pair count.                                                 
<31:16> PKT_CNT  R/W      0           NS        The value written to this field will be                
                                                 subtracted from PCI_PKTS_SENT1[PKT_CNT].
----------------------------------------------------------------------------------------------------
===
 
 *
 *                  PCI_PKT_CREDITS2 = PCI Packet Credits For Output 2
 *
 * Used to decrease the number of packets to be processed by the host from Output-2 and return
 * buffer/info pointer pairs to Output-2. The value in this register is acted upon when the
 * least-significant-byte of this register is written.
 *

     ==============================================================
     PCI_PKT_CREDITS2 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  PTR_CNT  R/W      0           NS        This field value is added to the                       
                                                 NPI's internal Buffer/Info Pointer Pair count.                                                 
<31:16> PKT_CNT  R/W      0           NS        The value written to this field will be                
                                                 subtracted from PCI_PKTS_SENT2[PKT_CNT].
----------------------------------------------------------------------------------------------------
===
 
 *
 *                  PCI_PKT_CREDITS3 = PCI Packet Credits For Output 3
 *
 * Used to decrease the number of packets to be processed by the host from Output-3 and return
 * buffer/info pointer pairs to Output-3. The value in this register is acted upon when the
 * least-significant-byte of this register is written.
 *

     ==============================================================
     PCI_PKT_CREDITS3 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  PTR_CNT  R/W      0           NS        This field value is added to the                       
                                                 NPI's internal Buffer/Info Pointer Pair count.                                                 
<31:16> PKT_CNT  R/W      0           NS        The value written to this field will be                
                                                 subtracted from PCI_PKTS_SENT3[PKT_CNT].
----------------------------------------------------------------------------------------------------
===
 
 *
 *                  PCI_PKTS_SENT_INT_LEV0 = PCI Packets Sent Interrupt Level For Output 0
 *
 * Interrupt when number of packets sent is equal to or greater than the register value.
 *

     ==============================================================
     PCI_PKTS_SENT_INT_LEV0 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_CNT  R/W      0           NS        When corresponding port's PCI_PKTS_SENT0 value          
                                                 exceeds the value in this register, PCNT0 of the
                                                 PCI_INT_SUM and PCI_INT_SUM2 will be set.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_PKTS_SENT_INT_LEV1 = PCI Packets Sent Interrupt Level For Output 1
 *
 * Interrupt when number of packets sent is equal to or greater than the register value.
 *

     ==============================================================
     PCI_PKTS_SENT_INT_LEV1 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_CNT  R/W      0           NS        When corresponding port's PCI_PKTS_SENT1 value          
                                                 exceeds the value in this register, PCNT1 of the
                                                 PCI_INT_SUM and PCI_INT_SUM2 will be set.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_PKTS_SENT_INT_LEV2 = PCI Packets Sent Interrupt Level For Output 2
 *
 * Interrupt when number of packets sent is equal to or greater than the register value.
 *

     ==============================================================
     PCI_PKTS_SENT_INT_LEV2 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_CNT  R/W      0           NS        When corresponding port's PCI_PKTS_SENT2 value          
                                                 exceeds the value in this register, PCNT2 of the
                                                 PCI_INT_SUM and PCI_INT_SUM2 will be set.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_PKTS_SENT_INT_LEV3 = PCI Packets Sent Interrupt Level For Output 3
 *
 * Interrupt when number of packets sent is equal to or greater than the register value.
 *

     ==============================================================
     PCI_PKTS_SENT_INT_LEV3 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_CNT  R/W      0           NS        When corresponding port's PCI_PKTS_SENT3 value          
                                                 exceeds the value in this register, PCNT3 of the
                                                 PCI_INT_SUM and PCI_INT_SUM2 will be set.
----------------------------------------------------------------------------------------------------
===
  
 *
 *                  PCI_PKTS_SENT_TIME0 = PCI Packets Sent Timer For Output-0
 *
 * Time to wait from packet being sent to host from Output-0 before issuing an interrupt.
 *

     ==============================================================
     PCI_PKTS_SENT_TIME0 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_TIME R/W      0           NS        Number of PCI clock cycle to wait before               
                                                 issuing an interrupt to the host when a
                                                 packet from this port has been sent to the
                                                 host.  The timer is reset when the 
                                                 PCI_INT_SUM[21] register is cleared.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_PKTS_SENT_TIME1 = PCI Packets Sent Timer For Output-1
 *
 * Time to wait from packet being sent to host from Output-1 before issuing an interrupt.
 *

     ==============================================================
     PCI_PKTS_SENT_TIME1 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_TIME R/W      0           NS        Number of PCI clock cycle to wait before               
                                                 issuing an interrupt to the host when a
                                                 packet from this port has been sent to the
                                                 host.  The timer is reset when the
                                                 PCI_INT_SUM[22] register is cleared.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_PKTS_SENT_TIME2 = PCI Packets Sent Timer For Output-2
 *
 * Time to wait from packet being sent to host from Output-2 before issuing an interrupt.
 *

     ==============================================================
     PCI_PKTS_SENT_TIME2 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_TIME R/W      0           NS        Number of PCI clock cycle to wait before               
                                                 issuing an interrupt to the host when a
                                                 packet from this port has been sent to the
                                                 host.  The timer is reset when the 
                                                 PCI_INT_SUM[23] register is cleared.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_PKTS_SENT_TIME3 = PCI Packets Sent Timer For Output-3
 *
 * Time to wait from packet being sent to host from Output-3 before issuing an interrupt.
 *

     ==============================================================
     PCI_PKTS_SENT_TIME3 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_TIME R/W      0           NS        Number of PCI clock cycle to wait before               
                                                 issuing an interrupt to the host when a
                                                 packet from this port has been sent to the
                                                 host.  The timer is reset when the
                                                 PCI_INT_SUM[24] register is cleared.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_DBELL0 = PCI Doorbell-0
 *
 * The value to write to the doorbell 0 register. The value in this register is acted upon when the
 * least-significant-byte of this register is written.
 *

     ==============================================================
     PCI_DBELL_0 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  INC_VAL  R/W      0           NS        Software writes this register with the                 
                                                 number of new Instructions to be processed
                                                 on the Instruction Queue. When read this 
                                                 register contains the last write value.
<31:16> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_DBELL1 = PCI Doorbell-1
 *
 * The value to write to the doorbell 1 register. The value in this register is acted upon when the
 * least-significant-byte of this register is written.
 *

     ==============================================================
     PCI_DBELL_1 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  INC_VAL  R/W      0           NS        Software writes this register with the                 
                                                 number of new Instructions to be processed
                                                 on the Instruction Queue. When read this 
                                                 register contains the last write value.
<31:16> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_DBELL2 = PCI Doorbell-2
 *
 * The value to write to the doorbell 2 register. The value in this register is acted upon when the
 * least-significant-byte of this register is written.
 *

     ==============================================================
     PCI_DBELL_2 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  INC_VAL  R/W      0           NS        Software writes this register with the                 
                                                 number of new Instructions to be processed
                                                 on the Instruction Queue. When read this 
                                                 register contains the last write value.
<31:16> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_DBELL3 = PCI Doorbell-3
 *
 * The value to write to the doorbell 3 register. The value in this register is acted upon when the
 * least-significant-byte of this register is written.
 *

     ==============================================================
     PCI_DBELL_3 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  INC_VAL  R/W      0           NS        Software writes this register with the                 
                                                 number of new Instructions to be processed
                                                 on the Instruction Queue. When read this 
                                                 register contains the last write value.
<31:16> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===
 
 *
 *                  PCI_INSTR_COUNT0 = PCI Instructions Outstanding Request Count
 *
 * The number of instructions to be fetched by the Instruction-0 Engine.
 *

     ==============================================================
     PCI_INSTR_COUNT0 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  ICNT     R/W1C    0           0         Number of Instructions to be fetched by the            
                                                 Instruction Engine.
                                                 A write of any non zero value to this register 
                                                 will clear the value of this register.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_INSTR_COUNT1 = PCI Instructions Outstanding Request Count
 *
 * The number of instructions to be fetched by the Instruction-1 Engine.
 *

     ==============================================================
     PCI_INSTR_COUNT1 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  ICNT     R/W1C    0           0         Number of Instructions to be fetched by the            
                                                 Instruction Engine.
                                                 A write of any non zero value to this register 
                                                 will clear the value of this register.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_INSTR_COUNT2 = PCI Instructions Outstanding Request Count
 *
 * The number of instructions to be fetched by the Instruction-2 Engine.
 *

     ==============================================================
     PCI_INSTR_COUNT2 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  ICNT     R/W1C    0           0         Number of Instructions to be fetched by the            
                                                 Instruction Engine.
                                                 A write of any non zero value to this register 
                                                 will clear the value of this register.
----------------------------------------------------------------------------------------------------
===
 
 *
 *                  PCI_INSTR_COUNT3 = PCI Instructions Outstanding Request Count
 *
 * The number of instructions to be fetched by the Instruction-3 Engine.
 *

     ==============================================================
     PCI_INSTR_COUNT3 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  ICNT     R/W1C    0           0         Number of Instructions to be fetched by the            
                                                 Instruction Engine.
                                                 A write of any non zero value to this register 
                                                 will clear the value of this register.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_DMA_CNT0 = PCI DMA Count0
 *
 * Keeps track of the number of DMAs or bytes sent by DMAs. The value in this register is acted upon when the
 * least-significant-byte of this register is written.
 *

     ==============================================================
     PCI_DMA_CNT0 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  DMA0_CNT R/W      0           0         Update with the number of DMAs completed or the        
                                                 number of bytes sent for DMA's associated with
                                                 this counter. When this register is written the
                                                 value written to [15:0] will be subtracted from
                                                 the value in this register.
----------------------------------------------------------------------------------------------------
===
 
 *
 *                  PCI_DMA_CNT1 = PCI DMA Count1
 *
 * Keeps track of the number of DMAs or bytes sent by DMAs. The value in this register is acted upon when the
 * least-significant-byte of this register is written.
 *

     ==============================================================
     PCI_DMA_CNT1 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  DMA1_CNT R/W      0           0         Update with the number of DMAs completed or the        
                                                 number of bytes sent for DMA's associated with
                                                 this counter. When this register is written the
                                                 value written to [15:0] will be subtracted from
                                                 the value in this register.
----------------------------------------------------------------------------------------------------
===
 
 *
 *                  PCI_DMA_INT_LEV0 = PCI DMA Sent Interrupt Level For DMA 0
 *
 * Interrupt when the value in PCI_DMA_CNT0 is equal to or greater than the register value.
 *

     ==============================================================
     PCI_DMA_INT_LEV0 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_CNT  R/W      0           NS        When PCI_DMA_CNT0 exceeds the value in this            
                                                 DCNT0 will be set in PCI_INT_SUM and PCI_INT_SUM2.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_DMA_INT_LEV1 = PCI DMA Sent Interrupt Level For DMA 1
 *
 * Interrupt when the value in PCI_DMA_CNT1 is equal to or greater than the register value.
 *

     ==============================================================
     PCI_DMA_INT_LEV1 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  PKT_CNT  R/W      0           NS        When PCI_DMA_CNT1 exceeds the value in this            
                                                 DCNT1 will be set in PCI_INT_SUM and PCI_INT_SUM2.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_DMA_TIME0 = PCI DMA Sent Timer For DMA0
 *
 * Time to wait from DMA being sent before issuing an interrupt.
 *

     ==============================================================
     PCI_DMA_TIME0 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  DMA_TIME R/W      0           NS        Number of PCI clock cycle to wait before               
                                                 setting DTIME0 in PCI_INT_SUM and PCI_INT_SUM2.
                                                 After PCI_DMA_CNT0 becomes non-zero.
                                                 The timer is reset when the
                                                 PCI_INT_SUM[27] register is cleared.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_DMA_TIME1 = PCI DMA Sent Timer For DMA1
 *
 * Time to wait from DMA being sent before issuing an interrupt.
 *

     ==============================================================
     PCI_DMA_TIME1 Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  DMA_TIME R/W      0           NS        Number of PCI clock cycle to wait before               
                                                 setting DTIME1 in PCI_INT_SUM and PCI_INT_SUM2.
                                                 After PCI_DMA_CNT1 becomes non-zero.
                                                 The timer is reset when the
                                                 PCI_INT_SUM[27] register is cleared.
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_MSI_RCV = PCI's MSI Received Vector Register
 *
 * A bit is set in this register relative to the vector received during a MSI. The value in this
 * register is acted upon when the least-significant-byte of this register is written.
 *

     ==============================================================
     PCI_MSI_RCV Type=PCI
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<5:0>  INT       WO       0           NS        When an MSI is received on the PCI the bit selected    
                                                 by data [5:0] will be set in this register. To
                                                 clear this bit a write must take place to the
                                                 NPI_MSI_RCV register where any bit set to 1 is
                                                 cleared. Reading this address will return an
                                                 unpredicatable value.
<31:6>  NS       R/W      NS          NS        Reserved. Reading this address will return an          
                                                 unpredicatable value.
----------------------------------------------------------------------------------------------------
===
 
   
 
 *
 *                  PCI_BAR1_INDEX@ = PCI Index@ Register
 *
 * Contains address index and control bits for access to memory ranges of Bar-1,
 * when PCI supplied address-bits [26:22] == @.
 *
 * FOR PASS-1 The 32 register have the following reset value:
 *       PCI_BAR1_INDEX0[17:0]  = 0x01001
 *       PCI_BAR1_INDEX1[17:0]  = 0x01019
 *       PCI_BAR1_INDEX2[17:0]  = 0x01012
 *       PCI_BAR1_INDEX3[17:0]  = 0x01039
 *       PCI_BAR1_INDEX4[17:0]  = 0x01041
 *       PCI_BAR1_INDEX5[17:0]  = 0x01059
 *       PCI_BAR1_INDEX6[17:0]  = 0x01061
 *       PCI_BAR1_INDEX7[17:0]  = 0x01079
 *       PCI_BAR1_INDEX8[17:0]  = 0x01081
 *       PCI_BAR1_INDEX9[17:0]  = 0x01099
 *       PCI_BAR1_INDEX10[17:0] = 0x0000A;
 *       PCI_BAR1_INDEX11[17:0] = 0x0000B;
 *       PCI_BAR1_INDEX12[17:0] = 0x0000C;
 *       PCI_BAR1_INDEX13[17:0] = 0x0000D;
 *       PCI_BAR1_INDEX14[17:0] = 0x0000E;
 *       PCI_BAR1_INDEX15[17:0] = 0x0000F;
 *       PCI_BAR1_INDEX16[17:0] = 0x00010;
 *       PCI_BAR1_INDEX17[17:0] = 0x00011;
 *       PCI_BAR1_INDEX18[17:0] = 0x00012;
 *       PCI_BAR1_INDEX19[17:0] = 0x00013;
 *       PCI_BAR1_INDEX20[17:0] = 0x00014;
 *       PCI_BAR1_INDEX21[17:0] = 0x00015;
 *       PCI_BAR1_INDEX22[17:0] = 0x00016;
 *       PCI_BAR1_INDEX23[17:0] = 0x00017;
 *       PCI_BAR1_INDEX24[17:0] = 0x00018;
 *       PCI_BAR1_INDEX25[17:0] = 0x00019;
 *       PCI_BAR1_INDEX26[17:0] = 0x0001A;
 *       PCI_BAR1_INDEX27[17:0] = 0x0001B;
 *       PCI_BAR1_INDEX28[17:0] = 0x0001C;
 *       PCI_BAR1_INDEX29[17:0] = 0x0001D;
 *       PCI_BAR1_INDEX30[17:0] = 0x0001E;
 *       PCI_BAR1_INDEX31[17:0] = 0x0001F;
 *
 *

     ==============================================================
     PCI_BAR1_INDEX(0..31) Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<31:18> NS       RAZ      NS          NS        Reserved                                               
<17:4>  ADDR_IDX R/W      0x0         NS        Address bits [35:22] sent to L2C                       
<3>     CA       R/W      0x0         0         Set '1' when access is not to be cached in L2.         
<2:1>   END_SWP  R/W      0x0         NS        Endian Swap Mode                                       
<0>     ADDR_V   R/W      0x0         NS        Set '1' when the selected address range is valid.      
----------------------------------------------------------------------------------------------------
===
 
 *
 *                  PCI_READ_CMD_6 = PCI Read Command 6 Register
 *
 * Contains control inforamtion related to a received PCI Command 6.
 *

     ==============================================================
     PCI_READ_CMD_6 Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<31:9>  NS       RAZ      NS          NS        Reserved                                               
<8:3>   MIN_DATA R/W      0x0         4         The number of words to have buffered in the PNI        
                                                 before informing the PCIX-Core that we have
                                                 read data available for the outstanding Delayed
                                                 read. 0 is treated as a 64.
                                                 For reads to the expansion this value is not used.
<2:0>   PREFETCH R/W      0x0         2         Control the amount of data to be preteched when        
                                                 this type of bhmstREAD command is received.
                                                 0 = 1 32/64 bit word.
                                                 1 = From address to end of 128B block.
                                                 2 = From address to end of 128B block plus 128B.
                                                 3 = From address to end of 128B block plus 256B.
                                                 4 = From address to end of 128B block plus 384B.
                                                 For reads to the expansion this value is not used.
----------------------------------------------------------------------------------------------------
===

*
*                  PCI_READ_CMD_C = PCI Read Command C Register
*
* Contains control inforamtion related to a received PCI Command C.
*

     ==============================================================
     PCI_READ_CMD_C Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------

<31:9>  NS       RAZ      NS          NS        Reserved                                               
<8:3>   MIN_DATA R/W      0x0         6         The number of words to have buffered in the PNI        
                                                 before informing the PCIX-Core that we have
                                                 read data available for the outstanding Delayed
                                                 read. 0 is treated as a 64.
                                                 For reads to the expansion this value is not used.
<2:0>   PREFETCH R/W      0x0         3         Control the amount of data to be preteched when        
                                                 this type of READ command is received.
                                                 0 = 1 32/64 bit word.
                                                 1 = From address to end of 128B block.
                                                 2 = From address to end of 128B block plus 128B.
                                                 3 = From address to end of 128B block plus 256B.
                                                 4 = From address to end of 128B block plus 384B.
                                                 For reads to the expansion this value is not used.
----------------------------------------------------------------------------------------------------
===

*
*                  PCI_READ_CMD_E = PCI Read Command E Register
*
* Contains control inforamtion related to a received PCI Command 6.
*

     ==============================================================
     PCI_READ_CMD_E Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------

<31:9>  NS       RAZ      NS          NS        Reserved                                               
<8:3>   MIN_DATA R/W      0x0         6         The number of words to have buffered in the PNI        
                                                 before informaing the PCIX-Core that we have
                                                 read data available for the outstanding Delayed
                                                 read. 0 is treated as a 64.
                                                 For reads to the expansion this value is not used.
<2:0>   PREFETCH R/W      0x0         3         Control the amount of data to be preteched when        
                                                 this type of READ command is received.
                                                 0 = 1 32/64 bit word.
                                                 1 = From address to end of 128B block.
                                                 2 = From address to end of 128B block plus 128B.
                                                 3 = From address to end of 128B block plus 256B.
                                                 4 = From address to end of 128B block plus 384B.
                                                 For reads to the expansion this value is not used.
----------------------------------------------------------------------------------------------------
===

*
*                  PCI_CTL_STATUS_2 = PCI Control Status 2 Register
*
* Control status register accessable from both PCI and NCB.
*

     ==============================================================
     PCI_CTL_STATUS_2 Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------

<31:29> NS       RAZ      NS          NS        Reserved                                               
<28:26> BB1_HOLE R/W      0x0         0         Big BAR 1 Hole                                         
                                                 NOT IN PASS 1 NOR PASS 2
                                                 When PCI_CTL_STATUS_2[BB1]=1, this field defines
                                                 an encoded size of the upper BAR1 region which
                                                 OCTEON will mask out (ie: not respond to). 
                                                 (see definition of BB1_HOLE and BB1_SIZ encodings
                                                 in the PCI_CTL_STATUS_2[BB1] definition below). 
  
<25>    BB1_SIZ  R/W      0x0         0         Big BAR 1 Size                                         
                                                 NOT IN PASS 1 NOR PASS 2
                                                 When PCI_CTL_STATUS_2[BB1]=1, this field defines
                                                 the programmable SIZE of BAR 1.
                                                    0: 1GB / 1: 2GB 
 
<24>    BB_CA    R/W      0x0         0         Set to '1' for Big Bar Mode to do STT/LDT L2C          
                                                 operations.
                                                 NOT IN PASS 1 NOR PASS 2

<23:22> BB_ES    R/W      0x0         0         Big Bar Node Endian Swap Mode                          
                                                    0: No Swizzle 
                                                    1: Byte Swizzle (per-QW)
                                                    2: Byte Swizzle (per-LW)
                                                    3: LongWord Swizzle
                                                 NOT IN PASS 1 NOR PASS 2
  
<21>    BB1      R/W      0x0         0         Big Bar 1 Enable                                       
                                                 NOT IN PASS 1 NOR PASS 2
                                                 When PCI_CTL_STATUS_2[BB1] is set, the following differences
                                                 occur:

                                                 - OCTEON's BAR1 becomes somewhere in the range 512-2048 MB rather
                                                   than the default 128MB.

                                                 - The following table indicates the effective size of
                                                   BAR1 when BB1 is set:

                                                     BB1_SIZ   BB1_HOLE  Effective size    Comment
                                                   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                                        0          0         1024 MB      Normal 1GB BAR
                                                        0          1         1008 MB      1 GB, 16 MB hole
                                                        0          2          992 MB      1 GB, 32 MB hole
                                                        0          3          960 MB      1 GB, 64 MB hole
                                                        0          4          896 MB      1 GB,128 MB hole
                                                        0          5          768 MB      1 GB,256 MB hole
                                                        0          6          512 MB      1 GB,512 MB hole
                                                        0          7         Illegal
                                                        1          0         2048 MB      Normal 2GB BAR
                                                        1          1         2032 MB      2 GB, 16 MB hole
                                                        1          2         2016 MB      2 GB, 32 MB hole
                                                        1          3         1984 MB      2 GB, 64 MB hole
                                                        1          4         1920 MB      2 GB,128 MB hole
                                                        1          5         1792 MB      2 GB,256 MB hole
                                                        1          6         1536 MB      2 GB,512 MB hole
                                                        1          7         Illegal

                                                 - When BB1_SIZ is 0: PCI_CFG06[LBASE<2:0>] reads as zero
                                                   and are ignored on write. BAR1 is an entirely ordinary
                                                   1 GB (power-of-two) BAR in all aspects when BB1_HOLE is 0.
                                                   When BB1_HOLE is not zero, BAR1 addresses are programmed
                                                   as if the BAR were 1GB, but, OCTEON does not respond
                                                   to addresses in the programmed holes.

                                                 - When BB1_SIZ is 1: PCI_CFG06[LBASE<3:0>] reads as zero
                                                   and are ignored on write. BAR1 is an entirely ordinary
                                                   2 GB (power-of-two) BAR in all aspects when BB1_HOLE is 0.
                                                   When BB1_HOLE is not zero, BAR1 addresses are programmed
                                                   as if the BAR were 2GB, but, OCTEON does not respond
                                                   to addresses in the programmed holes.

                                                 - Note that the BB1_HOLE value has no effect on the
                                                   PCI_CFG06[LBASE] behavior. BB1_HOLE only affects whether
                                                   OCTEON accepts an address. BB1_SIZ does affect PCI_CFG06[LBASE]
                                                   behavior, however.

                                                 - The first 128MB, i.e. addresses on the PCI bus in the range
                                             
                                                     BAR1+0          .. BAR1+0x07FFFFFF

                                                   access OCTEON's DRAM addresses with PCI_BAR1_INDEX CSR's
                                                   as before

                                                 - The remaining address space, i.e. addresses
                                                   on the PCI bus in the range

                                                      BAR1+0x08000000 .. BAR1+size-1,

                                                   where size is the size of BAR1 as selected by the above
                                                   table (based on the BB1_SIZ and BB1_HOLE values), are mapped to
                                                   OCTEON physical DRAM addresses as follows:

                                                           PCI Address Range         OCTEON Physical Address Range
                                                   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                                    BAR1+0x08000000 .. BAR1+size-1 | 0x88000000 .. 0x7FFFFFFF+size

                                                   and PCI_CTL_STATUS_2[BB_ES] is the endian-swap and
                                                   PCI_CTL_STATUS_2[BB_CA] is the L2 cache allocation bit
                                                   for these references.

                                                   The consequences of any burst that crosses the end of the PCI
                                                   Address Range for BAR1 are unpredicable.

                                                 - The consequences of any burst access that crosses the boundary
                                                   between BAR1+0x07FFFFFF and BAR1+0x08000000 are unpredictable in PCI-X
                                                   mode. OCTEON may disconnect PCI references at this boundary.

<20>    BB0      R/W      0x0         0         Big Bar 0 Enable                                       
                                                 NOT IN PASS 1 NOR PASS 2
                                                 When PCI_CTL_STATUS_2[BB0] is set, the following 
                                                 differences occur:
                                                 - OCTEON's BAR0 becomes 2GB rather than the default 4KB.
                                                   PCI_CFG04[LBASE<18:0>] reads as zero and is ignored on write.

                                                 - OCTEON's BAR0 becomes burstable. (When BB0 is clear, OCTEON
                                                   single-phase disconnects PCI BAR0 reads and PCI/PCI-X BAR0
                                                   writes, and splits (burstably) PCI-X BAR0 reads.)

                                                 - The first 4KB, i.e. addresses on the PCI bus in the range
                                                       BAR0+0      .. BAR0+0xFFF
                                                   access OCTEON's PCI-type CSR's as when BB0 is clear.

                                                 - The remaining address space, i.e. addresses on the PCI bus
                                                   in the range
                                                       BAR0+0x1000 .. BAR0+0x7FFFFFFF
                                                   are mapped to OCTEON physical DRAM addresses as follows:

                                                      PCI Address Range                  OCTEON Physical Address Range
                                                   ------------------------------------+------------------------------
                                                    BAR0+0x00001000 .. BAR0+0x0FFFFFFF | 0x000001000 .. 0x00FFFFFFF
                                                    BAR0+0x10000000 .. BAR0+0x1FFFFFFF | 0x410000000 .. 0x41FFFFFFF
                                                    BAR0+0x20000000 .. BAR0+0x7FFFFFFF | 0x020000000 .. 0x07FFFFFFF

                                                   and PCI_CTL_STATUS_2[BB_ES] is the endian-swap and
                                                   PCI_CTL_STATUS_2[BB_CA] is the L2 cache allocation bit
                                                   for these references.

                                                   The consequences of any burst that crosses the end of the PCI
                                                   Address Range for BAR0 are unpredicable.

                                                 - The consequences of any burst access that crosses the boundary
                                                   between BAR0+0xFFF and BAR0+0x1000 are unpredictable in PCI-X
                                                   mode. OCTEON may disconnect PCI references at this boundary.

                                                 - The results of any burst read that crosses the boundary
                                                   between BAR0+0x0FFFFFFF and BAR0+0x10000000 are unpredictable.
                                                   The consequences of any burst write that crosses this same
                                                   boundary are unpredictable.

                                                 - The results of any burst read that crosses the boundary
                                                   between BAR0+0x1FFFFFFF and BAR0+0x20000000 are unpredictable.
                                                   The consequences of any burst write that crosses this same
                                                   boundary are unpredictable.

<19>    ERST_N   RO       0x1         1         Reset active Low. PASS-2                               
<18>    BAR2PRES R/W      NS          NS        From fuse block. When fuse(MIO_FUS_DAT3[BAR2_EN])      
                                                 is NOT blown the value of this field is '0' after
                                                 reset and BAR2 is NOT present. When the fuse IS 
                                                 blown the value of this field is '1' after reset 
                                                 and BAR2 is present. Note that SW can change this
                                                 field after reset. This is a PASS-2 field.

<17>    SCMTYP   RO       0x0         NS        Split Completion Message CMD Type (0=RD/1=WR)          
                                                 When SCM=1, SCMTYP specifies the CMD intent (R/W)   
<16>    SCM      RO       0x0         NS        Split Completion Message Detected (Read or Write)      
<15>    EN_WFILT R/W      0x0         1         When '1' the window-access filter is enabled.          
                                                 Unfilter writes are:
                                                 MIO, SubId0
                                                 MIO, SubId7
                                                 NPI, SubId0
                                                 NPI, SubId7
                                                 POW, SubId7
                                                 DFA, SubId7
                                                 IPD, SubId7
                                                 Unfiltered Reads are:
                                                 MIO, SubId0
                                                 MIO, SubId7
                                                 NPI, SubId0
                                                 NPI, SubId7
                                                 POW, SubId1
                                                 POW, SubId2
                                                 POW, SubId3
                                                 POW, SubId7
                                                 DFA, SubId7
                                                 IPD, SubId7
<14>    SPARE    R/W      0x0         0         Spare Bit                                              
<13>    AP_PCIX  RO       0x0         NS        PCX Core Mode status (0=PCI Bus/1=PCIX)                
                                                 If one or more of PCI_DEVSEL_N, PCI_STOP_N, and 
                                                 PCI_TRDY_N are asserted at the rising edge of 
                                                 PCI_RST_N, the device enters PCI-X mode. 
                                                 Otherwise, the device enters conventional PCI
                                                 mode at the rising edge of RST#.

<12>    AP_64AD  RO       0x0         NS        PCX Core Bus status (0=32b Bus/1=64b Bus)              
                                                 When PCI_RST_N pin is de-asserted, the state 
                                                 of PCI_REQ64_N(driven by central agent) determines
                                                 the width of the PCI/X bus.

<11>    B12_BIST RO       0x0         0         Bist Status For Memeory In B12                         
<10>    PMO_AMOD R/W      0x0         0         PMO-ARB Mode (0=FP{HP=CMD1,LP=CMD0}/1=RR)              
<9:7>   PMO_FPC  R/W      0x0         0         PMO-ARB Fixed Priority Counter                         
                                                 When PMO_AMOD=0 (FP mode), this field represents 
                                                 the # of CMD1 requests that are issued (at higher
                                                 priority) before a single lower priority CMD0 
                                                 is allowed to issue (to ensure foward progress).   
                                                    0: 1 CMD1 Request issued before CMD0 allowed
                                                   ...
                                                    7: 8 CMD1 Requests issued before CMD0 allowed
<6:4>   TSR_HWM  R/W      0x1         NS        Target Split-Read ADB(allowable disconnect boundary)   
                                                 High Water Mark. 
                                                 Specifies the number of ADBs(128 Byte aligned chunks) 
                                                 that are accumulated(pending) BEFORE the Target Split 
                                                 completion is attempted on the PCI bus. 
                                                     0: RESERVED/ILLEGAL
                                                     1: 2 Pending ADBs (129B-256B)
                                                     2: 3 Pending ADBs (257B-384B)
                                                     3: 4 Pending ADBs (385B-512B) 
                                                     4: 5 Pending ADBs (513B-640B)
                                                     5: 6 Pending ADBs (641B-768B)
                                                     6: 7 Pending ADBs (769B-896B)
                                                     7: 8 Pending ADBs (897B-1024B)

                                                 Example: Suppose a 1KB target memory request with 
                                                 starting byte offset address[6:0]=0x7F is split by 
                                                 the OCTEON and the TSR_HWM=1(2 ADBs). 
                                                 The OCTEON will start the target split completion
                                                 on the PCI Bus after 1B(1st ADB)+128B(2nd ADB)=129B 
                                                 of data have been received from memory (even though 
                                                 the remaining 895B has not yet been received). The 
                                                 OCTEON will continue the split completion until it 
                                                 has consumed all of the pended split data. If the 
                                                 full transaction length(1KB) of data was NOT entirely
                                                 transferred, then OCTEON will terminate the split 
                                                 completion and again wait for another 2 ADB-aligned data 
                                                 chunks(256B) of pended split data to be received from 
                                                 memory before starting another split completion request. 
                                                 This allows Octeon (as split completer), to send back 
                                                 multiple split completions for a given large split 
                                                 transaction without having to wait for the entire
                                                 transaction length to be received from memory.  
                          
                                                 NOTE: For split transaction sizes 'smaller' than the 
                                                 specified TSR_HWM value, the split completion 
                                                 is started when the last datum has been received from 
                                                 memory. 

                                                 NOTE: It is IMPERATIVE that this field NEVER BE
                                                 written to a ZERO value. A value of zero is 
                                                 reserved/illegal and can result in PCIX bus hangs).
 
<3>     BAR2_ENB R/W      0           1         When set '1' BAR2 is enable and will respond when      
                                                 clear '0' BAR2 access will be target-aborted.
<2:1>   BAR2_ESX R/W      0           NS        Value will be XORed with pci-address[37:36] to         
                                                 determine the endian swap mode.
<0>     BAR2_CAX R/W      0           0         Value will be XORed with pci-address[38] to            
                                                 determine the L2 cache attribute.
                                                 When XOR result is 1, not cached in L2
----------------------------------------------------------------------------------------------------
===

 *
 *                  NPI_MSI_RCV = NPI MSI Receive Vector Register
 *
 * A bit is set in this register relative to the vector received during a MSI. And cleared by a W1 to the register.
 *

     ==============================================================
     NPI_MSI_RCV Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<63:0>  INT_VEC  R/W1C    0           0         Refer to PCI_MSI_RCV                                   
----------------------------------------------------------------------------------------------------
===
 

 *
 *                  PCI_INT_SUM2 = PCI Interrupt Summary2 Register
 *
 * The PCI Interrupt Summary2 Register copy used for RSL interrupts.
 *

     ==============================================================
     PCI_INT_SUM2 Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     TR_WABT  R/W1C    0           0         PCI Target Abort detected on write.                    
<1>     MR_WABT  R/W1C    0           0         PCI Master Abort detected on write.                    
<2>     MR_WTTO  R/W1C    0           0         PCI Master Retry Timeout on write.                     
<3>     TR_ABT   R/W1C    0           0         PCI Target Abort On Read.                              
<4>     MR_ABT   R/W1C    0           0         PCI Master Abort On Read.                              
<5>     MR_TTO   R/W1C    0           0         PCI Master Retry Timeout On Read.                      
<6>     MSI_PER  R/W1C    0           0         PCI MSI Parity Error.                                  
<7>     MSI_TABT R/W1C    0           0         PCI MSI Target Abort.                                  
<8>     MSI_MABT R/W1C    0           0         PCI MSI Master Abort.                                  
<9>     MSC_MSG  R/W1C    0           0         Master Split Completion Message Detected               
<10>    TSR_ABT  R/W1C    0           0         Target Split-Read Abort Detected                       
<11>    SERR     R/W1C    0           0         SERR# detected by PCX Core                             
<12>    APERR    R/W1C    0           0         Address Parity Error detected by PCX Core              
<13>    DPERR    R/W1C    0           0         Data Parity Error detected by PCX Core                 
<14>    ILL_RWR  R/W1C    0x0         0         A write to the disabled PCI registers took place.      
<15>    ILL_RRD  R/W1C    0x0         0         A read  to the disabled PCI registers took place.      
<16>    RSL_INT  RO       0           0         This bit is set when the RSL Chain has                 
                                                 generated an interrupt.
<17>    PCNT0    R/W1C    0           0         This bit indicates that PCI_PKTS_SENT0                 
                                                 value is greater than the value
                                                 in the PCI_PKTS_SENT_INT_LEV0 register.
<18>    PCNT1    R/W1C    0           0         This bit indicates that PCI_PKTS_SENT1                 
                                                 value is greater than the value
                                                 in the PCI_PKTS_SENT_INT_LEV1 register.
<19>    PCNT2    R/W1C    0           0         This bit indicates that PCI_PKTS_SENT2                 
                                                 value is greater than the value
                                                 in the PCI_PKTS_SENT_INT_LEV2 register.
<20>    PCNT3    R/W1C    0           0         This bit indicates that PCI_PKTS_SENT3                 
                                                 value is greater than the value
                                                 in the PCI_PKTS_SENT_INT_LEV3 register.
<21>    PTIME0   R/W1C    0           0         When the value in the PCI_PKTS_SENT0                   
                                                 register is not 0 the Sent-0 timer counts.
                                                 When the Sent-0 timer has a value greater
                                                 than the PCI_PKTS_SENT_TIME0 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<22>    PTIME1   R/W1C    0           0         When the value in the PCI_PKTS_SENT1                   
                                                 register is not 0 the Sent-1 timer counts.
                                                 When the Sent-1 timer has a value greater
                                                 than the PCI_PKTS_SENT_TIME1 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<23>    PTIME2   R/W1C    0           0         When the value in the PCI_PKTS_SENT2                   
                                                 register is not 0 the Sent-2 timer counts.
                                                 When the Sent-2 timer has a value greater
                                                 than the PCI_PKTS_SENT_TIME2 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<24>    PTIME3   R/W1C    0           0         When the value in the PCI_PKTS_SENT3                   
                                                 register is not 0 the Sent-3 timer counts.
                                                 When the Sent-3 timer has a value greater
                                                 than the PCI_PKTS_SENT_TIME3 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<25>    DCNT0    R/W1C    0           0         This bit indicates that PCI_DMA_CNT0                   
                                                 value is greater than the value
                                                 in the PCI_DMA_INT_LEV0 register.
<26>    DCNT1    R/W1C    0           0         This bit indicates that PCI_DMA_CNT1                   
                                                 value is greater than the value
                                                 in the PCI_DMA_INT_LEV1 register.
<27>    DTIME0   R/W1C    0           0         When the value in the PCI_DMA_CNT0                     
                                                 register is not 0 the DMA_CNT0 timer counts.
                                                 When the DMA0_CNT timer has a value greater
                                                 than the PCI_DMA_TIME0 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<28>    DTIME1   R/W1C    0           0         When the value in the PCI_DMA_CNT1                     
                                                 register is not 0 the DMA_CNT1 timer counts.
                                                 When the DMA1_CNT timer has a value greater
                                                 than the PCI_DMA_TIME1 register this
                                                 bit is set. The timer is reset when bit is
                                                 written with a one.
<29>    DMA0_FI  R/W1C    0x0         0         A DMA operation operation finished that was            
                                                 required to set the FORCE-INT bit for counter 0.
<30>    DMA1_FI  R/W1C    0x0         0         A DMA operation operation finished that was            
                                                 required to set the FORCE-INT bit for counter 1.
<31>    WIN_WR   R/W1C    0x0         0         A write to the disabled Window Write Data or           
                                                 Read-Address Register took place.
<32>    ILL_WR   R/W1C    0x0         0         A write to a disabled area of bar1 or bar2,            
                                                 when the mem area is disabled.
<33>    ILL_RD   R/W1C    0x0         0         A read to a disabled area of bar1 or bar2,             
                                                 when the mem area is disabled.
<63:34> NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_INT_ENB2 = PCI Interrupt Enable2 Register
 *
 * Enables interrupt bits in the PCI_INT_SUM2 register.
 * 

     ==============================================================
     PCI_INT_ENB2 Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     RTR_WABT  R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[0]         
<1>     RMR_WABT  R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[1]         
<2>     RMR_WTTO  R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[2]         
<3>     RTR_ABT   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[3]         
<4>     RMR_ABT   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[4]         
<5>     RMR_TTO   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[5]         
<6>     RMSI_PER  R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[6]         
<7>     RMSI_TABT R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[7]         
<8>     RMSI_MABT R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[8]         
<9>     RMSC_MSG  R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[9]         
<10>    RTSR_ABT  R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[10]        
<11>    RSERR     R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[11]        
<12>    RAPERR    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[12]        
<13>    RDPERR    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[13]        
<14>    ILL_RWR   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[14]        
<15>    ILL_RRD   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[15]        
<16>    RRSL_INT  R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[16]        
<17>    RPCNT0    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[17]        
<18>    RPCNT1    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[18]        
<19>    RPCNT2    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[19]        
<20>    RPCNT3    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[20]        
<21>    RPTIME0   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[21]        
<22>    RPTIME1   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[22]        
<23>    RPTIME2   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[23]        
<24>    RPTIME3   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[24]        
<25>    RDCNT0    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[25]        
<26>    RDCNT1    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[26]        
<27>    RDTIME0   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[27]        
<28>    RDTIME1   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[28]        
<29>    DMA0_FI   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[29]        
<30>    DMA1_FI   R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[30]        
<31>    WIN_WR    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[31]        
<32>    ILL_WR    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[32]        
<33>    ILL_RD    R/W      0           NS        RSL Chain Interrupt Enable for PCI_INT_SUM2[33]        
<63:34> NS        RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

*
*                  PCI_SCM_REG = PCI Master Split Completion Message Register
*
* This register contains the Master Split Completion Message(SCM) generated when a master split 
* transaction is aborted. 
*

     ==============================================================
     PCI_SCM_REG Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------

<63:32> NS       RAZ      NS          NS        Reserved                                               
<31:0>  SCM      RO       0x0         NS        Contains the Split Completion Message (SCM)            
                                                 driven when a master-split transaction is aborted.
                                                    [31:28]: Message Class
                                                    [27:20]: Message Index
                                                    [19]:    Reserved
                                                    [18:12]: Remaining Lower Address
                                                    [11:8]:  Upper Remaining Byte Count
                                                    [7:0]:   Lower Remaining Byte Count  
                                                 Refer to the PCIX1.0a specification, Fig 2-40
                                                 for additional details for the split completion
                                                 message format.  
----------------------------------------------------------------------------------------------------
===

 *
 *                  PCI_TSR_REG = PCI Target Split Attribute Register
 *
 * This register contains the Attribute field Master Split Completion Message(SCM) generated when a master split 
 * transaction is aborted. 
 *

     ==============================================================
     PCI_TSR_REG Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<63:36> NS       RAZ      NS          NS        Reserved                                               
<35:0>  TSR      RO       0x0         NS        Contains the Target Split Attribute field when a       
                                                 target-split transaction is aborted. 
                                                   [35:32]: Upper Byte Count
                                                   [31]:    BCM=Byte Count Modified
                                                   [30]:    SCE=Split Completion Error
                                                   [29]:    SCM=Split Completion Message
                                                   [28:24]: RESERVED
                                                   [23:16]: Completer Bus Number
                                                   [15:11]: Completer Device Number
                                                   [10:8]:  Completer Function Number
                                                   [7:0]:   Lower Byte Count 
                                                 Refer to the PCIX1.0a specification, Fig 2-39
                                                 for additional details on the completer attribute
                                                 bit assignments. 

----------------------------------------------------------------------------------------------------
===
  
 *
 *                  PCI_CNT_REG = PCI Clock Count Register
 *
 * This register is provided to software as a means to determine PCI Bus Type/Speed.
 *

     ==============================================================
     PCI_CNT_REG Type=PCI_NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
 
<63:38> NS       RAZ      NS          NS        Reserved                                               
<37>    HM_PCIX  RO       0x0         NS        PCI Host Mode Sampled Bus Type (0:PCI/1:PCIX)          
                                                 This field represents what OCTEON(in Host mode) 
                                                 sampled as the 'intended' PCI Bus Type based on 
                                                 the PCI_PCIXCAP pin. (see HM_SPEED Bus Type/Speed
                                                 encoding table). 

<36:35> HM_SPEED RO       0x0         NS        PCI Host Mode Sampled Bus Speed                        
                                                 This field represents what OCTEON(in Host mode) 
                                                 sampled as the 'intended' PCI Bus Speed based on 
                                                 the PCI100, PCI_M66EN and PCI_PCIXCAP pins. 
                                                 NOTE: This DOES NOT reflect what the actual PCI 
                                                 Bus Type/Speed values are. They only indicate what 
                                                 OCTEON sampled as the 'intended' values. 

                                                 PCI Host Mode Sampled Bus Type/Speed Table: 
                                                   M66EN | PCIXCAP | PCI100  |  HM_PCIX | HM_SPEED[1:0]
                                                ---------+---------+---------+----------+-------------
                                                     0   |    0    |    0    | 0=PCI    |  00=33 MHz 
                                                     0   |    0    |    1    | 0=PCI    |  00=33 MHz 
                                                     0   |    Z    |    0    | 0=PCI    |  01=66 MHz 
                                                     0   |    Z    |    1    | 0=PCI    |  01=66 MHz 
                                                     1   |    0    |    0    | 0=PCI    |  01=66 MHz 
                                                     1   |    0    |    1    | 0=PCI    |  01=66 MHz 
                                                     1   |    Z    |    0    | 0=PCI    |  01=66 MHz 
                                                     1   |    Z    |    1    | 0=PCI    |  01=66 MHz 
                                                     0   |    1    |    1    | 1=PCIX   |  10=100 MHz 
                                                     1   |    1    |    1    | 1=PCIX   |  10=100 MHz 
                                                     0   |    1    |    0    | 1=PCIX   |  11=133 MHz 
                                                     1   |    1    |    0    | 1=PCIX   |  11=133 MHz 

                                                 NOTE: PCIXCAP has tri-level value (0,1,Z). See PCI specification
                                                 for more details on board level hookup to achieve these
                                                 values.

                                                 NOTE: Software can use the NPI_PCI_INT_ARB_CFG[PCI_OVR] 
                                                 to override the 'sampled' PCI Bus Type/Speed.   

                                                 NOTE: Software can also use the PCI_CNT_REG[PCICNT] to determine 
                                                 the exact PCI(X) Bus speed.
 
                                                 Example: PCI_REF_CLKIN=133MHz
                                                    PCI_HOST_MODE=1
                                                    PCI_M66EN=0
                                                    PCI_PCIXCAP=1
                                                    PCI_PCI100=1
                                                 For this example, OCTEON will generate 
                                                 PCI_CLK_OUT=100MHz and drive the proper PCI
                                                 Initialization sequence (DEVSEL#=Deasserted,
                                                 STOP#=Asserted, TRDY#=Asserted) during PCI_RST_N
                                                 deassertion.  
                                                                                                
                                                 NOTE: The HM_SPEED field is only valid after 
                                                 PLL_REF_CLK is active and PLL_DCOK is asserted. 
                                                 (see HRM description for power-on/reset sequence). 
                                                 NOTE: PCI_REF_CLKIN input must be 133MHz (and is used
                                                 to generate the PCI_CLK_OUT pin in Host Mode).  
                                                 *** NOTE: O9N PASS1 Addition

<34>    AP_PCIX  RO       NS          NS        PCI(X) Bus Type (0:PCI/1:PCIX)                         
                                                 At PCI_RST_N de-assertion, the PCI Initialization 
                                                 pattern(PCI_DEVSEL_N, PCI_STOP_N, PCI_TRDY_N) is
                                                 captured to provide information to software regarding
                                                 the PCI Bus Type(PCI/PCIX) and PCI Bus Speed Range. 

<33:32> AP_SPEED RO       NS          NS        PCI(X) Bus Speed (0:33/1:66/2:100/3:133)               
                                                 At PCI_RST_N de-assertion, the PCI Initialization 
                                                 pattern(PCI_DEVSEL_N, PCI_STOP_N, PCI_TRDY_N) is
                                                 captured to provide information to software regarding
                                                 the PCI Bus Type(PCI/PCIX) and PCI Bus Speed Range. 

                                                 PCI-X Initialization Pattern(see PCIX Spec): 
                        PCI_DEVSEL_N PCI_STOP_N PCI_TRDY_N Mode    MaxClk(ns) MinClk(ns) MinClk(MHz) MaxClk(MHz)
                      -------------+----------+----------+-------+---------+----------+----------+------------------
                         Deasserted Deasserted Deasserted PCI 33    --         30          0         33
                                                          PCI 66    30         15         33         66
                         Deasserted Deasserted Asserted   PCI-X     20         15         50         66
                         Deasserted Asserted   Deasserted PCI-X     15         10         66        100
                         Deasserted Asserted   Asserted   PCI-X     10         7.5       100        133
                         Asserted   Deasserted Deasserted PCI-X   Reserved   Reserved   Reserved   Reserved
                         Asserted   Deasserted Asserted   PCI-X   Reserved   Reserved   Reserved   Reserved
                         Asserted   Asserted   Deasserted PCI-X   Reserved   Reserved   Reserved   Reserved
                         Asserted   Asserted   Asserted   PCI-X   Reserved   Reserved   Reserved   Reserved  

                                                 NOTE: The PCI Bus speed 'assumed' from the initialization
                                                 pattern is really intended for an operational range. 
                                                 For example: If PINIT=100, this indicates PCI-X in the 
                                                 100-133MHz range. The PCI_CNT field can be used to further 
                                                 determine a more exacting PCI Bus frequency value if
                                                 required. 
                        
                                                 *** NOTE: O9N PASS1 Addition

<31:0>  PCICNT   R/W      0x0         NS        Free Running PCI Clock counter.                        
                                                 At PCI Reset, the PCICNT=0, and is auto-incremented
                                                 on every PCI clock and will auto-wrap back to zero
                                                 when saturated. 
                                                 NOTE: Writes override the auto-increment to allow
                                                 software to preload any initial value.
                                                 The PCICNT field is provided to software as a means
                                                 to determine the PCI Bus Speed. 
                                                 Assuming software has knowledge of the core frequency
                                                 (eclk), this register can be written with a value X, 
                                                 wait 'n' core clocks(eclk) and then read later(Y) to 
                                                 determine #PCI clocks(Y-X) have elapsed within 'n' core 
                                                 clocks to determine the PCI input Clock frequency. 

                                                 *** NOTE: O9N PASS1 Addition

----------------------------------------------------------------------------------------------------
===



 *
 * POW_PP_GRP_MSK@ = POW PP Group Mask Register (1 per PP)
 *
 * Selects which group(s) a PP belongs to.  A '1' in any bit position sets the PP's membership in
 * the corresponding group.  A value of 0x0 will prevent the PP from receiving new work.  Note:
 * disabled or non-existent PP's should have this field set to 0xffff (the reset value) in order to
 * maximize POW performance.
 *
 * Also contains the QOS level priorities for each PP.  0x0 is highest priority, and 0x7 the lowest.
 * Setting the priority to 0xf will prevent that PP from receiving work from that QOS level.
 * Priority values 0x8 through 0xe are reserved and should not be used.  For a given PP, priorities
 * should begin at 0x0 and remain contiguous throughout the range.
 *

     ==============================================================
     POW_PP_GRP_MSK(0..15) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> RSVD     RAZ      NS          NS        Reserved                                           |   
<47:44> QOS7_PRI R/W      0x0         NS        PP@ priority for QOS level 7                       |   
<43:40> QOS6_PRI R/W      0x0         NS        PP@ priority for QOS level 6                       |   
<39:36> QOS5_PRI R/W      0x0         NS        PP@ priority for QOS level 5                       |   
<35:32> QOS4_PRI R/W      0x0         NS        PP@ priority for QOS level 4                       |   
<31:28> QOS3_PRI R/W      0x0         NS        PP@ priority for QOS level 3                       |   
<27:24> QOS2_PRI R/W      0x0         NS        PP@ priority for QOS level 2                       |   
<23:20> QOS1_PRI R/W      0x0         NS        PP@ priority for QOS level 1                       |   
<19:16> QOS0_PRI R/W      0x0         NS        PP@ priority for QOS level 0                       |   
<15:0>  GRP_MSK  R/W      0xffff      0xffff    PP@ group mask                                     |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_WQ_INT_THR@ = POW Work Queue Interrupt Threshold Register (1 per group)
 *
 * Contains the thresholds for enabling and setting work queue interrupts.  For more information
 * regarding this register, see the interrupt section.
 *
 * Note: Up to 16 of the POW's internal storage buffers can be allocated for hardware use and are
 * therefore not available for incoming work queue entries.  Additionally, any PP that is not in the
 * NULL_NULL state consumes a buffer.  Thus in a 16 PP system, it is not advisable to set either
 * IQ_THR or DS_THR to greater than 2048 - 16 - 16 = 2016.  Doing so may prevent the interrupt from
 * ever triggering.
 *

     ==============================================================
     POW_WQ_INT_THR(0..15) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:29> RSVD2    RAZ      NS          NS        Reserved                                           |   
<28>    TC_EN    R/W      0x0         NS        Time counter interrupt enable for group @          |   
                                                  TC_EN must be zero when TC_THR==0                 |
<27:24> TC_THR   R/W      0x0         NS        Time counter interrupt threshold for group @       |   
                                                  When TC_THR==0, POW_WQ_INT_CNT*[TC_CNT] is zero   |
<23>    RSVD1    RAZ      NS          NS        Reserved                                           |   
<22:12> DS_THR   R/W      0x0         NS        De-schedule count threshold for group @            |   
                                                  DS_THR==0 disables the threshold interrupt        |
<11>    RSVD0    RAZ      NS          NS        Reserved                                           |   
<10:0>  IQ_THR   R/W      0x0         NS        Input queue count threshold for group @            |   
                                                  IQ_THR==0 disables the threshold interrupt        |
----------------------------------------------------------------------------------------------------
===

 *
 * POW_WQ_INT_CNT@ = POW Work Queue Interrupt Count Register (1 per group)
 *
 * Contains a read-only copy of the counts used to trigger work queue interrupts.  For more
 * information regarding this register, see the interrupt section.
 *

     ==============================================================
     POW_WQ_INT_CNT(0..15) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:28> RSVD     RAZ      NS          NS        Reserved                                           |   
<27:24> TC_CNT   RO       0x0         NS        Time counter current value for group @             |   
                                                 HW sets TC_CNT to POW_WQ_INT_THR*[TC_THR] whenever:|
                                                  - corresponding POW_WQ_INT_CNT*[IQ_CNT]==0 and    |
                                                    corresponding POW_WQ_INT_CNT*[DS_CNT]==0        |
                                                  - corresponding POW_WQ_INT[WQ_INT<*>] is written  |
                                                    with a 1 by SW                                  |
                                                  - corresponding POW_WQ_INT[IQ_DIS<*>] is written  |
                                                    with a 1 by SW                                  |
                                                  - corresponding POW_WQ_INT_THR* is written by SW  |
                                                  - TC_CNT==1 and periodic counter                  |
                                                    POW_WQ_INT_PC[PC]==0                            |
                                                 Otherwise, HW decrements TC_CNT whenever the       |
                                                 periodic counter POW_WQ_INT_PC[PC]==0.             |
                                                 TC_CNT is 0 whenever POW_WQ_INT_THR*[TC_THR]==0.   |
<23:12> DS_CNT   RO       0x0         NS        De-schedule executable count for group @           |   
<11:0>  IQ_CNT   RO       0x0         NS        Input queue executable count for group @           |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_QOS_THR@ = POW QOS Threshold Register (1 per QOS level)
 *
 * Contains the thresholds for allocating POW internal storage buffers.  If the number of remaining
 * free buffers drops below the minimum threshold (MIN_THR) or the number of allocated buffers for
 * this QOS level rises above the maximum threshold (MAX_THR), future incoming work queue entries
 * will be buffered externally rather than internally.  This register also contains a read-only count
 * of the current number of free buffers (FREE_CNT), the number of internal buffers currently
 * allocated to this QOS level (BUF_CNT), and the total number of buffers on the de-schedule list
 * (DES_CNT) (which is not the same as the total number of de-scheduled buffers).
 *

     ==============================================================
     POW_QOS_THR(0..7) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:60> RSVD2    RAZ      NS          NS        Reserved                                           |   
<59:48> DES_CNT  RO       0x0         NS        # of buffers on de-schedule list                   |   
<47:36> BUF_CNT  RO       0x0         NS        # of internal buffers allocated to QOS level @     |   
<35:24> FREE_CNT RO       0x7eb       NS        # of total free buffers                            |   
<23>    RSVD1    RAZ      NS          NS        Reserved                                           |   
<22:12> MAX_THR  R/W      0x7ff       NS        Max threshold for QOS level @                      |   
<11>    RSVD0    RAZ      NS          NS        Reserved                                           |   
<10:0>  MIN_THR  R/W      0x0         NS        Min threshold for QOS level @                      |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_QOS_RND@ = POW QOS Issue Round Register (4 rounds per register x 8 registers = 32 rounds)
 *
 * Contains the round definitions for issuing new work.  Each round consists of 8 bits with each bit
 * corresponding to a QOS level.  There are 4 rounds contained in each register for a total of 32
 * rounds.  The issue logic traverses through the rounds sequentially (lowest round to highest round)
 * in an attempt to find new work for each PP.  Within each round, the issue logic traverses through
 * the QOS levels sequentially (highest QOS to lowest QOS) skipping over each QOS level with a clear
 * bit in the round mask.  Note: setting a QOS level to all zeroes in all issue round registers will
 * prevent work from being issued from that QOS level.
 *

     ==============================================================
     POW_QOS_RND(0..7) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD     RAZ      NS          NS        Reserved                                           |   
<31:24> RND_P3   R/W      0xff        NS        Round mask for round @x4+3                         |   
<23:16> RND_P2   R/W      0xff        NS        Round mask for round @x4+2                         |   
<15:8>  RND_P1   R/W      0xff        NS        Round mask for round @x4+1                         |   
<7:0>   RND      R/W      0xff        NS        Round mask for round @x4                           |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_WQ_INT = POW Work Queue Interrupt Register
 *
 * Contains the bits (1 per group) that set work queue interrupts and are used to clear these
 * interrupts.  Also contains the input queue interrupt temporary disable bits (1 per group).  For
 * more information regarding this register, see the interrupt section.
 *

     ==============================================================
     POW_WQ_INT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD     RAZ      NS          NS        Reserved                                           |   
<31:16> IQ_DIS   R/W1     0x0         NS        Input queue interrupt temporary disable mask       |   
                                                 Corresponding WQ_INT<*> bit cannot be set due to   |
                                                 IQ_CNT/IQ_THR check when this bit is set.          |
                                                 Corresponding IQ_DIS bit is cleared by HW whenever:|
                                                  - POW_WQ_INT_CNT*[IQ_CNT] is zero, or             |
                                                  - POW_WQ_INT_CNT*[TC_CNT]==1 when periodic        |
                                                    counter POW_WQ_INT_PC[PC]==0                    |
<15:0>  WQ_INT   R/W1C    0x0         NS        Work queue interrupt bits                          |   
                                                 Corresponding WQ_INT bit is set by HW whenever:    |
                                                  - POW_WQ_INT_CNT*[IQ_CNT] >=                      |
                                                    POW_WQ_INT_THR*[IQ_THR] and the threshold       |
                                                    interrupt is not disabled.                      |
                                                    IQ_DIS<*>==1 disables the interrupt.            |
                                                    POW_WQ_INT_THR*[IQ_THR]==0 disables the int.    |
                                                  - POW_WQ_INT_CNT*[DS_CNT] >=                      |
                                                    POW_WQ_INT_THR*[DS_THR] and the threshold       |
                                                    interrupt is not disabled                       |
                                                    POW_WQ_INT_THR*[DS_THR]==0 disables the int.    |
                                                  - POW_WQ_INT_CNT*[TC_CNT]==1 when periodic        |
                                                    counter POW_WQ_INT_PC[PC]==0 and                |
                                                    POW_WQ_INT_THR*[TC_EN]==1 and at least one of:  |
                                                    - POW_WQ_INT_CNT*[IQ_CNT] > 0                   |
                                                    - POW_WQ_INT_CNT*[DS_CNT] > 0                   |
----------------------------------------------------------------------------------------------------
===

 *
 * POW_WQ_INT_PC = POW Work Queue Interrupt Periodic Counter Register
 *
 * Contains the threshold value for the work queue interrupt periodic counter and also a read-only
 * copy of the periodic counter.  For more information regarding this register, see the interrupt
 * section.
 *

     ==============================================================
     POW_WQ_INT_PC Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:60> RSVD2    RAZ      NS          NS        Reserved                                           |   
<59:32> PC       RO       0x0         NS        Work queue interrupt periodic counter              |   
<31:28> RSVD1    RAZ      NS          NS        Reserved                                           |   
<27:8>  PC_THR   R/W      0x0         NS        Work queue interrupt periodic counter threshold    |   
<7:0>   RSVD0    RAZ      NS          NS        Reserved                                           |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_NW_TIM = POW New Work Timer Period Register
 *
 * Sets the minimum period for a new work request timeout.  Period is specified in n-1 notation
 * where the increment value is 1024 clock cycles.  Thus, a value of 0x0 in this register translates
 * to 1024 cycles, 0x1 translates to 2048 cycles, 0x2 translates to 3072 cycles, etc...  Note: the
 * maximum period for a new work request timeout is 2 times the minimum period.  Note: the new work
 * request timeout counter is reset when this register is written.
 *
 * There are two new work request timeout cases:
 *
 * - WAIT bit clear.  The new work request can timeout if the timer expires before the pre-fetch
 *   engine has reached the end of all work queues.  This can occur if the executable work queue
 *   entry is deep in the queue and the pre-fetch engine is subject to many resets (i.e. high switch,
 *   de-schedule, or new work load from other PP's).  Thus, it is possible for a PP to receive a work
 *   response with the NO_WORK bit set even though there was at least one executable entry in the
 *   work queues.  The other (and typical) scenario for receiving a NO_WORK response with the WAIT
 *   bit clear is that the pre-fetch engine has reached the end of all work queues without finding
 *   executable work.
 *
 * - WAIT bit set.  The new work request can timeout if the timer expires before the pre-fetch
 *   engine has found executable work.  In this case, the only scenario where the PP will receive a
 *   work response with the NO_WORK bit set is if the timer expires.  Note: it is still possible for
 *   a PP to receive a NO_WORK response even though there was at least one executable entry in the
 *   work queues.
 *
 * In either case, it's important to note that switches and de-schedules are higher priority
 * operations that can cause the pre-fetch engine to reset.  Thus in a system with many switches or
 * de-schedules occuring, it's possible for the new work timer to expire (resulting in NO_WORK
 * responses) before the pre-fetch engine is able to get very deep into the work queues.
 *

     ==============================================================
     POW_NW_TIM Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:10> RSVD     RAZ      NS          NS        Reserved                                           |   
<9:0>   NW_TIM   R/W      0x0         0x3ff     New work timer period                              |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_ECC_ERR = POW ECC Error Register
 *
 * Contains the single and double error bits and the corresponding interrupt enables for the ECC-
 * protected POW index memory.  Also contains the syndrome value in the event of an ECC error.
 *
 * Also contains the remote pointer error bit and interrupt enable.  RPE is set when the POW detected
 * corruption on one or more of the input queue lists in L2/DRAM (POW's local copy of the tail pointer
 * for the L2/DRAM input queue did not match the last entry on the the list).   This is caused by
 * L2/DRAM corruption, and is generally a fatal error because it likely caused POW to load bad work
 * queue entries.
 *
 * This register also contains the illegal operation error bits and the corresponding interrupt
 * enables as follows:
 *
 *  <0> Received SWTAG/SWTAG_FULL/SWTAG_DESCH/DESCH/UPD_WQP from PP in NULL_NULL state
 *  <1> Received SWTAG/SWTAG_DESCH/DESCH/UPD_WQP from PP in NULL state
 *  <2> Received SWTAG/SWTAG_FULL/SWTAG_DESCH/GET_WORK from PP with pending tag switch to ORDERED or ATOMIC
 *  <3> Received SWTAG/SWTAG_FULL/SWTAG_DESCH from PP with tag specified as NULL_NULL
 *  <4> Received SWTAG_FULL/SWTAG_DESCH from PP with tag specified as NULL
 *  <5> Received SWTAG/SWTAG_FULL/SWTAG_DESCH/DESCH/UPD_WQP/GET_WORK/NULL_RD from PP with GET_WORK pending
 *  <6> Received SWTAG/SWTAG_FULL/SWTAG_DESCH/DESCH/UPD_WQP/GET_WORK/NULL_RD from PP with NULL_RD pending
 *  <7> Received CLR_NSCHED from PP with SWTAG_DESCH/DESCH/CLR_NSCHED pending
 *  <8> Received SWTAG/SWTAG_FULL/SWTAG_DESCH/DESCH/UPD_WQP/GET_WORK/NULL_RD from PP with CLR_NSCHED pending
 *  <9> Received illegal opcode
 * <10> Received ADD_WORK with tag specified as NULL_NULL
 * <11> Received DBG load from PP with DBG load pending
 * <12> Received CSR load from PP with CSR load pending
 *

     ==============================================================
     POW_ECC_ERR Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:45> RSVD3    RAZ      NS          NS        Reserved                                           |   
<44:32> IOP_IE   R/W      0x0         NS        Illegal operation interrupt enables                |   
<31:29> RSVD2    RAZ      NS          NS        Reserved                                           |   
<28:16> IOP      R/W1C    0x0         0x0       Illegal operation errors                           |   
<15:14> RSVD1    RAZ      NS          NS        Reserved                                           |   
<13>    RPE_IE   R/W      0x0         NS        Remote pointer error interrupt enable              |   
<12>    RPE      R/W1C    0x0         0x0       Remote pointer error                               |   
<11:9>  RSVD0    RAZ      NS          NS        Reserved                                           |   
<8:4>   SYN      RO       NS          NS        Syndrome value (only valid when DBE or SBE is set) |   
<3>     DBE_IE   R/W      0x0         NS        Double bit error interrupt enable                  |   
<2>     SBE_IE   R/W      0x0         NS        Single bit error interrupt enable                  |   
<1>     DBE      R/W1C    0x0         0x0       Double bit error                                   |   
<0>     SBE      R/W1C    0x0         0x0       Single bit error                                   |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_INT_CTL = POW Internal Control Register
 *
 * Contains POW internal control values (for internal use, not typically for customer use):
 *
 * PFR_DIS = Disable high-performance pre-fetch reset mode.
 *
 * NBR_THR = Assert ncb__busy when the number of remaining coherent bus NBR credits equals is less
 * than or equal to this value.
 *

     ==============================================================
     POW_INT_CTL Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:6>  RSVD     RAZ      NS          NS        Reserved                                           |   
<5>     PFR_DIS  R/W      0x0         0x0       High-perf pre-fetch reset mode disable             |   
<4:0>   NBR_THR  R/W      0x2         0x2       NBR busy threshold                                 |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_NOS_CNT = POW No-schedule Count Register
 *
 * Contains the number of work queue entries on the no-schedule list.
 *

     ==============================================================
     POW_NOS_CNT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:12> RSVD     RAZ      NS          NS        Reserved                                           |   
<11:0>  NOS_CNT  RO       0x0         NS        # of work queue entries on the no-schedule list    |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_PF_RST_MSK = POW Prefetch Reset Mask
 *
 * Resets the work prefetch engine when work is stored in an internal buffer (either when the add
 * work arrives or when the work is reloaded from an external buffer) for an enabled QOS level
 * (1 bit per QOS level).
 *

     ==============================================================
     POW_PF_RST_MSK Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:8>  RSVD     RAZ      NS          NS        Reserved                                           |   
<7:0>   RST_MSK  R/W      0x0         NS        Prefetch engine reset mask                         |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_WS_PC@ = POW Work Schedule Performance Counter (1 per group)
 *
 * Counts the number of work schedules for each group.  Write to clear.
 *

     ==============================================================
     POW_WS_PC(0..15) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD     RAZ      NS          NS        Reserved                                           |   
<31:0>  WS_PC    R/W1C    0x0         NS        Work schedule performance counter for group @      |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_WA_PC@ = POW Work Add Performance Counter (1 per QOS level)
 *
 * Counts the number of add new work requests for each QOS level.  Write to clear.
 *

     ==============================================================
     POW_WA_PC(0..7) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD     RAZ      NS          NS        Reserved                                           |   
<31:0>  WA_PC    R/W1C    0x0         NS        Work add performance counter for QOS level @       |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_IQ_CNT@ = POW Input Queue Count Register (1 per QOS level)
 *
 * Contains a read-only count of the number of work queue entries for each QOS level.
 *

     ==============================================================
     POW_IQ_CNT(0..7) Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD     RAZ      NS          NS        Reserved                                           |   
<31:0>  IQ_CNT   RO       0x0         NS        Input queue count for QOS level @                  |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_WA_COM_PC = POW Work Add Combined Performance Counter
 *
 * Counts the number of add new work requests for all QOS levels.  Write to clear.
 *

     ==============================================================
     POW_WA_COM_PC Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD     RAZ      NS          NS        Reserved                                           |   
<31:0>  WA_PC    R/W1C    0x0         NS        Work add combined performance counter              |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_IQ_COM_CNT = POW Input Queue Combined Count Register
 *
 * Contains a read-only count of the total number of work queue entries in all QOS levels.
 *

     ==============================================================
     POW_IQ_COM_CNT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD     RAZ      NS          NS        Reserved                                           |   
<31:0>  IQ_CNT   RO       0x0         NS        Input queue combined count                         |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_TS_PC = POW Tag Switch Performance Counter
 *
 * Counts the number of tag switch requests.  Write to clear.
 *

     ==============================================================
     POW_TS_PC Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD     RAZ      NS          NS        Reserved                                           |   
<31:0>  TS_PC    R/W1C    0x0         NS        Tag switch performance counter                     |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_DS_PC = POW De-Schedule Performance Counter
 *
 * Counts the number of de-schedule requests.  Write to clear.
 *

     ==============================================================
     POW_DS_PC Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD     RAZ      NS          NS        Reserved                                           |   
<31:0>  DS_PC    R/W1C    0x0         NS        De-schedule performance counter                    |   
----------------------------------------------------------------------------------------------------
===

 *
 * POW_BIST_STAT = POW BIST Status Register
 *
 * Contains the BIST status for the POW memories ('0' = pass, '1' = fail).
 *
 * Also contains the BIST status for the PP's.  Each bit in the PP field is the OR of all BIST
 * results for the corresponding physical PP ('0' = pass, '1' = fail).
 *

     ==============================================================
     POW_BIST_STAT Type=NCB
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32> RSVD1    RAZ      NS          NS        Reserved                                           |   
<31:16> PP       RO       0x0         0x0       Physical PP BIST status                            |   
<15:10> RSVD0    RAZ      NS          NS        Reserved                                           |   
<9>     CAM      RO       0x0         0x0       POW CAM BIST status                                |   
<8>     NBT      RO       0x0         0x0       NCB transmitter memory BIST status                 |   
<7>     IDX      RO       0x0         0x0       Index memory BIST status                           |   
<6>     FIDX     RO       0x0         0x0       Forward index memory BIST status                   |   
<5>     NBR1     RO       0x0         0x0       NCB receiver memory 1 BIST status                  |   
<4>     NBR0     RO       0x0         0x0       NCB receiver memory 0 BIST status                  |   
<3>     PEND1    RO       0x0         0x0       Pending switch memory 1 BIST status                |   
<2>     PEND0    RO       0x0         0x0       Pending switch memory 0 BIST status                |   
<1>     ADR1     RO       0x0         0x0       Address memory 1 BIST status                       |   
<0>     ADR0     RO       0x0         0x0       Address memory 0 BIST status                       |   
----------------------------------------------------------------------------------------------------
===


 *
 *                  RNM_CTL_STATUS = RNM's Control/Status Register
 *
 * The RNM's interrupt enable register.
 *

     ==============================================================
     RNM_CTL_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     ENT_EN   R/W      0           0         Entropy enable for random number generator.            
<1>     RNG_EN   R/W      0           0         Enable the output of the RNG.                          
<2>     RNM_RST  R/W      0           0         Reset the RNM as core reset except for register        
                                                 logic.
<3>     RNG_RST  R/W      0           0         Reset RNG as core reset.                               
<4>     EXP_ENT  R/W      0           0         Exported entropy enable for random number generator    
<8:5>   ENT_SEL  R/W      0           0         ?                                                      
<63:9>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===

 *
 *                  RNM_BIST_STATUS = RNM's BIST Status Register
 *
 * The RNM's Memory Bist Status register.
 *

     ==============================================================
     RNM_BIST_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     MEM      RO       0           0         Status of MEM block bist.                              
<1>     RRC      RO       0           0         Status of RRC block bist.                              
<63:2>  NS       RAZ      NS          NS        Reserved                                               
----------------------------------------------------------------------------------------------------
===


* SPX_INT_REG - Interrupt Register

     ==============================================================
     SPX(0..1)_INT_REG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     PRTNXA   R/W1C    0           0         Port out of range                                  |   
<1>     ABNORM   R/W1C    0           0         Abnormal packet termination (ERR bit)              |   
<3:2>   SPARE    R/W1C    0           0         Spares                                             |   
<4>     SPIOVR   R/W1C    0           0         Spi async FIFO overflow                            |   
<5>     CLSERR   R/W1C    0           0         Spi4 packet closed on non-16B alignment without EOP|   
<6>     DRWNNG   R/W1C    0           0         Spi4 receive FIFO drowning/overflow                |   
<7>     RSVERR   R/W1C    0           0         Spi4 reserved control word detected                |   
<8>     TPAOVR   R/W1C    0           0         Selected port has hit TPA overflow                 |   
<9>     DIPERR   R/W1C    0           0         Spi4 DIP4 error                                    |   
<10>    SYNCERR  R/W1C    0           0         Consecutive Spi4 DIP4 errors have exceeded         |   
                                                  SPX_ERR_CTL[ERRCNT]                               |
<11>    CALERR   R/W1C    0           0         Spi4 Calendar table parity error                   |   
<30:12> NS       RAZ      0           0         Reserved                                           |   
<31>    SPF      RO       0           0         Spi interface down                                 |   
<63:32> RSVRD    RAZ      0           0         Reserved                                           |   

Notes:
 * PRTNXA
   This error indicates that the port on the Spi bus was not a valid port
   for the system.  Spi4 accesses occur on payload control bit-times. The
   SRX can be configured with the exact number of ports available (by
   SRX_COM_CTL[PRTS] register).  Any Spi access to anthing outside the range
   of 0 .. (SRX_COM_CTL[PRTS] - 1) is considered an error.  The offending
   port is logged in SPX_INT_DAT[PRT] if there are no pending interrupts in
   SPX_INT_REG that require SPX_INT_DAT[PRT].
 
   SRX will not drop the packet with the bogus port address.  Instead, the
   port will be mapped into the supported port range.  The remapped address
   in simply...
 
            Address = { interfaceId, ADR[3:0] }
 
   If the SPX detects that a PRTNXA error has occured, the packet will
   have its ERR bit set (or'ed in with the ERR bit from the transmitter)
   if the SPX_ERR_CTL[PRTNXA] bit is clear.
 
   In Spi4 mode, SPX will generate an interrupt for every 8B data burst
   associated with the invalid address.  The SPX_INT_DAT[MUL] bit will never
   be set.
 
 * ABNORM
   This bit simply indicates that a given packet had abnormal terminiation.
   In Spi4 mode, this means that packet completed with an EOPS[1:0] code of
   2'b01.  This error can also be thought of as the application specific
   error (as mentioned in the Spi4 spec).  The offending port is logged in
   SPX_INT_DAT[PRT] if there are no pending interrupts in SPX_INT_REG that
   require SPX_INT_DAT[PRT].
 
   The ABNORM error is only raised when the ERR bit that comes from the
   Spi interface is set.  It will never assert if any internal condition
   causes the ERR bit to assert (e.g. PRTNXA or DPERR).
 
 * SPIOVR
   This error indicates that the FIFOs that manage the async crossing from
   the Spi clocks to the core clock domains have overflowed.  This is a
   fatal error and can cause much data/control corruption since ticks will
   be dropped and reordered.  This is purely a function of clock ratios and
   correct system ratios should make this an impossible condition.
 
 * CLSERR
   This is a Spi4 error that indicates that a given data transfer burst
   that did not terminate with an EOP, did not end with the 16B alignment
   as per the Spi4 spec.  The offending port cannot be logged since the
   block does not know the streamm terminated until the port switches.
   At that time, that packet has already been pushed down the pipe.
 
   The CLSERR bit does not actually check the Spi4 burst - just how data
   is accumulated for the downstream logic.  Bursts that are separted by
   idles or training will still be merged into accumulated transfers and
   will not fire the CLSERR condition.  The checker is really checking
   non-8B aligned, non-EOP data ticks that are sent downstream.  These
   ticks are what will really mess up the core.
 
   This is an expensive fix, so we'll probably let it ride.  We never
   claim to check Spi4 protocol anyway.
 
 * DRWNNG
   This error indicates that the Spi4 FIFO that services the GMX has
   overflowed.  Like the SPIOVR error condition, correct system ratios
   should make this an impossible condition.
 
 * RSVERR
   This Spi4 error indicates that the Spi4 receiver has seen a reserve
   control packet.  A reserve control packet is an invalid combiniation
   of bits on DAT[15:12].  Basically this is DAT[15] == 1'b0 and DAT[12]
   == 1'b1 (an SOP without a payload command).  The RSVERR indicates an
   error has occured and SPX_INT_DAT[RSVOP] holds the first reserved
   opcode and will be set if there are no pending interrupts in
   SPX_INT_REG that require SPX_INT_DAT[RSVOP].
 
 * TPAOVR
   This bit indicates that the TPA Watcher has flagged an event.  See the
   TPA Watcher for a more detailed discussion.
 
 * DIPERR
   This bit indicates that the Spi4 receiver has encountered a DIP4
   miscompare on the datapath.  A DIPERR can occur in an IDLE or a
   control word that frames a data burst.  If the DIPERR occurs on a
   framing word there are three cases.
 
   1) DIPERR occurs at the end of a data burst.  The previous packet is
      marked with the ERR bit to be processed later if
      SPX_ERR_CTL[DIPCLS] is clear.
   2) DIPERR occurs on a payload word.  The subsequent packet is marked
      with the ERR bit to be processed later if SPX_ERR_CTL[DIPPAY] is
      clear.
   3) DIPERR occurs on a control word that closes on packet and is a
      payload for another packet.  In this case, both packets will have
      their ERR bit marked depending on the respective values of
      SPX_ERR_CTL[DIPCLS] and SPX_ERR_CTL[DIPPAY] as discussed above.
 
 * SYNCERR
   This bit indicates that the Spi4 receiver has encountered
   SPX_ERR_CTL[ERRCNT] consecutive Spi4 DIP4 errors and the interface
   should be synched.
 
 * CALERR
   This bit indicates that the Spi4 calendar table encountered a parity
   error.  This error bit is associated with the calendar table on the RX
   interface - the interface that receives the Spi databus.  Parity errors
   can occur during normal operation when the calendar table is constantly
   being read for the port information, or during initialization time, when
   the user has access.  Since the calendar table is split into two banks,
   SPX_INT_DAT[CALBNK] indicates which banks have taken a parity error.
   CALBNK[1] indicates the error occured in the upper bank, while CALBNK[0]
   indicates that the error occured in the lower bank.  SPX_INT_DAT[CALBNK]
   will be set if there are no pending interrupts in SPX_INT_REG that
   require SPX_INT_DAT[CALBNK].
 
 * SPF
   This bit indicates that a Spi fatal error has occurred.  A fatal error
   is defined as any error condition for which the corresponding
   SPX_INT_SYNC bit is set.  Therefore, conservative systems can halt the
   interface on any error condition although this is not strictly
   necessary.  Some error are much more fatal in nature than others.
 
   PRTNXA, SPIOVR, CLSERR, DRWNNG, DIPERR, CALERR, and SYNCERR are examples
   of fatal error for different reasons - usually because multiple port
   streams could be effected.  ABNORM, RSVERR, and TPAOVR are conditions
   that are contained to a single packet which allows the interface to drop
   a single packet and remain up and stable.
----------------------------------------------------------------------------------------------------
===


* SPX_INT_MSK - Interrupt Mask Register

     ==============================================================
     SPX(0..1)_INT_MSK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     PRTNXA   R/W      0           0         Port out of range                                  |   
<1>     ABNORM   R/W      0           0         Abnormal packet termination (ERR bit)              |   
<3:2>   SPARE    R/W      0           0         Spare                                              |   
<4>     SPIOVR   R/W      0           0         Spi async FIFO overflow (Spi3 or Spi4)             |   
<5>     CLSERR   R/W      0           0         Spi4 packet closed on non-16B alignment without EOP|   
<6>     DRWNNG   R/W      0           0         Spi4 receive FIFO drowning/overflow                |   
<7>     RSVERR   R/W      0           0         Spi4 reserved control word detected                |   
<8>     TPAOVR   R/W      0           0         Selected port has hit TPA overflow                 |   
<9>     DIPERR   R/W      0           0         Spi4 DIP4 error                                    |   
<10>    SYNCERR  R/W      0           0         Consecutive Spi4 DIP4 errors have exceeded         |   
                                                  SPX_ERR_CTL[ERRCNT]                               |
<11>    CALERR   R/W      0           0         Spi4 Calendar table parity error                   |   
<63:12> NS       RAZ      0           0         Reserved                                           |   
----------------------------------------------------------------------------------------------------
===
 
 
* SPX_INT_SYNC - Interrupt Sync Register

     ==============================================================
     SPX(0..1)_INT_SYNC Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     PRTNXA   R/W      0           0         Port out of range                                  |   
<1>     ABNORM   R/W      0           0         Abnormal packet termination (ERR bit)              |   
<3:2>   SPARE    R/W      0           0         Spare                                              |   
<4>     SPIOVR   R/W      0           0         Spi async FIFO overflow (Spi3 or Spi4)             |   
<5>     CLSERR   R/W      0           0         Spi4 packet closed on non-16B alignment without EOP|   
<6>     DRWNNG   R/W      0           0         Spi4 receive FIFO drowning/overflow                |   
<7>     RSVERR   R/W      0           0         Spi4 reserved control word detected                |   
<8>     TPAOVR   R/W      0           0         Selected port has hit TPA overflow                 |   
<9>     DIPERR   R/W      0           0         Spi4 DIP4 error                                    |   
<10>    SYNCERR  R/W      0           0         Consecutive Spi4 DIP4 errors have exceeded         |   
                                                  SPX_ERR_CTL[ERRCNT]                               |
<11>    CALERR   R/W      0           0         Spi4 Calendar table parity error                   |   
<63:12> NS       RAZ      0           0         Reserved                                           |   

Notes:
 This mask set indicates which exception condition should cause the
 SPX_INT_REG[SPF] bit to assert
 
 It is recommended that software set the PRTNXA, SPIOVR, CLSERR, DRWNNG,
 DIPERR, CALERR, and SYNCERR errors as synchronization events.  Software is
 free to synchronize the bus on other conditions, but this is the minimum
 recommended set.
----------------------------------------------------------------------------------------------------
===
 
 
* SPX_INT_DAT - Interrupt Data Register

     ==============================================================
     SPX(0..1)_INT_DAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<7:0>   PRT      RO       0           0         Port associated with error                         |   
<11:8>  RSVOP    RO       0           0         Spi4 reserved control word                         |   
<13:12> CALBNK   RO       0           0         Spi4 Calendar table parity error bank              |   
<30:14> NS       RAZ      0           0         Reserved                                           |   
<31>    MUL      RO       0           0         Multiple errors have occured                       |   
<63:32> RSVRD    RAZ      0           0         Reserved                                           |   

Notes:
 Note: The SPX_INT_DAT[MUL] bit is set when multiple errors have been
 detected that would set any of the data fields: PRT, RSVOP, and CALBNK.
 
 The following errors will cause MUL to assert for PRT conflicts.
 - ABNORM
 - APERR
 - DPERR
 
 The following errors will cause MUL to assert for RSVOP conflicts.
 - RSVERR
 
 The following errors will cause MUL to assert for CALBNK conflicts.
 - CALERR
 
 The following errors will cause MUL to assert if multiple interrupts are
 asserted.
 - TPAOVR
 
 The MUL bit will be cleared once all outstanding errors have been
 cleared by software (not just MUL errors - all errors).
----------------------------------------------------------------------------------------------------
===


* SPX_ERR_CTL - Spi error control register

     ==============================================================
     SPX(0..1)_ERR_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   ERRCNT   R/W      0           3         Number of Dip4 errors before bringing down the     |   
                                                  interface                                         |
<5:4>   SPARE    R/W      0           0         Spare                                              |   
<6>     DIPPAY   R/W      0           0         Spi4 DIPERR on payload control words cause the     |   
                                                  ERR bit to be set                                 |
<7>     DIPCLS   R/W      0           0         Spi4 DIPERR on closing control words cause the     |   
                                                  ERR bit to be set                                 |
<8>     PRTNXA   R/W      0           0         Spi4 - set the ERR bit on packets in which the     |   
                                                  port is out-of-range                              |
<63:9>  NS       RAZ      0           0         Reserved                                           |   

Notes:
 * DIPPAY, DIPCLS, PRTNXA 
   These bits control whether or not the packet's ERR bit is set when any of
   the these error is detected.  If the corresponding error's bit is clear,
   the packet ERR will be set.  If the error bit is set, the SPX will simply
   pass through the ERR bit without modifying it in anyway - the error bit
   may or may not have been set by the transmitter device.
----------------------------------------------------------------------------------------------------
===


* SPX_TPA_SEL - TPA watcher port selector

     ==============================================================
     SPX(0..1)_TPA_SEL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   PRTSEL   R/W      0           0         TPA watcher port select                            |   
<63:4>  NS       RAZ      0           0         Reserved                                           |   

Notes:
 The TPA Watcher is primarily a debug vehicle used to help initial bringup
 of a system.  The TPA watcher counts bytes that roll in from the Spi
 interface.  The user programs the Spi port to watch using
 SPX_TPA_SEL[PRTSEL].  Once the TPA is deasserted for that port, the watcher
 begins to count the data ticks that have been delivered to the inbound
 datapath (and eventually to the IOB).  The result is that we can derive
 turn-around times of the other device by watching how much data was sent
 after a loss of TPA through the SPX_TPA_ACC[CNT] register.  An optional
 interrupt may be raised as well.  See SPX_TPA_MAX for further information.

 TPA's can be deasserted for a number of reasons...

 1) IPD indicates backpressure
 2) The GMX inbound FIFO is filling up and should BP
 3) User has out an override on the TPA wires
----------------------------------------------------------------------------------------------------
===
 
 
* SPX_TPA_MAX - TPA watcher assertion threshold

     ==============================================================
     SPX(0..1)_TPA_MAX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  MAX      R/W      0           0         TPA watcher TPA threshold                          |   
<63:32> NS       RAZ      0           0         Reserved                                           |   

Notes:
 The TPA watcher has the ability to notify the system with an interrupt when
 too much data has been received on loss of TPA.  The user sets the
 SPX_TPA_MAX[MAX] register and when the watcher has accumulated that many
 ticks, then the interrupt is conditionally raised (based on interrupt mask
 bits).  This feature will be disabled if the programmed count is zero.
----------------------------------------------------------------------------------------------------
===
 
 
* SPX_TPA_ACC - TPA watcher byte accumulator

     ==============================================================
     SPX(0..1)_TPA_ACC Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  CNT      RO       0           NS        TPA watcher accumulate count                       |   
<63:32> NS       RAZ      0           0         Reserved                                           |   

Notes:
 This field allows the user to access the TPA watcher accumulator counter.
 This register reflects the number of bytes sent to IMX once the port
 specified by SPX_TPA_SEL[PRTSEL] has lost its TPA.  The SPX_INT_REG[TPAOVR]
 bit is asserted when CNT >= SPX_TPA_MAX[MAX].  The CNT will continue to
 increment until the TPA for the port is asserted.  At that point the CNT
 value is frozen until software clears the interrupt bit.
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     SPX(0..1)_BCKPRS_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  CNT      R/W1C    0           0         Counts the number of core clock cycles in which    |   
                                                  the SPI-4.2 receiver receives data once the TPA   |
                                                  for a particular port has been deasserted. The    |
                                                  desired port to watch can be selected with the    |
                                                  SPX_TPA_SEL[PRTSEL] field. CNT can be cleared by  |
                                                  writing all 1s to it.                             |
<63:32> NS       RAZ      0           0         Reserved                                           |   
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     SPX(0..1)_CLK_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     SRXDLCK  R/W      0           1         Write this bit to lock the Spi4 receive DLL        |   
<1>     RCVTRN   R/W      0           1         Write this bit once the DLL is locked to sync      |   
                                                  on the training seqeunce                          |
<2>     DRPTRN   R/W      0           1         Drop blocks of training packets                    |   
<3>     SNDTRN   R/W      0           1         Start sending training patterns on the Spi4        |   
                                                  Tx Interface                                      |
<4>     STATRCV  R/W      0           0         Spi4 status channel sample mode                    |   
                                                  1: Sample STAT on posedge of SCLK                 |
                                                  0: Sample STAT on negedge of SCLK                 |
<5>     STATDRV  R/W      0           0         Spi4 status channel drive mode                     |   
                                                  1: Drive STAT on posedge of SCLK                  |
                                                  0: Drive STAT on negedge of SCLK                  |
<6>     RUNBIST  R/W      0           0         Write this bit to begin BIST testing in SPX        |   
<11:7>  CLKDLY   R/W      16          16        Set the spx__clkdly lines to this value to         |   
                                                  control the delay on the incoming dclk            |
                                                  (spx__clkdly)                                     |
<15:12> SPARE    R/W      0           0         Spare                                              |   
<16>    SEETRN   R/W      0           0         Force the Spi4 receive into seeing a traing        |   
                                                  sequence                                          |
<63:17> NS       RAZ      0           0         Reserved                                           |   

Notes:
 * SRXDLCK
   When asserted, this bit locks the Spi4 receive DLLs.  This bit also
   acts as the Spi4 receiver reset and must be asserted before the
   training sequences are used to initialize the interface.  This bit
   only applies to the receiver interface.
 
 * RCVTRN
   Once the SRXDLCK bit is asserted and the DLLs have locked and the
   system has been programmed, software should assert this bit in order
   to start looking for valid training sequence and synchronize the
   interface. This bit only applies to the receiver interface.
 
 * DRPTRN
   The Spi4 receiver can either convert training packets into NOPs or
   drop them entirely.  Dropping ticks allows the interface to deskew
   periodically if the dclk and eclk ratios are close. This bit only
   applies to the receiver interface.
 
 * SNDTRN
   When software sets this bit, it indicates that the Spi4 transmit
   interface has been setup and has seen the calendare status.  Once the
   transmitter begins sending training data, the receiving device is free
   to start traversing the calendar table to synch the link.      
 
 * STATRCV
   This bit determines which status clock edge to sample the status
   channel in Spi4 mode.  Since the status channel is in the opposite
   direction to the datapath, the STATRCV actually effects the
   transmitter/TX block.
 
 * STATDRV
   This bit determines which status clock edge to drive the status
   channel in Spi4 mode.  Since the status channel is in the opposite
   direction to the datapath, the STATDRV actually effects the
   receiver/RX block.
 
 * RUNBIST
   RUNBIST will beginning BIST/BISR in all the SPX compilied memories.
   These memories are...
 
       * spx.srx.spi4.dat.dpr        // FIFO Spi4 to IMX
       * spx.stx.cal.calendar        // Spi4 TX calendar table
       * spx.srx.spi4.cal.calendar   // Spi4 RX calendar table
 
   RUNBIST must never be asserted when the interface is enabled.
   Furthmore, setting RUNBIST at any other time is destructive and can
   cause data and configuration corruption.  The entire interface must be
   reconfigured when this bit is set.
 
 * CLKDLY
   CLKDLY should be kept at its reset value during normal operation.  This
   register controls the SPI4.2 static clock positioning which normally only is
   set to the non-reset value in quarter clocking schemes.  In this mode, the
   delay window is not large enough for slow clock freq, therefore clock and
   data must be statically positioned with CSRs.  By changing the clock position
   relative to the data bits, we give the system a wider window.
 
 * SEETRN
   In systems in which no training data is sent to N2 or N2 cannot
   correctly sample the training data, software may pulse this bit by
   writing a '1' followed by a '0' in order to correctly set the
   receivers state.  The receive data bus should be idle at this time
   (only NOPs on the bus).  If N2 cannot see at least on training
   sequence, the data bus will not send any data to the core.  The
   interface will hang.
 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     SPX(0..1)_CLK_STAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   SPARE4   R/W1C    0           NA        Spare                                              |   
<4>     D4CLK0   R/W1C    0           NA        Saw '0' on Spi4 receive data forward clk input     |   
<5>     D4CLK1   R/W1C    0           NA        Saw '1' on Spi4 receive data forward clk input     |   
<6>     S4CLK0   R/W1C    0           NA        Saw '0' on Spi4 transmit status forward clk input  |   
<7>     S4CLK1   R/W1C    0           NA        Saw '1' on Spi4 transmit status forward clk input  |   
<8>     SRXTRN   R/W1C    0           NA        Saw a good data training sequence                  |   
<9>     SPARE1   R/W1C    0           NA        Spare bit                                          |   
<10>    STXCAL   R/W1C    0           NA        The transistion from Sync to Calendar on status    |   
                                                  channel                                           |
<63:11> NS       RAZ      0           0         Reserved                                           |   
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     SPX(0..1)_DRV_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<9:0>   SRX4CMP  R/W      0xef        0xef       Suresh (spx__spi4_rx_rctl_comp)                   |   
                                                  Can be used to bypass the RX termination resistor |
                                                  value. We have an on-chip RX termination resistor |
                                                  compensation control block, which adjusts the     |
                                                  resistor value to a nominal 100 ohms. This        |
                                                  register can be used to bypass this automatically |
                                                  computed value.                                   |
<15:10> SPARE    R/W      0           0          Reserved                                          |   
<19:16> STX4PCMP R/W      0x3         NS         Not used in O9N (spx__spi4_tx_pctl_comp)          |   
<23:20> STX4NCMP R/W      0xc         NS         Not used in O9N (spx__spi4_tx_nctl_comp)          |   
<63:24> NS       RAZ      0           0          Reserved                                          |   

Notes:
 These bits all come from Duke - he will provide documentation and
 explanation.  I'll just butcher it.
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     SPX(0..1)_TRN4_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     MUX_EN    R/W     0           0         Enable the hardware machine that selects the       |   
                                                  proper coarse FLOP selects                        |
                                                  (spx_csr__spi4_mux_trn_en)                        |
<1>     MACRO_EN  R/W     0           0         Allow the macro sequence to center the sample      |   
                                                  point in the data window through hardware         |
                                                  (spx_csr__spi4_mac_trn_en)                        |
<6:2>   MAXDIST   R/W     0           8         This field defines how far from center the         |   
                                                  deskew logic will search in a single macro        |
                                                   sequence (spx_csr__spi4_mac_iters)               |
<7>     SET_BOOT  R/W     0           0         Enable the macro boot sequence mode bit            |   
                                                  (spx_csr__spi4_mac_set_boot)                      |
<8>     CLR_BOOT  R/W     0           0         Clear the macro boot sequence mode bit             |   
                                                  (spx_csr__spi4_mac_clr_boot)                      |
<11:9>  JITTER    R/W     0           1         Accounts for jitter when the macro sequence is     |   
                                                  locking.  The value is how many consecutive       |
                                                  transititions before declaring en edge.  Minimum  |
                                                  value is 1.  This parameter must be set for Spi4  |
                                                  mode using auto-bit deskew.                       |
                                                  (spx_csr__spi4_mac_jitter)                        |
<12>    TRNTEST   R/W     0           0         Training Test Mode                                 |   
                                                  This bit is only for initial bringup              |
                                                  (spx_csr__spi4_trn_test_mode)                     |
<63:13> NS        RAZ     0           0         Reserved                                           |   

Notes:
 These bits are controls for the Spi4 RX bit deskew logic.  See that Spec
 for further details.
 
 * BOOT_BIT
   On the initial training synchronization sequence, the hardware has the
   BOOT_BIT set which means that it will continueously perform macro
   operations.  Once the BOOT_BIT is cleared, the macro machine will finish
   the macro operation is working on and then return to the idle state.
   Subsequent training sequences will only go through a single macro
   operation in order to do slight deskews.
 
 * JITTER
   Minimum value is 1.  This parameter must be set for Spi4 mode using
   auto-bit deskew.  Regardless of the original intent, this field must be
   set non-zero for deskew to function correctly.
 
   The thought is the JITTER range is no longer required since the macro
   machine was enhanced to understand about edge direction.  Originally
   these bits were intended to compensate for clock jitter.
 
   dly:    this is the intrinsic delay of each delay element
              tap currently, it is 70ps-110ps.
   jitter: amount of jitter we expect in the system (~200ps)
   j:      number of taps to account for jitter
 
   j = ((jitter / dly) + 1)
 
 * TRNTEST
   This mode is used to test systems to make sure that the bit deskew
   parameters have been correctly setup.  After configuration, software can
   set the TRNTEST mode bit.  This should be done before SRX_COM_CTL[ST_EN]
   is set such that we can be sure that the TX device is simply sending
   continuous training patterns.
 
   The test mode samples every incoming bit-time and makes sure that it is
   either a training control or a training data packet.  If any other data
   is observed, then SPX_DBG_DESKEW_STATE[TESTRES] will assert signaling a
   test failure.
 
   Software must clear TRNTEST before training is terminated.
 
 * Example Spi4 RX init flow...
 
 1) set the CLKDLY lines (SPXX_CLK_CTL[CLKDLY])
    - these bits must be set before the DLL can successfully lock
 
 2) set the SRXDLCK (SPXX_CLK_CTL[SRXDLCK])
    - this is the DLL lock bit which also acts as a block reset
 
 3) wait for the DLLs lock
 
 4) set any desired fields in SPXX_DBG_DESKEW_CTL
    - This register has only one field that most users will care about.
      When set, DLLDIS will disable sending update pulses to the Spi4 RX
      DLLs.  This pulse allows the DLL to adjust to clock variations over
      time.  In general, it is desired behavior.
 
 5) set fields in SPXX_TRN4_CTL
    - These fields deal with the MUX training sequence
      * MUX_EN
        This is the enable bit for the mux select.  The MUX select will
        run in the training sequence between the DLL and the Macro
        sequence when enabled.  Once the MUX selects are selected, the
        entire macro sequence must be rerun.  The expectation is that
        this is only run at boot time and this is bit cleared at/around
        step #8.
    - These fields deal with the Macro training sequence
      * MACRO_EN
        This is the enable bit for the macro sequence.  Macro sequences
        will run after the DLL and MUX training sequences.  Each macro
        sequence can move the offset by one value.
      * MAXDIST
        This is how far we will search for an edge.  Example...
 
           dly:    this is the intrinsic delay of each delay element
                   tap currently, it is 70ps-110ps.
           U:      bit time period in time units.
 
           MAXDIST = MIN(16, ((bit_time / 2) / dly)
                
           Each MAXDIST iteration consists of an edge detect in the early
           and late (+/-) directions in an attempt to center the data.  This
           requires two training transistions, the control/data and
           data/control transistions which comprise a training sequence.
           Therefore, the number of training sequences required for a single
           macro operation is simply MAXDIST.
 
 6) set the RCVTRN go bit (SPXX_CLK_CTL[RCVTRN])
    - this bit synchs on the first valid complete training cycle and
      starts to process the training packets
 
 6b) This is where software could manually set the controls as opposed to
     letting the hardware do it.  See the SPXX_DBG_DESKEW_CTL register
        description for more detail.
 
 7) the TX device must continue to send training packets for the initial
    time period.
    - this can be determined by...
 
      DLL: one training sequence for the DLL adjustment (regardless of enable/disable)
      MUX: one training sequence for the Flop MUX taps (regardless of enable/disable)
      INIT_SEQUENCES: max number of taps that we must move
 
         INIT_SEQUENCES = MIN(16, ((bit_time / 2) / dly))
 
         INIT_TRN = DLL + MUX + ROUNDUP((INIT_SEQUENCES * (MAXDIST + 2)))
 
    
    - software can either wait a fixed amount of time based on the clock
      frequencies or poll the SPXX_CLK_STAT[SRXTRN] register.  Each
      assertion of SRXTRN means that at least one training sequence has
      been received.  Software can poll, clear, and repeat on this bit to
      eventually count all required transistions.
 
      int cnt = 0;
      while (cnt < INIT_TRN) {
             if (SPXX_CLK_STAT[SRXTRN]) {
                cnt++;
                SPXX_CLK_STAT[SRXTRN] = 0;
             }  
      }
 
   - subsequent training sequences will normally move the taps only
     one position, so the ALPHA equation becomes...
 
     MAC   = (MAXDIST == 0) ? 1 : ROUNDUP((1 * (MAXDIST + 2))) + 1
 
        ALPHA = DLL + MUX + MAC
 
     ergo, MAXDIST simplifies to...
 
        ALPHA = (MAXDIST == 0) ? 3 : MAXDIST + 5
 
        DLL and MUX and MAC will always require at least a training sequence
        each - even if disabled.  If the macro sequence is enabled, an
        additional training sequenece at the end is necessary.  The extra
        sequence allows for all training state to be cleared before resuming
        normal operation.
 
 8) after the recevier gets enough training sequences in order to achieve
    deskew lock, set SPXX_TRN4_CTL[CLR_BOOT]
    - this disables the continuous macro sequences and puts into into one
      macro sequnence per training operation
    - optionally, the machine can choose to fall out of training if
      enough NOPs follow the training operation (require at least 32 NOPs
      to follow the training sequence).
 
    There must be at least MAXDIST + 3 training sequences after the
    SPXX_TRN4_CTL[CLR_BOOT] is set or sufficient NOPs from the TX device.
 
 9) the TX device continues to send training sequences until the RX
    device sends a calendar transistion.  This is controlled by
    SRXX_COM_CTL[ST_EN].  Other restrictions require other Spi parameters
    (e.g. the calendar table) to be setup before this bit can be enabled.
    Once the entire interface is properly programmed, software writes
    SRXX_COM_CTL[INF_EN].  At this point, the Spi4 packets will begin to
    be sent into the N2K core and processed by the chip.
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     SPX(0..1)_DBG_DESKEW_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     DLLDIS    R/W     X           0         Disable sending the update signal to the Spi4      |   
                                                  RX DLL when set                                   |
                                                  (spx_csr__spi4_dll_trn_en)                        |
<1>     DLLFRC    WR0     X           0         Force the Spi4 RX DLL to update                    |   
                                                  (spx_csr__spi4_dll_force)                         |
<7:2>   OFFDLY    R/W     X           0         Set the spx__offset lines to this value when       |   
                                                  not in macro sequence                             |
                                                  (spx_csr__spi4_mac_offdly)                        |
<12:8>  BITSEL    R/W     X           NA        Select the Spi4 CTL or DAT bit                     |   
                                                  15-0 : Spi4 DAT[15:0]                             |
                                                  16   : Spi4 CTL                                   |
                                                  31-17: Invalid                                    |
                                                  (spx_csr__spi4_dbg_trn_bitsel)                    |
<17:13> OFFSET    R/W     X           NA        Adds or subtracts (Based on INC or DEC) the        |   
                                                  offset to Spi4 bit BITSEL.                        |
                                                  (spx_csr__spi4_dbg_trn_offset)                    |
<18>    MUX       WR0     X           NA        Set the mux select tap for the Spi4 bit            |   
                                                  selected by BITSEL                                |
                                                  (spx_csr__spi4_dbg_trn_mux)                       |
<19>    INC       WR0     X           NA        Increment the offset by OFFSET for the Spi4        |   
                                                  bit selected by BITSEL                            |
                                                  (spx_csr__spi4_dbg_trn_inc)                       |
<20>    DEC       WR0     X           NA        Decrement the offset by OFFSET for the Spi4        |   
                                                  bit selected by BITSEL                            |
                                                  (spx_csr__spi4_dbg_trn_dec)                       |
<21>    CLRDLY    WR0     X           NA        Resets the offset control in the XCV               |   
                                                  (spx_csr__spi4_dll_clr_dly)                       |
<23:22> RSVRD0    RAZ     0           0         Reserved                                           |   
<24>    SSTEP     R/W     X           0         Single Step Training Mode                          |   
                                                  (spx_csr__spi4_single_step_mode)                  |
<25>    SSTEP_GO  WR0     X           NA        Single Step Training Sequence                      |   
                                                  (spx_csr__spi4_single_step_go)                    |
<27:26> RSVRD1    RAZ     0           0         Reserved                                           |   
<28>    FALL8     R/W     0           0         Training fallout at 8 pattern matches instead of 10|   
                                                  (spx_csr__spi4_fallout_8_match)                   |
<29>    FALLNOP   R/W     0           0         Training fallout on NOP matches instead of         |   
                                                  non-training matches.                             |
                                                  (spx_csr__spi4_fallout_nop)                       |
<63:30> NS        RAZ     0           0         Reserved                                           |   

Notes:
 These bits are meant as a backdoor to control Spi4 per-bit deskew.  See
 that Spec for more details.
 
   The basic idea is to allow software to disable the auto-deskew widgets
   and make any adjustments by hand.  These steps should only be taken
   once the RCVTRN bit is set and before any real traffic is sent on the
   Spi4 bus.  Great care should be taken when messing with these bits as
   improper programmings can cause catestrophic or intermitent problems.
 
   The params we have to test are the MUX tap selects and the XCV delay
   tap selects.
 
   For the muxes, we can set each tap to a random value and then read
   back the taps.  To write...
 
    SPXX_DBG_DESKEW_CTL[BITSEL]   = bit to set
    SPXX_DBG_DESKEW_CTL[OFFSET]   = mux tap value (2-bits)
    SPXX_DBG_DESKEW_CTL[MUX]      = go bit
 
   Notice this can all happen with a single CSR write.  To read, first
   set the bit you to look at with the SPXX_DBG_DESKEW_CTL[BITSEL], then
   simply read SPXX_DBG_DESKEW_STATE[MUXSEL]...
 
    SPXX_DBG_DESKEW_CTL[BITSEL]   = bit to set
    SPXX_DBG_DESKEW_STATE[MUXSEL] = 2-bit value
 
   For the xcv delay taps, the CSR controls increment and decrement the
   5-bit count value in the XCV.  This is a saturating counter, so it
   will not wrap when decrementing below zero or incrementing above 31.
 
   To write...
 
    SPXX_DBG_DESKEW_CTL[BITSEL]   = bit to set
    SPXX_DBG_DESKEW_CTL[OFFSET]   = tap value increment or decrement amount (5-bits)
    SPXX_DBG_DESKEW_CTL[INC|DEC]  = go bit
 
   These values are copied in SPX, so that they can be read back by
   software by a similar mechanism to the MUX selects...
 
    SPXX_DBG_DESKEW_CTL[BITSEL]   = bit to set
    SPXX_DBG_DESKEW_STATE[OFFSET] = 5-bit value
 
   In addition, there is a reset bit that sets all the state back to the
   default/starting value of 0x10.
 
    SPXX_DBG_DESKEW_CTL[CLRDLY]   = 1
 
 SINGLE STEP TRAINING MODE (WILMA)
     Debug feature that will enable the user to single-step the debug
     logic to watch initial movement and trends by putting the training
     machine in single step mode.
 
 * SPX*_DBG_DESKEW_CTL[SSTEP]
        This will put the training control logic into single step mode.  We
        will not deskew in this scenario and will require the TX device to
        send continuous training sequences.
 
        It is required that SRX*_COM_CTL[INF_EN] be clear so that suspect
        data does not flow into the chip.
 
        Deasserting SPX*_DBG_DESKEW_CTL[SSTEP] will attempt to deskew as per
        the normal definition.  Single step mode is for debug only.  Special
        care must be given to correctly deskew the interface if normal
        operation is desired.
 
 * SPX*_DBG_DESKEW_CTL[SSTEP_GO]
        Each write of '1' to SSTEP_GO will go through a single training
        iteration and will perform...
 
        - DLL update, if SPX*_DBG_DESKEW_CTL[DLLDIS] is clear
        - coarse update, if SPX*_TRN4_CTL[MUX_EN] is set
        - single fine update, if SPX*_TRN4_CTL[MACRO_EN] is set and an edge
       was detected after walked +/- SPX*_TRN4_CTL[MAXDIST] taps.
 
        Writes to this register have no effect if the interface is not in
        SSTEP mode (SPX*_DBG_DESKEW_CTL[SSTEP]).
 
        The WILMA mode will be cleared at the final state transition, so
        that software can set SPX*_DBG_DESKEW_CTL[SSTEP] and
        SPX*_DBG_DESKEW_CTL[SSTEP_GO] before setting SPX*_CLK_CTL[RCVTRN]
        and the machine will go through the initial iteration and stop -
        waiting for another SPX*_DBG_DESKEW_CTL[SSTEP_GO] or an interface
        enable.
 
 * SPX*_DBG_DESKEW_CTL[FALL8]
   Determines how many pattern matches are required during training
   operations to fallout of training and begin processing the normal data
   stream.  The default value is 10 pattern matches.  The pattern that is
   used is dependent on the SPX*_DBG_DESKEW_CTL[FALLNOP] CSR which
   determines between non-training packets (the default) and NOPs.
 
 * SPX*_DBG_DESKEW_CTL[FALLNOP]
   Determines the pattern that is required during training operations to
   fallout of training and begin processing the normal data stream.  The
   default value is to match against non-training data.  Setting this
   bit, changes the behavior to watch for NOPs packet instead.
 
   This bit should not be changed dynamically while the link is
   operational.
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     SPX(0..1)_DBG_DESKEW_STATE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<4:0>   OFFSET   RO       0           NA        The counter value of the bit selected by           |   
                                                  SPX_DBG_DESKEW_CTL[BITSEL]                        |
                                                  (srx_spi4__xcv_tap_select)                        |
<6:5>   MUXSEL   RO       0           NA        The mux select value of the bit selected by        |   
                                                  SPX_DBG_DESKEW_CTL[BITSEL]                        |
                                                  (srx_spi4__trn_mux_sel)                           |
<7>     UNXTERM  R/W1C    0           0         Unexpected training terminiation                   |   
                                                  (srx_spi4__top_unxexp_trn_term)                   |
<8>     TESTRES  R/W1C    0           0         Training Test Mode Result                          |   
                                                  (srx_spi4__test_mode_result)                      |
<63:9>  NS       RAZ      0           0         Reserved                                           |   

Notes:
 These bits are meant as a backdoor to control Spi4 per-bit deskew.  See
 that Spec for more details.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     SPX(0..1)_BIST_STAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     STAT0    RO       0           0         Bist Results/No Repair (Spi4 receive datapath FIFO)|   
                                                  (spx.srx.spi4.dat.dpr)                            |
<1>     STAT1    RO       0           0         Bist Results/No Repair (Rx calendar table)         |   
                                                  (spx.srx.spi4.cal.calendar)                       |
<2>     STAT2    RO       0           0         Bist Results/No Repair (Tx calendar table)         |   
                                                  (spx.stx.cal.calendar)                            |
<63:3>  NS       RAZ      0           0         Reserved                                           |   

 Notes:
        Bist results encoding
           0: good (or bist in progress/never run)
           1: bad
----------------------------------------------------------------------------------------------------
===
 
 // specify the RSL base addresses for the block

 
* SRX_SPI4_CAL - Spi4 Calender table
* direct_calendar_write / direct_calendar_read

     ==============================================================
     SRX(0..1)_SPI4_CAL(0..31) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   PRT0     R/W      X           NA          Status for port n+0                              |   
<7:4>   PRT1     R/W      X           NA          Status for port n+1                              |   
<11:8>  PRT2     R/W      X           NA          Status for port n+2                              |   
<15:12> PRT3     R/W      X           NA          Status for port n+3                              |   
<16>    ODDPAR   R/W      X           NA          Odd parity over SRX_SPI4_CAL[15:0]               |   
                                                    (^SRX_SPI4_CAL[16:0] === 1'b1)                  |   $NS       NS
<63:17> NS       RAZ      0           0           Reserved                                         |   

 Notes:
     There are 32 calendar table CSR's, each containing 4 entries for a
     total of 128 entries.  In the above definition...
 
           n = calendar table offset * 4
 
        Example, offset 0x00 contains the calendar table entries 0, 1, 2, 3
        (with n == 0).  Offset 0x10 is the 16th entry in the calendar table
        and would contain entries (16*4) = 64, 65, 66, and 67.
 
 Restrictions:
          Calendar table entry accesses (read or write) can only occur
          if the interface is disabled.  All other accesses will be
          unpredictable.
 
          Both the calendar table and the LEN and M parameters must be
          completely setup before writing the Interface enable (INF_EN) and
          Status channel enabled (ST_EN) asserted.
----------------------------------------------------------------------------------------------------
===


* SRX_COM_CTL - Spi receive common control

     ==============================================================
     SRX(0..1)_COM_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     INF_EN   R/W      0           1         Interface enable                                   |   
                                                  The master switch that enables the entire         |
                                                  interface. SRX will not validiate any data until  |
                                                  this bit is set. This bit should not be modified  |
                                                  once the interface is enabled.                    |
<2:1>   SPARE    R/W      0           0         Spare bits                                         |   
<3>     ST_EN    R/W      0           1         Status channel enabled                             |   
                                                  This is to allow configs without a status channel.|
                                                  This bit should not be modified once the          |
                                                  interface is enabled.                             |
<7:4>   PRTS     R/W      0           NA        Number of ports in the receiver (write: ports - 1) |   
                                                  0:  1 port                                        |
                                                  1:  2 ports                                       |
                                                  2:  3 ports                                       |
                                                  ...                                               |
                                                  15: 16 ports                                      |
<63:8>  NS       RAZ      0           0         Reserved                                           |   

Notes:
 Restrictions:
   Both the calendar table and the LEN and M parameters must be completely
   setup before writing the Interface enable (INF_EN) and Status channel
   enabled (ST_EN) asserted.

----------------------------------------------------------------------------------------------------
===
 
 
* SRX_SPI4_STAT - Spi4 status channel control

     ==============================================================
     SRX(0..1)_SPI4_STAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<6:0>   LEN      R/W      0           NA          CALENDAR_LEN (from spi4.2 spec)                  |   
<7>     SPARE    R/W      0           0           Spare bits                                       |   
<15:8>  M        R/W      0           NA          CALENDAR_M (from spi4.2 spec)                    |   
<63:16> NS       RAZ      0           0           Reserved                                         |   

Notes:
 Restrictions:
          Both the calendar table and the LEN and M parameters must be
          completely setup before writing the Interface enable (INF_EN) and
          Status channel enabled (ST_EN) asserted.
 
       Current rev only supports LVTTL status IO
----------------------------------------------------------------------------------------------------
===
 
* SRX_IGN_RX_FULL - Ignore RX FIFO backpressure

     ==============================================================
     SRX(0..1)_IGN_RX_FULL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  IGNORE   R/W      0           0         This port should ignore backpressure hints from    |   
                                                  GMX when the RX FIFO fills up                     |
                                                  0: Use GMX backpressure                           |
                                                  1: Ignore GMX backpressure                        |
<63:16> NS       RAZ      0           0         Reserved                                           |   

Notes:
 * IGNORE
   If a device can not or should not assert backpressure, then setting DROP
   will force STARVING status on the status channel for all ports.  This
   eliminates any back pressure from N2.
 
   This implies that it's ok drop packets when the FIFOS fill up.
 
   A side effect of this mode is that the TPA Watcher will effectively be
   disabled.  Since the DROP mode forces all TPA lines asserted, the TPA
   Watcher will never find a cycle where the TPA for the selected port is
   deasserted in order to increment its count.
----------------------------------------------------------------------------------------------------
===

* SRX_SW_TICK_CTL - Create a software tick of Spi4 data.  A write to this register will create a data tick.

     ==============================================================
     SRX(0..1)_SW_TICK_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   ADR      R/W      0           0         SW Tick port address                               |   
                                                  (PASS3 only)                                      |
<7:4>   OPC      R/W      0           0         SW Tick ERR - packet had an error                  |   
                                                  (PASS3 only)                                      |
<11:8>  MOD      R/W      0           0         SW Tick MOD - valid byte count                     |   
                                                  (PASS3 only)                                      |
<12>    SOP      R/W      0           0         SW Tick SOP                                        |   
                                                  (PASS3 only)                                      |
<13>    EOP      R/W      0           0         SW Tick EOP                                        |   
                                                  (PASS3 only)                                      |
<63:14> NS       RAZ      0           0         Reserved                                           |   
----------------------------------------------------------------------------------------------------
===

* SRX_SW_TICK_DAT - Create a software tick of Spi4 data

     ==============================================================
     SRX(0..1)_SW_TICK_DAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>  DAT      R/W      0           0         Data tick when SRX_SW_TICK_CTL is written          |   
                                                  (PASS3 only)                                      |
----------------------------------------------------------------------------------------------------
===

 // specify the RSL base addresses for the block


* STX_SPI4_CAL - Spi4 Calender table
* direct_calendar_write / direct_calendar_read

     ==============================================================
     STX(0..1)_SPI4_CAL(0..31) Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   PRT0     R/W      X           NA          Status for port n+0                              |   
<7:4>   PRT1     R/W      X           NA          Status for port n+1                              |   
<11:8>  PRT2     R/W      X           NA          Status for port n+2                              |   
<15:12> PRT3     R/W      X           NA          Status for port n+3                              |   
<16>    ODDPAR   R/W      X           NA          Odd parity over STX_SPI4_CAL[15:0]               |   
                                                    (^STX_SPI4_CAL[16:0] === 1'b1)                  |   $NS       NS
<63:17> NS       RAZ      0           0           Reserved                                         |   

 Notes:
     There are 32 calendar table CSR's, each containing 4 entries for a
     total of 128 entries.  In the above definition...
 
           n = calendar table offset * 4
 
        Example, offset 0x00 contains the calendar table entries 0, 1, 2, 3
        (with n == 0).  Offset 0x10 is the 16th entry in the calendar table
        and would contain entries (16*4) = 64, 65, 66, and 67.
 
 Restrictions:
        Calendar table entry accesses (read or write) can only occur
        if the interface is disabled.  All other accesses will be
        unpredictable.
 
     Both the calendar table and the LEN and M parameters must be
     completely setup before writing the Interface enable (INF_EN) and
     Status channel enabled (ST_EN) asserted.
----------------------------------------------------------------------------------------------------
===
 
 
* STX_COM_CTL - TX Common Control Register

     ==============================================================
     STX(0..1)_COM_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     INF_EN   R/W      0           1         Interface enable                                   |   
<2:1>   SPARE    R/W      0           0         Spare bits                                         |   
<3>     ST_EN    R/W      0           1         Status channel enabled                             |   
<63:4>  NS       RAZ      0           0         Reserved                                           |   

Notes:
 Restrictions:
     Both the calendar table and the LEN and M parameters must be
     completely setup before writing the Interface enable (INF_EN) and
     Status channel enabled (ST_EN) asserted.
----------------------------------------------------------------------------------------------------
===
 
 
* STX_ARB_CTL - Spi transmit arbitration control

     ==============================================================
     STX(0..1)_ARB_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<2:0>   NS       R/W      0           0         Reserved                                           |   
<3>     IGNTPA   R/W      0           0         User switch to ignore any TPA information from the |   
                                                  Spi interface. This CSR forces all TPA terms to   |
                                                  be masked out.  It is only intended as backdoor   |
                                                  or debug feature.                                 |
<4>     NS       R/W      0           0         Reserved                                           |   
<5>     MINTRN   R/W      0           0         Hold off training cycles until STX_MIN_BST[MINB]   |   
                                                  is satisfied                                      |
<63:6>  NS       RAZ      0           0         Reserved                                           |   

 Notes:
        If STX_ARB_CTL[MINTRN] is set in Spi4 mode, then the data_max_t
        parameter will have to be adjusted.  Please see the
        STX_SPI4_DAT[MAX_T] section for additional information.  In
        addition, the min_burst can only be guaranteed on the initial data
        burst of a given packet (i.e. the first data burst which contains
        the SOP tick).  All subsequent bursts could be truncated by training
        sequences at any point during transmission and could be arbitrarily
        small.  This mode is only for use in Spi4 mode.
----------------------------------------------------------------------------------------------------
===
 
 
* STX_IGN_CAL - Ignore Calendar Status from Spi4 Status Channel

     ==============================================================
     STX(0..1)_IGN_CAL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>   IGNTPA   R/W     0           0         Ignore Calendar Status from Spi4 Status Channel    |   
                                                  per Spi4 port                                     |
                                                  0: Use the status channel info                    |
                                                  1: Grant the given port MAX_BURST1 credits        |
<63:16>  NS       RAZ     0           0         Reserved                                           |   
----------------------------------------------------------------------------------------------------
===


* STX_MIN_BST - Min Burst to enforce when inserting training sequence

     ==============================================================
     STX(0..1)_MIN_BST Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<8:0>   MINB     R/W      0           0         When STX_ARB_CTL[MINTRN] is set, MINB indicates    |   
                                                  the number of 8B blocks to send before inserting  |
                                                  a training sequence.  Normally MINB will be set   |
                                                  to GMX_TX_SPI_THRESH[THRESH].  MINB should always |
                                                  be set to an even number (ie. multiple of 16B)    |
<63:9>  NS      RAZ      0           0         Reserved                                            |   
----------------------------------------------------------------------------------------------------
===


* STX_SPI4_DAT - Spi4 datapath channel control register

     ==============================================================
     STX(0..1)_SPI4_DAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<15:0>  MAX_T    R/W      0           NA        DATA_MAX_T (from spi4.2 spec)                      |   
<31:16> ALPHA    R/W      0           NA        alpha (from spi4.2 spec)                           |   
<63:32> NS       RAZ      0           0         Reserved                                           |   

Notes:
 Restrictions:
   * DATA_MAX_T must be in MOD 4 cycles
 
   * DATA_MAX_T must at least 0x20
 
   * DATA_MAX_T == 0 or ALPHA == 0 will disable the training sequnce
 
   * If STX_ARB_CTL[MINTRN] is set, then training cycles will stall
     waiting for min bursts to complete.  In the worst case, this will
     add the entire min burst transmission time to the interval between
     trainging sequence.  The observed MAX_T on the Spi4 bus will be...
 
                  STX_SPI4_DAT[MAX_T] + (STX_MIN_BST[MINB] * 4)
 
        If STX_ARB_CTL[MINTRN] is set in Spi4 mode, then the data_max_t
        parameter will have to be adjusted.  Please see the
        STX_SPI4_DAT[MAX_T] section for additional information.  In
        addition, the min_burst can only be guaranteed on the initial data
        burst of a given packet (i.e. the first data burst which contains
        the SOP tick).  All subsequent bursts could be truncated by training
        sequences at any point during transmission and could be arbitrarily
        small.  This mode is only for use in Spi4 mode.
----------------------------------------------------------------------------------------------------
===
 
 
* STX_SPI4_STAT - Spi4 status channel control register

     ==============================================================
     STX(0..1)_SPI4_STAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<6:0>   LEN      R/W      0           NA          CALENDAR_LEN (from spi4.2 spec)                  |   
<7>     REVRD    RAZ      0           0           Reserved                                         |   
<15:8>  M        R/W      0           NA          CALENDAR_M (from spi4.2 spec)                    |   
<63:16> NS       RAZ      0           0           Reserved                                         |   

Notes:
 Restrictions:
     Both the calendar table and the LEN and M parameters must be
     completely setup before writing the Interface enable (INF_EN) and
     Status channel enabled (ST_EN) asserted.
 
     The calendar table will only be enabled when LEN > 0.
 
     Current rev will only support LVTTL status IO.
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     STX(0..1)_STAT_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   BCKPRS   R/W      0           0           The selected port for STX_BCKPRS_CNT             |   
<4>     CLR      WR0      0           0           Clear all statistics counters                    |   
                                                    - STX_STAT_PKT_XMT                              |
                                                    - STX_STAT_BYTES_HI                             |
                                                    - STX_STAT_BYTES_LO                             |
<63:5>  NS       RAZ      0           0           Reserved                                         |   
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     STX(0..1)_STAT_PKT_XMT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  CNT      RO       0           0         Number of packets sent                             |   
<63:32> NS       RAZ      0           0         Reserved                                           |   
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     STX(0..1)_STAT_BYTES_HI Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  CNT      RO       0           0         Number of bytes sent (CNT[63:32])                  |   
<63:32> NS       RAZ      0           0         Reserved                                           |   
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     STX(0..1)_STAT_BYTES_LO Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  CNT      RO       0           0         Number of bytes sent (CNT[31:0])                   |   
<63:32> NS       RAZ      0           0         Reserved                                           |   
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     STX(0..1)_BCKPRS_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<31:0>  CNT      R/W1C    0           0         Number of cycles when back-pressure is received    |   
                                                  for port defined in STX_STAT_CTL[BCKPRS]          |
<63:32> NS       RAZ      0           0         Reserved                                           |   

Notes:
 This register reports the total number of cycles (STX data clks -
 stx_clk) in which the port defined in STX_STAT_CTL[BCKPRS] has lost TPA
 or is otherwise receiving backpressure.
 
 In Spi4 mode, this is defined as a loss of TPA which is indicated when
 the receiving device reports SATISFIED for the given port.  The calendar
 status is brought into N2 on the spi4_tx*_sclk and synchronized into the
 N2 Spi TX clock domain which is 1/2 the frequency of the spi4_tx*_dclk
 clock (internally, this the stx_clk).  The counter will update on the
 rising edge in which backpressure is reported.
 
 This register will be cleared when software writes all '1's to
 the STX_BCKPRS_CNT.
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     STX(0..1)_DIP_CNT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<3:0>   DIPMAX   R/W      0           0         Number of consecutive DIP2 error before loss       |   
                                                  of sync                                           |
<7:4>   FRMMAX   R/W      0           0         Number of consecutive unexpected framing patterns  |   
                                                  before loss of sync                               |
<63:8>  NS       RAZ      0           0         Reserved                                           |   

Notes:
 * DIPMAX
   This counts the number of consecutive DIP2 states in which the the
   received DIP2 is bad.  The expected range is 1-15 cycles with the
   value of 0 meaning disabled.
 
 * FRMMAX
   This counts the number of consecutive unexpected framing patterns (11)
   states.  The expected range is 1-15 cycles with the value of 0 meaning
   disabled.
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     STX(0..1)_INT_REG Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     CALPAR0  R/W1C    0           0         STX Calendar Table Parity Error Bank0              |   
<1>     CALPAR1  R/W1C    0           0         STX Calendar Table Parity Error Bank1              |   
<2>     OVRBST   R/W1C    0           0         Transmit packet burst too big                      |   
<3>     DATOVR   R/W1C    0           0         Spi4 FIFO overflow error                           |   
<4>     DIPERR   R/W1C    0           0         DIP2 error on the Spi4 Status channel              |   
<5>     NOSYNC   R/W1C    0           0         ERRCNT has exceeded STX_DIP_CNT[MAXDIP]            |   
<6>     UNXFRM   R/W1C    0           0         Unexpected framing sequence                        |   
<7>     FRMERR   R/W1C    0           0         FRMCNT has exceeded STX_DIP_CNT[MAXFRM]            |   
<8>     SYNCERR  RO       0           0         Interface encountered a fatal error                |   
<63:9>  NS       RAZ      0           0         Reserved                                           |   

Notes:
 * CALPAR0
   This bit indicates that the Spi4 calendar table encountered a parity
   error on bank0 of the calendar table memory.  This error bit is
   associated with the calendar table on the TX interface - the interface
   that drives the Spi databus.  The calendar table is used in Spi4 mode
   when using the status channel.  Parity errors can occur during normal
   operation when the calendar table is constantly being read for the port
   information, or during initialization time, when the user has access.
   This errors will force the the status channel to the reset state and
   begin driving training sequences.  The status channel will also reset.
   Software must follow the init sequence to resynch the interface.  This
   includes toggling INF_EN which will cancel all outstanding accumulated
   credits.
 
 * CALPAR1
   Identical to CALPAR0 except that it indicates that the error occured
   on bank1 (instead of bank0).
 
 * OVRBST
   STX can track upto a 512KB data burst.  Any packet larger than that is
   illegal and will cause confusion in the STX state machine.  BMI is
   responsible for throwing away these out of control packets from the
   input and the Execs should never generate them on the output.  This is
   a fatal error and should have STX_INT_SYNC[OVRBST] set.
 
 * DATOVR
   FIFO where the Spi4 data ramps upto its transmit frequency has
   overflowed.  This is a fatal error and should have
   STX_INT_SYNC[DATOVR] set.
 
 * DIPERR
   This bit will fire if any DIP2 error is caught by the Spi4 status
   channel.
 
 * NOSYNC
   This bit indicates that the number of consecutive DIP2 errors exceeds
   STX_DIP_CNT[MAXDIP] and that the interface should be taken down.  The
   datapath will be notified and send continuous training sequences until
   software resynchronizes the interface.  This error condition should
   have STX_INT_SYNC[NOSYNC] set.
 
 * UNXFRM
   Unexpected framing data was seen on the status channel.
 
 * FRMERR
   This bit indicates that the number of consecutive unexpected framing
   sequences STX_DIP_CNT[MAXFRM] and that the interface should be taken
   down.  The datapath will be notified and send continuous training
   sequences until software resynchronizes the interface.  This error
   condition should have STX_INT_SYNC[FRMERR] set.
 
 * SYNCERR
   Indicates that an exception marked in STX_INT_SYNC has occured and the
   TX datapath is disabled.  It is recommended that the OVRBST, DATOVR,
   NOSYNC, and FRMERR error conditions all have their bits set in the
   STX_INT_SYNC register.
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     STX(0..1)_INT_MSK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     CALPAR0  R/W      0           0         STX Calendar Table Parity Error Bank0              |   
<1>     CALPAR1  R/W      0           0         STX Calendar Table Parity Error Bank1              |   
<2>     OVRBST   R/W      0           0         Transmit packet burst too big                      |   
<3>     DATOVR   R/W      0           0         Spi4 FIFO overflow error                           |   
<4>     DIPERR   R/W      0           0         DIP2 error on the Spi4 Status channel              |   
<5>     NOSYNC   R/W      0           0         ERRCNT has exceeded STX_DIP_CNT[MAXDIP]            |   
<6>     UNXFRM   R/W      0           0         Unexpected framing sequence                        |   
<7>     FRMERR   R/W      0           0         FRMCNT has exceeded STX_DIP_CNT[MAXFRM]            |   
<63:8>  NS       RAZ      0           0         Reserved                                           |   

Notes:
 If the bit is enabled, then the coresponding exception condition will
 result in an interrupt to the system.
----------------------------------------------------------------------------------------------------
===
 
 

     ==============================================================
     STX(0..1)_INT_SYNC Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<0>     CALPAR0  R/W      0           0         STX Calendar Table Parity Error Bank0              |   
<1>     CALPAR1  R/W      0           0         STX Calendar Table Parity Error Bank1              |   
<2>     OVRBST   R/W      0           0         Transmit packet burst too big                      |   
<3>     DATOVR   R/W      0           0         Spi4 FIFO overflow error                           |   
<4>     DIPERR   R/W      0           0         DIP2 error on the Spi4 Status channel              |   
<5>     NOSYNC   R/W      0           0         ERRCNT has exceeded STX_DIP_CNT[MAXDIP]            |   
<6>     UNXFRM   R/W      0           0         Unexpected framing sequence                        |   
<7>     FRMERR   R/W      0           0         FRMCNT has exceeded STX_DIP_CNT[MAXFRM]            |   
<63:8>  NS       RAZ      0           0         Reserved                                           |   

Notes:
 If the bit is enabled, then the coresponding exception condition is flagged
 to be fatal.  In Spi4 mode, the exception condition will result in a loss
 of sync condition on the Spi4 interface and the datapath will send
 continuous traing sequences.
 
 It is recommended that software set the OVRBST, DATOVR, NOSYNC, and
 FRMERR errors as synchronization events.  Software is free to
 synchronize the bus on other conditions, but this is the minimum
 recommended set.
----------------------------------------------------------------------------------------------------
===




     ==============================================================
     TIM_REG_FLAGS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>  NS       RAZ       NS          NS       RESERVED                                               
<2>   RESET    RAZ       0           0        Reset oneshot pulse for free-running structures        
<1>   ENA_DWB  R/W       0           0        Enables non-zero DonwWriteBacks when set               
                                                 When set, enables the use of
                                                 DontWriteBacks during the buffer freeing
                                                 operations.
<0>   ENA_TIM  R/W       0           0        Enables the TIM section when set                       
                                                 When set, TIM is in normal operation.
                                                 When clear, time is effectively stopped for all
                                                 rings in TIM.

Notes:
 TIM has a counter that causes a periodic tick every 1024 cycles. This counter is shared by all
 rings. (Each tick causes the HW to decrement the time offset (i.e. COUNT) for all enabled rings.)
 When ENA_TIM==0, the HW stops this shared periodic counter, so there are no more ticks, and there
 are no more new bucket traversals (for any ring).

 If ENA_TIM transitions 1->0, TIM will no longer create new bucket traversals, but there may
 have been previous ones. If there are ring bucket traversals that were already pending but
 not currently active (i.e. bucket traversals that need to be done by the HW, but haven't been yet)
 during this ENA_TIM 1->0 transition, then these bucket traversals will remain pending until
 ENA_TIM is later set to one. Bucket traversals that were already in progress will complete
 after the 1->0 ENA_TIM transition, though.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     TIM_REG_READ_IDX Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> NS       RAZ      NS          NS        RESERVED                                               
<15:8>  INC      R/W      0           0         Increment to add to current index for next index       
<7:0>   IDX      R/W      0           0         Index to use for next memory CSR read                  

Notes:
 Provides the read index during a CSR read operation to any of the CSRs that are physically stored
 as memories.  The names of these CSRs begin with the prefix "TIM_MEM_".
 IDX[7:0] is the read index.  INC[7:0] is an increment that is added to IDX[7:0] after any CSR read.
 The intended use is to initially write this CSR such that IDX=0 and INC=1.  Then, the entire
 contents of a CSR memory can be read with consecutive CSR read commands.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     TIM_REG_BIST_RESULT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>  NS       RAZ       NS          NS       RESERVED                                               
<3:2>   STA      RO        X           0        BiST result of the STA   memories (0=pass, !0=fail)    
<1:1>   NCB      RO        X           0        BiST result of the NCB   memories (0=pass, !0=fail)    
<0:0>   CTL      RO        X           0        BiST result of the CTL   memories (0=pass, !0=fail)    

Notes:
 Access to the internal BiST results
 Each bit is the BiST result of an individual memory (per bit, 0=pass and 1=fail).
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     TIM_REG_ERROR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> NS       RAZ      NS          NS        RESERVED                                               
<15:0>  MASK     R/W1C    0           0         Bit mask indicating the rings in error                 

Notes:
 A ring is in error if its interval has elapsed more than once without having been serviced.
 During a CSR write to this register, the write data is used as a mask to clear the selected mask
 bits (mask'[15:0] = mask[15:0] & ~write_data[15:0]).
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     TIM_REG_INT_MASK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16> NS       RAZ      NS          NS        RESERVED                                               
<15:0>  MASK     R/W      0           0         Bit mask corresponding to TIM_REG_ERROR.MASK above     

Notes:
 Note that this CSR is present only in chip revisions beginning with pass2.
 When mask bit is set, the interrupt is enabled.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     TIM_MEM_RING0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:55> NS       RAZ      NS          NS        RESERVED                                               
<54:24> BASE     R/W      0           0         Pointer[35:5] to bucket[0]                             
<23:4>  BSIZE    R/W      0           0         Number of buckets - 1                                  
<3:0>   RID      R/W      0           0         Ring ID                                                

Notes:
 TIM_MEM_RING0 must not be written for a ring when TIM_MEM_RING1[ENA] is set for the ring.
 Every write to TIM_MEM_RING0 clears the current bucket for the ring. (The current bucket is
 readable via TIM_MEM_DEBUG2[BUCKET],TIM_MEM_DEBUG1[BUCKET].)
 BASE is a 32-byte aligned pointer[35:0].  Only pointer[35:5] are stored because pointer[4:0] = 0.
 This CSR is a memory of 16 entries, and thus, the TIM_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     TIM_MEM_RING1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:43> NS       RAZ      NS          NS        RESERVED                                               
<42:42> ENA      R/W      0           0         Ring timer enable                                      
                                                 When clear, the ring is disabled and TIM
                                                 will not traverse any new buckets for the ring.
<41:39> CPOOL    R/W      0           0         Free list used to free chunks                          
<38:26> CSIZE    R/W      0           0         Number of words per chunk                              
<25:4>  INTERVAL R/W      0           0         Timer interval - 1, measured in 1024 cycle ticks       
<3:0>   RID      R/W      0           0         Ring ID                                                

Notes:
 After a 1->0 transition on ENA, the HW will still complete a bucket traversal for the ring
 if it was pending or active prior to the transition. (SW must delay to ensure the completion
 of the traversal before reprogramming the ring.)
 Every write to TIM_MEM_RING1 resets the current time offset for the ring to the INTERVAL value.
 (The current time offset for the ring is readable via TIM_MEM_DEBUG0[COUNT].)
 CSIZE must be at least 16.  It is illegal to program CSIZE to a value that is less than 16.
 This CSR is a memory of 16 entries, and thus, the TIM_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     TIM_MEM_DEBUG0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> NS       RAZ       NS          NS       RESERVED                                               
<47:47> ENA      RO        X           0        Ring timer enable                                      
<46:46> NS       RAZ       NS          NS       RESERVED                                               
<45:24> COUNT    RO        X           0        Time offset for the ring                               
                                                 Set to INTERVAL and counts down by 1 every 1024
                                                 cycles when ENA==1. The HW forces a bucket
                                                 traversal (and resets COUNT to INTERVAL) whenever
                                                 the decrement would cause COUNT to go negative.
                                                 COUNT is unpredictable whenever ENA==0.
                                                 COUNT is reset to INTERVAL whenever TIM_MEM_RING1
                                                 is written for the ring.
<23:22> NS       RAZ       NS          NS       RESERVED                                               
<21:0>  INTERVAL RO        X           0        Timer interval - 1                                     

Notes:
 Internal per-ring state intended for debug use only - tim.ctl[47:0]
 This CSR is a memory of 16 entries, and thus, the TIM_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     TIM_MEM_DEBUG1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:51> BUCKET   RO        X           0        Current bucket[12:0]                                   
                                                 Reset to 0 whenever TIM_MEM_RING0 is written for
                                                 the ring. Incremented (modulo BSIZE) once per
                                                 bucket traversal.
                                                 See TIM_MEM_DEBUG2[BUCKET].
<50:20> BASE     RO        X           0        Pointer[35:5] to bucket[0]                             
<19:0>  BSIZE    RO        X           0        Number of buckets - 1                                  

Notes:
 Internal per-ring state intended for debug use only - tim.sta[63:0]
 This CSR is a memory of 16 entries, and thus, the TIM_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     TIM_MEM_DEBUG2 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:24> NS       RAZ       NS          NS       RESERVED                                               
<23:21> CPOOL    RO        X           0        Free list used to free chunks                          
<20:8>  CSIZE    RO        X           0        Number of words per chunk                              
<7>     UNUSED   RO        X           0        Unused                                                 
<6:0>   BUCKET   RO        X           0        Current bucket[19:13]                                  
                                                 See TIM_MEM_DEBUG1[BUCKET].

Notes:
 Internal per-ring state intended for debug use only - tim.sta[95:64]
 This CSR is a memory of 16 entries, and thus, the TIM_REG_READ_IDX CSR must be written before any
 CSR read operations to this address can be performed. 
----------------------------------------------------------------------------------------------------
===

 *
 *                  TRA(0)_CTL = Trace Buffer Control
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:15>  NS       RAZ      0           0         RESERVED                                               
<14>     IGNORE_O R/W      0           0         Ignore overflow during wrap mode                       
                                                   If set and wrapping mode is enabled, then tracing
                                                   will not stop at the overflow condition.  Each
                                                   write during an overflow will overwrite the
                                                   oldest, unread entry and the read pointer is
                                                   incremented by one entry.  This bit has no effect
                                                   if WRAP=0.
<13>     MCD0_ENA R/W      0           0         MCD0 enable                                            
                                                   If set and any PP sends the MCD0 signal, the
                                                   tracing is disabled.
<12>     MCD0_THR R/W      0           0         MCD0_threshold                                         
                                                   At a fill threshold event, sends an MCD0
                                                   wire pulse that can cause cores to enter debug
                                                   mode, if enabled.  This MCD0 wire pulse will not
                                                   occur while (TRA(0)_INT_STATUS.MCD0_THR == 1).
<11>     MCD0_TRG R/W      0           0         MCD0_trigger                                           
                                                   At an end trigger event, sends an MCD0
                                                   wire pulse that can cause cores to enter debug
                                                   mode, if enabled.  This MCD0 wire pulse will not
                                                   occur while (TRA(0)_INT_STATUS.MCD0_TRG == 1).
<10>     CIU_THR R/W      0           0          CIU_threshold                                          
                                                   When set during a fill threshold event,
                                                   TRA(0)_INT_STATUS[CIU_THR] is set, which can cause
                                                   core interrupts, if enabled.
<9>      CIU_TRG R/W      0           0          CIU_trigger                                            
                                                   When set during an end trigger event,
                                                   TRA(0)_INT_STATUS[CIU_TRG] is set, which can cause
                                                   core interrupts, if enabled.
<8:7>    FULL_THR R/W      0           0         Full Threshhold                                        
                                                   0=none
                                                   1=1/2 full
                                                   2=3/4 full
                                                   3=4/4 full
<6:4>    TIME_GRN R/W      0           0         Timestamp granularity                                  
                                                   granularity=8^n cycles, n=0,1,2,3,4,5,6,7
<3:2>    TRIG_CTL R/W      0           0         Trigger Control                                        
                                                   Note: trigger events are written to the trace
                                                   0=no triggers
                                                   1=trigger0=start trigger, trigger1=stop trigger
                                                   2=(trigger0 || trigger1)=start trigger
                                                   3=(trigger0 || trigger1)=stop trigger
<1>      WRAP     R/W      0           0         Wrap mode                                              
                                                   When WRAP=0, the trace buffer will disable itself
                                                   after having logged 1024 entries.  When WRAP=1,
                                                   the trace buffer will never disable itself.
                                                   In this case, tracing may or may not be
                                                   temporarily suspended during the overflow
                                                   condition (see IGNORE_O above).
                                                   0=do not wrap
                                                   1=wrap
<0>      ENA      R/W      0           0         Enable Trace                                           
                                                   Master enable.  Tracing only happens when ENA=1.
                                                   When ENA changes from 0 to 1, the read and write
                                                   pointers are reset to 0x00 to begin a new trace.
                                                   The MCD0 event may set ENA=0 (see MCD0_ENA
                                                   above).  When using triggers, tracing occurs only
                                                   between start and stop triggers (including the
                                                   triggers themselves).
                                                   0=disable
                                                   1=enable

Notes:
 It is illegal to change the values of WRAP, TRIG_CTL, IGNORE_O while tracing (i.e. when ENA=1).
 Note that the following fields are present only in chip revisions beginning with pass2: IGNORE_O
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_INT_STATUS = Trace Buffer Interrupt Status
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_INT_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:4>   NS       RAZ      0           0         RESERVED                                               
<3>      MCD0_THR R/W1C    0           0         MCD0 full threshold interrupt status                   
                                                   0=trace buffer did not generate MCD0 wire pulse
                                                   1=trace buffer did     generate MCD0 wire pulse
                                                     and prevents additional MCD0_THR MCD0 wire pulses
<2>      MCD0_TRG R/W1C    0           0         MCD0 end trigger interrupt status                      
                                                   0=trace buffer did not generate interrupt
                                                   1=trace buffer did     generate interrupt
                                                     and prevents additional MCD0_TRG MCD0 wire pulses
<1>      CIU_THR  R/W1C    0           0         CIU full threshold interrupt status                    
                                                   0=trace buffer did not generate interrupt
                                                   1=trace buffer did     generate interrupt
<0>      CIU_TRG  R/W1C    0           0         CIU end trigger interrupt status                       
                                                   0=trace buffer did not generate interrupt
                                                   1=trace buffer did     generate interrupt

Notes:
 During a CSR write to this register, the write data is used as a mask to clear the selected status
 bits (status'[3:0] = status[3:0] & ~write_data[3:0]).
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_BIST_STATUS = Trace Buffer BiST Status
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_BIST_STATUS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:3>   NS       RAZ      0           0         RESERVED                                               
<2>      TCF      RO       0           0         Bist Results for TCF memory                            
                                                   0: GOOD (or bist in progress/never run)
                                                   1: BAD
<1>      TDF1     RO       0           0         Bist Results for TDF memory 1                          
                                                   0: GOOD (or bist in progress/never run)
                                                   1: BAD
<0>      TDF0     RO       0           0         Bist Results for TCF memory 0                          
                                                   0: GOOD (or bist in progress/never run)
                                                   1: BAD
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_CYCLES_SINCE = Trace Buffer Cycles Since Last Write, Read/Write pointers
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_CYCLES_SINCE Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:16>  CYCLES   RO       0           0         Cycles since the last entry was written                
<15:8>   RPTR     RO       0           0         Read pointer                                           
<7:0>    WPTR     RO       0           0         Write pointer                                          

Notes:
 This CSR is obsolete.  Use TRA(0)_CYCLES_SINCE1 instead.
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_READ_DAT = Trace Buffer Read Data
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_READ_DAT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:0>   DATA     RO       0           0         Trace buffer data for current entry                    

Notes:
 This CSR is a memory of 1024 entries.  When the trace was enabled, the read pointer was set to entry
 0 by hardware.  Each read to this address increments the read pointer.
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_CYCLES_SINCE1 = Trace Buffer Cycles Since Last Write, Read/Write pointers
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_CYCLES_SINCE1 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:24>  CYCLES   RO       0           0         Cycles since the last entry was written                
<23:22>  NS       RAZ      NS          NS        RESERVED                                               
<21:12>  RPTR     RO       0           0         Read pointer                                           
<11:10>  NS       RAZ      NS          NS        RESERVED                                               
<9:0>    WPTR     RO       0           0         Write pointer                                          
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_FILT_CMD = Trace Buffer Filter Command Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_FILT_CMD Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:17>  NS       RAZ      0           0         RESERVED                                               
<16>     SAA      R/W      0           1         Enable SAA     tracing                                 
                                                   0=disable, 1=enable
<15>     IOBDMA   R/W      0           1         Enable IOBDMA  tracing                                 
                                                   0=disable, 1=enable
<14>     IOBST    R/W      0           1         Enable IOBST   tracing                                 
                                                   0=disable, 1=enable
<13>     IOBLD64  R/W      0           1         Enable IOBLD64 tracing                                 
                                                   0=disable, 1=enable
<12>     IOBLD32  R/W      0           1         Enable IOBLD32 tracing                                 
                                                   0=disable, 1=enable
<11>     IOBLD16  R/W      0           1         Enable IOBLD16 tracing                                 
                                                   0=disable, 1=enable
<10>     IOBLD8   R/W      0           1         Enable IOBLD8  tracing                                 
                                                   0=disable, 1=enable
<9>      STT      R/W      0           1         Enable STT     tracing                                 
                                                   0=disable, 1=enable
<8>      STP      R/W      0           1         Enable STP     tracing                                 
                                                   0=disable, 1=enable
<7>      STC      R/W      0           1         Enable STC     tracing                                 
                                                   0=disable, 1=enable
<6>      STF      R/W      0           1         Enable STF     tracing                                 
                                                   0=disable, 1=enable
<5>      LDT      R/W      0           1         Enable LDT     tracing                                 
                                                   0=disable, 1=enable
<4>      LDI      R/W      0           1         Enable LDI     tracing                                 
                                                   0=disable, 1=enable
<3>      LDD      R/W      0           1         Enable LDD     tracing                                 
                                                   0=disable, 1=enable
<2>      PSL1     R/W      0           1         Enable PSL1    tracing                                 
                                                   0=disable, 1=enable
<1>      PL2      R/W      0           1         Enable PL2     tracing                                 
                                                   0=disable, 1=enable
<0>      DWB      R/W      0           1         Enable DWB     tracing                                 
                                                   0=disable, 1=enable

Notes:
Note that the trace buffer does not do proper IOBDMA address compares.  Thus, if IOBDMA is set, then
the address compare must be disabled (i.e. TRA(0)_FILT_ADR_MSK set to zero) to guarantee that IOBDMAs
enter the trace.
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_FILT_SID = Trace Buffer Filter SourceId Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_FILT_SID Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32>  NS       RAZ      NS          NS        RESERVED                                               
<31:20>  UNUSED   R/W      0           0         Unused                                                 
<19>     DWB      R/W      0           0         Enable tracing of requests from the IOB DWB engine     
<18>     IOBREQ   R/W      0           0         Enable tracing of requests from FPA,TIM,DFA,           
                                                 PCI,ZIP,POW, and PKO (writes)
<17>     PKO      R/W      0           0         Enable tracing of read requests from PKO               
<16>     PKI      R/W      0           0         Enable tracing of write requests from PIP/IPD          
<15:0>   PP       R/W      0           0         Enable tracing from PP[N] with matching SourceID       
                                                   0=disable, 1=enableper bit N where  0<=N<=15
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_FILT_DID = Trace Buffer Filter DestinationId Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_FILT_DID Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32>  NS       RAZ      0           0         RESERVED                                               
<31:13>  ILLEGAL  R/W      0           0x7FFFF   Illegal destinations                                   
<12>     POW      R/W      0           1         Enable tracing of requests to POW                      
                                                 (get work, add work, status/memory/index
                                                 loads, NULLRd loads, CSR's)
<11:9>   ILLEGAL2 R/W      0           0x7       Illegal destinations                                   
<8>      RNG      R/W      0           1         Enable tracing of requests to RNG                      
                                                 (loads/IOBDMA's are legal)
<7>      ZIP      R/W      0           1         Enable tracing of requests to ZIP                      
                                                 (doorbell stores are legal)
<6>      DFA      R/W      0           1         Enable tracing of requests to DFA                      
                                                 (CSR's and operations are legal)
<5>      FPA      R/W      0           1         Enable tracing of requests to FPA                      
                                                 (alloc's (loads/IOBDMA's), frees (stores) are legal)
<4>      KEY      R/W      0           1         Enable tracing of requests to KEY memory               
                                                 (loads/IOBDMA's/stores are legal)
<3>      PCI      R/W      0           1         Enable tracing of requests to PCI and RSL-type         
                                                 CSR's (RSL CSR's, PCI bus operations, PCI
                                                 CSR's)
<2:1>    ILLEGAL3 R/W      0           0x3       Illegal destinations                                   
<0>      MIO      R/W      0           1         Enable tracing of CIU and GPIO CSR's                   
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_FILT_ADR_ADR = Trace Buffer Filter Address Address
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_FILT_ADR_ADR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:36>  NS       RAZ      0           0         RESERVED                                               
<35:0>   ADR      R/W      0           NS        Unmasked Address                                       
                                                   The combination of TRA(0)_FILT_ADR_ADR and
                                                   TRA(0)_FILT_ADR_MSK is a masked address to
                                                   enable tracing of only those commands whose
                                                   masked address matches
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_FILT_ADR_MSK = Trace Buffer Filter Address Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_FILT_ADR_MSK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:36>  NS       RAZ      0           0         RESERVED                                               
<35:0>   ADR      R/W      0           0         Address Mask                                           
                                                   The combination of TRA(0)_FILT_ADR_ADR and
                                                   TRA(0)_FILT_ADR_MSK is a masked address to
                                                   enable tracing of only those commands whose
                                                   masked address matches.  When a mask bit is not
                                                   set, the corresponding address bits are assumed
                                                   to match.  Also, note that IOBDMAs do not have
                                                   proper addresses, so when TRA(0)_FILT_CMD[IOBDMA]
                                                   is set, TRA(0)_FILT_ADR_MSK must be zero to
                                                   guarantee that any IOBDMAs enter the trace.
----------------------------------------------------------------------------------------------------
===

 *
 *                  TRA(0)_TRIG0_CMD = Trace Buffer Filter Command Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_TRIG0_CMD Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:17>  NS       RAZ      0           0         RESERVED                                               
<16>     SAA      R/W      0           1         Enable SAA     tracing                                 
                                                   0=disable, 1=enable
<15>     IOBDMA   R/W      0           1         Enable IOBDMA  tracing                                 
                                                   0=disable, 1=enable
<14>     IOBST    R/W      0           1         Enable IOBST   tracing                                 
                                                   0=disable, 1=enable
<13>     IOBLD64  R/W      0           1         Enable IOBLD64 tracing                                 
                                                   0=disable, 1=enable
<12>     IOBLD32  R/W      0           1         Enable IOBLD32 tracing                                 
                                                   0=disable, 1=enable
<11>     IOBLD16  R/W      0           1         Enable IOBLD16 tracing                                 
                                                   0=disable, 1=enable
<10>     IOBLD8   R/W      0           1         Enable IOBLD8  tracing                                 
                                                   0=disable, 1=enable
<9>      STT      R/W      0           1         Enable STT     tracing                                 
                                                   0=disable, 1=enable
<8>      STP      R/W      0           1         Enable STP     tracing                                 
                                                   0=disable, 1=enable
<7>      STC      R/W      0           1         Enable STC     tracing                                 
                                                   0=disable, 1=enable
<6>      STF      R/W      0           1         Enable STF     tracing                                 
                                                   0=disable, 1=enable
<5>      LDT      R/W      0           1         Enable LDT     tracing                                 
                                                   0=disable, 1=enable
<4>      LDI      R/W      0           1         Enable LDI     tracing                                 
                                                   0=disable, 1=enable
<3>      LDD      R/W      0           1         Enable LDD     tracing                                 
                                                   0=disable, 1=enable
<2>      PSL1     R/W      0           1         Enable PSL1    tracing                                 
                                                   0=disable, 1=enable
<1>      PL2      R/W      0           1         Enable PL2     tracing                                 
                                                   0=disable, 1=enable
<0>      DWB      R/W      0           1         Enable DWB     tracing                                 
                                                   0=disable, 1=enable

Notes:
Note that the trace buffer does not do proper IOBDMA address compares.  Thus, if IOBDMA is set, then
the address compare must be disabled (i.e. TRA(0)_TRIG0_ADR_MSK set to zero) to guarantee that IOBDMAs
are recognized as triggers.
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_TRIG0_SID = Trace Buffer Filter SourceId Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_TRIG0_SID Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32>  NS       RAZ      NS          NS        RESERVED                                               
<31:20>  UNUSED   R/W      0           0         Unused                                                 
<19>     DWB      R/W      0           0         Enable triggering on requests from the IOB DWB engine  
<18>     IOBREQ   R/W      0           0         Enable triggering on requests from FPA,TIM,DFA,        
                                                 PCI,ZIP,POW, and PKO (writes)
<17>     PKO      R/W      0           0         Enable triggering on read requests from PKO            
<16>     PKI      R/W      0           0         Enable triggering on write requests from PIP/IPD       
<15:0>   PP       R/W      0           0         Enable triggering from PP[N] with matching SourceID    
                                                   0=disable, 1=enableper bit N where  0<=N<=15
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_TRIG0_DID = Trace Buffer Filter DestinationId Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_TRIG0_DID Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32>  NS       RAZ      0           0         RESERVED                                               
<31:13>  ILLEGAL  R/W      0           0x7FFFF   Illegal destinations                                   
<12>     POW      R/W      0           1         Enable triggering on requests to POW                   
                                                 (get work, add work, status/memory/index
                                                 loads, NULLRd loads, CSR's)
<11:9>   ILLEGAL2 R/W      0           0x7       Illegal destinations                                   
<8>      RNG      R/W      0           1         Enable triggering on requests to RNG                   
                                                 (loads/IOBDMA's are legal)
<7>      ZIP      R/W      0           1         Enable triggering on requests to ZIP                   
                                                 (doorbell stores are legal)
<6>      DFA      R/W      0           1         Enable triggering on requests to DFA                   
                                                 (CSR's and operations are legal)
<5>      FPA      R/W      0           1         Enable triggering on requests to FPA                   
                                                 (alloc's (loads/IOBDMA's), frees (stores) are legal)
<4>      KEY      R/W      0           1         Enable triggering on requests to KEY memory            
                                                 (loads/IOBDMA's/stores are legal)
<3>      PCI      R/W      0           1         Enable triggering on requests to PCI and RSL-type      
                                                 CSR's (RSL CSR's, PCI bus operations, PCI
                                                 CSR's)
<2:1>    ILLEGAL3 R/W      0           0x3       Illegal destinations                                   
<0>      MIO      R/W      0           1         Enable triggering on CIU and GPIO CSR's                
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_TRIG0_ADR_ADR = Trace Buffer Filter Address Address
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_TRIG0_ADR_ADR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:36>  NS       RAZ      0           0         RESERVED                                               
<35:0>   ADR      R/W      0           NS        Unmasked Address                                       
                                                   The combination of TRA(0)_TRIG0_ADR_ADR and
                                                   TRA(0)_TRIG0_ADR_MSK is a masked address to
                                                   enable tracing of only those commands whose
                                                   masked address matches
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_TRIG0_ADR_MSK = Trace Buffer Filter Address Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_TRIG0_ADR_MSK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:36>  NS       RAZ      0           0         RESERVED                                               
<35:0>   ADR      R/W      0           0         Address Mask                                           
                                                   The combination of TRA(0)_TRIG0_ADR_ADR and
                                                   TRA(0)_TRIG0_ADR_MSK is a masked address to
                                                   enable tracing of only those commands whose
                                                   masked address matches.  When a mask bit is not
                                                   set, the corresponding address bits are assumed
                                                   to match.  Also, note that IOBDMAs do not have
                                                   proper addresses, so when TRA(0)_TRIG0_CMD[IOBDMA]
                                                   is set, TRA(0)_FILT_TRIG0_MSK must be zero to
                                                   guarantee that any IOBDMAs are recognized as
                                                   triggers.
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_TRIG1_CMD = Trace Buffer Filter Command Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_TRIG1_CMD Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:17>  NS       RAZ      0           0         RESERVED                                               
<16>     SAA      R/W      0           1         Enable SAA     tracing                                 
                                                   0=disable, 1=enable
<15>     IOBDMA   R/W      0           1         Enable IOBDMA  tracing                                 
                                                   0=disable, 1=enable
<14>     IOBST    R/W      0           1         Enable IOBST   tracing                                 
                                                   0=disable, 1=enable
<13>     IOBLD64  R/W      0           1         Enable IOBLD64 tracing                                 
                                                   0=disable, 1=enable
<12>     IOBLD32  R/W      0           1         Enable IOBLD32 tracing                                 
                                                   0=disable, 1=enable
<11>     IOBLD16  R/W      0           1         Enable IOBLD16 tracing                                 
                                                   0=disable, 1=enable
<10>     IOBLD8   R/W      0           1         Enable IOBLD8  tracing                                 
                                                   0=disable, 1=enable
<9>      STT      R/W      0           1         Enable STT     tracing                                 
                                                   0=disable, 1=enable
<8>      STP      R/W      0           1         Enable STP     tracing                                 
                                                   0=disable, 1=enable
<7>      STC      R/W      0           1         Enable STC     tracing                                 
                                                   0=disable, 1=enable
<6>      STF      R/W      0           1         Enable STF     tracing                                 
                                                   0=disable, 1=enable
<5>      LDT      R/W      0           1         Enable LDT     tracing                                 
                                                   0=disable, 1=enable
<4>      LDI      R/W      0           1         Enable LDI     tracing                                 
                                                   0=disable, 1=enable
<3>      LDD      R/W      0           1         Enable LDD     tracing                                 
                                                   0=disable, 1=enable
<2>      PSL1     R/W      0           1         Enable PSL1    tracing                                 
                                                   0=disable, 1=enable
<1>      PL2      R/W      0           1         Enable PL2     tracing                                 
                                                   0=disable, 1=enable
<0>      DWB      R/W      0           1         Enable DWB     tracing                                 
                                                   0=disable, 1=enable

Notes:
Note that the trace buffer does not do proper IOBDMA address compares.  Thus, if IOBDMA is set, then
the address compare must be disabled (i.e. TRA(0)_TRIG1_ADR_MSK set to zero) to guarantee that IOBDMAs
are recognized as triggers.
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_TRIG1_SID = Trace Buffer Filter SourceId Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_TRIG1_SID Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32>  NS       RAZ      NS          NS        RESERVED                                               
<31:20>  UNUSED   R/W      0           0         Unused                                                 
<19>     DWB      R/W      0           0         Enable triggering on requests from the IOB DWB engine  
<18>     IOBREQ   R/W      0           0         Enable triggering on requests from FPA,TIM,DFA,        
                                                 PCI,ZIP,POW, and PKO (writes)
<17>     PKO      R/W      0           0         Enable triggering on read requests from PKO            
<16>     PKI      R/W      0           0         Enable triggering on write requests from PIP/IPD       

<15:0>   PP       R/W      0           0         Enable trigering from PP[N] with matching SourceID     
                                                   0=disable, 1=enableper bit N where  0<=N<=15
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_TRIG1_DID = Trace Buffer Filter DestinationId Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_TRIG1_DID Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:32>  NS       RAZ      0           0         RESERVED                                               
<31:13>  ILLEGAL  R/W      0           0x7FFFF   Illegal destinations                                   
<12>     POW      R/W      0           1         Enable triggering on requests to POW                   
                                                 (get work, add work, status/memory/index
                                                 loads, NULLRd loads, CSR's)
<11:9>   ILLEGAL2 R/W      0           0x7       Illegal destinations                                   
<8>      RNG      R/W      0           1         Enable triggering on requests to RNG                   
                                                 (loads/IOBDMA's are legal)
<7>      ZIP      R/W      0           1         Enable triggering on requests to ZIP                   
                                                 (doorbell stores are legal)
<6>      DFA      R/W      0           1         Enable triggering on requests to DFA                   
                                                 (CSR's and operations are legal)
<5>      FPA      R/W      0           1         Enable triggering on requests to FPA                   
                                                 (alloc's (loads/IOBDMA's), frees (stores) are legal)
<4>      KEY      R/W      0           1         Enable triggering on requests to KEY memory            
                                                 (loads/IOBDMA's/stores are legal)
<3>      PCI      R/W      0           1         Enable triggering on requests to PCI and RSL-type      
                                                 CSR's (RSL CSR's, PCI bus operations, PCI
                                                 CSR's)
<2:1>    ILLEGAL3 R/W      0           0x3       Illegal destinations                                   
<0>      MIO      R/W      0           1         Enable triggering on CIU and GPIO CSR's                
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_TRIG1_ADR_ADR = Trace Buffer Filter Address Address
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_TRIG1_ADR_ADR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:36>  NS       RAZ      0           0         RESERVED                                               
<35:0>   ADR      R/W      0           NS        Unmasked Address                                       
                                                   The combination of TRA(0)_TRIG1_ADR_ADR and
                                                   TRA(0)_TRIG1_ADR_MSK is a masked address to
                                                   enable tracing of only those commands whose
                                                   masked address matches
----------------------------------------------------------------------------------------------------
===
 *
 *                  TRA(0)_TRIG1_ADR_MSK = Trace Buffer Filter Address Mask
 *
 * Description: 
 *

     ==============================================================
     TRA(0)_TRIG1_ADR_MSK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:36>  NS       RAZ      0           0         RESERVED                                               
<35:0>   ADR      R/W      0           0         Address Mask                                           
                                                   The combination of TRA(0)_TRIG1_ADR_ADR and
                                                   TRA(0)_TRIG1_ADR_MSK is a masked address to
                                                   enable tracing of only those commands whose
                                                   masked address matches.  When a mask bit is not
                                                   set, the corresponding address bits are assumed
                                                   to match.  Also, note that IOBDMAs do not have
                                                   proper addresses, so when TRA(0)_TRIG1_CMD[IOBDMA]
                                                   is set, TRA(0)_FILT_TRIG1_MSK must be zero to
                                                   guarantee that any IOBDMAs are recognized as
                                                   triggers.
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     ZIP_CMD_CTL Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:2>  NS       RAZ       NS          NS       RESERVED                                               
<1>     FORCECLK R/W       0           0        Force zip_ctl__clock_on_b == 1 when set                
<0>     RESET    RAZ       0           0        Reset oneshot pulse for zip core                       
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     ZIP_CMD_BUF Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:58> NS       RAZ       NS          NS       RESERVED                                               
<57:49> DWB      R/W       0           0        Number of DontWriteBacks                               
<48:46> POOL     R/W       0           0        Free list used to free command buffer segments         
<45:33> SIZE     R/W       0           0        Number of uint64s per command buffer segment           
<32:0>  PTR      R/W       0           0        Initial command buffer pointer[39:7] (128B-aligned)    

Notes:
 Sets the command buffer parameters
 The size of the command buffer segments is measured in uint64s.  The pool specifies (1 of 8 free
 lists to be used when freeing command buffer segments.  The PTR field is overwritten with the next
 pointer each time that the command buffer segment is exhausted.
 When quiescent (i.e. outstanding doorbell count is 0), it is safe to rewrite
 this register to effectively reset the command buffer state machine.  New commands will then be
 read from the newly specified command buffer pointer.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     ZIP_CMD_BIST_RESULT Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:31> NS       RAZ       NS          NS       RESERVED                                               
<30:4>  ZIP_CORE RO        X           0        BiST result of the ZIP_CORE memories                   
<3:0>   ZIP_CTL  RO        X           0        BiST result of the ZIP_CTL  memories                   

Notes:
 Access to the internal BiST results
 Each bit is the BiST result of an individual memory (per bit, 0=pass and 1=fail).
----------------------------------------------------------------------------------------------------
===

 

     ==============================================================
     ZIP_ERROR Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  NS       RAZ      NS          NS        RESERVED                                               
<0>     DOORBELL R/W1C    0           0         A doorbell count has overflowed                        

Notes:
  Note that this CSR is present only in chip revisions beginning with pass2.
----------------------------------------------------------------------------------------------------
===



     ==============================================================
     ZIP_INT_MASK Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:1>  NS       RAZ      NS          NS        RESERVED                                               
<0>     DOORBELL R/W      0           0         Bit mask corresponding to ZIP_ERROR[0] above           

Notes:
 Note that this CSR is present only in chip revisions beginning with pass2.
 When a mask bit is set, the corresponding interrupt is enabled.
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     ZIP_DEBUG0 Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:14> NS       RAZ      NS          NS        RESERVED                                               
<13:0>  ASSERTS  RO       0           0         FIFO assertion checks                                  

Notes:
 Note that this CSR is present only in chip revisions beginning with pass2.
----------------------------------------------------------------------------------------------------
===


     ==============================================================
     ZIP_CONSTANTS Type=RSL
     ==============================================================

----------------------------------------------------------------------------------------------------
Bit      Field   Field    Reset     Typical     Field
Pos      Name    Type     Value     Value       Description
----------------------------------------------------------------------------------------------------
<63:48> NS       RAZ      NS          NS        RESERVED                                               
<47:32> DEPTH    RO       31744       31744     Maximum search depth for compression                   
<31:20> ONFSIZE  RO       512         512       Output near full threshhold in bytes                   
<19:8>  CTXSIZE  RO       1536        1536      Context size in bytes                                  
<7:1>   NS       RAZ      NS          NS        unused                                                 
<0>     DISABLED RO       0           0         1=zip unit isdisabled, 0=zip unit not disabled         

Notes:
 Note that this CSR is present only in chip revisions beginning with pass2.
----------------------------------------------------------------------------------------------------
===

CSR                            Address            CSR Type     Address            CSR_Type
------------------------------------------------------------------------------------------
ASX0_DBG_DATA_DRV              0x00011800B0000208  RSL        
ASX0_DBG_DATA_ENABLE           0x00011800B0000200  RSL        
ASX0_INT_EN                    0x00011800B0000018  RSL        
ASX0_INT_REG                   0x00011800B0000010  RSL        
ASX0_PRT_LOOP                  0x00011800B0000040  RSL        
ASX0_RLD_BYPASS                0x00011800B0000248  RSL        
ASX0_RLD_BYPASS_SETTING        0x00011800B0000250  RSL        
ASX0_RLD_COMP                  0x00011800B0000220  RSL        
ASX0_RLD_DATA_DRV              0x00011800B0000218  RSL        
ASX0_RLD_NCTL_STRONG           0x00011800B0000230  RSL        
ASX0_RLD_NCTL_WEAK             0x00011800B0000240  RSL        
ASX0_RLD_PCTL_STRONG           0x00011800B0000228  RSL        
ASX0_RLD_PCTL_WEAK             0x00011800B0000238  RSL        
ASX0_RLD_SETTING               0x00011800B0000258  RSL        
ASX0_RX_CLK_SET000             0x00011800B0000020  RSL        
ASX0_RX_CLK_SET001             0x00011800B0000028  RSL        
ASX0_RX_CLK_SET002             0x00011800B0000030  RSL        
ASX0_RX_CLK_SET003             0x00011800B0000038  RSL        
ASX0_RX_PRT_EN                 0x00011800B0000000  RSL        
ASX0_TX_CLK_SET000             0x00011800B0000048  RSL        
ASX0_TX_CLK_SET001             0x00011800B0000050  RSL        
ASX0_TX_CLK_SET002             0x00011800B0000058  RSL        
ASX0_TX_CLK_SET003             0x00011800B0000060  RSL        
ASX0_TX_COMP_BYP               0x00011800B0000068  RSL        
ASX0_TX_HI_WATER000            0x00011800B0000080  RSL        
ASX0_TX_HI_WATER001            0x00011800B0000088  RSL        
ASX0_TX_HI_WATER002            0x00011800B0000090  RSL        
ASX0_TX_HI_WATER003            0x00011800B0000098  RSL        
ASX0_TX_PRT_EN                 0x00011800B0000008  RSL        
ASX1_INT_EN                    0x00011800B8000018  RSL        
ASX1_INT_REG                   0x00011800B8000010  RSL        
ASX1_PRT_LOOP                  0x00011800B8000040  RSL        
ASX1_RLD_BYPASS                0x00011800B8000248  RSL        
ASX1_RLD_BYPASS_SETTING        0x00011800B8000250  RSL        
ASX1_RLD_COMP                  0x00011800B8000220  RSL        
ASX1_RLD_DATA_DRV              0x00011800B8000218  RSL        
ASX1_RLD_NCTL_STRONG           0x00011800B8000230  RSL        
ASX1_RLD_NCTL_WEAK             0x00011800B8000240  RSL        
ASX1_RLD_PCTL_STRONG           0x00011800B8000228  RSL        
ASX1_RLD_PCTL_WEAK             0x00011800B8000238  RSL        
ASX1_RLD_SETTING               0x00011800B8000258  RSL        
ASX1_RX_CLK_SET000             0x00011800B8000020  RSL        
ASX1_RX_CLK_SET001             0x00011800B8000028  RSL        
ASX1_RX_CLK_SET002             0x00011800B8000030  RSL        
ASX1_RX_CLK_SET003             0x00011800B8000038  RSL        
ASX1_RX_PRT_EN                 0x00011800B8000000  RSL        
ASX1_TX_CLK_SET000             0x00011800B8000048  RSL        
ASX1_TX_CLK_SET001             0x00011800B8000050  RSL        
ASX1_TX_CLK_SET002             0x00011800B8000058  RSL        
ASX1_TX_CLK_SET003             0x00011800B8000060  RSL        
ASX1_TX_COMP_BYP               0x00011800B8000068  RSL        
ASX1_TX_HI_WATER000            0x00011800B8000080  RSL        
ASX1_TX_HI_WATER001            0x00011800B8000088  RSL        
ASX1_TX_HI_WATER002            0x00011800B8000090  RSL        
ASX1_TX_HI_WATER003            0x00011800B8000098  RSL        
ASX1_TX_PRT_EN                 0x00011800B8000008  RSL        
CIU_BIST                       0x0001070000000730  NCB        
CIU_DINT                       0x0001070000000720  NCB        
CIU_FUSE                       0x0001070000000728  NCB        
CIU_GSTOP                      0x0001070000000710  NCB        
CIU_INT0_EN0                   0x0001070000000200  NCB        
CIU_INT0_EN1                   0x0001070000000208  NCB        
CIU_INT0_EN4_0                 0x0001070000000C80  NCB        
CIU_INT0_EN4_1                 0x0001070000000C88  NCB        
CIU_INT0_SUM0                  0x0001070000000000  NCB        
CIU_INT0_SUM4                  0x0001070000000C00  NCB        
CIU_INT1_EN0                   0x0001070000000210  NCB        
CIU_INT1_EN1                   0x0001070000000218  NCB        
CIU_INT1_EN4_0                 0x0001070000000C90  NCB        
CIU_INT1_EN4_1                 0x0001070000000C98  NCB        
CIU_INT1_SUM0                  0x0001070000000008  NCB        
CIU_INT1_SUM4                  0x0001070000000C08  NCB        
CIU_INT2_EN0                   0x0001070000000220  NCB        
CIU_INT2_EN1                   0x0001070000000228  NCB        
CIU_INT2_EN4_0                 0x0001070000000CA0  NCB        
CIU_INT2_EN4_1                 0x0001070000000CA8  NCB        
CIU_INT2_SUM0                  0x0001070000000010  NCB        
CIU_INT2_SUM4                  0x0001070000000C10  NCB        
CIU_INT3_EN0                   0x0001070000000230  NCB        
CIU_INT3_EN1                   0x0001070000000238  NCB        
CIU_INT3_EN4_0                 0x0001070000000CB0  NCB        
CIU_INT3_EN4_1                 0x0001070000000CB8  NCB        
CIU_INT3_SUM0                  0x0001070000000018  NCB        
CIU_INT3_SUM4                  0x0001070000000C18  NCB        
CIU_INT4_EN0                   0x0001070000000240  NCB        
CIU_INT4_EN1                   0x0001070000000248  NCB        
CIU_INT4_EN4_0                 0x0001070000000CC0  NCB        
CIU_INT4_EN4_1                 0x0001070000000CC8  NCB        
CIU_INT4_SUM0                  0x0001070000000020  NCB        
CIU_INT4_SUM4                  0x0001070000000C20  NCB        
CIU_INT5_EN0                   0x0001070000000250  NCB        
CIU_INT5_EN1                   0x0001070000000258  NCB        
CIU_INT5_EN4_0                 0x0001070000000CD0  NCB        
CIU_INT5_EN4_1                 0x0001070000000CD8  NCB        
CIU_INT5_SUM0                  0x0001070000000028  NCB        
CIU_INT5_SUM4                  0x0001070000000C28  NCB        
CIU_INT6_EN0                   0x0001070000000260  NCB        
CIU_INT6_EN1                   0x0001070000000268  NCB        
CIU_INT6_EN4_0                 0x0001070000000CE0  NCB        
CIU_INT6_EN4_1                 0x0001070000000CE8  NCB        
CIU_INT6_SUM0                  0x0001070000000030  NCB        
CIU_INT6_SUM4                  0x0001070000000C30  NCB        
CIU_INT7_EN0                   0x0001070000000270  NCB        
CIU_INT7_EN1                   0x0001070000000278  NCB        
CIU_INT7_EN4_0                 0x0001070000000CF0  NCB        
CIU_INT7_EN4_1                 0x0001070000000CF8  NCB        
CIU_INT7_SUM0                  0x0001070000000038  NCB        
CIU_INT7_SUM4                  0x0001070000000C38  NCB        
CIU_INT8_EN0                   0x0001070000000280  NCB        
CIU_INT8_EN1                   0x0001070000000288  NCB        
CIU_INT8_EN4_0                 0x0001070000000D00  NCB        
CIU_INT8_EN4_1                 0x0001070000000D08  NCB        
CIU_INT8_SUM0                  0x0001070000000040  NCB        
CIU_INT8_SUM4                  0x0001070000000C40  NCB        
CIU_INT9_EN0                   0x0001070000000290  NCB        
CIU_INT9_EN1                   0x0001070000000298  NCB        
CIU_INT9_EN4_0                 0x0001070000000D10  NCB        
CIU_INT9_EN4_1                 0x0001070000000D18  NCB        
CIU_INT9_SUM0                  0x0001070000000048  NCB        
CIU_INT9_SUM4                  0x0001070000000C48  NCB        
CIU_INT10_EN0                  0x00010700000002A0  NCB        
CIU_INT10_EN1                  0x00010700000002A8  NCB        
CIU_INT10_EN4_0                0x0001070000000D20  NCB        
CIU_INT10_EN4_1                0x0001070000000D28  NCB        
CIU_INT10_SUM0                 0x0001070000000050  NCB        
CIU_INT10_SUM4                 0x0001070000000C50  NCB        
CIU_INT11_EN0                  0x00010700000002B0  NCB        
CIU_INT11_EN1                  0x00010700000002B8  NCB        
CIU_INT11_EN4_0                0x0001070000000D30  NCB        
CIU_INT11_EN4_1                0x0001070000000D38  NCB        
CIU_INT11_SUM0                 0x0001070000000058  NCB        
CIU_INT11_SUM4                 0x0001070000000C58  NCB        
CIU_INT12_EN0                  0x00010700000002C0  NCB        
CIU_INT12_EN1                  0x00010700000002C8  NCB        
CIU_INT12_EN4_0                0x0001070000000D40  NCB        
CIU_INT12_EN4_1                0x0001070000000D48  NCB        
CIU_INT12_SUM0                 0x0001070000000060  NCB        
CIU_INT12_SUM4                 0x0001070000000C60  NCB        
CIU_INT13_EN0                  0x00010700000002D0  NCB        
CIU_INT13_EN1                  0x00010700000002D8  NCB        
CIU_INT13_EN4_0                0x0001070000000D50  NCB        
CIU_INT13_EN4_1                0x0001070000000D58  NCB        
CIU_INT13_SUM0                 0x0001070000000068  NCB        
CIU_INT13_SUM4                 0x0001070000000C68  NCB        
CIU_INT14_EN0                  0x00010700000002E0  NCB        
CIU_INT14_EN1                  0x00010700000002E8  NCB        
CIU_INT14_EN4_0                0x0001070000000D60  NCB        
CIU_INT14_EN4_1                0x0001070000000D68  NCB        
CIU_INT14_SUM0                 0x0001070000000070  NCB        
CIU_INT14_SUM4                 0x0001070000000C70  NCB        
CIU_INT15_EN0                  0x00010700000002F0  NCB        
CIU_INT15_EN1                  0x00010700000002F8  NCB        
CIU_INT15_EN4_0                0x0001070000000D70  NCB        
CIU_INT15_EN4_1                0x0001070000000D78  NCB        
CIU_INT15_SUM0                 0x0001070000000078  NCB        
CIU_INT15_SUM4                 0x0001070000000C78  NCB        
CIU_INT16_EN0                  0x0001070000000300  NCB        
CIU_INT16_EN1                  0x0001070000000308  NCB        
CIU_INT16_SUM0                 0x0001070000000080  NCB        
CIU_INT17_EN0                  0x0001070000000310  NCB        
CIU_INT17_EN1                  0x0001070000000318  NCB        
CIU_INT17_SUM0                 0x0001070000000088  NCB        
CIU_INT18_EN0                  0x0001070000000320  NCB        
CIU_INT18_EN1                  0x0001070000000328  NCB        
CIU_INT18_SUM0                 0x0001070000000090  NCB        
CIU_INT19_EN0                  0x0001070000000330  NCB        
CIU_INT19_EN1                  0x0001070000000338  NCB        
CIU_INT19_SUM0                 0x0001070000000098  NCB        
CIU_INT20_EN0                  0x0001070000000340  NCB        
CIU_INT20_EN1                  0x0001070000000348  NCB        
CIU_INT20_SUM0                 0x00010700000000A0  NCB        
CIU_INT21_EN0                  0x0001070000000350  NCB        
CIU_INT21_EN1                  0x0001070000000358  NCB        
CIU_INT21_SUM0                 0x00010700000000A8  NCB        
CIU_INT22_EN0                  0x0001070000000360  NCB        
CIU_INT22_EN1                  0x0001070000000368  NCB        
CIU_INT22_SUM0                 0x00010700000000B0  NCB        
CIU_INT23_EN0                  0x0001070000000370  NCB        
CIU_INT23_EN1                  0x0001070000000378  NCB        
CIU_INT23_SUM0                 0x00010700000000B8  NCB        
CIU_INT24_EN0                  0x0001070000000380  NCB        
CIU_INT24_EN1                  0x0001070000000388  NCB        
CIU_INT24_SUM0                 0x00010700000000C0  NCB        
CIU_INT25_EN0                  0x0001070000000390  NCB        
CIU_INT25_EN1                  0x0001070000000398  NCB        
CIU_INT25_SUM0                 0x00010700000000C8  NCB        
CIU_INT26_EN0                  0x00010700000003A0  NCB        
CIU_INT26_EN1                  0x00010700000003A8  NCB        
CIU_INT26_SUM0                 0x00010700000000D0  NCB        
CIU_INT27_EN0                  0x00010700000003B0  NCB        
CIU_INT27_EN1                  0x00010700000003B8  NCB        
CIU_INT27_SUM0                 0x00010700000000D8  NCB        
CIU_INT28_EN0                  0x00010700000003C0  NCB        
CIU_INT28_EN1                  0x00010700000003C8  NCB        
CIU_INT28_SUM0                 0x00010700000000E0  NCB        
CIU_INT29_EN0                  0x00010700000003D0  NCB        
CIU_INT29_EN1                  0x00010700000003D8  NCB        
CIU_INT29_SUM0                 0x00010700000000E8  NCB        
CIU_INT30_EN0                  0x00010700000003E0  NCB        
CIU_INT30_EN1                  0x00010700000003E8  NCB        
CIU_INT30_SUM0                 0x00010700000000F0  NCB        
CIU_INT31_EN0                  0x00010700000003F0  NCB        
CIU_INT31_EN1                  0x00010700000003F8  NCB        
CIU_INT31_SUM0                 0x00010700000000F8  NCB        
CIU_INT32_EN0                  0x0001070000000400  NCB        
CIU_INT32_EN1                  0x0001070000000408  NCB        
CIU_INT32_SUM0                 0x0001070000000100  NCB        
CIU_INT_SUM1                   0x0001070000000108  NCB        
CIU_MBOX_CLR0                  0x0001070000000680  NCB        
CIU_MBOX_CLR1                  0x0001070000000688  NCB        
CIU_MBOX_CLR2                  0x0001070000000690  NCB        
CIU_MBOX_CLR3                  0x0001070000000698  NCB        
CIU_MBOX_CLR4                  0x00010700000006A0  NCB        
CIU_MBOX_CLR5                  0x00010700000006A8  NCB        
CIU_MBOX_CLR6                  0x00010700000006B0  NCB        
CIU_MBOX_CLR7                  0x00010700000006B8  NCB        
CIU_MBOX_CLR8                  0x00010700000006C0  NCB        
CIU_MBOX_CLR9                  0x00010700000006C8  NCB        
CIU_MBOX_CLR10                 0x00010700000006D0  NCB        
CIU_MBOX_CLR11                 0x00010700000006D8  NCB        
CIU_MBOX_CLR12                 0x00010700000006E0  NCB        
CIU_MBOX_CLR13                 0x00010700000006E8  NCB        
CIU_MBOX_CLR14                 0x00010700000006F0  NCB        
CIU_MBOX_CLR15                 0x00010700000006F8  NCB        
CIU_MBOX_SET0                  0x0001070000000600  NCB        
CIU_MBOX_SET1                  0x0001070000000608  NCB        
CIU_MBOX_SET2                  0x0001070000000610  NCB        
CIU_MBOX_SET3                  0x0001070000000618  NCB        
CIU_MBOX_SET4                  0x0001070000000620  NCB        
CIU_MBOX_SET5                  0x0001070000000628  NCB        
CIU_MBOX_SET6                  0x0001070000000630  NCB        
CIU_MBOX_SET7                  0x0001070000000638  NCB        
CIU_MBOX_SET8                  0x0001070000000640  NCB        
CIU_MBOX_SET9                  0x0001070000000648  NCB        
CIU_MBOX_SET10                 0x0001070000000650  NCB        
CIU_MBOX_SET11                 0x0001070000000658  NCB        
CIU_MBOX_SET12                 0x0001070000000660  NCB        
CIU_MBOX_SET13                 0x0001070000000668  NCB        
CIU_MBOX_SET14                 0x0001070000000670  NCB        
CIU_MBOX_SET15                 0x0001070000000678  NCB        
CIU_NMI                        0x0001070000000718  NCB        
CIU_PCI_INTA                   0x0001070000000750  NCB        
CIU_PP_DBG                     0x0001070000000708  NCB        
CIU_PP_POKE0                   0x0001070000000580  NCB        
CIU_PP_POKE1                   0x0001070000000588  NCB        
CIU_PP_POKE2                   0x0001070000000590  NCB        
CIU_PP_POKE3                   0x0001070000000598  NCB        
CIU_PP_POKE4                   0x00010700000005A0  NCB        
CIU_PP_POKE5                   0x00010700000005A8  NCB        
CIU_PP_POKE6                   0x00010700000005B0  NCB        
CIU_PP_POKE7                   0x00010700000005B8  NCB        
CIU_PP_POKE8                   0x00010700000005C0  NCB        
CIU_PP_POKE9                   0x00010700000005C8  NCB        
CIU_PP_POKE10                  0x00010700000005D0  NCB        
CIU_PP_POKE11                  0x00010700000005D8  NCB        
CIU_PP_POKE12                  0x00010700000005E0  NCB        
CIU_PP_POKE13                  0x00010700000005E8  NCB        
CIU_PP_POKE14                  0x00010700000005F0  NCB        
CIU_PP_POKE15                  0x00010700000005F8  NCB        
CIU_PP_RST                     0x0001070000000700  NCB        
CIU_SOFT_BIST                  0x0001070000000738  NCB        
CIU_SOFT_PRST                  0x0001070000000748  NCB        
CIU_SOFT_RST                   0x0001070000000740  NCB        
CIU_TIM0                       0x0001070000000480  NCB        
CIU_TIM1                       0x0001070000000488  NCB        
CIU_TIM2                       0x0001070000000490  NCB        
CIU_TIM3                       0x0001070000000498  NCB        
CIU_WDOG0                      0x0001070000000500  NCB        
CIU_WDOG1                      0x0001070000000508  NCB        
CIU_WDOG2                      0x0001070000000510  NCB        
CIU_WDOG3                      0x0001070000000518  NCB        
CIU_WDOG4                      0x0001070000000520  NCB        
CIU_WDOG5                      0x0001070000000528  NCB        
CIU_WDOG6                      0x0001070000000530  NCB        
CIU_WDOG7                      0x0001070000000538  NCB        
CIU_WDOG8                      0x0001070000000540  NCB        
CIU_WDOG9                      0x0001070000000548  NCB        
CIU_WDOG10                     0x0001070000000550  NCB        
CIU_WDOG11                     0x0001070000000558  NCB        
CIU_WDOG12                     0x0001070000000560  NCB        
CIU_WDOG13                     0x0001070000000568  NCB        
CIU_WDOG14                     0x0001070000000570  NCB        
CIU_WDOG15                     0x0001070000000578  NCB        
DBG_DATA                       0x00011F00000001E8  NCB        
DFA_BST0                       0x00011800300007F0  RSL        
DFA_BST1                       0x00011800300007F8  RSL        
DFA_CFG                        0x0001180030000000  RSL        
DFA_DBELL                      0x0001370000000000  NCB        
DFA_DIFCTL                     0x0001370600000000  NCB        
DFA_DIFRDPTR                   0x0001370200000000  NCB        
DFA_ERR                        0x0001180030000028  RSL        
DFA_MEMCFG0                    0x0001180030000008  RSL        
DFA_MEMCFG1                    0x0001180030000010  RSL        
DFA_MEMCFG2                    0x0001180030000060  RSL        
DFA_MEMFADR                    0x0001180030000030  RSL        
DFA_MEMFCR                     0x0001180030000038  RSL        
DFA_MEMRLD                     0x0001180030000018  RSL        
DFA_NCBCTL                     0x0001180030000020  RSL        
DFA_RODT_COMP_CTL              0x0001180030000068  RSL        
DFA_SBD_DBG0                   0x0001180030000040  RSL        
DFA_SBD_DBG1                   0x0001180030000048  RSL        
DFA_SBD_DBG2                   0x0001180030000050  RSL        
DFA_SBD_DBG3                   0x0001180030000058  RSL        
FPA_BIST_STATUS                0x00011800280000E8  RSL        
FPA_CTL_STATUS                 0x0001180028000050  RSL        
FPA_FPF1_SIZE                  0x0001180028000060  RSL        
FPA_FPF2_SIZE                  0x0001180028000068  RSL        
FPA_FPF3_SIZE                  0x0001180028000070  RSL        
FPA_FPF4_SIZE                  0x0001180028000078  RSL        
FPA_FPF5_SIZE                  0x0001180028000080  RSL        
FPA_FPF6_SIZE                  0x0001180028000088  RSL        
FPA_FPF7_SIZE                  0x0001180028000090  RSL        
FPA_FPF0_MARKS                 0x0001180028000000  RSL        
FPA_FPF0_SIZE                  0x0001180028000058  RSL        
FPA_FPF1_MARKS                 0x0001180028000008  RSL        
FPA_FPF2_MARKS                 0x0001180028000010  RSL        
FPA_FPF3_MARKS                 0x0001180028000018  RSL        
FPA_FPF4_MARKS                 0x0001180028000020  RSL        
FPA_FPF5_MARKS                 0x0001180028000028  RSL        
FPA_FPF6_MARKS                 0x0001180028000030  RSL        
FPA_FPF7_MARKS                 0x0001180028000038  RSL        
FPA_INT_ENB                    0x0001180028000048  RSL        
FPA_INT_SUM                    0x0001180028000040  RSL        
FPA_QUE0_AVAILABLE             0x0001180028000098  RSL        
FPA_QUE1_AVAILABLE             0x00011800280000A0  RSL        
FPA_QUE2_AVAILABLE             0x00011800280000A8  RSL        
FPA_QUE3_AVAILABLE             0x00011800280000B0  RSL        
FPA_QUE4_AVAILABLE             0x00011800280000B8  RSL        
FPA_QUE5_AVAILABLE             0x00011800280000C0  RSL        
FPA_QUE6_AVAILABLE             0x00011800280000C8  RSL        
FPA_QUE7_AVAILABLE             0x00011800280000D0  RSL        
FPA_QUE0_PAGE_INDEX            0x00011800280000F0  RSL        
FPA_QUE1_PAGE_INDEX            0x00011800280000F8  RSL        
FPA_QUE2_PAGE_INDEX            0x0001180028000100  RSL        
FPA_QUE3_PAGE_INDEX            0x0001180028000108  RSL        
FPA_QUE4_PAGE_INDEX            0x0001180028000110  RSL        
FPA_QUE5_PAGE_INDEX            0x0001180028000118  RSL        
FPA_QUE6_PAGE_INDEX            0x0001180028000120  RSL        
FPA_QUE7_PAGE_INDEX            0x0001180028000128  RSL        
FPA_QUE_ACT                    0x0001180028000138  RSL        
FPA_QUE_EXP                    0x0001180028000130  RSL        
FPA_WART_CTL                   0x00011800280000D8  RSL        
FPA_WART_STATUS                0x00011800280000E0  RSL        
GMX0_BAD_REG                   0x0001180008000518  RSL        
GMX0_BIST                      0x0001180008000400  RSL        
GMX0_INF_MODE                  0x00011800080007F8  RSL        
GMX0_NXA_ADR                   0x0001180008000510  RSL        
GMX0_PRT000_CFG                0x0001180008000010  RSL        
GMX0_PRT001_CFG                0x0001180008000810  RSL        
GMX0_PRT002_CFG                0x0001180008001010  RSL        
GMX0_PRT003_CFG                0x0001180008001810  RSL        
GMX0_RX000_ADR_CAM0            0x0001180008000180  RSL        
GMX0_RX000_ADR_CAM1            0x0001180008000188  RSL        
GMX0_RX000_ADR_CAM2            0x0001180008000190  RSL        
GMX0_RX000_ADR_CAM3            0x0001180008000198  RSL        
GMX0_RX000_ADR_CAM4            0x00011800080001A0  RSL        
GMX0_RX000_ADR_CAM5            0x00011800080001A8  RSL        
GMX0_RX000_ADR_CAM_EN          0x0001180008000108  RSL        
GMX0_RX000_ADR_CTL             0x0001180008000100  RSL        
GMX0_RX000_DECISION            0x0001180008000040  RSL        
GMX0_RX000_FRM_CHK             0x0001180008000020  RSL        
GMX0_RX000_FRM_CTL             0x0001180008000018  RSL        
GMX0_RX000_FRM_MAX             0x0001180008000030  RSL        
GMX0_RX000_FRM_MIN             0x0001180008000028  RSL        
GMX0_RX000_IFG                 0x0001180008000058  RSL        
GMX0_RX000_INT_EN              0x0001180008000008  RSL        
GMX0_RX000_INT_REG             0x0001180008000000  RSL        
GMX0_RX000_JABBER              0x0001180008000038  RSL        
GMX0_RX000_PAUSE_DROP_TIME     0x0001180008000068  RSL        
GMX0_RX000_RX_INBND            0x0001180008000060  RSL        
GMX0_RX000_STATS_CTL           0x0001180008000050  RSL        
GMX0_RX000_STATS_OCTS          0x0001180008000088  RSL        
GMX0_RX000_STATS_OCTS_CTL      0x0001180008000098  RSL        
GMX0_RX000_STATS_OCTS_DMAC     0x00011800080000A8  RSL        
GMX0_RX000_STATS_OCTS_DRP      0x00011800080000B8  RSL        
GMX0_RX000_STATS_PKTS          0x0001180008000080  RSL        
GMX0_RX000_STATS_PKTS_BAD      0x00011800080000C0  RSL        
GMX0_RX000_STATS_PKTS_CTL      0x0001180008000090  RSL        
GMX0_RX000_STATS_PKTS_DMAC     0x00011800080000A0  RSL        
GMX0_RX000_STATS_PKTS_DRP      0x00011800080000B0  RSL        
GMX0_RX000_UDD_SKP             0x0001180008000048  RSL        
GMX0_RX001_ADR_CAM0            0x0001180008000980  RSL        
GMX0_RX001_ADR_CAM1            0x0001180008000988  RSL        
GMX0_RX001_ADR_CAM2            0x0001180008000990  RSL        
GMX0_RX001_ADR_CAM3            0x0001180008000998  RSL        
GMX0_RX001_ADR_CAM4            0x00011800080009A0  RSL        
GMX0_RX001_ADR_CAM5            0x00011800080009A8  RSL        
GMX0_RX001_ADR_CAM_EN          0x0001180008000908  RSL        
GMX0_RX001_ADR_CTL             0x0001180008000900  RSL        
GMX0_RX001_DECISION            0x0001180008000840  RSL        
GMX0_RX001_FRM_CHK             0x0001180008000820  RSL        
GMX0_RX001_FRM_CTL             0x0001180008000818  RSL        
GMX0_RX001_FRM_MAX             0x0001180008000830  RSL        
GMX0_RX001_FRM_MIN             0x0001180008000828  RSL        
GMX0_RX001_IFG                 0x0001180008000858  RSL        
GMX0_RX001_INT_EN              0x0001180008000808  RSL        
GMX0_RX001_INT_REG             0x0001180008000800  RSL        
GMX0_RX001_JABBER              0x0001180008000838  RSL        
GMX0_RX001_PAUSE_DROP_TIME     0x0001180008000868  RSL        
GMX0_RX001_RX_INBND            0x0001180008000860  RSL        
GMX0_RX001_STATS_CTL           0x0001180008000850  RSL        
GMX0_RX001_STATS_OCTS          0x0001180008000888  RSL        
GMX0_RX001_STATS_OCTS_CTL      0x0001180008000898  RSL        
GMX0_RX001_STATS_OCTS_DMAC     0x00011800080008A8  RSL        
GMX0_RX001_STATS_OCTS_DRP      0x00011800080008B8  RSL        
GMX0_RX001_STATS_PKTS          0x0001180008000880  RSL        
GMX0_RX001_STATS_PKTS_BAD      0x00011800080008C0  RSL        
GMX0_RX001_STATS_PKTS_CTL      0x0001180008000890  RSL        
GMX0_RX001_STATS_PKTS_DMAC     0x00011800080008A0  RSL        
GMX0_RX001_STATS_PKTS_DRP      0x00011800080008B0  RSL        
GMX0_RX001_UDD_SKP             0x0001180008000848  RSL        
GMX0_RX002_ADR_CAM0            0x0001180008001180  RSL        
GMX0_RX002_ADR_CAM1            0x0001180008001188  RSL        
GMX0_RX002_ADR_CAM2            0x0001180008001190  RSL        
GMX0_RX002_ADR_CAM3            0x0001180008001198  RSL        
GMX0_RX002_ADR_CAM4            0x00011800080011A0  RSL        
GMX0_RX002_ADR_CAM5            0x00011800080011A8  RSL        
GMX0_RX002_ADR_CAM_EN          0x0001180008001108  RSL        
GMX0_RX002_ADR_CTL             0x0001180008001100  RSL        
GMX0_RX002_DECISION            0x0001180008001040  RSL        
GMX0_RX002_FRM_CHK             0x0001180008001020  RSL        
GMX0_RX002_FRM_CTL             0x0001180008001018  RSL        
GMX0_RX002_FRM_MAX             0x0001180008001030  RSL        
GMX0_RX002_FRM_MIN             0x0001180008001028  RSL        
GMX0_RX002_IFG                 0x0001180008001058  RSL        
GMX0_RX002_INT_EN              0x0001180008001008  RSL        
GMX0_RX002_INT_REG             0x0001180008001000  RSL        
GMX0_RX002_JABBER              0x0001180008001038  RSL        
GMX0_RX002_PAUSE_DROP_TIME     0x0001180008001068  RSL        
GMX0_RX002_RX_INBND            0x0001180008001060  RSL        
GMX0_RX002_STATS_CTL           0x0001180008001050  RSL        
GMX0_RX002_STATS_OCTS          0x0001180008001088  RSL        
GMX0_RX002_STATS_OCTS_CTL      0x0001180008001098  RSL        
GMX0_RX002_STATS_OCTS_DMAC     0x00011800080010A8  RSL        
GMX0_RX002_STATS_OCTS_DRP      0x00011800080010B8  RSL        
GMX0_RX002_STATS_PKTS          0x0001180008001080  RSL        
GMX0_RX002_STATS_PKTS_BAD      0x00011800080010C0  RSL        
GMX0_RX002_STATS_PKTS_CTL      0x0001180008001090  RSL        
GMX0_RX002_STATS_PKTS_DMAC     0x00011800080010A0  RSL        
GMX0_RX002_STATS_PKTS_DRP      0x00011800080010B0  RSL        
GMX0_RX002_UDD_SKP             0x0001180008001048  RSL        
GMX0_RX003_ADR_CAM0            0x0001180008001980  RSL        
GMX0_RX003_ADR_CAM1            0x0001180008001988  RSL        
GMX0_RX003_ADR_CAM2            0x0001180008001990  RSL        
GMX0_RX003_ADR_CAM3            0x0001180008001998  RSL        
GMX0_RX003_ADR_CAM4            0x00011800080019A0  RSL        
GMX0_RX003_ADR_CAM5            0x00011800080019A8  RSL        
GMX0_RX003_ADR_CAM_EN          0x0001180008001908  RSL        
GMX0_RX003_ADR_CTL             0x0001180008001900  RSL        
GMX0_RX003_DECISION            0x0001180008001840  RSL        
GMX0_RX003_FRM_CHK             0x0001180008001820  RSL        
GMX0_RX003_FRM_CTL             0x0001180008001818  RSL        
GMX0_RX003_FRM_MAX             0x0001180008001830  RSL        
GMX0_RX003_FRM_MIN             0x0001180008001828  RSL        
GMX0_RX003_IFG                 0x0001180008001858  RSL        
GMX0_RX003_INT_EN              0x0001180008001808  RSL        
GMX0_RX003_INT_REG             0x0001180008001800  RSL        
GMX0_RX003_JABBER              0x0001180008001838  RSL        
GMX0_RX003_PAUSE_DROP_TIME     0x0001180008001868  RSL        
GMX0_RX003_RX_INBND            0x0001180008001860  RSL        
GMX0_RX003_STATS_CTL           0x0001180008001850  RSL        
GMX0_RX003_STATS_OCTS          0x0001180008001888  RSL        
GMX0_RX003_STATS_OCTS_CTL      0x0001180008001898  RSL        
GMX0_RX003_STATS_OCTS_DMAC     0x00011800080018A8  RSL        
GMX0_RX003_STATS_OCTS_DRP      0x00011800080018B8  RSL        
GMX0_RX003_STATS_PKTS          0x0001180008001880  RSL        
GMX0_RX003_STATS_PKTS_BAD      0x00011800080018C0  RSL        
GMX0_RX003_STATS_PKTS_CTL      0x0001180008001890  RSL        
GMX0_RX003_STATS_PKTS_DMAC     0x00011800080018A0  RSL        
GMX0_RX003_STATS_PKTS_DRP      0x00011800080018B0  RSL        
GMX0_RX003_UDD_SKP             0x0001180008001848  RSL        
GMX0_RX_BP_DROP000             0x0001180008000420  RSL        
GMX0_RX_BP_DROP001             0x0001180008000428  RSL        
GMX0_RX_BP_DROP002             0x0001180008000430  RSL        
GMX0_RX_BP_DROP003             0x0001180008000438  RSL        
GMX0_RX_BP_OFF000              0x0001180008000460  RSL        
GMX0_RX_BP_OFF001              0x0001180008000468  RSL        
GMX0_RX_BP_OFF002              0x0001180008000470  RSL        
GMX0_RX_BP_OFF003              0x0001180008000478  RSL        
GMX0_RX_BP_ON000               0x0001180008000440  RSL        
GMX0_RX_BP_ON001               0x0001180008000448  RSL        
GMX0_RX_BP_ON002               0x0001180008000450  RSL        
GMX0_RX_BP_ON003               0x0001180008000458  RSL        
GMX0_RX_PASS_EN                0x00011800080005F8  RSL        
GMX0_RX_PASS_MAP000            0x0001180008000600  RSL        
GMX0_RX_PASS_MAP001            0x0001180008000608  RSL        
GMX0_RX_PASS_MAP002            0x0001180008000610  RSL        
GMX0_RX_PASS_MAP003            0x0001180008000618  RSL        
GMX0_RX_PASS_MAP004            0x0001180008000620  RSL        
GMX0_RX_PASS_MAP005            0x0001180008000628  RSL        
GMX0_RX_PASS_MAP006            0x0001180008000630  RSL        
GMX0_RX_PASS_MAP007            0x0001180008000638  RSL        
GMX0_RX_PASS_MAP008            0x0001180008000640  RSL        
GMX0_RX_PASS_MAP009            0x0001180008000648  RSL        
GMX0_RX_PASS_MAP010            0x0001180008000650  RSL        
GMX0_RX_PASS_MAP011            0x0001180008000658  RSL        
GMX0_RX_PASS_MAP012            0x0001180008000660  RSL        
GMX0_RX_PASS_MAP013            0x0001180008000668  RSL        
GMX0_RX_PASS_MAP014            0x0001180008000670  RSL        
GMX0_RX_PASS_MAP015            0x0001180008000678  RSL        
GMX0_RX_PRTS                   0x0001180008000410  RSL        
GMX0_RX_PRT_INFO               0x00011800080004E8  RSL        
GMX0_SMAC000                   0x0001180008000230  RSL        
GMX0_SMAC001                   0x0001180008000A30  RSL        
GMX0_SMAC002                   0x0001180008001230  RSL        
GMX0_SMAC003                   0x0001180008001A30  RSL        
GMX0_STAT_BP                   0x0001180008000520  RSL        
GMX0_TX000_APPEND              0x0001180008000218  RSL        
GMX0_TX000_BURST               0x0001180008000228  RSL        
GMX0_TX000_CLK                 0x0001180008000208  RSL        
GMX0_TX000_CTL                 0x0001180008000270  RSL        
GMX0_TX000_MIN_PKT             0x0001180008000240  RSL        
GMX0_TX000_PAUSE_PKT_INTERVAL  0x0001180008000248  RSL        
GMX0_TX000_PAUSE_PKT_TIME      0x0001180008000238  RSL        
GMX0_TX000_PAUSE_TOGO          0x0001180008000258  RSL        
GMX0_TX000_PAUSE_ZERO          0x0001180008000260  RSL        
GMX0_TX000_SLOT                0x0001180008000220  RSL        
GMX0_TX000_SOFT_PAUSE          0x0001180008000250  RSL        
GMX0_TX000_STAT0               0x0001180008000280  RSL        
GMX0_TX000_STAT1               0x0001180008000288  RSL        
GMX0_TX000_STAT2               0x0001180008000290  RSL        
GMX0_TX000_STAT3               0x0001180008000298  RSL        
GMX0_TX000_STAT4               0x00011800080002A0  RSL        
GMX0_TX000_STAT5               0x00011800080002A8  RSL        
GMX0_TX000_STAT6               0x00011800080002B0  RSL        
GMX0_TX000_STAT7               0x00011800080002B8  RSL        
GMX0_TX000_STAT8               0x00011800080002C0  RSL        
GMX0_TX000_STAT9               0x00011800080002C8  RSL        
GMX0_TX000_STATS_CTL           0x0001180008000268  RSL        
GMX0_TX000_THRESH              0x0001180008000210  RSL        
GMX0_TX001_APPEND              0x0001180008000A18  RSL        
GMX0_TX001_BURST               0x0001180008000A28  RSL        
GMX0_TX001_CLK                 0x0001180008000A08  RSL        
GMX0_TX001_CTL                 0x0001180008000A70  RSL        
GMX0_TX001_MIN_PKT             0x0001180008000A40  RSL        
GMX0_TX001_PAUSE_PKT_INTERVAL  0x0001180008000A48  RSL        
GMX0_TX001_PAUSE_PKT_TIME      0x0001180008000A38  RSL        
GMX0_TX001_PAUSE_TOGO          0x0001180008000A58  RSL        
GMX0_TX001_PAUSE_ZERO          0x0001180008000A60  RSL        
GMX0_TX001_SLOT                0x0001180008000A20  RSL        
GMX0_TX001_SOFT_PAUSE          0x0001180008000A50  RSL        
GMX0_TX001_STAT0               0x0001180008000A80  RSL        
GMX0_TX001_STAT1               0x0001180008000A88  RSL        
GMX0_TX001_STAT2               0x0001180008000A90  RSL        
GMX0_TX001_STAT3               0x0001180008000A98  RSL        
GMX0_TX001_STAT4               0x0001180008000AA0  RSL        
GMX0_TX001_STAT5               0x0001180008000AA8  RSL        
GMX0_TX001_STAT6               0x0001180008000AB0  RSL        
GMX0_TX001_STAT7               0x0001180008000AB8  RSL        
GMX0_TX001_STAT8               0x0001180008000AC0  RSL        
GMX0_TX001_STAT9               0x0001180008000AC8  RSL        
GMX0_TX001_STATS_CTL           0x0001180008000A68  RSL        
GMX0_TX001_THRESH              0x0001180008000A10  RSL        
GMX0_TX002_APPEND              0x0001180008001218  RSL        
GMX0_TX002_BURST               0x0001180008001228  RSL        
GMX0_TX002_CLK                 0x0001180008001208  RSL        
GMX0_TX002_CTL                 0x0001180008001270  RSL        
GMX0_TX002_MIN_PKT             0x0001180008001240  RSL        
GMX0_TX002_PAUSE_PKT_INTERVAL  0x0001180008001248  RSL        
GMX0_TX002_PAUSE_PKT_TIME      0x0001180008001238  RSL        
GMX0_TX002_PAUSE_TOGO          0x0001180008001258  RSL        
GMX0_TX002_PAUSE_ZERO          0x0001180008001260  RSL        
GMX0_TX002_SLOT                0x0001180008001220  RSL        
GMX0_TX002_SOFT_PAUSE          0x0001180008001250  RSL        
GMX0_TX002_STAT0               0x0001180008001280  RSL        
GMX0_TX002_STAT1               0x0001180008001288  RSL        
GMX0_TX002_STAT2               0x0001180008001290  RSL        
GMX0_TX002_STAT3               0x0001180008001298  RSL        
GMX0_TX002_STAT4               0x00011800080012A0  RSL        
GMX0_TX002_STAT5               0x00011800080012A8  RSL        
GMX0_TX002_STAT6               0x00011800080012B0  RSL        
GMX0_TX002_STAT7               0x00011800080012B8  RSL        
GMX0_TX002_STAT8               0x00011800080012C0  RSL        
GMX0_TX002_STAT9               0x00011800080012C8  RSL        
GMX0_TX002_STATS_CTL           0x0001180008001268  RSL        
GMX0_TX002_THRESH              0x0001180008001210  RSL        
GMX0_TX003_APPEND              0x0001180008001A18  RSL        
GMX0_TX003_BURST               0x0001180008001A28  RSL        
GMX0_TX003_CLK                 0x0001180008001A08  RSL        
GMX0_TX003_CTL                 0x0001180008001A70  RSL        
GMX0_TX003_MIN_PKT             0x0001180008001A40  RSL        
GMX0_TX003_PAUSE_PKT_INTERVAL  0x0001180008001A48  RSL        
GMX0_TX003_PAUSE_PKT_TIME      0x0001180008001A38  RSL        
GMX0_TX003_PAUSE_TOGO          0x0001180008001A58  RSL        
GMX0_TX003_PAUSE_ZERO          0x0001180008001A60  RSL        
GMX0_TX003_SLOT                0x0001180008001A20  RSL        
GMX0_TX003_SOFT_PAUSE          0x0001180008001A50  RSL        
GMX0_TX003_STAT0               0x0001180008001A80  RSL        
GMX0_TX003_STAT1               0x0001180008001A88  RSL        
GMX0_TX003_STAT2               0x0001180008001A90  RSL        
GMX0_TX003_STAT3               0x0001180008001A98  RSL        
GMX0_TX003_STAT4               0x0001180008001AA0  RSL        
GMX0_TX003_STAT5               0x0001180008001AA8  RSL        
GMX0_TX003_STAT6               0x0001180008001AB0  RSL        
GMX0_TX003_STAT7               0x0001180008001AB8  RSL        
GMX0_TX003_STAT8               0x0001180008001AC0  RSL        
GMX0_TX003_STAT9               0x0001180008001AC8  RSL        
GMX0_TX003_STATS_CTL           0x0001180008001A68  RSL        
GMX0_TX003_THRESH              0x0001180008001A10  RSL        
GMX0_TX_BP                     0x00011800080004D0  RSL        
GMX0_TX_COL_ATTEMPT            0x0001180008000498  RSL        
GMX0_TX_CORRUPT                0x00011800080004D8  RSL        
GMX0_TX_IFG                    0x0001180008000488  RSL        
GMX0_TX_INT_EN                 0x0001180008000508  RSL        
GMX0_TX_INT_REG                0x0001180008000500  RSL        
GMX0_TX_JAM                    0x0001180008000490  RSL        
GMX0_TX_LFSR                   0x00011800080004F8  RSL        
GMX0_TX_OVR_BP                 0x00011800080004C8  RSL        
GMX0_TX_PAUSE_PKT_DMAC         0x00011800080004A0  RSL        
GMX0_TX_PAUSE_PKT_TYPE         0x00011800080004A8  RSL        
GMX0_TX_PRTS                   0x0001180008000480  RSL        
GMX0_TX_SPI_CTL                0x00011800080004C0  RSL        
GMX0_TX_SPI_DRAIN              0x00011800080004E0  RSL        
GMX0_TX_SPI_MAX                0x00011800080004B0  RSL        
GMX0_TX_SPI_ROUND000           0x0001180008000680  RSL        
GMX0_TX_SPI_ROUND001           0x0001180008000688  RSL        
GMX0_TX_SPI_ROUND002           0x0001180008000690  RSL        
GMX0_TX_SPI_ROUND003           0x0001180008000698  RSL        
GMX0_TX_SPI_ROUND004           0x00011800080006A0  RSL        
GMX0_TX_SPI_ROUND005           0x00011800080006A8  RSL        
GMX0_TX_SPI_ROUND006           0x00011800080006B0  RSL        
GMX0_TX_SPI_ROUND007           0x00011800080006B8  RSL        
GMX0_TX_SPI_ROUND008           0x00011800080006C0  RSL        
GMX0_TX_SPI_ROUND009           0x00011800080006C8  RSL        
GMX0_TX_SPI_ROUND010           0x00011800080006D0  RSL        
GMX0_TX_SPI_ROUND011           0x00011800080006D8  RSL        
GMX0_TX_SPI_ROUND012           0x00011800080006E0  RSL        
GMX0_TX_SPI_ROUND013           0x00011800080006E8  RSL        
GMX0_TX_SPI_ROUND014           0x00011800080006F0  RSL        
GMX0_TX_SPI_ROUND015           0x00011800080006F8  RSL        
GMX0_TX_SPI_ROUND016           0x0001180008000700  RSL        
GMX0_TX_SPI_ROUND017           0x0001180008000708  RSL        
GMX0_TX_SPI_ROUND018           0x0001180008000710  RSL        
GMX0_TX_SPI_ROUND019           0x0001180008000718  RSL        
GMX0_TX_SPI_ROUND020           0x0001180008000720  RSL        
GMX0_TX_SPI_ROUND021           0x0001180008000728  RSL        
GMX0_TX_SPI_ROUND022           0x0001180008000730  RSL        
GMX0_TX_SPI_ROUND023           0x0001180008000738  RSL        
GMX0_TX_SPI_ROUND024           0x0001180008000740  RSL        
GMX0_TX_SPI_ROUND025           0x0001180008000748  RSL        
GMX0_TX_SPI_ROUND026           0x0001180008000750  RSL        
GMX0_TX_SPI_ROUND027           0x0001180008000758  RSL        
GMX0_TX_SPI_ROUND028           0x0001180008000760  RSL        
GMX0_TX_SPI_ROUND029           0x0001180008000768  RSL        
GMX0_TX_SPI_ROUND030           0x0001180008000770  RSL        
GMX0_TX_SPI_ROUND031           0x0001180008000778  RSL        
GMX0_TX_SPI_THRESH             0x00011800080004B8  RSL        
GMX1_BAD_REG                   0x0001180010000518  RSL        
GMX1_BIST                      0x0001180010000400  RSL        
GMX1_INF_MODE                  0x00011800100007F8  RSL        
GMX1_NXA_ADR                   0x0001180010000510  RSL        
GMX1_PRT000_CFG                0x0001180010000010  RSL        
GMX1_PRT001_CFG                0x0001180010000810  RSL        
GMX1_PRT002_CFG                0x0001180010001010  RSL        
GMX1_PRT003_CFG                0x0001180010001810  RSL        
GMX1_RX000_ADR_CAM0            0x0001180010000180  RSL        
GMX1_RX000_ADR_CAM1            0x0001180010000188  RSL        
GMX1_RX000_ADR_CAM2            0x0001180010000190  RSL        
GMX1_RX000_ADR_CAM3            0x0001180010000198  RSL        
GMX1_RX000_ADR_CAM4            0x00011800100001A0  RSL        
GMX1_RX000_ADR_CAM5            0x00011800100001A8  RSL        
GMX1_RX000_ADR_CAM_EN          0x0001180010000108  RSL        
GMX1_RX000_ADR_CTL             0x0001180010000100  RSL        
GMX1_RX000_DECISION            0x0001180010000040  RSL        
GMX1_RX000_FRM_CHK             0x0001180010000020  RSL        
GMX1_RX000_FRM_CTL             0x0001180010000018  RSL        
GMX1_RX000_FRM_MAX             0x0001180010000030  RSL        
GMX1_RX000_FRM_MIN             0x0001180010000028  RSL        
GMX1_RX000_IFG                 0x0001180010000058  RSL        
GMX1_RX000_INT_EN              0x0001180010000008  RSL        
GMX1_RX000_INT_REG             0x0001180010000000  RSL        
GMX1_RX000_JABBER              0x0001180010000038  RSL        
GMX1_RX000_PAUSE_DROP_TIME     0x0001180010000068  RSL        
GMX1_RX000_RX_INBND            0x0001180010000060  RSL        
GMX1_RX000_STATS_CTL           0x0001180010000050  RSL        
GMX1_RX000_STATS_OCTS          0x0001180010000088  RSL        
GMX1_RX000_STATS_OCTS_CTL      0x0001180010000098  RSL        
GMX1_RX000_STATS_OCTS_DMAC     0x00011800100000A8  RSL        
GMX1_RX000_STATS_OCTS_DRP      0x00011800100000B8  RSL        
GMX1_RX000_STATS_PKTS          0x0001180010000080  RSL        
GMX1_RX000_STATS_PKTS_BAD      0x00011800100000C0  RSL        
GMX1_RX000_STATS_PKTS_CTL      0x0001180010000090  RSL        
GMX1_RX000_STATS_PKTS_DMAC     0x00011800100000A0  RSL        
GMX1_RX000_STATS_PKTS_DRP      0x00011800100000B0  RSL        
GMX1_RX000_UDD_SKP             0x0001180010000048  RSL        
GMX1_RX001_ADR_CAM0            0x0001180010000980  RSL        
GMX1_RX001_ADR_CAM1            0x0001180010000988  RSL        
GMX1_RX001_ADR_CAM2            0x0001180010000990  RSL        
GMX1_RX001_ADR_CAM3            0x0001180010000998  RSL        
GMX1_RX001_ADR_CAM4            0x00011800100009A0  RSL        
GMX1_RX001_ADR_CAM5            0x00011800100009A8  RSL        
GMX1_RX001_ADR_CAM_EN          0x0001180010000908  RSL        
GMX1_RX001_ADR_CTL             0x0001180010000900  RSL        
GMX1_RX001_DECISION            0x0001180010000840  RSL        
GMX1_RX001_FRM_CHK             0x0001180010000820  RSL        
GMX1_RX001_FRM_CTL             0x0001180010000818  RSL        
GMX1_RX001_FRM_MAX             0x0001180010000830  RSL        
GMX1_RX001_FRM_MIN             0x0001180010000828  RSL        
GMX1_RX001_IFG                 0x0001180010000858  RSL        
GMX1_RX001_INT_EN              0x0001180010000808  RSL        
GMX1_RX001_INT_REG             0x0001180010000800  RSL        
GMX1_RX001_JABBER              0x0001180010000838  RSL        
GMX1_RX001_PAUSE_DROP_TIME     0x0001180010000868  RSL        
GMX1_RX001_RX_INBND            0x0001180010000860  RSL        
GMX1_RX001_STATS_CTL           0x0001180010000850  RSL        
GMX1_RX001_STATS_OCTS          0x0001180010000888  RSL        
GMX1_RX001_STATS_OCTS_CTL      0x0001180010000898  RSL        
GMX1_RX001_STATS_OCTS_DMAC     0x00011800100008A8  RSL        
GMX1_RX001_STATS_OCTS_DRP      0x00011800100008B8  RSL        
GMX1_RX001_STATS_PKTS          0x0001180010000880  RSL        
GMX1_RX001_STATS_PKTS_BAD      0x00011800100008C0  RSL        
GMX1_RX001_STATS_PKTS_CTL      0x0001180010000890  RSL        
GMX1_RX001_STATS_PKTS_DMAC     0x00011800100008A0  RSL        
GMX1_RX001_STATS_PKTS_DRP      0x00011800100008B0  RSL        
GMX1_RX001_UDD_SKP             0x0001180010000848  RSL        
GMX1_RX002_ADR_CAM0            0x0001180010001180  RSL        
GMX1_RX002_ADR_CAM1            0x0001180010001188  RSL        
GMX1_RX002_ADR_CAM2            0x0001180010001190  RSL        
GMX1_RX002_ADR_CAM3            0x0001180010001198  RSL        
GMX1_RX002_ADR_CAM4            0x00011800100011A0  RSL        
GMX1_RX002_ADR_CAM5            0x00011800100011A8  RSL        
GMX1_RX002_ADR_CAM_EN          0x0001180010001108  RSL        
GMX1_RX002_ADR_CTL             0x0001180010001100  RSL        
GMX1_RX002_DECISION            0x0001180010001040  RSL        
GMX1_RX002_FRM_CHK             0x0001180010001020  RSL        
GMX1_RX002_FRM_CTL             0x0001180010001018  RSL        
GMX1_RX002_FRM_MAX             0x0001180010001030  RSL        
GMX1_RX002_FRM_MIN             0x0001180010001028  RSL        
GMX1_RX002_IFG                 0x0001180010001058  RSL        
GMX1_RX002_INT_EN              0x0001180010001008  RSL        
GMX1_RX002_INT_REG             0x0001180010001000  RSL        
GMX1_RX002_JABBER              0x0001180010001038  RSL        
GMX1_RX002_PAUSE_DROP_TIME     0x0001180010001068  RSL        
GMX1_RX002_RX_INBND            0x0001180010001060  RSL        
GMX1_RX002_STATS_CTL           0x0001180010001050  RSL        
GMX1_RX002_STATS_OCTS          0x0001180010001088  RSL        
GMX1_RX002_STATS_OCTS_CTL      0x0001180010001098  RSL        
GMX1_RX002_STATS_OCTS_DMAC     0x00011800100010A8  RSL        
GMX1_RX002_STATS_OCTS_DRP      0x00011800100010B8  RSL        
GMX1_RX002_STATS_PKTS          0x0001180010001080  RSL        
GMX1_RX002_STATS_PKTS_BAD      0x00011800100010C0  RSL        
GMX1_RX002_STATS_PKTS_CTL      0x0001180010001090  RSL        
GMX1_RX002_STATS_PKTS_DMAC     0x00011800100010A0  RSL        
GMX1_RX002_STATS_PKTS_DRP      0x00011800100010B0  RSL        
GMX1_RX002_UDD_SKP             0x0001180010001048  RSL        
GMX1_RX003_ADR_CAM0            0x0001180010001980  RSL        
GMX1_RX003_ADR_CAM1            0x0001180010001988  RSL        
GMX1_RX003_ADR_CAM2            0x0001180010001990  RSL        
GMX1_RX003_ADR_CAM3            0x0001180010001998  RSL        
GMX1_RX003_ADR_CAM4            0x00011800100019A0  RSL        
GMX1_RX003_ADR_CAM5            0x00011800100019A8  RSL        
GMX1_RX003_ADR_CAM_EN          0x0001180010001908  RSL        
GMX1_RX003_ADR_CTL             0x0001180010001900  RSL        
GMX1_RX003_DECISION            0x0001180010001840  RSL        
GMX1_RX003_FRM_CHK             0x0001180010001820  RSL        
GMX1_RX003_FRM_CTL             0x0001180010001818  RSL        
GMX1_RX003_FRM_MAX             0x0001180010001830  RSL        
GMX1_RX003_FRM_MIN             0x0001180010001828  RSL        
GMX1_RX003_IFG                 0x0001180010001858  RSL        
GMX1_RX003_INT_EN              0x0001180010001808  RSL        
GMX1_RX003_INT_REG             0x0001180010001800  RSL        
GMX1_RX003_JABBER              0x0001180010001838  RSL        
GMX1_RX003_PAUSE_DROP_TIME     0x0001180010001868  RSL        
GMX1_RX003_RX_INBND            0x0001180010001860  RSL        
GMX1_RX003_STATS_CTL           0x0001180010001850  RSL        
GMX1_RX003_STATS_OCTS          0x0001180010001888  RSL        
GMX1_RX003_STATS_OCTS_CTL      0x0001180010001898  RSL        
GMX1_RX003_STATS_OCTS_DMAC     0x00011800100018A8  RSL        
GMX1_RX003_STATS_OCTS_DRP      0x00011800100018B8  RSL        
GMX1_RX003_STATS_PKTS          0x0001180010001880  RSL        
GMX1_RX003_STATS_PKTS_BAD      0x00011800100018C0  RSL        
GMX1_RX003_STATS_PKTS_CTL      0x0001180010001890  RSL        
GMX1_RX003_STATS_PKTS_DMAC     0x00011800100018A0  RSL        
GMX1_RX003_STATS_PKTS_DRP      0x00011800100018B0  RSL        
GMX1_RX003_UDD_SKP             0x0001180010001848  RSL        
GMX1_RX_BP_DROP000             0x0001180010000420  RSL        
GMX1_RX_BP_DROP001             0x0001180010000428  RSL        
GMX1_RX_BP_DROP002             0x0001180010000430  RSL        
GMX1_RX_BP_DROP003             0x0001180010000438  RSL        
GMX1_RX_BP_OFF000              0x0001180010000460  RSL        
GMX1_RX_BP_OFF001              0x0001180010000468  RSL        
GMX1_RX_BP_OFF002              0x0001180010000470  RSL        
GMX1_RX_BP_OFF003              0x0001180010000478  RSL        
GMX1_RX_BP_ON000               0x0001180010000440  RSL        
GMX1_RX_BP_ON001               0x0001180010000448  RSL        
GMX1_RX_BP_ON002               0x0001180010000450  RSL        
GMX1_RX_BP_ON003               0x0001180010000458  RSL        
GMX1_RX_PASS_EN                0x00011800100005F8  RSL        
GMX1_RX_PASS_MAP000            0x0001180010000600  RSL        
GMX1_RX_PASS_MAP001            0x0001180010000608  RSL        
GMX1_RX_PASS_MAP002            0x0001180010000610  RSL        
GMX1_RX_PASS_MAP003            0x0001180010000618  RSL        
GMX1_RX_PASS_MAP004            0x0001180010000620  RSL        
GMX1_RX_PASS_MAP005            0x0001180010000628  RSL        
GMX1_RX_PASS_MAP006            0x0001180010000630  RSL        
GMX1_RX_PASS_MAP007            0x0001180010000638  RSL        
GMX1_RX_PASS_MAP008            0x0001180010000640  RSL        
GMX1_RX_PASS_MAP009            0x0001180010000648  RSL        
GMX1_RX_PASS_MAP010            0x0001180010000650  RSL        
GMX1_RX_PASS_MAP011            0x0001180010000658  RSL        
GMX1_RX_PASS_MAP012            0x0001180010000660  RSL        
GMX1_RX_PASS_MAP013            0x0001180010000668  RSL        
GMX1_RX_PASS_MAP014            0x0001180010000670  RSL        
GMX1_RX_PASS_MAP015            0x0001180010000678  RSL        
GMX1_RX_PRTS                   0x0001180010000410  RSL        
GMX1_RX_PRT_INFO               0x00011800100004E8  RSL        
GMX1_SMAC000                   0x0001180010000230  RSL        
GMX1_SMAC001                   0x0001180010000A30  RSL        
GMX1_SMAC002                   0x0001180010001230  RSL        
GMX1_SMAC003                   0x0001180010001A30  RSL        
GMX1_STAT_BP                   0x0001180010000520  RSL        
GMX1_TX000_APPEND              0x0001180010000218  RSL        
GMX1_TX000_BURST               0x0001180010000228  RSL        
GMX1_TX000_CLK                 0x0001180010000208  RSL        
GMX1_TX000_CTL                 0x0001180010000270  RSL        
GMX1_TX000_MIN_PKT             0x0001180010000240  RSL        
GMX1_TX000_PAUSE_PKT_INTERVAL  0x0001180010000248  RSL        
GMX1_TX000_PAUSE_PKT_TIME      0x0001180010000238  RSL        
GMX1_TX000_PAUSE_TOGO          0x0001180010000258  RSL        
GMX1_TX000_PAUSE_ZERO          0x0001180010000260  RSL        
GMX1_TX000_SLOT                0x0001180010000220  RSL        
GMX1_TX000_SOFT_PAUSE          0x0001180010000250  RSL        
GMX1_TX000_STAT0               0x0001180010000280  RSL        
GMX1_TX000_STAT1               0x0001180010000288  RSL        
GMX1_TX000_STAT2               0x0001180010000290  RSL        
GMX1_TX000_STAT3               0x0001180010000298  RSL        
GMX1_TX000_STAT4               0x00011800100002A0  RSL        
GMX1_TX000_STAT5               0x00011800100002A8  RSL        
GMX1_TX000_STAT6               0x00011800100002B0  RSL        
GMX1_TX000_STAT7               0x00011800100002B8  RSL        
GMX1_TX000_STAT8               0x00011800100002C0  RSL        
GMX1_TX000_STAT9               0x00011800100002C8  RSL        
GMX1_TX000_STATS_CTL           0x0001180010000268  RSL        
GMX1_TX000_THRESH              0x0001180010000210  RSL        
GMX1_TX001_APPEND              0x0001180010000A18  RSL        
GMX1_TX001_BURST               0x0001180010000A28  RSL        
GMX1_TX001_CLK                 0x0001180010000A08  RSL        
GMX1_TX001_CTL                 0x0001180010000A70  RSL        
GMX1_TX001_MIN_PKT             0x0001180010000A40  RSL        
GMX1_TX001_PAUSE_PKT_INTERVAL  0x0001180010000A48  RSL        
GMX1_TX001_PAUSE_PKT_TIME      0x0001180010000A38  RSL        
GMX1_TX001_PAUSE_TOGO          0x0001180010000A58  RSL        
GMX1_TX001_PAUSE_ZERO          0x0001180010000A60  RSL        
GMX1_TX001_SLOT                0x0001180010000A20  RSL        
GMX1_TX001_SOFT_PAUSE          0x0001180010000A50  RSL        
GMX1_TX001_STAT0               0x0001180010000A80  RSL        
GMX1_TX001_STAT1               0x0001180010000A88  RSL        
GMX1_TX001_STAT2               0x0001180010000A90  RSL        
GMX1_TX001_STAT3               0x0001180010000A98  RSL        
GMX1_TX001_STAT4               0x0001180010000AA0  RSL        
GMX1_TX001_STAT5               0x0001180010000AA8  RSL        
GMX1_TX001_STAT6               0x0001180010000AB0  RSL        
GMX1_TX001_STAT7               0x0001180010000AB8  RSL        
GMX1_TX001_STAT8               0x0001180010000AC0  RSL        
GMX1_TX001_STAT9               0x0001180010000AC8  RSL        
GMX1_TX001_STATS_CTL           0x0001180010000A68  RSL        
GMX1_TX001_THRESH              0x0001180010000A10  RSL        
GMX1_TX002_APPEND              0x0001180010001218  RSL        
GMX1_TX002_BURST               0x0001180010001228  RSL        
GMX1_TX002_CLK                 0x0001180010001208  RSL        
GMX1_TX002_CTL                 0x0001180010001270  RSL        
GMX1_TX002_MIN_PKT             0x0001180010001240  RSL        
GMX1_TX002_PAUSE_PKT_INTERVAL  0x0001180010001248  RSL        
GMX1_TX002_PAUSE_PKT_TIME      0x0001180010001238  RSL        
GMX1_TX002_PAUSE_TOGO          0x0001180010001258  RSL        
GMX1_TX002_PAUSE_ZERO          0x0001180010001260  RSL        
GMX1_TX002_SLOT                0x0001180010001220  RSL        
GMX1_TX002_SOFT_PAUSE          0x0001180010001250  RSL        
GMX1_TX002_STAT0               0x0001180010001280  RSL        
GMX1_TX002_STAT1               0x0001180010001288  RSL        
GMX1_TX002_STAT2               0x0001180010001290  RSL        
GMX1_TX002_STAT3               0x0001180010001298  RSL        
GMX1_TX002_STAT4               0x00011800100012A0  RSL        
GMX1_TX002_STAT5               0x00011800100012A8  RSL        
GMX1_TX002_STAT6               0x00011800100012B0  RSL        
GMX1_TX002_STAT7               0x00011800100012B8  RSL        
GMX1_TX002_STAT8               0x00011800100012C0  RSL        
GMX1_TX002_STAT9               0x00011800100012C8  RSL        
GMX1_TX002_STATS_CTL           0x0001180010001268  RSL        
GMX1_TX002_THRESH              0x0001180010001210  RSL        
GMX1_TX003_APPEND              0x0001180010001A18  RSL        
GMX1_TX003_BURST               0x0001180010001A28  RSL        
GMX1_TX003_CLK                 0x0001180010001A08  RSL        
GMX1_TX003_CTL                 0x0001180010001A70  RSL        
GMX1_TX003_MIN_PKT             0x0001180010001A40  RSL        
GMX1_TX003_PAUSE_PKT_INTERVAL  0x0001180010001A48  RSL        
GMX1_TX003_PAUSE_PKT_TIME      0x0001180010001A38  RSL        
GMX1_TX003_PAUSE_TOGO          0x0001180010001A58  RSL        
GMX1_TX003_PAUSE_ZERO          0x0001180010001A60  RSL        
GMX1_TX003_SLOT                0x0001180010001A20  RSL        
GMX1_TX003_SOFT_PAUSE          0x0001180010001A50  RSL        
GMX1_TX003_STAT0               0x0001180010001A80  RSL        
GMX1_TX003_STAT1               0x0001180010001A88  RSL        
GMX1_TX003_STAT2               0x0001180010001A90  RSL        
GMX1_TX003_STAT3               0x0001180010001A98  RSL        
GMX1_TX003_STAT4               0x0001180010001AA0  RSL        
GMX1_TX003_STAT5               0x0001180010001AA8  RSL        
GMX1_TX003_STAT6               0x0001180010001AB0  RSL        
GMX1_TX003_STAT7               0x0001180010001AB8  RSL        
GMX1_TX003_STAT8               0x0001180010001AC0  RSL        
GMX1_TX003_STAT9               0x0001180010001AC8  RSL        
GMX1_TX003_STATS_CTL           0x0001180010001A68  RSL        
GMX1_TX003_THRESH              0x0001180010001A10  RSL        
GMX1_TX_BP                     0x00011800100004D0  RSL        
GMX1_TX_COL_ATTEMPT            0x0001180010000498  RSL        
GMX1_TX_CORRUPT                0x00011800100004D8  RSL        
GMX1_TX_IFG                    0x0001180010000488  RSL        
GMX1_TX_INT_EN                 0x0001180010000508  RSL        
GMX1_TX_INT_REG                0x0001180010000500  RSL        
GMX1_TX_JAM                    0x0001180010000490  RSL        
GMX1_TX_LFSR                   0x00011800100004F8  RSL        
GMX1_TX_OVR_BP                 0x00011800100004C8  RSL        
GMX1_TX_PAUSE_PKT_DMAC         0x00011800100004A0  RSL        
GMX1_TX_PAUSE_PKT_TYPE         0x00011800100004A8  RSL        
GMX1_TX_PRTS                   0x0001180010000480  RSL        
GMX1_TX_SPI_CTL                0x00011800100004C0  RSL        
GMX1_TX_SPI_DRAIN              0x00011800100004E0  RSL        
GMX1_TX_SPI_MAX                0x00011800100004B0  RSL        
GMX1_TX_SPI_ROUND000           0x0001180010000680  RSL        
GMX1_TX_SPI_ROUND001           0x0001180010000688  RSL        
GMX1_TX_SPI_ROUND002           0x0001180010000690  RSL        
GMX1_TX_SPI_ROUND003           0x0001180010000698  RSL        
GMX1_TX_SPI_ROUND004           0x00011800100006A0  RSL        
GMX1_TX_SPI_ROUND005           0x00011800100006A8  RSL        
GMX1_TX_SPI_ROUND006           0x00011800100006B0  RSL        
GMX1_TX_SPI_ROUND007           0x00011800100006B8  RSL        
GMX1_TX_SPI_ROUND008           0x00011800100006C0  RSL        
GMX1_TX_SPI_ROUND009           0x00011800100006C8  RSL        
GMX1_TX_SPI_ROUND010           0x00011800100006D0  RSL        
GMX1_TX_SPI_ROUND011           0x00011800100006D8  RSL        
GMX1_TX_SPI_ROUND012           0x00011800100006E0  RSL        
GMX1_TX_SPI_ROUND013           0x00011800100006E8  RSL        
GMX1_TX_SPI_ROUND014           0x00011800100006F0  RSL        
GMX1_TX_SPI_ROUND015           0x00011800100006F8  RSL        
GMX1_TX_SPI_ROUND016           0x0001180010000700  RSL        
GMX1_TX_SPI_ROUND017           0x0001180010000708  RSL        
GMX1_TX_SPI_ROUND018           0x0001180010000710  RSL        
GMX1_TX_SPI_ROUND019           0x0001180010000718  RSL        
GMX1_TX_SPI_ROUND020           0x0001180010000720  RSL        
GMX1_TX_SPI_ROUND021           0x0001180010000728  RSL        
GMX1_TX_SPI_ROUND022           0x0001180010000730  RSL        
GMX1_TX_SPI_ROUND023           0x0001180010000738  RSL        
GMX1_TX_SPI_ROUND024           0x0001180010000740  RSL        
GMX1_TX_SPI_ROUND025           0x0001180010000748  RSL        
GMX1_TX_SPI_ROUND026           0x0001180010000750  RSL        
GMX1_TX_SPI_ROUND027           0x0001180010000758  RSL        
GMX1_TX_SPI_ROUND028           0x0001180010000760  RSL        
GMX1_TX_SPI_ROUND029           0x0001180010000768  RSL        
GMX1_TX_SPI_ROUND030           0x0001180010000770  RSL        
GMX1_TX_SPI_ROUND031           0x0001180010000778  RSL        
GMX1_TX_SPI_THRESH             0x00011800100004B8  RSL        
GPIO_BIT_CFG0                  0x0001070000000800  NCB        
GPIO_BIT_CFG1                  0x0001070000000808  NCB        
GPIO_BIT_CFG2                  0x0001070000000810  NCB        
GPIO_BIT_CFG3                  0x0001070000000818  NCB        
GPIO_BIT_CFG4                  0x0001070000000820  NCB        
GPIO_BIT_CFG5                  0x0001070000000828  NCB        
GPIO_BIT_CFG6                  0x0001070000000830  NCB        
GPIO_BIT_CFG7                  0x0001070000000838  NCB        
GPIO_BIT_CFG8                  0x0001070000000840  NCB        
GPIO_BIT_CFG9                  0x0001070000000848  NCB        
GPIO_BIT_CFG10                 0x0001070000000850  NCB        
GPIO_BIT_CFG11                 0x0001070000000858  NCB        
GPIO_BIT_CFG12                 0x0001070000000860  NCB        
GPIO_BIT_CFG13                 0x0001070000000868  NCB        
GPIO_BIT_CFG14                 0x0001070000000870  NCB        
GPIO_BIT_CFG15                 0x0001070000000878  NCB        
GPIO_INT_CLR                   0x0001070000000898  NCB        
GPIO_RX_DAT                    0x0001070000000880  NCB        
GPIO_TX_CLR                    0x0001070000000890  NCB        
GPIO_TX_SET                    0x0001070000000888  NCB        
IOB_BIST_STATUS                0x00011800F00007F8  RSL        
IOB_CTL_STATUS                 0x00011800F0000050  RSL        
IOB_DWB_PRI_CNT                0x00011800F0000028  RSL        
IOB_FAU_TIMEOUT                0x00011800F0000000  RSL        
IOB_I2C_PRI_CNT                0x00011800F0000010  RSL        
IOB_INB_CONTROL_MATCH          0x00011800F0000078  RSL        
IOB_INB_CONTROL_MATCH_ENB      0x00011800F0000088  RSL        
IOB_INB_DATA_MATCH             0x00011800F0000070  RSL        
IOB_INB_DATA_MATCH_ENB         0x00011800F0000080  RSL        
IOB_INT_ENB                    0x00011800F0000060  RSL        
IOB_INT_SUM                    0x00011800F0000058  RSL        
IOB_N2C_L2C_PRI_CNT            0x00011800F0000020  RSL        
IOB_N2C_RSP_PRI_CNT            0x00011800F0000008  RSL        
IOB_OUTB_COM_PRI_CNT           0x00011800F0000040  RSL        
IOB_OUTB_CONTROL_MATCH         0x00011800F0000098  RSL        
IOB_OUTB_CONTROL_MATCH_ENB     0x00011800F00000A8  RSL        
IOB_OUTB_DATA_MATCH            0x00011800F0000090  RSL        
IOB_OUTB_DATA_MATCH_ENB        0x00011800F00000A0  RSL        
IOB_OUTB_FPA_PRI_CNT           0x00011800F0000048  RSL        
IOB_OUTB_REQ_PRI_CNT           0x00011800F0000038  RSL        
IOB_P2C_REQ_PRI_CNT            0x00011800F0000018  RSL        
IOB_PKT_ERR                    0x00011800F0000068  RSL        
IPD_1ST_MBUFF_SKIP             0x00014F0000000000  NCB        
IPD_1st_NEXT_PTR_BACK          0x00014F0000000150  NCB        
IPD_2nd_NEXT_PTR_BACK          0x00014F0000000158  NCB        
IPD_BIST_STATUS                0x00014F00000007F8  NCB        
IPD_BP_PRT_RED_END             0x00014F0000000328  NCB        
IPD_CLK_COUNT                  0x00014F0000000338  NCB        
IPD_CTL_STATUS                 0x00014F0000000018  NCB        
IPD_INT_ENB                    0x00014F0000000160  NCB        
IPD_INT_SUM                    0x00014F0000000168  NCB        
IPD_NOT_1ST_MBUFF_SKIP         0x00014F0000000008  NCB        
IPD_PACKET_MBUFF_SIZE          0x00014F0000000010  NCB        
IPD_PKT_PTR_VALID              0x00014F0000000358  NCB        
IPD_PORT0_BP_PAGE_CNT          0x00014F0000000028  NCB        
IPD_PORT1_BP_PAGE_CNT          0x00014F0000000030  NCB        
IPD_PORT2_BP_PAGE_CNT          0x00014F0000000038  NCB        
IPD_PORT3_BP_PAGE_CNT          0x00014F0000000040  NCB        
IPD_PORT4_BP_PAGE_CNT          0x00014F0000000048  NCB        
IPD_PORT5_BP_PAGE_CNT          0x00014F0000000050  NCB        
IPD_PORT6_BP_PAGE_CNT          0x00014F0000000058  NCB        
IPD_PORT7_BP_PAGE_CNT          0x00014F0000000060  NCB        
IPD_PORT8_BP_PAGE_CNT          0x00014F0000000068  NCB        
IPD_PORT9_BP_PAGE_CNT          0x00014F0000000070  NCB        
IPD_PORT10_BP_PAGE_CNT         0x00014F0000000078  NCB        
IPD_PORT11_BP_PAGE_CNT         0x00014F0000000080  NCB        
IPD_PORT12_BP_PAGE_CNT         0x00014F0000000088  NCB        
IPD_PORT13_BP_PAGE_CNT         0x00014F0000000090  NCB        
IPD_PORT14_BP_PAGE_CNT         0x00014F0000000098  NCB        
IPD_PORT15_BP_PAGE_CNT         0x00014F00000000A0  NCB        
IPD_PORT16_BP_PAGE_CNT         0x00014F00000000A8  NCB        
IPD_PORT17_BP_PAGE_CNT         0x00014F00000000B0  NCB        
IPD_PORT18_BP_PAGE_CNT         0x00014F00000000B8  NCB        
IPD_PORT19_BP_PAGE_CNT         0x00014F00000000C0  NCB        
IPD_PORT20_BP_PAGE_CNT         0x00014F00000000C8  NCB        
IPD_PORT21_BP_PAGE_CNT         0x00014F00000000D0  NCB        
IPD_PORT22_BP_PAGE_CNT         0x00014F00000000D8  NCB        
IPD_PORT23_BP_PAGE_CNT         0x00014F00000000E0  NCB        
IPD_PORT24_BP_PAGE_CNT         0x00014F00000000E8  NCB        
IPD_PORT25_BP_PAGE_CNT         0x00014F00000000F0  NCB        
IPD_PORT26_BP_PAGE_CNT         0x00014F00000000F8  NCB        
IPD_PORT27_BP_PAGE_CNT         0x00014F0000000100  NCB        
IPD_PORT28_BP_PAGE_CNT         0x00014F0000000108  NCB        
IPD_PORT29_BP_PAGE_CNT         0x00014F0000000110  NCB        
IPD_PORT30_BP_PAGE_CNT         0x00014F0000000118  NCB        
IPD_PORT31_BP_PAGE_CNT         0x00014F0000000120  NCB        
IPD_PORT32_BP_PAGE_CNT         0x00014F0000000128  NCB        
IPD_PORT33_BP_PAGE_CNT         0x00014F0000000130  NCB        
IPD_PORT34_BP_PAGE_CNT         0x00014F0000000138  NCB        
IPD_PORT35_BP_PAGE_CNT         0x00014F0000000140  NCB        
IPD_PORT_BP_COUNTERS_PAIR0     0x00014F00000001B8  NCB        
IPD_PORT_BP_COUNTERS_PAIR1     0x00014F00000001C0  NCB        
IPD_PORT_BP_COUNTERS_PAIR2     0x00014F00000001C8  NCB        
IPD_PORT_BP_COUNTERS_PAIR3     0x00014F00000001D0  NCB        
IPD_PORT_BP_COUNTERS_PAIR4     0x00014F00000001D8  NCB        
IPD_PORT_BP_COUNTERS_PAIR5     0x00014F00000001E0  NCB        
IPD_PORT_BP_COUNTERS_PAIR6     0x00014F00000001E8  NCB        
IPD_PORT_BP_COUNTERS_PAIR7     0x00014F00000001F0  NCB        
IPD_PORT_BP_COUNTERS_PAIR8     0x00014F00000001F8  NCB        
IPD_PORT_BP_COUNTERS_PAIR9     0x00014F0000000200  NCB        
IPD_PORT_BP_COUNTERS_PAIR10    0x00014F0000000208  NCB        
IPD_PORT_BP_COUNTERS_PAIR11    0x00014F0000000210  NCB        
IPD_PORT_BP_COUNTERS_PAIR12    0x00014F0000000218  NCB        
IPD_PORT_BP_COUNTERS_PAIR13    0x00014F0000000220  NCB        
IPD_PORT_BP_COUNTERS_PAIR14    0x00014F0000000228  NCB        
IPD_PORT_BP_COUNTERS_PAIR15    0x00014F0000000230  NCB        
IPD_PORT_BP_COUNTERS_PAIR16    0x00014F0000000238  NCB        
IPD_PORT_BP_COUNTERS_PAIR17    0x00014F0000000240  NCB        
IPD_PORT_BP_COUNTERS_PAIR18    0x00014F0000000248  NCB        
IPD_PORT_BP_COUNTERS_PAIR19    0x00014F0000000250  NCB        
IPD_PORT_BP_COUNTERS_PAIR20    0x00014F0000000258  NCB        
IPD_PORT_BP_COUNTERS_PAIR21    0x00014F0000000260  NCB        
IPD_PORT_BP_COUNTERS_PAIR22    0x00014F0000000268  NCB        
IPD_PORT_BP_COUNTERS_PAIR23    0x00014F0000000270  NCB        
IPD_PORT_BP_COUNTERS_PAIR24    0x00014F0000000278  NCB        
IPD_PORT_BP_COUNTERS_PAIR25    0x00014F0000000280  NCB        
IPD_PORT_BP_COUNTERS_PAIR26    0x00014F0000000288  NCB        
IPD_PORT_BP_COUNTERS_PAIR27    0x00014F0000000290  NCB        
IPD_PORT_BP_COUNTERS_PAIR28    0x00014F0000000298  NCB        
IPD_PORT_BP_COUNTERS_PAIR29    0x00014F00000002A0  NCB        
IPD_PORT_BP_COUNTERS_PAIR30    0x00014F00000002A8  NCB        
IPD_PORT_BP_COUNTERS_PAIR31    0x00014F00000002B0  NCB        
IPD_PORT_BP_COUNTERS_PAIR32    0x00014F00000002B8  NCB        
IPD_PORT_BP_COUNTERS_PAIR33    0x00014F00000002C0  NCB        
IPD_PORT_BP_COUNTERS_PAIR34    0x00014F00000002C8  NCB        
IPD_PORT_BP_COUNTERS_PAIR35    0x00014F00000002D0  NCB        
IPD_PRC_HOLD_PTR_FIFO_CTL      0x00014F0000000348  NCB        
IPD_PRC_PORT_PTR_FIFO_CTL      0x00014F0000000350  NCB        
IPD_PTR_COUNT                  0x00014F0000000320  NCB        
IPD_PWP_PTR_FIFO_CTL           0x00014F0000000340  NCB        
IPD_QOS0_RED_MARKS             0x00014F0000000178  NCB        
IPD_QOS1_RED_MARKS             0x00014F0000000180  NCB        
IPD_QOS2_RED_MARKS             0x00014F0000000188  NCB        
IPD_QOS3_RED_MARKS             0x00014F0000000190  NCB        
IPD_QOS4_RED_MARKS             0x00014F0000000198  NCB        
IPD_QOS5_RED_MARKS             0x00014F00000001A0  NCB        
IPD_QOS6_RED_MARKS             0x00014F00000001A8  NCB        
IPD_QOS7_RED_MARKS             0x00014F00000001B0  NCB        
IPD_QUE0_FREE_PAGE_CNT         0x00014F0000000330  NCB        
IPD_RED_PORT_ENABLE            0x00014F00000002D8  NCB        
IPD_RED_QUE0_PARAM             0x00014F00000002E0  NCB        
IPD_RED_QUE1_PARAM             0x00014F00000002E8  NCB        
IPD_RED_QUE2_PARAM             0x00014F00000002F0  NCB        
IPD_RED_QUE3_PARAM             0x00014F00000002F8  NCB        
IPD_RED_QUE4_PARAM             0x00014F0000000300  NCB        
IPD_RED_QUE5_PARAM             0x00014F0000000308  NCB        
IPD_RED_QUE6_PARAM             0x00014F0000000310  NCB        
IPD_RED_QUE7_PARAM             0x00014F0000000318  NCB        
IPD_SUB_PORT_BP_PAGE_CNT       0x00014F0000000148  NCB        
IPD_SUB_PORT_FCS               0x00014F0000000170  NCB        
IPD_WQE_FPA_QUEUE              0x00014F0000000020  NCB        
IPD_WQE_PTR_VALID              0x00014F0000000360  NCB        
KEY_BIST_REG                   0x0001180020000018  RSL        
KEY_CTL_STATUS                 0x0001180020000010  RSL        
KEY_INT_ENB                    0x0001180020000008  RSL        
KEY_INT_SUM                    0x0001180020000000  RSL        
L2C_BST0                       0x00011800800007F8  RSL        
L2C_BST1                       0x00011800800007F0  RSL        
L2C_BST2                       0x00011800800007E8  RSL        
L2C_CFG                        0x0001180080000000  RSL        
L2C_DBG                        0x0001180080000030  RSL        
L2C_DUT                        0x0001180080000050  RSL        
L2C_LCKBASE                    0x0001180080000058  RSL        
L2C_LCKOFF                     0x0001180080000060  RSL        
L2C_LFB0                       0x0001180080000038  RSL        
L2C_LFB1                       0x0001180080000040  RSL        
L2C_LFB2                       0x0001180080000048  RSL        
L2C_LFB3                       0x00011800800000B8  RSL        
L2C_PFC0                       0x0001180080000098  RSL        
L2C_PFC1                       0x00011800800000A0  RSL        
L2C_PFC2                       0x00011800800000A8  RSL        
L2C_PFC3                       0x00011800800000B0  RSL        
L2C_PFCTL                      0x0001180080000090  RSL        
L2C_SPAR0                      0x0001180080000068  RSL        
L2C_SPAR1                      0x0001180080000070  RSL        
L2C_SPAR2                      0x0001180080000078  RSL        
L2C_SPAR3                      0x0001180080000080  RSL        
L2C_SPAR4                      0x0001180080000088  RSL        
L2D_BST0                       0x0001180080000780  RSL        
L2D_BST1                       0x0001180080000788  RSL        
L2D_BST2                       0x0001180080000790  RSL        
L2D_BST3                       0x0001180080000798  RSL        
L2D_ERR                        0x0001180080000010  RSL        
L2D_FADR                       0x0001180080000018  RSL        
L2D_FSYN0                      0x0001180080000020  RSL        
L2D_FSYN1                      0x0001180080000028  RSL        
L2D_FUS0                       0x00011800800007A0  RSL        
L2D_FUS1                       0x00011800800007A8  RSL        
L2D_FUS2                       0x00011800800007B0  RSL        
L2D_FUS3                       0x00011800800007B8  RSL        
L2T_ERR                        0x0001180080000008  RSL        
LED_BLINK                      0x0001180000001A48  RSL        
LED_CLK_PHASE                  0x0001180000001A08  RSL        
LED_CYLON                      0x0001180000001AF8  RSL        
LED_DBG                        0x0001180000001A18  RSL        
LED_EN                         0x0001180000001A00  RSL        
LED_POLARITY                   0x0001180000001A50  RSL        
LED_PRT                        0x0001180000001A10  RSL        
LED_PRT_FMT                    0x0001180000001A30  RSL        
LED_PRT_STATUS0                0x0001180000001A80  RSL        
LED_PRT_STATUS1                0x0001180000001A88  RSL        
LED_PRT_STATUS2                0x0001180000001A90  RSL        
LED_PRT_STATUS3                0x0001180000001A98  RSL        
LED_PRT_STATUS4                0x0001180000001AA0  RSL        
LED_PRT_STATUS5                0x0001180000001AA8  RSL        
LED_PRT_STATUS6                0x0001180000001AB0  RSL        
LED_PRT_STATUS7                0x0001180000001AB8  RSL        
LED_UDD_CNT0                   0x0001180000001A20  RSL        
LED_UDD_CNT1                   0x0001180000001A28  RSL        
LED_UDD_DAT0                   0x0001180000001A38  RSL        
LED_UDD_DAT1                   0x0001180000001A40  RSL        
LED_UDD_DAT_CLR0               0x0001180000001AC8  RSL        
LED_UDD_DAT_CLR1               0x0001180000001AD8  RSL        
LED_UDD_DAT_SET0               0x0001180000001AC0  RSL        
LED_UDD_DAT_SET1               0x0001180000001AD0  RSL        
LMC0_COMP_CTL                  0x0001180088000028  RSL        
LMC0_CTL                       0x0001180088000010  RSL        
LMC0_CTL1                      0x0001180088000090  RSL        
LMC0_DCLK_CNT_HI               0x0001180088000070  RSL        
LMC0_DCLK_CNT_LO               0x0001180088000068  RSL        
LMC0_DDR2_CTL                  0x0001180088000018  RSL        
LMC0_DELAY_CFG                 0x0001180088000088  RSL        
LMC0_DUAL_MEMCFG               0x0001180088000098  RSL        
LMC0_ECC_SYND                  0x0001180088000038  RSL        
LMC0_FADR                      0x0001180088000020  RSL        
LMC0_IFB_CNT_HI                0x0001180088000050  RSL        
LMC0_IFB_CNT_LO                0x0001180088000048  RSL        
LMC0_MEM_CFG0                  0x0001180088000000  RSL        
LMC0_MEM_CFG1                  0x0001180088000008  RSL        
LMC0_OPS_CNT_HI                0x0001180088000060  RSL        
LMC0_OPS_CNT_LO                0x0001180088000058  RSL        
LMC0_PLL_CTL                   0x00011800880000A8  RSL        
LMC0_PLL_STATUS                0x00011800880000B0  RSL        
LMC0_RODT_COMP_CTL             0x00011800880000A0  RSL        
LMC0_RODT_CTL                  0x0001180088000078  RSL        
LMC0_WODT_CTL                  0x0001180088000030  RSL        
MIO_BOOT_BIST_STAT             0x00011800000000F8  RSL        
MIO_BOOT_ERR                   0x00011800000000A0  RSL        
MIO_BOOT_INT                   0x00011800000000A8  RSL        
MIO_BOOT_LOC_ADR               0x0001180000000090  RSL        
MIO_BOOT_LOC_CFG0              0x0001180000000080  RSL        
MIO_BOOT_LOC_CFG1              0x0001180000000088  RSL        
MIO_BOOT_LOC_DAT               0x0001180000000098  RSL        
MIO_BOOT_REG_CFG0              0x0001180000000000  RSL        
MIO_BOOT_REG_CFG1              0x0001180000000008  RSL        
MIO_BOOT_REG_CFG2              0x0001180000000010  RSL        
MIO_BOOT_REG_CFG3              0x0001180000000018  RSL        
MIO_BOOT_REG_CFG4              0x0001180000000020  RSL        
MIO_BOOT_REG_CFG5              0x0001180000000028  RSL        
MIO_BOOT_REG_CFG6              0x0001180000000030  RSL        
MIO_BOOT_REG_CFG7              0x0001180000000038  RSL        
MIO_BOOT_REG_TIM0              0x0001180000000040  RSL        
MIO_BOOT_REG_TIM1              0x0001180000000048  RSL        
MIO_BOOT_REG_TIM2              0x0001180000000050  RSL        
MIO_BOOT_REG_TIM3              0x0001180000000058  RSL        
MIO_BOOT_REG_TIM4              0x0001180000000060  RSL        
MIO_BOOT_REG_TIM5              0x0001180000000068  RSL        
MIO_BOOT_REG_TIM6              0x0001180000000070  RSL        
MIO_BOOT_REG_TIM7              0x0001180000000078  RSL        
MIO_BOOT_THR                   0x00011800000000B0  RSL        
MIO_FUS_BNK_DAT0               0x0001180000001520  RSL        
MIO_FUS_BNK_DAT1               0x0001180000001528  RSL        
MIO_FUS_BNK_DAT2               0x0001180000001530  RSL        
MIO_FUS_BNK_DAT3               0x0001180000001538  RSL        
MIO_FUS_DAT0                   0x0001180000001400  RSL        
MIO_FUS_DAT1                   0x0001180000001408  RSL        
MIO_FUS_DAT2                   0x0001180000001410  RSL        
MIO_FUS_DAT3                   0x0001180000001418  RSL        
MIO_FUS_EMA                    0x0001180000001550  RSL        
MIO_FUS_PLL                    0x0001180000001580  RSL        
MIO_FUS_PROG                   0x0001180000001510  RSL        
MIO_FUS_PROG_TIMES             0x0001180000001518  RSL        
MIO_FUS_RCMD                   0x0001180000001500  RSL        
MIO_FUS_SPR_REPAIR_RES         0x0001180000001548  RSL        
MIO_FUS_SPR_REPAIR_SUM         0x0001180000001540  RSL        
MIO_FUS_WADR                   0x0001180000001508  RSL        
MIO_TWS_INT                    0x0001180000001010  RSL        
MIO_TWS_SW_TWSI                0x0001180000001000  RSL        
MIO_TWS_SW_TWSI_EXT            0x0001180000001018  RSL        
MIO_TWS_TWSI_SW                0x0001180000001008  RSL        
MIO_UART0_DLH                  0x0001180000000888  RSL        
MIO_UART0_DLL                  0x0001180000000880  RSL        
MIO_UART0_FAR                  0x0001180000000920  RSL        
MIO_UART0_FCR                  0x0001180000000850  RSL        
MIO_UART0_HTX                  0x0001180000000B08  RSL        
MIO_UART0_IER                  0x0001180000000808  RSL        
MIO_UART0_IIR                  0x0001180000000810  RSL        
MIO_UART0_LCR                  0x0001180000000818  RSL        
MIO_UART0_LSR                  0x0001180000000828  RSL        
MIO_UART0_MCR                  0x0001180000000820  RSL        
MIO_UART0_MSR                  0x0001180000000830  RSL        
MIO_UART0_RBR                  0x0001180000000800  RSL        
MIO_UART0_RFL                  0x0001180000000A08  RSL        
MIO_UART0_RFW                  0x0001180000000930  RSL        
MIO_UART0_SBCR                 0x0001180000000A20  RSL        
MIO_UART0_SCR                  0x0001180000000838  RSL        
MIO_UART0_SFE                  0x0001180000000A30  RSL        
MIO_UART0_SRR                  0x0001180000000A10  RSL        
MIO_UART0_SRT                  0x0001180000000A38  RSL        
MIO_UART0_SRTS                 0x0001180000000A18  RSL        
MIO_UART0_STT                  0x0001180000000B00  RSL        
MIO_UART0_TFL                  0x0001180000000A00  RSL        
MIO_UART0_TFR                  0x0001180000000928  RSL        
MIO_UART0_THR                  0x0001180000000840  RSL        
MIO_UART0_USR                  0x0001180000000938  RSL        
MIO_UART1_DLH                  0x0001180000000C88  RSL        
MIO_UART1_DLL                  0x0001180000000C80  RSL        
MIO_UART1_FAR                  0x0001180000000D20  RSL        
MIO_UART1_FCR                  0x0001180000000C50  RSL        
MIO_UART1_HTX                  0x0001180000000F08  RSL        
MIO_UART1_IER                  0x0001180000000C08  RSL        
MIO_UART1_IIR                  0x0001180000000C10  RSL        
MIO_UART1_LCR                  0x0001180000000C18  RSL        
MIO_UART1_LSR                  0x0001180000000C28  RSL        
MIO_UART1_MCR                  0x0001180000000C20  RSL        
MIO_UART1_MSR                  0x0001180000000C30  RSL        
MIO_UART1_RBR                  0x0001180000000C00  RSL        
MIO_UART1_RFL                  0x0001180000000E08  RSL        
MIO_UART1_RFW                  0x0001180000000D30  RSL        
MIO_UART1_SBCR                 0x0001180000000E20  RSL        
MIO_UART1_SCR                  0x0001180000000C38  RSL        
MIO_UART1_SFE                  0x0001180000000E30  RSL        
MIO_UART1_SRR                  0x0001180000000E10  RSL        
MIO_UART1_SRT                  0x0001180000000E38  RSL        
MIO_UART1_SRTS                 0x0001180000000E18  RSL        
MIO_UART1_STT                  0x0001180000000F00  RSL        
MIO_UART1_TFL                  0x0001180000000E00  RSL        
MIO_UART1_TFR                  0x0001180000000D28  RSL        
MIO_UART1_THR                  0x0001180000000C40  RSL        
MIO_UART1_USR                  0x0001180000000D38  RSL        
NPI_BASE_ADDR_INPUT0           0x00011F0000000070  NCB        
NPI_BASE_ADDR_INPUT1           0x00011F0000000080  NCB        
NPI_BASE_ADDR_INPUT2           0x00011F0000000090  NCB        
NPI_BASE_ADDR_INPUT3           0x00011F00000000A0  NCB        
NPI_BASE_ADDR_OUTPUT0          0x00011F00000000B8  NCB        
NPI_BASE_ADDR_OUTPUT1          0x00011F00000000C0  NCB        
NPI_BASE_ADDR_OUTPUT2          0x00011F00000000C8  NCB        
NPI_BASE_ADDR_OUTPUT3          0x00011F00000000D0  NCB        
NPI_BIST_STATUS                0x00011F00000003F8  NCB        
NPI_BUFF_SIZE_OUTPUT0          0x00011F00000000E0  NCB        
NPI_BUFF_SIZE_OUTPUT1          0x00011F00000000E8  NCB        
NPI_BUFF_SIZE_OUTPUT2          0x00011F00000000F0  NCB        
NPI_BUFF_SIZE_OUTPUT3          0x00011F00000000F8  NCB        
NPI_COMP_CTL                   0x00011F0000000218  NCB        
NPI_CTL_STATUS                 0x00011F0000000010  NCB        
NPI_DBG_SELECT                 0x00011F0000000008  NCB        
NPI_DMA_CONTROL                0x00011F0000000128  NCB        
NPI_DMA_HIGHP_COUNTS           0x00011F0000000148  NCB        
NPI_DMA_HIGHP_NADDR            0x00011F0000000158  NCB        
NPI_DMA_LOWP_COUNTS            0x00011F0000000140  NCB        
NPI_DMA_LOWP_NADDR             0x00011F0000000150  NCB        
NPI_HIGHP_DBELL                0x00011F0000000120  NCB        
NPI_HIGHP_IBUFF_SADDR          0x00011F0000000110  NCB        
NPI_INPUT_CONTROL              0x00011F0000000138  NCB        
NPI_INT_ENB                    0x00011F0000000020  NCB        
NPI_INT_SUM                    0x00011F0000000018  NCB        
NPI_LOWP_DBELL                 0x00011F0000000118  NCB        
NPI_LOWP_IBUFF_SADDR           0x00011F0000000108  NCB        
NPI_MEM_ACCESS_SUBID3          0x00011F0000000028  NCB        
NPI_MEM_ACCESS_SUBID4          0x00011F0000000030  NCB        
NPI_MEM_ACCESS_SUBID5          0x00011F0000000038  NCB        
NPI_MEM_ACCESS_SUBID6          0x00011F0000000040  NCB        
NPI_MSI_RCV                    0x0000000000000190  PCI_NCB    0x00011F0000001190  NCB       
NPI_NUM_DESC_OUTPUT0           0x00011F0000000050  NCB        
NPI_NUM_DESC_OUTPUT1           0x00011F0000000058  NCB        
NPI_NUM_DESC_OUTPUT2           0x00011F0000000060  NCB        
NPI_NUM_DESC_OUTPUT3           0x00011F0000000068  NCB        
NPI_OUTPUT_CONTROL             0x00011F0000000100  NCB        
NPI_P0_DBPAIR_ADDR             0x00011F0000000180  NCB        
NPI_P0_INSTR_ADDR              0x00011F00000001C0  NCB        
NPI_P0_INSTR_CNTS              0x00011F00000001A0  NCB        
NPI_P0_PAIR_CNTS               0x00011F0000000160  NCB        
NPI_P1_DBPAIR_ADDR             0x00011F0000000188  NCB        
NPI_P1_INSTR_ADDR              0x00011F00000001C8  NCB        
NPI_P1_INSTR_CNTS              0x00011F00000001A8  NCB        
NPI_P1_PAIR_CNTS               0x00011F0000000168  NCB        
NPI_P2_DBPAIR_ADDR             0x00011F0000000190  NCB        
NPI_P2_INSTR_ADDR              0x00011F00000001D0  NCB        
NPI_P2_INSTR_CNTS              0x00011F00000001B0  NCB        
NPI_P2_PAIR_CNTS               0x00011F0000000170  NCB        
NPI_P3_DBPAIR_ADDR             0x00011F0000000198  NCB        
NPI_P3_INSTR_ADDR              0x00011F00000001D8  NCB        
NPI_P3_INSTR_CNTS              0x00011F00000001B8  NCB        
NPI_P3_PAIR_CNTS               0x00011F0000000178  NCB        
NPI_PCI_BURST_SIZE             0x00011F00000000D8  NCB        
NPI_PCI_INT_ARB_CFG            0x00011F0000000130  NCB        
NPI_PCI_READ_CMD               0x00011F0000000048  NCB        
NPI_PORT32_INSTR_HDR           0x00011F00000001F8  NCB        
NPI_PORT33_INSTR_HDR           0x00011F0000000200  NCB        
NPI_PORT34_INSTR_HDR           0x00011F0000000208  NCB        
NPI_PORT35_INSTR_HDR           0x00011F0000000210  NCB        
NPI_PORT_BP_CONTROL            0x00011F00000001F0  NCB        
NPI_RSL_INT_BLOCKS             0x00011F0000000000  NCB        
NPI_SIZE_INPUT0                0x00011F0000000078  NCB        
NPI_SIZE_INPUT1                0x00011F0000000088  NCB        
NPI_SIZE_INPUT2                0x00011F0000000098  NCB        
NPI_SIZE_INPUT3                0x00011F00000000A8  NCB        
NPI_WIN_READ_TO                0x00011F00000001E0  NCB        
PCI_BAR1_INDEX0                0x0000000000000100  PCI_NCB    0x00011F0000001100  NCB       
PCI_BAR1_INDEX1                0x0000000000000104  PCI_NCB    0x00011F0000001104  NCB       
PCI_BAR1_INDEX2                0x0000000000000108  PCI_NCB    0x00011F0000001108  NCB       
PCI_BAR1_INDEX3                0x000000000000010C  PCI_NCB    0x00011F000000110C  NCB       
PCI_BAR1_INDEX4                0x0000000000000110  PCI_NCB    0x00011F0000001110  NCB       
PCI_BAR1_INDEX5                0x0000000000000114  PCI_NCB    0x00011F0000001114  NCB       
PCI_BAR1_INDEX6                0x0000000000000118  PCI_NCB    0x00011F0000001118  NCB       
PCI_BAR1_INDEX7                0x000000000000011C  PCI_NCB    0x00011F000000111C  NCB       
PCI_BAR1_INDEX8                0x0000000000000120  PCI_NCB    0x00011F0000001120  NCB       
PCI_BAR1_INDEX9                0x0000000000000124  PCI_NCB    0x00011F0000001124  NCB       
PCI_BAR1_INDEX10               0x0000000000000128  PCI_NCB    0x00011F0000001128  NCB       
PCI_BAR1_INDEX11               0x000000000000012C  PCI_NCB    0x00011F000000112C  NCB       
PCI_BAR1_INDEX12               0x0000000000000130  PCI_NCB    0x00011F0000001130  NCB       
PCI_BAR1_INDEX13               0x0000000000000134  PCI_NCB    0x00011F0000001134  NCB       
PCI_BAR1_INDEX14               0x0000000000000138  PCI_NCB    0x00011F0000001138  NCB       
PCI_BAR1_INDEX15               0x000000000000013C  PCI_NCB    0x00011F000000113C  NCB       
PCI_BAR1_INDEX16               0x0000000000000140  PCI_NCB    0x00011F0000001140  NCB       
PCI_BAR1_INDEX17               0x0000000000000144  PCI_NCB    0x00011F0000001144  NCB       
PCI_BAR1_INDEX18               0x0000000000000148  PCI_NCB    0x00011F0000001148  NCB       
PCI_BAR1_INDEX19               0x000000000000014C  PCI_NCB    0x00011F000000114C  NCB       
PCI_BAR1_INDEX20               0x0000000000000150  PCI_NCB    0x00011F0000001150  NCB       
PCI_BAR1_INDEX21               0x0000000000000154  PCI_NCB    0x00011F0000001154  NCB       
PCI_BAR1_INDEX22               0x0000000000000158  PCI_NCB    0x00011F0000001158  NCB       
PCI_BAR1_INDEX23               0x000000000000015C  PCI_NCB    0x00011F000000115C  NCB       
PCI_BAR1_INDEX24               0x0000000000000160  PCI_NCB    0x00011F0000001160  NCB       
PCI_BAR1_INDEX25               0x0000000000000164  PCI_NCB    0x00011F0000001164  NCB       
PCI_BAR1_INDEX26               0x0000000000000168  PCI_NCB    0x00011F0000001168  NCB       
PCI_BAR1_INDEX27               0x000000000000016C  PCI_NCB    0x00011F000000116C  NCB       
PCI_BAR1_INDEX28               0x0000000000000170  PCI_NCB    0x00011F0000001170  NCB       
PCI_BAR1_INDEX29               0x0000000000000174  PCI_NCB    0x00011F0000001174  NCB       
PCI_BAR1_INDEX30               0x0000000000000178  PCI_NCB    0x00011F0000001178  NCB       
PCI_BAR1_INDEX31               0x000000000000017C  PCI_NCB    0x00011F000000117C  NCB       
PCI_CFG00                      0x0000000000000000  PCICONFIG  0x00011F0000001800  NCB       
PCI_CFG01                      0x0000000000000004  PCICONFIG  0x00011F0000001804  NCB       
PCI_CFG02                      0x0000000000000008  PCICONFIG  0x00011F0000001808  NCB       
PCI_CFG03                      0x000000000000000C  PCICONFIG  0x00011F000000180C  NCB       
PCI_CFG04                      0x0000000000000010  PCICONFIG  0x00011F0000001810  NCB       
PCI_CFG05                      0x0000000000000014  PCICONFIG  0x00011F0000001814  NCB       
PCI_CFG06                      0x0000000000000018  PCICONFIG  0x00011F0000001818  NCB       
PCI_CFG07                      0x000000000000001C  PCICONFIG  0x00011F000000181C  NCB       
PCI_CFG08                      0x0000000000000020  PCICONFIG  0x00011F0000001820  NCB       
PCI_CFG09                      0x0000000000000024  PCICONFIG  0x00011F0000001824  NCB       
PCI_CFG10                      0x0000000000000028  PCICONFIG  0x00011F0000001828  NCB       
PCI_CFG11                      0x000000000000002C  PCICONFIG  0x00011F000000182C  NCB       
PCI_CFG12                      0x0000000000000030  PCICONFIG  0x00011F0000001830  NCB       
PCI_CFG13                      0x0000000000000034  PCICONFIG  0x00011F0000001834  NCB       
PCI_CFG15                      0x000000000000003C  PCICONFIG  0x00011F000000183C  NCB       
PCI_CFG16                      0x0000000000000040  PCICONFIG  0x00011F0000001840  NCB       
PCI_CFG17                      0x0000000000000044  PCICONFIG  0x00011F0000001844  NCB       
PCI_CFG18                      0x0000000000000048  PCICONFIG  0x00011F0000001848  NCB       
PCI_CFG19                      0x000000000000004C  PCICONFIG  0x00011F000000184C  NCB       
PCI_CFG20                      0x0000000000000050  PCICONFIG  0x00011F0000001850  NCB       
PCI_CFG21                      0x0000000000000054  PCICONFIG  0x00011F0000001854  NCB       
PCI_CFG22                      0x0000000000000058  PCICONFIG  0x00011F0000001858  NCB       
PCI_CFG56                      0x00000000000000E0  PCICONFIG  0x00011F00000018E0  NCB       
PCI_CFG57                      0x00000000000000E4  PCICONFIG  0x00011F00000018E4  NCB       
PCI_CFG58                      0x00000000000000E8  PCICONFIG  0x00011F00000018E8  NCB       
PCI_CFG59                      0x00000000000000EC  PCICONFIG  0x00011F00000018EC  NCB       
PCI_CFG60                      0x00000000000000F0  PCICONFIG  0x00011F00000018F0  NCB       
PCI_CFG61                      0x00000000000000F4  PCICONFIG  0x00011F00000018F4  NCB       
PCI_CFG62                      0x00000000000000F8  PCICONFIG  0x00011F00000018F8  NCB       
PCI_CFG63                      0x00000000000000FC  PCICONFIG  0x00011F00000018FC  NCB       
PCI_CNT_REG                    0x00000000000001B8  PCI_NCB    0x00011F00000011B8  NCB       
PCI_CTL_STATUS_2               0x000000000000018C  PCI_NCB    0x00011F000000118C  NCB       
PCI_DBELL_0                    0x0000000000000080  PCI        
PCI_DBELL_1                    0x0000000000000088  PCI        
PCI_DBELL_2                    0x0000000000000090  PCI        
PCI_DBELL_3                    0x0000000000000098  PCI        
PCI_DMA_CNT0                   0x00000000000000A0  PCI        
PCI_DMA_CNT1                   0x00000000000000A8  PCI        
PCI_DMA_INT_LEV0               0x00000000000000A4  PCI        
PCI_DMA_INT_LEV1               0x00000000000000AC  PCI        
PCI_DMA_TIME0                  0x00000000000000B0  PCI        
PCI_DMA_TIME1                  0x00000000000000B4  PCI        
PCI_INSTR_COUNT0               0x0000000000000084  PCI        
PCI_INSTR_COUNT1               0x000000000000008C  PCI        
PCI_INSTR_COUNT2               0x0000000000000094  PCI        
PCI_INSTR_COUNT3               0x000000000000009C  PCI        
PCI_INT_ENB                    0x0000000000000038  PCI        
PCI_INT_ENB2                   0x00000000000001A0  PCI_NCB    0x00011F00000011A0  NCB       
PCI_INT_SUM                    0x0000000000000030  PCI        
PCI_INT_SUM2                   0x0000000000000198  PCI_NCB    0x00011F0000001198  NCB       
PCI_MSI_RCV                    0x00000000000000F0  PCI        
PCI_PKTS_SENT0                 0x0000000000000040  PCI        
PCI_PKTS_SENT1                 0x0000000000000050  PCI        
PCI_PKTS_SENT2                 0x0000000000000060  PCI        
PCI_PKTS_SENT3                 0x0000000000000070  PCI        
PCI_PKTS_SENT_INT_LEV0         0x0000000000000048  PCI        
PCI_PKTS_SENT_INT_LEV1         0x0000000000000058  PCI        
PCI_PKTS_SENT_INT_LEV2         0x0000000000000068  PCI        
PCI_PKTS_SENT_INT_LEV3         0x0000000000000078  PCI        
PCI_PKTS_SENT_TIME0            0x000000000000004C  PCI        
PCI_PKTS_SENT_TIME1            0x000000000000005C  PCI        
PCI_PKTS_SENT_TIME2            0x000000000000006C  PCI        
PCI_PKTS_SENT_TIME3            0x000000000000007C  PCI        
PCI_PKT_CREDITS0               0x0000000000000044  PCI        
PCI_PKT_CREDITS1               0x0000000000000054  PCI        
PCI_PKT_CREDITS2               0x0000000000000064  PCI        
PCI_PKT_CREDITS3               0x0000000000000074  PCI        
PCI_READ_CMD_6                 0x0000000000000180  PCI_NCB    0x00011F0000001180  NCB       
PCI_READ_CMD_C                 0x0000000000000184  PCI_NCB    0x00011F0000001184  NCB       
PCI_READ_CMD_E                 0x0000000000000188  PCI_NCB    0x00011F0000001188  NCB       
PCI_READ_TIMEOUT               0x00011F00000000B0  NCB        
PCI_SCM_REG                    0x00000000000001A8  PCI_NCB    0x00011F00000011A8  NCB       
PCI_TSR_REG                    0x00000000000001B0  PCI_NCB    0x00011F00000011B0  NCB       
PCI_WIN_RD_ADDR                0x0000000000000008  PCI        
PCI_WIN_RD_DATA                0x0000000000000020  PCI        
PCI_WIN_WR_ADDR                0x0000000000000000  PCI        
PCI_WIN_WR_DATA                0x0000000000000010  PCI        
PCI_WIN_WR_MASK                0x0000000000000018  PCI        
PIP_BCK_PRS                    0x00011800A0000038  RSL        
PIP_BIST_STATUS                0x00011800A0000000  RSL        
PIP_CRC_CTL0                   0x00011800A0000040  RSL        
PIP_CRC_CTL1                   0x00011800A0000048  RSL        
PIP_CRC_IV0                    0x00011800A0000050  RSL        
PIP_CRC_IV1                    0x00011800A0000058  RSL        
PIP_DEC_IPSEC0                 0x00011800A0000080  RSL        
PIP_DEC_IPSEC1                 0x00011800A0000088  RSL        
PIP_DEC_IPSEC2                 0x00011800A0000090  RSL        
PIP_DEC_IPSEC3                 0x00011800A0000098  RSL        
PIP_GBL_CFG                    0x00011800A0000028  RSL        
PIP_GBL_CTL                    0x00011800A0000020  RSL        
PIP_INT_EN                     0x00011800A0000010  RSL        
PIP_INT_REG                    0x00011800A0000008  RSL        
PIP_IP_OFFSET                  0x00011800A0000060  RSL        
PIP_PRT_CFG0                   0x00011800A0000200  RSL        
PIP_PRT_CFG1                   0x00011800A0000208  RSL        
PIP_PRT_CFG2                   0x00011800A0000210  RSL        
PIP_PRT_CFG3                   0x00011800A0000218  RSL        
PIP_PRT_CFG4                   0x00011800A0000220  RSL        
PIP_PRT_CFG5                   0x00011800A0000228  RSL        
PIP_PRT_CFG6                   0x00011800A0000230  RSL        
PIP_PRT_CFG7                   0x00011800A0000238  RSL        
PIP_PRT_CFG8                   0x00011800A0000240  RSL        
PIP_PRT_CFG9                   0x00011800A0000248  RSL        
PIP_PRT_CFG10                  0x00011800A0000250  RSL        
PIP_PRT_CFG11                  0x00011800A0000258  RSL        
PIP_PRT_CFG12                  0x00011800A0000260  RSL        
PIP_PRT_CFG13                  0x00011800A0000268  RSL        
PIP_PRT_CFG14                  0x00011800A0000270  RSL        
PIP_PRT_CFG15                  0x00011800A0000278  RSL        
PIP_PRT_CFG16                  0x00011800A0000280  RSL        
PIP_PRT_CFG17                  0x00011800A0000288  RSL        
PIP_PRT_CFG18                  0x00011800A0000290  RSL        
PIP_PRT_CFG19                  0x00011800A0000298  RSL        
PIP_PRT_CFG20                  0x00011800A00002A0  RSL        
PIP_PRT_CFG21                  0x00011800A00002A8  RSL        
PIP_PRT_CFG22                  0x00011800A00002B0  RSL        
PIP_PRT_CFG23                  0x00011800A00002B8  RSL        
PIP_PRT_CFG24                  0x00011800A00002C0  RSL        
PIP_PRT_CFG25                  0x00011800A00002C8  RSL        
PIP_PRT_CFG26                  0x00011800A00002D0  RSL        
PIP_PRT_CFG27                  0x00011800A00002D8  RSL        
PIP_PRT_CFG28                  0x00011800A00002E0  RSL        
PIP_PRT_CFG29                  0x00011800A00002E8  RSL        
PIP_PRT_CFG30                  0x00011800A00002F0  RSL        
PIP_PRT_CFG31                  0x00011800A00002F8  RSL        
PIP_PRT_CFG32                  0x00011800A0000300  RSL        
PIP_PRT_CFG33                  0x00011800A0000308  RSL        
PIP_PRT_CFG34                  0x00011800A0000310  RSL        
PIP_PRT_CFG35                  0x00011800A0000318  RSL        
PIP_PRT_TAG0                   0x00011800A0000400  RSL        
PIP_PRT_TAG1                   0x00011800A0000408  RSL        
PIP_PRT_TAG2                   0x00011800A0000410  RSL        
PIP_PRT_TAG3                   0x00011800A0000418  RSL        
PIP_PRT_TAG4                   0x00011800A0000420  RSL        
PIP_PRT_TAG5                   0x00011800A0000428  RSL        
PIP_PRT_TAG6                   0x00011800A0000430  RSL        
PIP_PRT_TAG7                   0x00011800A0000438  RSL        
PIP_PRT_TAG8                   0x00011800A0000440  RSL        
PIP_PRT_TAG9                   0x00011800A0000448  RSL        
PIP_PRT_TAG10                  0x00011800A0000450  RSL        
PIP_PRT_TAG11                  0x00011800A0000458  RSL        
PIP_PRT_TAG12                  0x00011800A0000460  RSL        
PIP_PRT_TAG13                  0x00011800A0000468  RSL        
PIP_PRT_TAG14                  0x00011800A0000470  RSL        
PIP_PRT_TAG15                  0x00011800A0000478  RSL        
PIP_PRT_TAG16                  0x00011800A0000480  RSL        
PIP_PRT_TAG17                  0x00011800A0000488  RSL        
PIP_PRT_TAG18                  0x00011800A0000490  RSL        
PIP_PRT_TAG19                  0x00011800A0000498  RSL        
PIP_PRT_TAG20                  0x00011800A00004A0  RSL        
PIP_PRT_TAG21                  0x00011800A00004A8  RSL        
PIP_PRT_TAG22                  0x00011800A00004B0  RSL        
PIP_PRT_TAG23                  0x00011800A00004B8  RSL        
PIP_PRT_TAG24                  0x00011800A00004C0  RSL        
PIP_PRT_TAG25                  0x00011800A00004C8  RSL        
PIP_PRT_TAG26                  0x00011800A00004D0  RSL        
PIP_PRT_TAG27                  0x00011800A00004D8  RSL        
PIP_PRT_TAG28                  0x00011800A00004E0  RSL        
PIP_PRT_TAG29                  0x00011800A00004E8  RSL        
PIP_PRT_TAG30                  0x00011800A00004F0  RSL        
PIP_PRT_TAG31                  0x00011800A00004F8  RSL        
PIP_PRT_TAG32                  0x00011800A0000500  RSL        
PIP_PRT_TAG33                  0x00011800A0000508  RSL        
PIP_PRT_TAG34                  0x00011800A0000510  RSL        
PIP_PRT_TAG35                  0x00011800A0000518  RSL        
PIP_QOS_DIFF0                  0x00011800A0000600  RSL        
PIP_QOS_DIFF1                  0x00011800A0000608  RSL        
PIP_QOS_DIFF2                  0x00011800A0000610  RSL        
PIP_QOS_DIFF3                  0x00011800A0000618  RSL        
PIP_QOS_DIFF4                  0x00011800A0000620  RSL        
PIP_QOS_DIFF5                  0x00011800A0000628  RSL        
PIP_QOS_DIFF6                  0x00011800A0000630  RSL        
PIP_QOS_DIFF7                  0x00011800A0000638  RSL        
PIP_QOS_DIFF8                  0x00011800A0000640  RSL        
PIP_QOS_DIFF9                  0x00011800A0000648  RSL        
PIP_QOS_DIFF10                 0x00011800A0000650  RSL        
PIP_QOS_DIFF11                 0x00011800A0000658  RSL        
PIP_QOS_DIFF12                 0x00011800A0000660  RSL        
PIP_QOS_DIFF13                 0x00011800A0000668  RSL        
PIP_QOS_DIFF14                 0x00011800A0000670  RSL        
PIP_QOS_DIFF15                 0x00011800A0000678  RSL        
PIP_QOS_DIFF16                 0x00011800A0000680  RSL        
PIP_QOS_DIFF17                 0x00011800A0000688  RSL        
PIP_QOS_DIFF18                 0x00011800A0000690  RSL        
PIP_QOS_DIFF19                 0x00011800A0000698  RSL        
PIP_QOS_DIFF20                 0x00011800A00006A0  RSL        
PIP_QOS_DIFF21                 0x00011800A00006A8  RSL        
PIP_QOS_DIFF22                 0x00011800A00006B0  RSL        
PIP_QOS_DIFF23                 0x00011800A00006B8  RSL        
PIP_QOS_DIFF24                 0x00011800A00006C0  RSL        
PIP_QOS_DIFF25                 0x00011800A00006C8  RSL        
PIP_QOS_DIFF26                 0x00011800A00006D0  RSL        
PIP_QOS_DIFF27                 0x00011800A00006D8  RSL        
PIP_QOS_DIFF28                 0x00011800A00006E0  RSL        
PIP_QOS_DIFF29                 0x00011800A00006E8  RSL        
PIP_QOS_DIFF30                 0x00011800A00006F0  RSL        
PIP_QOS_DIFF31                 0x00011800A00006F8  RSL        
PIP_QOS_DIFF32                 0x00011800A0000700  RSL        
PIP_QOS_DIFF33                 0x00011800A0000708  RSL        
PIP_QOS_DIFF34                 0x00011800A0000710  RSL        
PIP_QOS_DIFF35                 0x00011800A0000718  RSL        
PIP_QOS_DIFF36                 0x00011800A0000720  RSL        
PIP_QOS_DIFF37                 0x00011800A0000728  RSL        
PIP_QOS_DIFF38                 0x00011800A0000730  RSL        
PIP_QOS_DIFF39                 0x00011800A0000738  RSL        
PIP_QOS_DIFF40                 0x00011800A0000740  RSL        
PIP_QOS_DIFF41                 0x00011800A0000748  RSL        
PIP_QOS_DIFF42                 0x00011800A0000750  RSL        
PIP_QOS_DIFF43                 0x00011800A0000758  RSL        
PIP_QOS_DIFF44                 0x00011800A0000760  RSL        
PIP_QOS_DIFF45                 0x00011800A0000768  RSL        
PIP_QOS_DIFF46                 0x00011800A0000770  RSL        
PIP_QOS_DIFF47                 0x00011800A0000778  RSL        
PIP_QOS_DIFF48                 0x00011800A0000780  RSL        
PIP_QOS_DIFF49                 0x00011800A0000788  RSL        
PIP_QOS_DIFF50                 0x00011800A0000790  RSL        
PIP_QOS_DIFF51                 0x00011800A0000798  RSL        
PIP_QOS_DIFF52                 0x00011800A00007A0  RSL        
PIP_QOS_DIFF53                 0x00011800A00007A8  RSL        
PIP_QOS_DIFF54                 0x00011800A00007B0  RSL        
PIP_QOS_DIFF55                 0x00011800A00007B8  RSL        
PIP_QOS_DIFF56                 0x00011800A00007C0  RSL        
PIP_QOS_DIFF57                 0x00011800A00007C8  RSL        
PIP_QOS_DIFF58                 0x00011800A00007D0  RSL        
PIP_QOS_DIFF59                 0x00011800A00007D8  RSL        
PIP_QOS_DIFF60                 0x00011800A00007E0  RSL        
PIP_QOS_DIFF61                 0x00011800A00007E8  RSL        
PIP_QOS_DIFF62                 0x00011800A00007F0  RSL        
PIP_QOS_DIFF63                 0x00011800A00007F8  RSL        
PIP_QOS_VLAN0                  0x00011800A00000C0  RSL        
PIP_QOS_VLAN1                  0x00011800A00000C8  RSL        
PIP_QOS_VLAN2                  0x00011800A00000D0  RSL        
PIP_QOS_VLAN3                  0x00011800A00000D8  RSL        
PIP_QOS_VLAN4                  0x00011800A00000E0  RSL        
PIP_QOS_VLAN5                  0x00011800A00000E8  RSL        
PIP_QOS_VLAN6                  0x00011800A00000F0  RSL        
PIP_QOS_VLAN7                  0x00011800A00000F8  RSL        
PIP_QOS_WATCH0                 0x00011800A0000100  RSL        
PIP_QOS_WATCH1                 0x00011800A0000108  RSL        
PIP_QOS_WATCH2                 0x00011800A0000110  RSL        
PIP_QOS_WATCH3                 0x00011800A0000118  RSL        
PIP_RAW_WORD                   0x00011800A00000B0  RSL        
PIP_SFT_RST                    0x00011800A0000030  RSL        
PIP_STAT0_PRT0                 0x00011800A0000800  RSL        
PIP_STAT0_PRT1                 0x00011800A0000850  RSL        
PIP_STAT0_PRT2                 0x00011800A00008A0  RSL        
PIP_STAT0_PRT3                 0x00011800A00008F0  RSL        
PIP_STAT0_PRT4                 0x00011800A0000940  RSL        
PIP_STAT0_PRT5                 0x00011800A0000990  RSL        
PIP_STAT0_PRT6                 0x00011800A00009E0  RSL        
PIP_STAT0_PRT7                 0x00011800A0000A30  RSL        
PIP_STAT0_PRT8                 0x00011800A0000A80  RSL        
PIP_STAT0_PRT9                 0x00011800A0000AD0  RSL        
PIP_STAT0_PRT10                0x00011800A0000B20  RSL        
PIP_STAT0_PRT11                0x00011800A0000B70  RSL        
PIP_STAT0_PRT12                0x00011800A0000BC0  RSL        
PIP_STAT0_PRT13                0x00011800A0000C10  RSL        
PIP_STAT0_PRT14                0x00011800A0000C60  RSL        
PIP_STAT0_PRT15                0x00011800A0000CB0  RSL        
PIP_STAT0_PRT16                0x00011800A0000D00  RSL        
PIP_STAT0_PRT17                0x00011800A0000D50  RSL        
PIP_STAT0_PRT18                0x00011800A0000DA0  RSL        
PIP_STAT0_PRT19                0x00011800A0000DF0  RSL        
PIP_STAT0_PRT20                0x00011800A0000E40  RSL        
PIP_STAT0_PRT21                0x00011800A0000E90  RSL        
PIP_STAT0_PRT22                0x00011800A0000EE0  RSL        
PIP_STAT0_PRT23                0x00011800A0000F30  RSL        
PIP_STAT0_PRT24                0x00011800A0000F80  RSL        
PIP_STAT0_PRT25                0x00011800A0000FD0  RSL        
PIP_STAT0_PRT26                0x00011800A0001020  RSL        
PIP_STAT0_PRT27                0x00011800A0001070  RSL        
PIP_STAT0_PRT28                0x00011800A00010C0  RSL        
PIP_STAT0_PRT29                0x00011800A0001110  RSL        
PIP_STAT0_PRT30                0x00011800A0001160  RSL        
PIP_STAT0_PRT31                0x00011800A00011B0  RSL        
PIP_STAT0_PRT32                0x00011800A0001200  RSL        
PIP_STAT0_PRT33                0x00011800A0001250  RSL        
PIP_STAT0_PRT34                0x00011800A00012A0  RSL        
PIP_STAT0_PRT35                0x00011800A00012F0  RSL        
PIP_STAT1_PRT0                 0x00011800A0000808  RSL        
PIP_STAT1_PRT1                 0x00011800A0000858  RSL        
PIP_STAT1_PRT2                 0x00011800A00008A8  RSL        
PIP_STAT1_PRT3                 0x00011800A00008F8  RSL        
PIP_STAT1_PRT4                 0x00011800A0000948  RSL        
PIP_STAT1_PRT5                 0x00011800A0000998  RSL        
PIP_STAT1_PRT6                 0x00011800A00009E8  RSL        
PIP_STAT1_PRT7                 0x00011800A0000A38  RSL        
PIP_STAT1_PRT8                 0x00011800A0000A88  RSL        
PIP_STAT1_PRT9                 0x00011800A0000AD8  RSL        
PIP_STAT1_PRT10                0x00011800A0000B28  RSL        
PIP_STAT1_PRT11                0x00011800A0000B78  RSL        
PIP_STAT1_PRT12                0x00011800A0000BC8  RSL        
PIP_STAT1_PRT13                0x00011800A0000C18  RSL        
PIP_STAT1_PRT14                0x00011800A0000C68  RSL        
PIP_STAT1_PRT15                0x00011800A0000CB8  RSL        
PIP_STAT1_PRT16                0x00011800A0000D08  RSL        
PIP_STAT1_PRT17                0x00011800A0000D58  RSL        
PIP_STAT1_PRT18                0x00011800A0000DA8  RSL        
PIP_STAT1_PRT19                0x00011800A0000DF8  RSL        
PIP_STAT1_PRT20                0x00011800A0000E48  RSL        
PIP_STAT1_PRT21                0x00011800A0000E98  RSL        
PIP_STAT1_PRT22                0x00011800A0000EE8  RSL        
PIP_STAT1_PRT23                0x00011800A0000F38  RSL        
PIP_STAT1_PRT24                0x00011800A0000F88  RSL        
PIP_STAT1_PRT25                0x00011800A0000FD8  RSL        
PIP_STAT1_PRT26                0x00011800A0001028  RSL        
PIP_STAT1_PRT27                0x00011800A0001078  RSL        
PIP_STAT1_PRT28                0x00011800A00010C8  RSL        
PIP_STAT1_PRT29                0x00011800A0001118  RSL        
PIP_STAT1_PRT30                0x00011800A0001168  RSL        
PIP_STAT1_PRT31                0x00011800A00011B8  RSL        
PIP_STAT1_PRT32                0x00011800A0001208  RSL        
PIP_STAT1_PRT33                0x00011800A0001258  RSL        
PIP_STAT1_PRT34                0x00011800A00012A8  RSL        
PIP_STAT1_PRT35                0x00011800A00012F8  RSL        
PIP_STAT2_PRT0                 0x00011800A0000810  RSL        
PIP_STAT2_PRT1                 0x00011800A0000860  RSL        
PIP_STAT2_PRT2                 0x00011800A00008B0  RSL        
PIP_STAT2_PRT3                 0x00011800A0000900  RSL        
PIP_STAT2_PRT4                 0x00011800A0000950  RSL        
PIP_STAT2_PRT5                 0x00011800A00009A0  RSL        
PIP_STAT2_PRT6                 0x00011800A00009F0  RSL        
PIP_STAT2_PRT7                 0x00011800A0000A40  RSL        
PIP_STAT2_PRT8                 0x00011800A0000A90  RSL        
PIP_STAT2_PRT9                 0x00011800A0000AE0  RSL        
PIP_STAT2_PRT10                0x00011800A0000B30  RSL        
PIP_STAT2_PRT11                0x00011800A0000B80  RSL        
PIP_STAT2_PRT12                0x00011800A0000BD0  RSL        
PIP_STAT2_PRT13                0x00011800A0000C20  RSL        
PIP_STAT2_PRT14                0x00011800A0000C70  RSL        
PIP_STAT2_PRT15                0x00011800A0000CC0  RSL        
PIP_STAT2_PRT16                0x00011800A0000D10  RSL        
PIP_STAT2_PRT17                0x00011800A0000D60  RSL        
PIP_STAT2_PRT18                0x00011800A0000DB0  RSL        
PIP_STAT2_PRT19                0x00011800A0000E00  RSL        
PIP_STAT2_PRT20                0x00011800A0000E50  RSL        
PIP_STAT2_PRT21                0x00011800A0000EA0  RSL        
PIP_STAT2_PRT22                0x00011800A0000EF0  RSL        
PIP_STAT2_PRT23                0x00011800A0000F40  RSL        
PIP_STAT2_PRT24                0x00011800A0000F90  RSL        
PIP_STAT2_PRT25                0x00011800A0000FE0  RSL        
PIP_STAT2_PRT26                0x00011800A0001030  RSL        
PIP_STAT2_PRT27                0x00011800A0001080  RSL        
PIP_STAT2_PRT28                0x00011800A00010D0  RSL        
PIP_STAT2_PRT29                0x00011800A0001120  RSL        
PIP_STAT2_PRT30                0x00011800A0001170  RSL        
PIP_STAT2_PRT31                0x00011800A00011C0  RSL        
PIP_STAT2_PRT32                0x00011800A0001210  RSL        
PIP_STAT2_PRT33                0x00011800A0001260  RSL        
PIP_STAT2_PRT34                0x00011800A00012B0  RSL        
PIP_STAT2_PRT35                0x00011800A0001300  RSL        
PIP_STAT3_PRT0                 0x00011800A0000818  RSL        
PIP_STAT3_PRT1                 0x00011800A0000868  RSL        
PIP_STAT3_PRT2                 0x00011800A00008B8  RSL        
PIP_STAT3_PRT3                 0x00011800A0000908  RSL        
PIP_STAT3_PRT4                 0x00011800A0000958  RSL        
PIP_STAT3_PRT5                 0x00011800A00009A8  RSL        
PIP_STAT3_PRT6                 0x00011800A00009F8  RSL        
PIP_STAT3_PRT7                 0x00011800A0000A48  RSL        
PIP_STAT3_PRT8                 0x00011800A0000A98  RSL        
PIP_STAT3_PRT9                 0x00011800A0000AE8  RSL        
PIP_STAT3_PRT10                0x00011800A0000B38  RSL        
PIP_STAT3_PRT11                0x00011800A0000B88  RSL        
PIP_STAT3_PRT12                0x00011800A0000BD8  RSL        
PIP_STAT3_PRT13                0x00011800A0000C28  RSL        
PIP_STAT3_PRT14                0x00011800A0000C78  RSL        
PIP_STAT3_PRT15                0x00011800A0000CC8  RSL        
PIP_STAT3_PRT16                0x00011800A0000D18  RSL        
PIP_STAT3_PRT17                0x00011800A0000D68  RSL        
PIP_STAT3_PRT18                0x00011800A0000DB8  RSL        
PIP_STAT3_PRT19                0x00011800A0000E08  RSL        
PIP_STAT3_PRT20                0x00011800A0000E58  RSL        
PIP_STAT3_PRT21                0x00011800A0000EA8  RSL        
PIP_STAT3_PRT22                0x00011800A0000EF8  RSL        
PIP_STAT3_PRT23                0x00011800A0000F48  RSL        
PIP_STAT3_PRT24                0x00011800A0000F98  RSL        
PIP_STAT3_PRT25                0x00011800A0000FE8  RSL        
PIP_STAT3_PRT26                0x00011800A0001038  RSL        
PIP_STAT3_PRT27                0x00011800A0001088  RSL        
PIP_STAT3_PRT28                0x00011800A00010D8  RSL        
PIP_STAT3_PRT29                0x00011800A0001128  RSL        
PIP_STAT3_PRT30                0x00011800A0001178  RSL        
PIP_STAT3_PRT31                0x00011800A00011C8  RSL        
PIP_STAT3_PRT32                0x00011800A0001218  RSL        
PIP_STAT3_PRT33                0x00011800A0001268  RSL        
PIP_STAT3_PRT34                0x00011800A00012B8  RSL        
PIP_STAT3_PRT35                0x00011800A0001308  RSL        
PIP_STAT4_PRT0                 0x00011800A0000820  RSL        
PIP_STAT4_PRT1                 0x00011800A0000870  RSL        
PIP_STAT4_PRT2                 0x00011800A00008C0  RSL        
PIP_STAT4_PRT3                 0x00011800A0000910  RSL        
PIP_STAT4_PRT4                 0x00011800A0000960  RSL        
PIP_STAT4_PRT5                 0x00011800A00009B0  RSL        
PIP_STAT4_PRT6                 0x00011800A0000A00  RSL        
PIP_STAT4_PRT7                 0x00011800A0000A50  RSL        
PIP_STAT4_PRT8                 0x00011800A0000AA0  RSL        
PIP_STAT4_PRT9                 0x00011800A0000AF0  RSL        
PIP_STAT4_PRT10                0x00011800A0000B40  RSL        
PIP_STAT4_PRT11                0x00011800A0000B90  RSL        
PIP_STAT4_PRT12                0x00011800A0000BE0  RSL        
PIP_STAT4_PRT13                0x00011800A0000C30  RSL        
PIP_STAT4_PRT14                0x00011800A0000C80  RSL        
PIP_STAT4_PRT15                0x00011800A0000CD0  RSL        
PIP_STAT4_PRT16                0x00011800A0000D20  RSL        
PIP_STAT4_PRT17                0x00011800A0000D70  RSL        
PIP_STAT4_PRT18                0x00011800A0000DC0  RSL        
PIP_STAT4_PRT19                0x00011800A0000E10  RSL        
PIP_STAT4_PRT20                0x00011800A0000E60  RSL        
PIP_STAT4_PRT21                0x00011800A0000EB0  RSL        
PIP_STAT4_PRT22                0x00011800A0000F00  RSL        
PIP_STAT4_PRT23                0x00011800A0000F50  RSL        
PIP_STAT4_PRT24                0x00011800A0000FA0  RSL        
PIP_STAT4_PRT25                0x00011800A0000FF0  RSL        
PIP_STAT4_PRT26                0x00011800A0001040  RSL        
PIP_STAT4_PRT27                0x00011800A0001090  RSL        
PIP_STAT4_PRT28                0x00011800A00010E0  RSL        
PIP_STAT4_PRT29                0x00011800A0001130  RSL        
PIP_STAT4_PRT30                0x00011800A0001180  RSL        
PIP_STAT4_PRT31                0x00011800A00011D0  RSL        
PIP_STAT4_PRT32                0x00011800A0001220  RSL        
PIP_STAT4_PRT33                0x00011800A0001270  RSL        
PIP_STAT4_PRT34                0x00011800A00012C0  RSL        
PIP_STAT4_PRT35                0x00011800A0001310  RSL        
PIP_STAT5_PRT0                 0x00011800A0000828  RSL        
PIP_STAT5_PRT1                 0x00011800A0000878  RSL        
PIP_STAT5_PRT2                 0x00011800A00008C8  RSL        
PIP_STAT5_PRT3                 0x00011800A0000918  RSL        
PIP_STAT5_PRT4                 0x00011800A0000968  RSL        
PIP_STAT5_PRT5                 0x00011800A00009B8  RSL        
PIP_STAT5_PRT6                 0x00011800A0000A08  RSL        
PIP_STAT5_PRT7                 0x00011800A0000A58  RSL        
PIP_STAT5_PRT8                 0x00011800A0000AA8  RSL        
PIP_STAT5_PRT9                 0x00011800A0000AF8  RSL        
PIP_STAT5_PRT10                0x00011800A0000B48  RSL        
PIP_STAT5_PRT11                0x00011800A0000B98  RSL        
PIP_STAT5_PRT12                0x00011800A0000BE8  RSL        
PIP_STAT5_PRT13                0x00011800A0000C38  RSL        
PIP_STAT5_PRT14                0x00011800A0000C88  RSL        
PIP_STAT5_PRT15                0x00011800A0000CD8  RSL        
PIP_STAT5_PRT16                0x00011800A0000D28  RSL        
PIP_STAT5_PRT17                0x00011800A0000D78  RSL        
PIP_STAT5_PRT18                0x00011800A0000DC8  RSL        
PIP_STAT5_PRT19                0x00011800A0000E18  RSL        
PIP_STAT5_PRT20                0x00011800A0000E68  RSL        
PIP_STAT5_PRT21                0x00011800A0000EB8  RSL        
PIP_STAT5_PRT22                0x00011800A0000F08  RSL        
PIP_STAT5_PRT23                0x00011800A0000F58  RSL        
PIP_STAT5_PRT24                0x00011800A0000FA8  RSL        
PIP_STAT5_PRT25                0x00011800A0000FF8  RSL        
PIP_STAT5_PRT26                0x00011800A0001048  RSL        
PIP_STAT5_PRT27                0x00011800A0001098  RSL        
PIP_STAT5_PRT28                0x00011800A00010E8  RSL        
PIP_STAT5_PRT29                0x00011800A0001138  RSL        
PIP_STAT5_PRT30                0x00011800A0001188  RSL        
PIP_STAT5_PRT31                0x00011800A00011D8  RSL        
PIP_STAT5_PRT32                0x00011800A0001228  RSL        
PIP_STAT5_PRT33                0x00011800A0001278  RSL        
PIP_STAT5_PRT34                0x00011800A00012C8  RSL        
PIP_STAT5_PRT35                0x00011800A0001318  RSL        
PIP_STAT6_PRT0                 0x00011800A0000830  RSL        
PIP_STAT6_PRT1                 0x00011800A0000880  RSL        
PIP_STAT6_PRT2                 0x00011800A00008D0  RSL        
PIP_STAT6_PRT3                 0x00011800A0000920  RSL        
PIP_STAT6_PRT4                 0x00011800A0000970  RSL        
PIP_STAT6_PRT5                 0x00011800A00009C0  RSL        
PIP_STAT6_PRT6                 0x00011800A0000A10  RSL        
PIP_STAT6_PRT7                 0x00011800A0000A60  RSL        
PIP_STAT6_PRT8                 0x00011800A0000AB0  RSL        
PIP_STAT6_PRT9                 0x00011800A0000B00  RSL        
PIP_STAT6_PRT10                0x00011800A0000B50  RSL        
PIP_STAT6_PRT11                0x00011800A0000BA0  RSL        
PIP_STAT6_PRT12                0x00011800A0000BF0  RSL        
PIP_STAT6_PRT13                0x00011800A0000C40  RSL        
PIP_STAT6_PRT14                0x00011800A0000C90  RSL        
PIP_STAT6_PRT15                0x00011800A0000CE0  RSL        
PIP_STAT6_PRT16                0x00011800A0000D30  RSL        
PIP_STAT6_PRT17                0x00011800A0000D80  RSL        
PIP_STAT6_PRT18                0x00011800A0000DD0  RSL        
PIP_STAT6_PRT19                0x00011800A0000E20  RSL        
PIP_STAT6_PRT20                0x00011800A0000E70  RSL        
PIP_STAT6_PRT21                0x00011800A0000EC0  RSL        
PIP_STAT6_PRT22                0x00011800A0000F10  RSL        
PIP_STAT6_PRT23                0x00011800A0000F60  RSL        
PIP_STAT6_PRT24                0x00011800A0000FB0  RSL        
PIP_STAT6_PRT25                0x00011800A0001000  RSL        
PIP_STAT6_PRT26                0x00011800A0001050  RSL        
PIP_STAT6_PRT27                0x00011800A00010A0  RSL        
PIP_STAT6_PRT28                0x00011800A00010F0  RSL        
PIP_STAT6_PRT29                0x00011800A0001140  RSL        
PIP_STAT6_PRT30                0x00011800A0001190  RSL        
PIP_STAT6_PRT31                0x00011800A00011E0  RSL        
PIP_STAT6_PRT32                0x00011800A0001230  RSL        
PIP_STAT6_PRT33                0x00011800A0001280  RSL        
PIP_STAT6_PRT34                0x00011800A00012D0  RSL        
PIP_STAT6_PRT35                0x00011800A0001320  RSL        
PIP_STAT7_PRT0                 0x00011800A0000838  RSL        
PIP_STAT7_PRT1                 0x00011800A0000888  RSL        
PIP_STAT7_PRT2                 0x00011800A00008D8  RSL        
PIP_STAT7_PRT3                 0x00011800A0000928  RSL        
PIP_STAT7_PRT4                 0x00011800A0000978  RSL        
PIP_STAT7_PRT5                 0x00011800A00009C8  RSL        
PIP_STAT7_PRT6                 0x00011800A0000A18  RSL        
PIP_STAT7_PRT7                 0x00011800A0000A68  RSL        
PIP_STAT7_PRT8                 0x00011800A0000AB8  RSL        
PIP_STAT7_PRT9                 0x00011800A0000B08  RSL        
PIP_STAT7_PRT10                0x00011800A0000B58  RSL        
PIP_STAT7_PRT11                0x00011800A0000BA8  RSL        
PIP_STAT7_PRT12                0x00011800A0000BF8  RSL        
PIP_STAT7_PRT13                0x00011800A0000C48  RSL        
PIP_STAT7_PRT14                0x00011800A0000C98  RSL        
PIP_STAT7_PRT15                0x00011800A0000CE8  RSL        
PIP_STAT7_PRT16                0x00011800A0000D38  RSL        
PIP_STAT7_PRT17                0x00011800A0000D88  RSL        
PIP_STAT7_PRT18                0x00011800A0000DD8  RSL        
PIP_STAT7_PRT19                0x00011800A0000E28  RSL        
PIP_STAT7_PRT20                0x00011800A0000E78  RSL        
PIP_STAT7_PRT21                0x00011800A0000EC8  RSL        
PIP_STAT7_PRT22                0x00011800A0000F18  RSL        
PIP_STAT7_PRT23                0x00011800A0000F68  RSL        
PIP_STAT7_PRT24                0x00011800A0000FB8  RSL        
PIP_STAT7_PRT25                0x00011800A0001008  RSL        
PIP_STAT7_PRT26                0x00011800A0001058  RSL        
PIP_STAT7_PRT27                0x00011800A00010A8  RSL        
PIP_STAT7_PRT28                0x00011800A00010F8  RSL        
PIP_STAT7_PRT29                0x00011800A0001148  RSL        
PIP_STAT7_PRT30                0x00011800A0001198  RSL        
PIP_STAT7_PRT31                0x00011800A00011E8  RSL        
PIP_STAT7_PRT32                0x00011800A0001238  RSL        
PIP_STAT7_PRT33                0x00011800A0001288  RSL        
PIP_STAT7_PRT34                0x00011800A00012D8  RSL        
PIP_STAT7_PRT35                0x00011800A0001328  RSL        
PIP_STAT8_PRT0                 0x00011800A0000840  RSL        
PIP_STAT8_PRT1                 0x00011800A0000890  RSL        
PIP_STAT8_PRT2                 0x00011800A00008E0  RSL        
PIP_STAT8_PRT3                 0x00011800A0000930  RSL        
PIP_STAT8_PRT4                 0x00011800A0000980  RSL        
PIP_STAT8_PRT5                 0x00011800A00009D0  RSL        
PIP_STAT8_PRT6                 0x00011800A0000A20  RSL        
PIP_STAT8_PRT7                 0x00011800A0000A70  RSL        
PIP_STAT8_PRT8                 0x00011800A0000AC0  RSL        
PIP_STAT8_PRT9                 0x00011800A0000B10  RSL        
PIP_STAT8_PRT10                0x00011800A0000B60  RSL        
PIP_STAT8_PRT11                0x00011800A0000BB0  RSL        
PIP_STAT8_PRT12                0x00011800A0000C00  RSL        
PIP_STAT8_PRT13                0x00011800A0000C50  RSL        
PIP_STAT8_PRT14                0x00011800A0000CA0  RSL        
PIP_STAT8_PRT15                0x00011800A0000CF0  RSL        
PIP_STAT8_PRT16                0x00011800A0000D40  RSL        
PIP_STAT8_PRT17                0x00011800A0000D90  RSL        
PIP_STAT8_PRT18                0x00011800A0000DE0  RSL        
PIP_STAT8_PRT19                0x00011800A0000E30  RSL        
PIP_STAT8_PRT20                0x00011800A0000E80  RSL        
PIP_STAT8_PRT21                0x00011800A0000ED0  RSL        
PIP_STAT8_PRT22                0x00011800A0000F20  RSL        
PIP_STAT8_PRT23                0x00011800A0000F70  RSL        
PIP_STAT8_PRT24                0x00011800A0000FC0  RSL        
PIP_STAT8_PRT25                0x00011800A0001010  RSL        
PIP_STAT8_PRT26                0x00011800A0001060  RSL        
PIP_STAT8_PRT27                0x00011800A00010B0  RSL        
PIP_STAT8_PRT28                0x00011800A0001100  RSL        
PIP_STAT8_PRT29                0x00011800A0001150  RSL        
PIP_STAT8_PRT30                0x00011800A00011A0  RSL        
PIP_STAT8_PRT31                0x00011800A00011F0  RSL        
PIP_STAT8_PRT32                0x00011800A0001240  RSL        
PIP_STAT8_PRT33                0x00011800A0001290  RSL        
PIP_STAT8_PRT34                0x00011800A00012E0  RSL        
PIP_STAT8_PRT35                0x00011800A0001330  RSL        
PIP_STAT9_PRT0                 0x00011800A0000848  RSL        
PIP_STAT9_PRT1                 0x00011800A0000898  RSL        
PIP_STAT9_PRT2                 0x00011800A00008E8  RSL        
PIP_STAT9_PRT3                 0x00011800A0000938  RSL        
PIP_STAT9_PRT4                 0x00011800A0000988  RSL        
PIP_STAT9_PRT5                 0x00011800A00009D8  RSL        
PIP_STAT9_PRT6                 0x00011800A0000A28  RSL        
PIP_STAT9_PRT7                 0x00011800A0000A78  RSL        
PIP_STAT9_PRT8                 0x00011800A0000AC8  RSL        
PIP_STAT9_PRT9                 0x00011800A0000B18  RSL        
PIP_STAT9_PRT10                0x00011800A0000B68  RSL        
PIP_STAT9_PRT11                0x00011800A0000BB8  RSL        
PIP_STAT9_PRT12                0x00011800A0000C08  RSL        
PIP_STAT9_PRT13                0x00011800A0000C58  RSL        
PIP_STAT9_PRT14                0x00011800A0000CA8  RSL        
PIP_STAT9_PRT15                0x00011800A0000CF8  RSL        
PIP_STAT9_PRT16                0x00011800A0000D48  RSL        
PIP_STAT9_PRT17                0x00011800A0000D98  RSL        
PIP_STAT9_PRT18                0x00011800A0000DE8  RSL        
PIP_STAT9_PRT19                0x00011800A0000E38  RSL        
PIP_STAT9_PRT20                0x00011800A0000E88  RSL        
PIP_STAT9_PRT21                0x00011800A0000ED8  RSL        
PIP_STAT9_PRT22                0x00011800A0000F28  RSL        
PIP_STAT9_PRT23                0x00011800A0000F78  RSL        
PIP_STAT9_PRT24                0x00011800A0000FC8  RSL        
PIP_STAT9_PRT25                0x00011800A0001018  RSL        
PIP_STAT9_PRT26                0x00011800A0001068  RSL        
PIP_STAT9_PRT27                0x00011800A00010B8  RSL        
PIP_STAT9_PRT28                0x00011800A0001108  RSL        
PIP_STAT9_PRT29                0x00011800A0001158  RSL        
PIP_STAT9_PRT30                0x00011800A00011A8  RSL        
PIP_STAT9_PRT31                0x00011800A00011F8  RSL        
PIP_STAT9_PRT32                0x00011800A0001248  RSL        
PIP_STAT9_PRT33                0x00011800A0001298  RSL        
PIP_STAT9_PRT34                0x00011800A00012E8  RSL        
PIP_STAT9_PRT35                0x00011800A0001338  RSL        
PIP_STAT_CTL                   0x00011800A0000018  RSL        
PIP_STAT_INB_ERRS0             0x00011800A0001A10  RSL        
PIP_STAT_INB_ERRS1             0x00011800A0001A30  RSL        
PIP_STAT_INB_ERRS2             0x00011800A0001A50  RSL        
PIP_STAT_INB_ERRS3             0x00011800A0001A70  RSL        
PIP_STAT_INB_ERRS4             0x00011800A0001A90  RSL        
PIP_STAT_INB_ERRS5             0x00011800A0001AB0  RSL        
PIP_STAT_INB_ERRS6             0x00011800A0001AD0  RSL        
PIP_STAT_INB_ERRS7             0x00011800A0001AF0  RSL        
PIP_STAT_INB_ERRS8             0x00011800A0001B10  RSL        
PIP_STAT_INB_ERRS9             0x00011800A0001B30  RSL        
PIP_STAT_INB_ERRS10            0x00011800A0001B50  RSL        
PIP_STAT_INB_ERRS11            0x00011800A0001B70  RSL        
PIP_STAT_INB_ERRS12            0x00011800A0001B90  RSL        
PIP_STAT_INB_ERRS13            0x00011800A0001BB0  RSL        
PIP_STAT_INB_ERRS14            0x00011800A0001BD0  RSL        
PIP_STAT_INB_ERRS15            0x00011800A0001BF0  RSL        
PIP_STAT_INB_ERRS16            0x00011800A0001C10  RSL        
PIP_STAT_INB_ERRS17            0x00011800A0001C30  RSL        
PIP_STAT_INB_ERRS18            0x00011800A0001C50  RSL        
PIP_STAT_INB_ERRS19            0x00011800A0001C70  RSL        
PIP_STAT_INB_ERRS20            0x00011800A0001C90  RSL        
PIP_STAT_INB_ERRS21            0x00011800A0001CB0  RSL        
PIP_STAT_INB_ERRS22            0x00011800A0001CD0  RSL        
PIP_STAT_INB_ERRS23            0x00011800A0001CF0  RSL        
PIP_STAT_INB_ERRS24            0x00011800A0001D10  RSL        
PIP_STAT_INB_ERRS25            0x00011800A0001D30  RSL        
PIP_STAT_INB_ERRS26            0x00011800A0001D50  RSL        
PIP_STAT_INB_ERRS27            0x00011800A0001D70  RSL        
PIP_STAT_INB_ERRS28            0x00011800A0001D90  RSL        
PIP_STAT_INB_ERRS29            0x00011800A0001DB0  RSL        
PIP_STAT_INB_ERRS30            0x00011800A0001DD0  RSL        
PIP_STAT_INB_ERRS31            0x00011800A0001DF0  RSL        
PIP_STAT_INB_ERRS32            0x00011800A0001E10  RSL        
PIP_STAT_INB_ERRS33            0x00011800A0001E30  RSL        
PIP_STAT_INB_ERRS34            0x00011800A0001E50  RSL        
PIP_STAT_INB_ERRS35            0x00011800A0001E70  RSL        
PIP_STAT_INB_OCTS0             0x00011800A0001A08  RSL        
PIP_STAT_INB_OCTS1             0x00011800A0001A28  RSL        
PIP_STAT_INB_OCTS2             0x00011800A0001A48  RSL        
PIP_STAT_INB_OCTS3             0x00011800A0001A68  RSL        
PIP_STAT_INB_OCTS4             0x00011800A0001A88  RSL        
PIP_STAT_INB_OCTS5             0x00011800A0001AA8  RSL        
PIP_STAT_INB_OCTS6             0x00011800A0001AC8  RSL        
PIP_STAT_INB_OCTS7             0x00011800A0001AE8  RSL        
PIP_STAT_INB_OCTS8             0x00011800A0001B08  RSL        
PIP_STAT_INB_OCTS9             0x00011800A0001B28  RSL        
PIP_STAT_INB_OCTS10            0x00011800A0001B48  RSL        
PIP_STAT_INB_OCTS11            0x00011800A0001B68  RSL        
PIP_STAT_INB_OCTS12            0x00011800A0001B88  RSL        
PIP_STAT_INB_OCTS13            0x00011800A0001BA8  RSL        
PIP_STAT_INB_OCTS14            0x00011800A0001BC8  RSL        
PIP_STAT_INB_OCTS15            0x00011800A0001BE8  RSL        
PIP_STAT_INB_OCTS16            0x00011800A0001C08  RSL        
PIP_STAT_INB_OCTS17            0x00011800A0001C28  RSL        
PIP_STAT_INB_OCTS18            0x00011800A0001C48  RSL        
PIP_STAT_INB_OCTS19            0x00011800A0001C68  RSL        
PIP_STAT_INB_OCTS20            0x00011800A0001C88  RSL        
PIP_STAT_INB_OCTS21            0x00011800A0001CA8  RSL        
PIP_STAT_INB_OCTS22            0x00011800A0001CC8  RSL        
PIP_STAT_INB_OCTS23            0x00011800A0001CE8  RSL        
PIP_STAT_INB_OCTS24            0x00011800A0001D08  RSL        
PIP_STAT_INB_OCTS25            0x00011800A0001D28  RSL        
PIP_STAT_INB_OCTS26            0x00011800A0001D48  RSL        
PIP_STAT_INB_OCTS27            0x00011800A0001D68  RSL        
PIP_STAT_INB_OCTS28            0x00011800A0001D88  RSL        
PIP_STAT_INB_OCTS29            0x00011800A0001DA8  RSL        
PIP_STAT_INB_OCTS30            0x00011800A0001DC8  RSL        
PIP_STAT_INB_OCTS31            0x00011800A0001DE8  RSL        
PIP_STAT_INB_OCTS32            0x00011800A0001E08  RSL        
PIP_STAT_INB_OCTS33            0x00011800A0001E28  RSL        
PIP_STAT_INB_OCTS34            0x00011800A0001E48  RSL        
PIP_STAT_INB_OCTS35            0x00011800A0001E68  RSL        
PIP_STAT_INB_PKTS0             0x00011800A0001A00  RSL        
PIP_STAT_INB_PKTS1             0x00011800A0001A20  RSL        
PIP_STAT_INB_PKTS2             0x00011800A0001A40  RSL        
PIP_STAT_INB_PKTS3             0x00011800A0001A60  RSL        
PIP_STAT_INB_PKTS4             0x00011800A0001A80  RSL        
PIP_STAT_INB_PKTS5             0x00011800A0001AA0  RSL        
PIP_STAT_INB_PKTS6             0x00011800A0001AC0  RSL        
PIP_STAT_INB_PKTS7             0x00011800A0001AE0  RSL        
PIP_STAT_INB_PKTS8             0x00011800A0001B00  RSL        
PIP_STAT_INB_PKTS9             0x00011800A0001B20  RSL        
PIP_STAT_INB_PKTS10            0x00011800A0001B40  RSL        
PIP_STAT_INB_PKTS11            0x00011800A0001B60  RSL        
PIP_STAT_INB_PKTS12            0x00011800A0001B80  RSL        
PIP_STAT_INB_PKTS13            0x00011800A0001BA0  RSL        
PIP_STAT_INB_PKTS14            0x00011800A0001BC0  RSL        
PIP_STAT_INB_PKTS15            0x00011800A0001BE0  RSL        
PIP_STAT_INB_PKTS16            0x00011800A0001C00  RSL        
PIP_STAT_INB_PKTS17            0x00011800A0001C20  RSL        
PIP_STAT_INB_PKTS18            0x00011800A0001C40  RSL        
PIP_STAT_INB_PKTS19            0x00011800A0001C60  RSL        
PIP_STAT_INB_PKTS20            0x00011800A0001C80  RSL        
PIP_STAT_INB_PKTS21            0x00011800A0001CA0  RSL        
PIP_STAT_INB_PKTS22            0x00011800A0001CC0  RSL        
PIP_STAT_INB_PKTS23            0x00011800A0001CE0  RSL        
PIP_STAT_INB_PKTS24            0x00011800A0001D00  RSL        
PIP_STAT_INB_PKTS25            0x00011800A0001D20  RSL        
PIP_STAT_INB_PKTS26            0x00011800A0001D40  RSL        
PIP_STAT_INB_PKTS27            0x00011800A0001D60  RSL        
PIP_STAT_INB_PKTS28            0x00011800A0001D80  RSL        
PIP_STAT_INB_PKTS29            0x00011800A0001DA0  RSL        
PIP_STAT_INB_PKTS30            0x00011800A0001DC0  RSL        
PIP_STAT_INB_PKTS31            0x00011800A0001DE0  RSL        
PIP_STAT_INB_PKTS32            0x00011800A0001E00  RSL        
PIP_STAT_INB_PKTS33            0x00011800A0001E20  RSL        
PIP_STAT_INB_PKTS34            0x00011800A0001E40  RSL        
PIP_STAT_INB_PKTS35            0x00011800A0001E60  RSL        
PIP_TAG_INC0                   0x00011800A0001800  RSL        
PIP_TAG_INC1                   0x00011800A0001808  RSL        
PIP_TAG_INC2                   0x00011800A0001810  RSL        
PIP_TAG_INC3                   0x00011800A0001818  RSL        
PIP_TAG_INC4                   0x00011800A0001820  RSL        
PIP_TAG_INC5                   0x00011800A0001828  RSL        
PIP_TAG_INC6                   0x00011800A0001830  RSL        
PIP_TAG_INC7                   0x00011800A0001838  RSL        
PIP_TAG_INC8                   0x00011800A0001840  RSL        
PIP_TAG_INC9                   0x00011800A0001848  RSL        
PIP_TAG_INC10                  0x00011800A0001850  RSL        
PIP_TAG_INC11                  0x00011800A0001858  RSL        
PIP_TAG_INC12                  0x00011800A0001860  RSL        
PIP_TAG_INC13                  0x00011800A0001868  RSL        
PIP_TAG_INC14                  0x00011800A0001870  RSL        
PIP_TAG_INC15                  0x00011800A0001878  RSL        
PIP_TAG_INC16                  0x00011800A0001880  RSL        
PIP_TAG_INC17                  0x00011800A0001888  RSL        
PIP_TAG_INC18                  0x00011800A0001890  RSL        
PIP_TAG_INC19                  0x00011800A0001898  RSL        
PIP_TAG_INC20                  0x00011800A00018A0  RSL        
PIP_TAG_INC21                  0x00011800A00018A8  RSL        
PIP_TAG_INC22                  0x00011800A00018B0  RSL        
PIP_TAG_INC23                  0x00011800A00018B8  RSL        
PIP_TAG_INC24                  0x00011800A00018C0  RSL        
PIP_TAG_INC25                  0x00011800A00018C8  RSL        
PIP_TAG_INC26                  0x00011800A00018D0  RSL        
PIP_TAG_INC27                  0x00011800A00018D8  RSL        
PIP_TAG_INC28                  0x00011800A00018E0  RSL        
PIP_TAG_INC29                  0x00011800A00018E8  RSL        
PIP_TAG_INC30                  0x00011800A00018F0  RSL        
PIP_TAG_INC31                  0x00011800A00018F8  RSL        
PIP_TAG_INC32                  0x00011800A0001900  RSL        
PIP_TAG_INC33                  0x00011800A0001908  RSL        
PIP_TAG_INC34                  0x00011800A0001910  RSL        
PIP_TAG_INC35                  0x00011800A0001918  RSL        
PIP_TAG_INC36                  0x00011800A0001920  RSL        
PIP_TAG_INC37                  0x00011800A0001928  RSL        
PIP_TAG_INC38                  0x00011800A0001930  RSL        
PIP_TAG_INC39                  0x00011800A0001938  RSL        
PIP_TAG_INC40                  0x00011800A0001940  RSL        
PIP_TAG_INC41                  0x00011800A0001948  RSL        
PIP_TAG_INC42                  0x00011800A0001950  RSL        
PIP_TAG_INC43                  0x00011800A0001958  RSL        
PIP_TAG_INC44                  0x00011800A0001960  RSL        
PIP_TAG_INC45                  0x00011800A0001968  RSL        
PIP_TAG_INC46                  0x00011800A0001970  RSL        
PIP_TAG_INC47                  0x00011800A0001978  RSL        
PIP_TAG_INC48                  0x00011800A0001980  RSL        
PIP_TAG_INC49                  0x00011800A0001988  RSL        
PIP_TAG_INC50                  0x00011800A0001990  RSL        
PIP_TAG_INC51                  0x00011800A0001998  RSL        
PIP_TAG_INC52                  0x00011800A00019A0  RSL        
PIP_TAG_INC53                  0x00011800A00019A8  RSL        
PIP_TAG_INC54                  0x00011800A00019B0  RSL        
PIP_TAG_INC55                  0x00011800A00019B8  RSL        
PIP_TAG_INC56                  0x00011800A00019C0  RSL        
PIP_TAG_INC57                  0x00011800A00019C8  RSL        
PIP_TAG_INC58                  0x00011800A00019D0  RSL        
PIP_TAG_INC59                  0x00011800A00019D8  RSL        
PIP_TAG_INC60                  0x00011800A00019E0  RSL        
PIP_TAG_INC61                  0x00011800A00019E8  RSL        
PIP_TAG_INC62                  0x00011800A00019F0  RSL        
PIP_TAG_INC63                  0x00011800A00019F8  RSL        
PIP_TAG_MASK                   0x00011800A0000070  RSL        
PIP_TAG_SECRET                 0x00011800A0000068  RSL        
PIP_TODO_ENTRY                 0x00011800A0000078  RSL        
PKO_MEM_COUNT0                 0x0001180050001080  RSL        
PKO_MEM_COUNT1                 0x0001180050001088  RSL        
PKO_MEM_DEBUG0                 0x0001180050001100  RSL        
PKO_MEM_DEBUG1                 0x0001180050001108  RSL        
PKO_MEM_DEBUG10                0x0001180050001150  RSL        
PKO_MEM_DEBUG11                0x0001180050001158  RSL        
PKO_MEM_DEBUG12                0x0001180050001160  RSL        
PKO_MEM_DEBUG13                0x0001180050001168  RSL        
PKO_MEM_DEBUG2                 0x0001180050001110  RSL        
PKO_MEM_DEBUG3                 0x0001180050001118  RSL        
PKO_MEM_DEBUG4                 0x0001180050001120  RSL        
PKO_MEM_DEBUG5                 0x0001180050001128  RSL        
PKO_MEM_DEBUG6                 0x0001180050001130  RSL        
PKO_MEM_DEBUG7                 0x0001180050001138  RSL        
PKO_MEM_DEBUG8                 0x0001180050001140  RSL        
PKO_MEM_DEBUG9                 0x0001180050001148  RSL        
PKO_MEM_QUEUE_PTRS             0x0001180050001000  RSL        
PKO_MEM_QUEUE_QOS              0x0001180050001008  RSL        
PKO_REG_BIST_RESULT            0x0001180050000080  RSL        
PKO_REG_CMD_BUF                0x0001180050000010  RSL        
PKO_REG_CRC_CTL0               0x0001180050000028  RSL        
PKO_REG_CRC_CTL1               0x0001180050000030  RSL        
PKO_REG_CRC_ENABLE             0x0001180050000020  RSL        
PKO_REG_CRC_IV0                0x0001180050000038  RSL        
PKO_REG_CRC_IV1                0x0001180050000040  RSL        
PKO_REG_DEBUG0                 0x0001180050000098  RSL        
PKO_REG_DEBUG1                 0x00011800500000A0  RSL        
PKO_REG_DEBUG2                 0x00011800500000A8  RSL        
PKO_REG_DEBUG3                 0x00011800500000B0  RSL        
PKO_REG_ERROR                  0x0001180050000088  RSL        
PKO_REG_FLAGS                  0x0001180050000000  RSL        
PKO_REG_GMX_PORT_MODE          0x0001180050000018  RSL        
PKO_REG_INT_MASK               0x0001180050000090  RSL        
PKO_REG_QUEUE_MODE             0x0001180050000048  RSL        
PKO_REG_QUEUE_PTRS1            0x0001180050000100  RSL        
PKO_REG_READ_IDX               0x0001180050000008  RSL        
POW_BIST_STAT                  0x00016700000003F8  NCB        
POW_DS_PC                      0x0001670000000398  NCB        
POW_ECC_ERR                    0x0001670000000218  NCB        
POW_INT_CTL                    0x0001670000000220  NCB        
POW_IQ_CNT0                    0x0001670000000340  NCB        
POW_IQ_CNT1                    0x0001670000000348  NCB        
POW_IQ_CNT2                    0x0001670000000350  NCB        
POW_IQ_CNT3                    0x0001670000000358  NCB        
POW_IQ_CNT4                    0x0001670000000360  NCB        
POW_IQ_CNT5                    0x0001670000000368  NCB        
POW_IQ_CNT6                    0x0001670000000370  NCB        
POW_IQ_CNT7                    0x0001670000000378  NCB        
POW_IQ_COM_CNT                 0x0001670000000388  NCB        
POW_NOS_CNT                    0x0001670000000228  NCB        
POW_NW_TIM                     0x0001670000000210  NCB        
POW_PF_RST_MSK                 0x0001670000000230  NCB        
POW_PP_GRP_MSK0                0x0001670000000000  NCB        
POW_PP_GRP_MSK1                0x0001670000000008  NCB        
POW_PP_GRP_MSK2                0x0001670000000010  NCB        
POW_PP_GRP_MSK3                0x0001670000000018  NCB        
POW_PP_GRP_MSK4                0x0001670000000020  NCB        
POW_PP_GRP_MSK5                0x0001670000000028  NCB        
POW_PP_GRP_MSK6                0x0001670000000030  NCB        
POW_PP_GRP_MSK7                0x0001670000000038  NCB        
POW_PP_GRP_MSK8                0x0001670000000040  NCB        
POW_PP_GRP_MSK9                0x0001670000000048  NCB        
POW_PP_GRP_MSK10               0x0001670000000050  NCB        
POW_PP_GRP_MSK11               0x0001670000000058  NCB        
POW_PP_GRP_MSK12               0x0001670000000060  NCB        
POW_PP_GRP_MSK13               0x0001670000000068  NCB        
POW_PP_GRP_MSK14               0x0001670000000070  NCB        
POW_PP_GRP_MSK15               0x0001670000000078  NCB        
POW_QOS_RND0                   0x00016700000001C0  NCB        
POW_QOS_RND1                   0x00016700000001C8  NCB        
POW_QOS_RND2                   0x00016700000001D0  NCB        
POW_QOS_RND3                   0x00016700000001D8  NCB        
POW_QOS_RND4                   0x00016700000001E0  NCB        
POW_QOS_RND5                   0x00016700000001E8  NCB        
POW_QOS_RND6                   0x00016700000001F0  NCB        
POW_QOS_RND7                   0x00016700000001F8  NCB        
POW_QOS_THR0                   0x0001670000000180  NCB        
POW_QOS_THR1                   0x0001670000000188  NCB        
POW_QOS_THR2                   0x0001670000000190  NCB        
POW_QOS_THR3                   0x0001670000000198  NCB        
POW_QOS_THR4                   0x00016700000001A0  NCB        
POW_QOS_THR5                   0x00016700000001A8  NCB        
POW_QOS_THR6                   0x00016700000001B0  NCB        
POW_QOS_THR7                   0x00016700000001B8  NCB        
POW_TS_PC                      0x0001670000000390  NCB        
POW_WA_COM_PC                  0x0001670000000380  NCB        
POW_WA_PC0                     0x0001670000000300  NCB        
POW_WA_PC1                     0x0001670000000308  NCB        
POW_WA_PC2                     0x0001670000000310  NCB        
POW_WA_PC3                     0x0001670000000318  NCB        
POW_WA_PC4                     0x0001670000000320  NCB        
POW_WA_PC5                     0x0001670000000328  NCB        
POW_WA_PC6                     0x0001670000000330  NCB        
POW_WA_PC7                     0x0001670000000338  NCB        
POW_WQ_INT                     0x0001670000000200  NCB        
POW_WQ_INT_CNT0                0x0001670000000100  NCB        
POW_WQ_INT_CNT1                0x0001670000000108  NCB        
POW_WQ_INT_CNT2                0x0001670000000110  NCB        
POW_WQ_INT_CNT3                0x0001670000000118  NCB        
POW_WQ_INT_CNT4                0x0001670000000120  NCB        
POW_WQ_INT_CNT5                0x0001670000000128  NCB        
POW_WQ_INT_CNT6                0x0001670000000130  NCB        
POW_WQ_INT_CNT7                0x0001670000000138  NCB        
POW_WQ_INT_CNT8                0x0001670000000140  NCB        
POW_WQ_INT_CNT9                0x0001670000000148  NCB        
POW_WQ_INT_CNT10               0x0001670000000150  NCB        
POW_WQ_INT_CNT11               0x0001670000000158  NCB        
POW_WQ_INT_CNT12               0x0001670000000160  NCB        
POW_WQ_INT_CNT13               0x0001670000000168  NCB        
POW_WQ_INT_CNT14               0x0001670000000170  NCB        
POW_WQ_INT_CNT15               0x0001670000000178  NCB        
POW_WQ_INT_PC                  0x0001670000000208  NCB        
POW_WQ_INT_THR0                0x0001670000000080  NCB        
POW_WQ_INT_THR1                0x0001670000000088  NCB        
POW_WQ_INT_THR2                0x0001670000000090  NCB        
POW_WQ_INT_THR3                0x0001670000000098  NCB        
POW_WQ_INT_THR4                0x00016700000000A0  NCB        
POW_WQ_INT_THR5                0x00016700000000A8  NCB        
POW_WQ_INT_THR6                0x00016700000000B0  NCB        
POW_WQ_INT_THR7                0x00016700000000B8  NCB        
POW_WQ_INT_THR8                0x00016700000000C0  NCB        
POW_WQ_INT_THR9                0x00016700000000C8  NCB        
POW_WQ_INT_THR10               0x00016700000000D0  NCB        
POW_WQ_INT_THR11               0x00016700000000D8  NCB        
POW_WQ_INT_THR12               0x00016700000000E0  NCB        
POW_WQ_INT_THR13               0x00016700000000E8  NCB        
POW_WQ_INT_THR14               0x00016700000000F0  NCB        
POW_WQ_INT_THR15               0x00016700000000F8  NCB        
POW_WS_PC0                     0x0001670000000280  NCB        
POW_WS_PC1                     0x0001670000000288  NCB        
POW_WS_PC2                     0x0001670000000290  NCB        
POW_WS_PC3                     0x0001670000000298  NCB        
POW_WS_PC4                     0x00016700000002A0  NCB        
POW_WS_PC5                     0x00016700000002A8  NCB        
POW_WS_PC6                     0x00016700000002B0  NCB        
POW_WS_PC7                     0x00016700000002B8  NCB        
POW_WS_PC8                     0x00016700000002C0  NCB        
POW_WS_PC9                     0x00016700000002C8  NCB        
POW_WS_PC10                    0x00016700000002D0  NCB        
POW_WS_PC11                    0x00016700000002D8  NCB        
POW_WS_PC12                    0x00016700000002E0  NCB        
POW_WS_PC13                    0x00016700000002E8  NCB        
POW_WS_PC14                    0x00016700000002F0  NCB        
POW_WS_PC15                    0x00016700000002F8  NCB        
RNM_BIST_STATUS                0x0001180040000008  RSL        
RNM_CTL_STATUS                 0x0001180040000000  RSL        
SMI_CLK                        0x0001180000001818  RSL        
SMI_CMD                        0x0001180000001800  RSL        
SMI_EN                         0x0001180000001820  RSL        
SMI_RD_DAT                     0x0001180000001810  RSL        
SMI_WR_DAT                     0x0001180000001808  RSL        
SPX0_BCKPRS_CNT                0x0001180090000340  RSL        
SPX0_BIST_STAT                 0x00011800900007F8  RSL        
SPX0_CLK_CTL                   0x0001180090000348  RSL        
SPX0_CLK_STAT                  0x0001180090000350  RSL        
SPX0_DBG_DESKEW_CTL            0x0001180090000368  RSL        
SPX0_DBG_DESKEW_STATE          0x0001180090000370  RSL        
SPX0_DRV_CTL                   0x0001180090000358  RSL        
SPX0_ERR_CTL                   0x0001180090000320  RSL        
SPX0_INT_DAT                   0x0001180090000318  RSL        
SPX0_INT_MSK                   0x0001180090000308  RSL        
SPX0_INT_REG                   0x0001180090000300  RSL        
SPX0_INT_SYNC                  0x0001180090000310  RSL        
SPX0_TPA_ACC                   0x0001180090000338  RSL        
SPX0_TPA_MAX                   0x0001180090000330  RSL        
SPX0_TPA_SEL                   0x0001180090000328  RSL        
SPX0_TRN4_CTL                  0x0001180090000360  RSL        
SPX1_BCKPRS_CNT                0x0001180098000340  RSL        
SPX1_BIST_STAT                 0x00011800980007F8  RSL        
SPX1_CLK_CTL                   0x0001180098000348  RSL        
SPX1_CLK_STAT                  0x0001180098000350  RSL        
SPX1_DBG_DESKEW_CTL            0x0001180098000368  RSL        
SPX1_DBG_DESKEW_STATE          0x0001180098000370  RSL        
SPX1_DRV_CTL                   0x0001180098000358  RSL        
SPX1_ERR_CTL                   0x0001180098000320  RSL        
SPX1_INT_DAT                   0x0001180098000318  RSL        
SPX1_INT_MSK                   0x0001180098000308  RSL        
SPX1_INT_REG                   0x0001180098000300  RSL        
SPX1_INT_SYNC                  0x0001180098000310  RSL        
SPX1_TPA_ACC                   0x0001180098000338  RSL        
SPX1_TPA_MAX                   0x0001180098000330  RSL        
SPX1_TPA_SEL                   0x0001180098000328  RSL        
SPX1_TRN4_CTL                  0x0001180098000360  RSL        
SRX0_COM_CTL                   0x0001180090000200  RSL        
SRX0_IGN_RX_FULL               0x0001180090000218  RSL        
SRX0_SPI4_CAL000               0x0001180090000000  RSL        
SRX0_SPI4_CAL001               0x0001180090000008  RSL        
SRX0_SPI4_CAL002               0x0001180090000010  RSL        
SRX0_SPI4_CAL003               0x0001180090000018  RSL        
SRX0_SPI4_CAL004               0x0001180090000020  RSL        
SRX0_SPI4_CAL005               0x0001180090000028  RSL        
SRX0_SPI4_CAL006               0x0001180090000030  RSL        
SRX0_SPI4_CAL007               0x0001180090000038  RSL        
SRX0_SPI4_CAL008               0x0001180090000040  RSL        
SRX0_SPI4_CAL009               0x0001180090000048  RSL        
SRX0_SPI4_CAL010               0x0001180090000050  RSL        
SRX0_SPI4_CAL011               0x0001180090000058  RSL        
SRX0_SPI4_CAL012               0x0001180090000060  RSL        
SRX0_SPI4_CAL013               0x0001180090000068  RSL        
SRX0_SPI4_CAL014               0x0001180090000070  RSL        
SRX0_SPI4_CAL015               0x0001180090000078  RSL        
SRX0_SPI4_CAL016               0x0001180090000080  RSL        
SRX0_SPI4_CAL017               0x0001180090000088  RSL        
SRX0_SPI4_CAL018               0x0001180090000090  RSL        
SRX0_SPI4_CAL019               0x0001180090000098  RSL        
SRX0_SPI4_CAL020               0x00011800900000A0  RSL        
SRX0_SPI4_CAL021               0x00011800900000A8  RSL        
SRX0_SPI4_CAL022               0x00011800900000B0  RSL        
SRX0_SPI4_CAL023               0x00011800900000B8  RSL        
SRX0_SPI4_CAL024               0x00011800900000C0  RSL        
SRX0_SPI4_CAL025               0x00011800900000C8  RSL        
SRX0_SPI4_CAL026               0x00011800900000D0  RSL        
SRX0_SPI4_CAL027               0x00011800900000D8  RSL        
SRX0_SPI4_CAL028               0x00011800900000E0  RSL        
SRX0_SPI4_CAL029               0x00011800900000E8  RSL        
SRX0_SPI4_CAL030               0x00011800900000F0  RSL        
SRX0_SPI4_CAL031               0x00011800900000F8  RSL        
SRX0_SPI4_STAT                 0x0001180090000208  RSL        
SRX0_SW_TICK_CTL               0x0001180090000220  RSL        
SRX0_SW_TICK_DAT               0x0001180090000228  RSL        
SRX1_COM_CTL                   0x0001180098000200  RSL        
SRX1_IGN_RX_FULL               0x0001180098000218  RSL        
SRX1_SPI4_CAL000               0x0001180098000000  RSL        
SRX1_SPI4_CAL001               0x0001180098000008  RSL        
SRX1_SPI4_CAL002               0x0001180098000010  RSL        
SRX1_SPI4_CAL003               0x0001180098000018  RSL        
SRX1_SPI4_CAL004               0x0001180098000020  RSL        
SRX1_SPI4_CAL005               0x0001180098000028  RSL        
SRX1_SPI4_CAL006               0x0001180098000030  RSL        
SRX1_SPI4_CAL007               0x0001180098000038  RSL        
SRX1_SPI4_CAL008               0x0001180098000040  RSL        
SRX1_SPI4_CAL009               0x0001180098000048  RSL        
SRX1_SPI4_CAL010               0x0001180098000050  RSL        
SRX1_SPI4_CAL011               0x0001180098000058  RSL        
SRX1_SPI4_CAL012               0x0001180098000060  RSL        
SRX1_SPI4_CAL013               0x0001180098000068  RSL        
SRX1_SPI4_CAL014               0x0001180098000070  RSL        
SRX1_SPI4_CAL015               0x0001180098000078  RSL        
SRX1_SPI4_CAL016               0x0001180098000080  RSL        
SRX1_SPI4_CAL017               0x0001180098000088  RSL        
SRX1_SPI4_CAL018               0x0001180098000090  RSL        
SRX1_SPI4_CAL019               0x0001180098000098  RSL        
SRX1_SPI4_CAL020               0x00011800980000A0  RSL        
SRX1_SPI4_CAL021               0x00011800980000A8  RSL        
SRX1_SPI4_CAL022               0x00011800980000B0  RSL        
SRX1_SPI4_CAL023               0x00011800980000B8  RSL        
SRX1_SPI4_CAL024               0x00011800980000C0  RSL        
SRX1_SPI4_CAL025               0x00011800980000C8  RSL        
SRX1_SPI4_CAL026               0x00011800980000D0  RSL        
SRX1_SPI4_CAL027               0x00011800980000D8  RSL        
SRX1_SPI4_CAL028               0x00011800980000E0  RSL        
SRX1_SPI4_CAL029               0x00011800980000E8  RSL        
SRX1_SPI4_CAL030               0x00011800980000F0  RSL        
SRX1_SPI4_CAL031               0x00011800980000F8  RSL        
SRX1_SPI4_STAT                 0x0001180098000208  RSL        
SRX1_SW_TICK_CTL               0x0001180098000220  RSL        
SRX1_SW_TICK_DAT               0x0001180098000228  RSL        
STX0_ARB_CTL                   0x0001180090000608  RSL        
STX0_BCKPRS_CNT                0x0001180090000688  RSL        
STX0_COM_CTL                   0x0001180090000600  RSL        
STX0_DIP_CNT                   0x0001180090000690  RSL        
STX0_IGN_CAL                   0x0001180090000610  RSL        
STX0_INT_MSK                   0x00011800900006A0  RSL        
STX0_INT_REG                   0x0001180090000698  RSL        
STX0_INT_SYNC                  0x00011800900006A8  RSL        
STX0_MIN_BST                   0x0001180090000618  RSL        
STX0_SPI4_CAL000               0x0001180090000400  RSL        
STX0_SPI4_CAL001               0x0001180090000408  RSL        
STX0_SPI4_CAL002               0x0001180090000410  RSL        
STX0_SPI4_CAL003               0x0001180090000418  RSL        
STX0_SPI4_CAL004               0x0001180090000420  RSL        
STX0_SPI4_CAL005               0x0001180090000428  RSL        
STX0_SPI4_CAL006               0x0001180090000430  RSL        
STX0_SPI4_CAL007               0x0001180090000438  RSL        
STX0_SPI4_CAL008               0x0001180090000440  RSL        
STX0_SPI4_CAL009               0x0001180090000448  RSL        
STX0_SPI4_CAL010               0x0001180090000450  RSL        
STX0_SPI4_CAL011               0x0001180090000458  RSL        
STX0_SPI4_CAL012               0x0001180090000460  RSL        
STX0_SPI4_CAL013               0x0001180090000468  RSL        
STX0_SPI4_CAL014               0x0001180090000470  RSL        
STX0_SPI4_CAL015               0x0001180090000478  RSL        
STX0_SPI4_CAL016               0x0001180090000480  RSL        
STX0_SPI4_CAL017               0x0001180090000488  RSL        
STX0_SPI4_CAL018               0x0001180090000490  RSL        
STX0_SPI4_CAL019               0x0001180090000498  RSL        
STX0_SPI4_CAL020               0x00011800900004A0  RSL        
STX0_SPI4_CAL021               0x00011800900004A8  RSL        
STX0_SPI4_CAL022               0x00011800900004B0  RSL        
STX0_SPI4_CAL023               0x00011800900004B8  RSL        
STX0_SPI4_CAL024               0x00011800900004C0  RSL        
STX0_SPI4_CAL025               0x00011800900004C8  RSL        
STX0_SPI4_CAL026               0x00011800900004D0  RSL        
STX0_SPI4_CAL027               0x00011800900004D8  RSL        
STX0_SPI4_CAL028               0x00011800900004E0  RSL        
STX0_SPI4_CAL029               0x00011800900004E8  RSL        
STX0_SPI4_CAL030               0x00011800900004F0  RSL        
STX0_SPI4_CAL031               0x00011800900004F8  RSL        
STX0_SPI4_DAT                  0x0001180090000628  RSL        
STX0_SPI4_STAT                 0x0001180090000630  RSL        
STX0_STAT_BYTES_HI             0x0001180090000648  RSL        
STX0_STAT_BYTES_LO             0x0001180090000680  RSL        
STX0_STAT_CTL                  0x0001180090000638  RSL        
STX0_STAT_PKT_XMT              0x0001180090000640  RSL        
STX1_ARB_CTL                   0x0001180098000608  RSL        
STX1_BCKPRS_CNT                0x0001180098000688  RSL        
STX1_COM_CTL                   0x0001180098000600  RSL        
STX1_DIP_CNT                   0x0001180098000690  RSL        
STX1_IGN_CAL                   0x0001180098000610  RSL        
STX1_INT_MSK                   0x00011800980006A0  RSL        
STX1_INT_REG                   0x0001180098000698  RSL        
STX1_INT_SYNC                  0x00011800980006A8  RSL        
STX1_MIN_BST                   0x0001180098000618  RSL        
STX1_SPI4_CAL000               0x0001180098000400  RSL        
STX1_SPI4_CAL001               0x0001180098000408  RSL        
STX1_SPI4_CAL002               0x0001180098000410  RSL        
STX1_SPI4_CAL003               0x0001180098000418  RSL        
STX1_SPI4_CAL004               0x0001180098000420  RSL        
STX1_SPI4_CAL005               0x0001180098000428  RSL        
STX1_SPI4_CAL006               0x0001180098000430  RSL        
STX1_SPI4_CAL007               0x0001180098000438  RSL        
STX1_SPI4_CAL008               0x0001180098000440  RSL        
STX1_SPI4_CAL009               0x0001180098000448  RSL        
STX1_SPI4_CAL010               0x0001180098000450  RSL        
STX1_SPI4_CAL011               0x0001180098000458  RSL        
STX1_SPI4_CAL012               0x0001180098000460  RSL        
STX1_SPI4_CAL013               0x0001180098000468  RSL        
STX1_SPI4_CAL014               0x0001180098000470  RSL        
STX1_SPI4_CAL015               0x0001180098000478  RSL        
STX1_SPI4_CAL016               0x0001180098000480  RSL        
STX1_SPI4_CAL017               0x0001180098000488  RSL        
STX1_SPI4_CAL018               0x0001180098000490  RSL        
STX1_SPI4_CAL019               0x0001180098000498  RSL        
STX1_SPI4_CAL020               0x00011800980004A0  RSL        
STX1_SPI4_CAL021               0x00011800980004A8  RSL        
STX1_SPI4_CAL022               0x00011800980004B0  RSL        
STX1_SPI4_CAL023               0x00011800980004B8  RSL        
STX1_SPI4_CAL024               0x00011800980004C0  RSL        
STX1_SPI4_CAL025               0x00011800980004C8  RSL        
STX1_SPI4_CAL026               0x00011800980004D0  RSL        
STX1_SPI4_CAL027               0x00011800980004D8  RSL        
STX1_SPI4_CAL028               0x00011800980004E0  RSL        
STX1_SPI4_CAL029               0x00011800980004E8  RSL        
STX1_SPI4_CAL030               0x00011800980004F0  RSL        
STX1_SPI4_CAL031               0x00011800980004F8  RSL        
STX1_SPI4_DAT                  0x0001180098000628  RSL        
STX1_SPI4_STAT                 0x0001180098000630  RSL        
STX1_STAT_BYTES_HI             0x0001180098000648  RSL        
STX1_STAT_BYTES_LO             0x0001180098000680  RSL        
STX1_STAT_CTL                  0x0001180098000638  RSL        
STX1_STAT_PKT_XMT              0x0001180098000640  RSL        
TIM_MEM_DEBUG0                 0x0001180058001100  RSL        
TIM_MEM_DEBUG1                 0x0001180058001108  RSL        
TIM_MEM_DEBUG2                 0x0001180058001110  RSL        
TIM_MEM_RING0                  0x0001180058001000  RSL        
TIM_MEM_RING1                  0x0001180058001008  RSL        
TIM_REG_BIST_RESULT            0x0001180058000080  RSL        
TIM_REG_ERROR                  0x0001180058000088  RSL        
TIM_REG_FLAGS                  0x0001180058000000  RSL        
TIM_REG_INT_MASK               0x0001180058000090  RSL        
TIM_REG_READ_IDX               0x0001180058000008  RSL        
TRA0_BIST_STATUS                0x00011800A8000010  RSL        
TRA0_CTL                        0x00011800A8000000  RSL        
TRA0_CYCLES_SINCE               0x00011800A8000018  RSL        
TRA0_CYCLES_SINCE1              0x00011800A8000028  RSL        
TRA0_FILT_ADR_ADR               0x00011800A8000058  RSL        
TRA0_FILT_ADR_MSK               0x00011800A8000060  RSL        
TRA0_FILT_CMD                   0x00011800A8000040  RSL        
TRA0_FILT_DID                   0x00011800A8000050  RSL        
TRA0_FILT_SID                   0x00011800A8000048  RSL        
TRA0_INT_STATUS                 0x00011800A8000008  RSL        
TRA0_READ_DAT                   0x00011800A8000020  RSL        
TRA0_TRIG0_ADR_ADR              0x00011800A8000098  RSL        
TRA0_TRIG0_ADR_MSK              0x00011800A80000A0  RSL        
TRA0_TRIG0_CMD                  0x00011800A8000080  RSL        
TRA0_TRIG0_DID                  0x00011800A8000090  RSL        
TRA0_TRIG0_SID                  0x00011800A8000088  RSL        
TRA0_TRIG1_ADR_ADR              0x00011800A80000D8  RSL        
TRA0_TRIG1_ADR_MSK              0x00011800A80000E0  RSL        
TRA0_TRIG1_CMD                  0x00011800A80000C0  RSL        
TRA0_TRIG1_DID                  0x00011800A80000D0  RSL        
TRA0_TRIG1_SID                  0x00011800A80000C8  RSL        
ZIP_CMD_BIST_RESULT            0x0001180038000080  RSL        
ZIP_CMD_BUF                    0x0001180038000008  RSL        
ZIP_CMD_CTL                    0x0001180038000000  RSL        
ZIP_CONSTANTS                  0x00011800380000A0  RSL        
ZIP_DEBUG0                     0x0001180038000098  RSL        
ZIP_ERROR                      0x0001180038000088  RSL        
ZIP_INT_MASK                   0x0001180038000090  RSL        
