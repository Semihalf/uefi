# -*- csr3 -*-
# You must run "csr3 rtl" after editing this file!
---
name: MIX
enums:
  - name: MIX_INTSN_E
    attributes:
      width: "20"
    description: Enumerates the different generated interrupts.
    values:
      - name: MIX(0..1)_ODBLOVF
        value: 20'h10000 + a*0x10
        attributes:
          cib_rtl_module: "mix"
          intsn_lsb_mismatch: "True"
        description: MIX ODBLOVF interrupt; see MIX(0..1)_ISR[ODBLOVF].

      - name: MIX(0..1)_IDBLOVF
        value: 20'h10001 + a*0x10
        attributes:
          cib_rtl_module: "mix"
          intsn_lsb_mismatch: "True"
        description: MIX IDBLOVF interrupt; see MIX(0..1)_ISR[IDBLOVF].

      - name: MIX(0..1)_ORTHRESH
        value: 20'h10002 + a*0x10
        attributes:
          cib_rtl_module: "mix"
          intsn_lsb_mismatch: "True"
        description: MIX ORTHRESH interrupt; see MIX(0..1)_ISR[ORTHRESH].

      - name: MIX(0..1)_IRTHRESH
        value: 20'h10003 + a*0x10
        attributes:
          cib_rtl_module: "mix"
          intsn_lsb_mismatch: "True"
        description: MIX IRTHRESH interrupt; see MIX(0..1)_ISR[IRTHRESH].

      - name: MIX(0..1)_DATA_DRP
        value: 20'h10004 + a*0x10
        attributes:
          cib_rtl_module: "mix"
          intsn_lsb_mismatch: "True"
        description: MIX DATA_DRP interrupt; see MIX(0..1)_ISR[DATA_DRP].

      - name: MIX(0..1)_IRUN
        value: 20'h10005 + a*0x10
        attributes:
          cib_rtl_module: "mix"
          intsn_lsb_mismatch: "True"
        description: MIX IRUN interrupt; see MIX(0..1)_ISR[IRUN].

      - name: MIX(0..1)_ORUN
        value: 20'h10006 + a*0x10
        attributes:
          cib_rtl_module: "mix"
          intsn_lsb_mismatch: "True"
        description: MIX ORUN interrupt; see MIX(0..1)_ISR[ORUN].

      - name: MIX(0..1)_TS
        value: 20'h10007 + a*0x10
        attributes:
          cib_rtl_module: "mix"
          intsn_lsb_mismatch: "True"
        description: MIX TS interrupt; see MIX(0..1)_ISR[TS].


registers:
  - name: MIX(0..1)_ORING1
    title: "MIX Outbound Ring Register #1"
    address: 0x1070000100000 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To write to the MIX_ORING1 register, a device would issue an IOBST directed at the MIO.
      To read the MIX_ORING1 register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: OSIZE
        bits: 63..44
        access: R/W
        reset: 0x0
        typical: --
        description: |
          Represents the Outbound Ring Buffer's Size(in 8B
          words). The ring can be as large as 1M entries.
          NOTE: This CSR MUST BE setup written by SW poweron
          (when ODBELL/ORCNT=0).

      - name: --
        bits: 43..42
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: OBASE
        bits: 41..3
        access: R/W
        reset: 0x0
        typical: --
        description: |
          Represents the 8B-aligned base address of the first
          Outbound Ring(O-Ring) Entry in system memory.
          NOTE: SW MUST ONLY write to this register during
          power-on/boot code.

      - name: --
        bits: 2..0
        access: ---
        reset: --
        typical: --
        description: Reserved.


  - name: MIX(0..1)_ORING2
    title: "MIX Outbound Ring Register #2"
    address: 0x1070000100008 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To write to the MIX_ORING2 register, a device would issue an IOBST directed at the MIO.
      To read the MIX_ORING2 register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: --
        bits: 63..52
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: OTLPTR
        bits: 51..32
        access: RO/H
        reset: 0x0
        typical: --
        description: |
          The Outbound Ring Tail Pointer selects the O-Ring
          Entry that the HW will process next. After the HW
          completes sending an outbound packet, it increments
          the O-Ring Tail Pointer. [NOTE: The O-Ring Tail
          Pointer HW increment is always modulo
          MIX_ORING2[OSIZE].
          NOTE: This field is 'read-only' to SW.

      - name: --
        bits: 31..20
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: ODBELL
        bits: 19..0
        access: R/W/H
        reset: 0x0
        typical: --
        description: |
          Represents the cumulative total of pending
          Outbound Ring(O-Ring) Buffer Entries. Each O-Ring
          Buffer Entry contains 1) an L2/DRAM byte pointer
          along with a 2) a Byte Length.
          After SW inserts new entries into the O-Ring Buffer,
          it "rings the doorbell with the count of the newly
          inserted entries". When the MIX HW receives the
          doorbell ring, it increments the current doorbell
          count by the CSR write value.

          SW must never cause the doorbell count for the
          O-Ring to exceed the size of the ring(OSIZE).
          A read of the CSR indicates the current doorbell
          count.


  - name: MIX(0..1)_IRING1
    title: "MIX Inbound Ring Register #1"
    address: 0x1070000100010 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To write to the MIX_IRING1 register, a device would issue an IOBST directed at the MIO.
      To read the MIX_IRING1 register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: ISIZE
        bits: 63..44
        access: R/W
        reset: 0x0
        typical: --
        description: |
          Represents the Inbound Ring Buffer's Size(in 8B
          words). The ring can be as large as 1M entries.
          NOTE: This CSR MUST BE setup written by SW poweron
          (when IDBELL/IRCNT=0).

      - name: --
        bits: 43..42
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: IBASE
        bits: 41..3
        access: R/W
        reset: 0x0
        typical: --
        description: |
          Represents the 8B-aligned base address of the first
          Inbound Ring entry in system memory.
          NOTE: SW MUST ONLY write to this register during
          power-on/boot code.

      - name: --
        bits: 2..0
        access: ---
        reset: --
        typical: --
        description: Reserved.


  - name: MIX(0..1)_IRING2
    title: "MIX Inbound Ring Register #2"
    address: 0x1070000100018 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To write to the MIX_IRING2 register, a device would issue an IOBST directed at the MIO.
      To read the MIX_IRING2 register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: --
        bits: 63..52
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: ITLPTR
        bits: 51..32
        access: RO/H
        reset: 0x0
        typical: --
        description: |
          The Inbound Ring Tail Pointer selects the I-Ring
          Entry that the HW will process next. After the HW
          completes receiving an inbound packet, it increments
          the I-Ring Tail Pointer. [NOTE: The I-Ring Tail
          Pointer HW increment is always modulo ISIZE.
          NOTE: This field is 'read-only' to SW.

      - name: --
        bits: 31..20
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: IDBELL
        bits: 19..0
        access: R/W/H
        reset: 0x0
        typical: --
        description: |
          Represents the cumulative total of pending
          Inbound Ring Buffer Entries. Each I-Ring
          Buffer Entry contains 1) an L2/DRAM byte pointer
          along with a 2) a Byte Length.
          After SW inserts a new entry into the I-Ring Buffer,
          it "rings the doorbell for the inbound ring". When
          the MIX HW receives the doorbell ring, it advances
          the doorbell count for the I-Ring.

          SW must never cause the doorbell count for the
          I-Ring to exceed the size of the I-ring(ISIZE).
          A read of the CSR indicates the current doorbell
          count.


  - name: MIX(0..1)_CTL
    title: MIX Control Register
    address: 0x1070000100020 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To write to the MIX_CTL register, a device would issue an IOBST directed at the MIO.
      To read the MIX_CTL register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: --
        bits: 63..12
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: TS_THRESH
        bits: 11..8
        access: R/W
        reset: 0x0
        typical: 0x0
        description: |
          "TimeStamp Interrupt Threshold
          When the #of pending Timestamp interrupts (MIX_TSCTL[TSCNT]
          is greater than MIX_CTL[TS_THRESH], then a programmable
          TimeStamp Interrupt is issued (see MIX_INTR[TS]
          MIX_INTENA[TSENA]).
          SWNOTE: For o63, since the implementation only supports
          4 oustanding timestamp interrupts, this field should
          only be programmed from [0..3]."

      - name: CRC_STRIP
        bits: 7
        access: R/W
        reset: 0
        typical: 0
        description: |
          HW CRC Strip Enable
          When enabled, the last 4 bytes(CRC) of the ingress packet
          are not included in cumulative packet byte length.
          In other words, the cumulative LEN field for all
          I-Ring Buffer Entries associated with a given ingress
          packet will be 4 bytes less (so that the final 4B HW CRC
          packet data is not processed by software).

      - name: BUSY
        bits: 6
        access: RO/H
        reset: 0
        typical: 0
        description: |
          MIX Busy Status bit
          MIX will assert busy status any time there are:
          1) L2/DRAM reads in-flight (NCB-arb to read
          response)
          2) L2/DRAM writes in-flight (NCB-arb to write
          data is sent.
          3) L2/DRAM write commits in-flight (NCB-arb to write
          commit response).
          NOTE: After MIX_CTL[EN]=0, the MIX will eventually
          complete any "inflight" transactions, at which point the
          BUSY will de-assert.

      - name: EN
        bits: 5
        access: R/W/H
        reset: 0
        typical: 0
        description: |
          MIX Enable bit
          When EN=0, MIX will no longer arbitrate for
          any new L2/DRAM read/write requests on the NCB Bus.
          MIX will complete any requests that are currently
          pended for the NCB Bus.

      - name: RESET
        bits: 4
        access: R/W
        reset: 1
        typical: 0
        description: |
          MIX Soft Reset
          When SW writes a '1' to MIX_CTL[RESET], the
          MII-MIX/AGL logic will execute a soft reset.
          NOTE: During a soft reset, CSR accesses are not effected.
          However, the values of the CSR fields will be effected by
          soft reset (except MIX_CTL[RESET] itself).
          NOTE: After power-on, the MII-AGL/MIX are held in reset
          until the MIX_CTL[RESET] is written to zero. SW MUST also
          perform a MIX_CTL CSR read after this write to ensure the
          soft reset de-assertion has had sufficient time to propagate
          to all MIO-MIX internal logic before any subsequent MIX CSR
          accesses are issued.
          The intended "soft reset" sequence is: (please also
          refer to HRM Section 12.6.2 on MIX/AGL Block Reset).
          1) Write MIX_CTL[EN]=0
          [To prevent any NEW transactions from being started]
          2) Wait for MIX_CTL[BUSY]=0
          [To indicate that all inflight transactions have
          completed]
          3) Write MIX_CTL[RESET]=1, followed by a MIX_CTL CSR read
          and wait for the result.
          4) Re-Initialize the MIX/AGL just as would be done
          for a hard reset.
          NOTE: Once the MII has been soft-reset, please refer to HRM Section
          12.6.1 MIX/AGL BringUp Sequence to complete the MIX/AGL
          re-initialization sequence.

      - name: LENDIAN
        bits: 3
        access: R/W
        reset: 0
        typical: 0
        description: |
          Packet Little Endian Mode
          (0: Big Endian Mode/1: Little Endian Mode)
          When the mode is set, MIX will byte-swap packet data
          loads/stores at the MIX/NCB boundary.

      - name: NBTARB
        bits: 2
        access: R/W
        reset: 0
        typical: 0
        description: |
          MIX CB-Request Arbitration Mode.
          When set to zero, the arbiter is fixed priority with
          the following priority scheme:
          Highest Priority: I-Ring Packet Write Request
          O-Ring Packet Read Request
          I-Ring Entry Write Request
          I-Ring Entry Read Request
          O-Ring Entry Read Request
          When set to one, the arbiter is round robin.

      - name: MRQ_HWM
        bits: 1..0
        access: R/W
        reset: 0x0
        typical: 0x1
        description: |
          MIX CB-Request FIFO Programmable High Water Mark.
          The MRQ contains 16 CB-Requests which are CSR Rd/Wr
          Requests. If the MRQ backs up with "HWM" entries,
          then new CB-Requests are 'stalled'.
          [0]: HWM = 11
          [1]: HWM = 10
          [2]: HWM = 9
          [3]: HWM = 8
          NOTE: This must only be written at power-on/boot time.


  - name: MIX(0..1)_IRHWM
    title: MIX I-Ring High-Water Mark Threshold Register
    address: 0x1070000100028 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To write to the MIX_IHWM register, a device would issue an IOBST directed at the MIO.
      To read the MIX_IHWM register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: --
        bits: 63..40
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: IBPLWM
        bits: 39..20
        access: R/W
        reset: 0x0
        typical: 0x0
        description: |
          "I-Ring BackPressure Low Water Mark Threshold.
          When the #of available I-Ring Entries (IDBELL)
          is less than IBPLWM, the AGL-MAC will:
          a) In full-duplex mode: send periodic PAUSE packets.
          b) In half-duplex mode: Force collisions.
          This programmable mechanism is provided as a means
          to backpressure input traffic 'early' enough (so
          that packets are not 'dropped' by OCTEON)."

      - name: IRHWM
        bits: 19..0
        access: R/W
        reset: 0x0
        typical: 0x0
        description: |
          "I-Ring Entry High Water Mark Threshold.
          Used to determine when the # of Inbound packets
          in system memory(MIX_IRCNT[IRCNT]) exceeds this IRHWM
          threshold.
          NOTE: The power-on value of the CIU2_EN_xx_yy_PKT[MII]
          interrupt enable bits is zero and must be enabled
          to allow interrupts to be reported."


  - name: MIX(0..1)_IRCNT
    title: MIX I-Ring Pending Packet Counter
    address: 0x1070000100030 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To write to the MIX_IRCNT register, a device would issue an IOBST directed at the MIO.
      To read the MIX_IRCNT register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: --
        bits: 63..20
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: IRCNT
        bits: 19..0
        access: R/W/H
        reset: 0x0
        typical: 0x0
        description: |
          "Pending # of I-Ring Packets.
          Whenever HW writes a completion code of Done, Trunc,
          CRCErr or Err, it increments the IRCNT (to indicate
          to SW the # of pending Input packets in system memory).
          NOTE: The HW guarantees that the completion code write
          is always visible in system memory BEFORE it increments
          the IRCNT.
          Reads of IRCNT return the current inbound packet count.
          Writes of IRCNT decrement the count by the value
          written.
          This register is used to generate interrupts to alert
          SW of pending inbound MIX packets in system memory.
          NOTE: In the case of inbound packets that span multiple
          I-Ring entries, SW must keep track of the # of I-Ring Entries
          associated with a given inbound packet to reclaim the
          proper # of I-Ring Entries for re-use."


  - name: MIX(0..1)_ORHWM
    title: MIX O-Ring High-Water Mark Threshold Register
    address: 0x1070000100038 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To write to the MIX_ORHWM register, a device would issue an IOBST directed at the MIO.
      To read the MIX_ORHWM register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: --
        bits: 63..20
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: ORHWM
        bits: 19..0
        access: R/W
        reset: 0x0
        typical: 0x0
        description: |
          "O-Ring Entry High Water Mark Threshold.
          Used to determine when the # of Outbound packets
          in system memory that can be reclaimed
          (MIX_ORCNT[ORCNT]) exceeds this ORHWM threshold.
          NOTE: The power-on value of the CIU2_EN_xx_yy_PKT[MII]
          interrupt enable bits is zero and must be enabled
          to allow interrupts to be reported."


  - name: MIX(0..1)_ORCNT
    title: MIX O-Ring Packets Sent Counter
    address: 0x1070000100040 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To write to the MIX_ORCNT register, a device would issue an IOBST directed at the MIO.
      To read the MIX_ORCNT register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: --
        bits: 63..20
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: ORCNT
        bits: 19..0
        access: R/W/H
        reset: 0x0
        typical: 0x0
        description: |
          "Pending # of O-Ring Packets.
          Whenever HW removes a packet from the O-Ring, it
          increments the ORCNT (to indicate to SW the # of
          Output packets in system memory that can be reclaimed).
          Reads of ORCNT return the current count.
          Writes of ORCNT decrement the count by the value
          written.
          This register is used to generate interrupts to alert
          SW of pending outbound MIX packets that have been
          removed from system memory. (see MIX_ISR[ORTHRESH]
          description for more details).
          NOTE: For outbound packets, the # of O-Ring Packets
          is equal to the # of O-Ring Entries."


  - name: MIX(0..1)_ISR
    title: MIX Interrupt/Status Register
    address: 0x1070000100048 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To write to the MIX_ISR register, a device would issue an IOBST directed at the MIO.
      To read the MIX_ISR register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: --
        bits: 63..8
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: TS
        bits: 7
        access: RO/H
        reset: 0
        typical: 0
        description: |
          "TimeStamp Interrupt
          When the #of pending Timestamp Interrupts (MIX_TSCTL[TSCNT])
          is greater than the TimeStamp Interrupt Threshold
          (MIX_CTL[TS_THRESH]) value this interrupt bit is set.
          If this bit and corresponding global interrupt mask bits (CIU3_ISC*_CTL)
          are set, an interrupt is reported for an Outbound Ring with Timestamp
          event"

      - name: ORUN
        bits: 6
        access: R/W1C/H
        reset: 0
        typical: 0
        description: |
          ORCNT UnderFlow Detected
          If SW writes a larger value than what is currently
          in the MIX_ORCNT[ORCNT], then HW will report the
          underflow condition.
          If this bit and corresponding global interrupt mask bits (CIU3_ISC*_CTL)
          are set, an interrupt is reported for this event.
          NOTE: The MIX_ORCNT[IOCNT] will clamp to to zero.
          NOTE: If an ORUN underflow condition is detected,
          the integrity of the MIX/AGL HW state has
          been compromised. To recover, SW must issue a
          software reset sequence (see: MIX_CTL[RESET])

      - name: IRUN
        bits: 5
        access: R/W1C/H
        reset: 0
        typical: 0
        description: |
          IRCNT UnderFlow Detected
          If SW writes a larger value than what is currently
          in the MIX_IRCNT[IRCNT], then HW will report the
          underflow condition.
          NOTE: The MIX_IRCNT[IRCNT] will clamp to to zero.
          NOTE: If an IRUN underflow condition is detected,
          the integrity of the MIX/AGL HW state has
          been compromised. To recover, SW must issue a
          software reset sequence (see: MIX_CTL[RESET]
          If this bit and corresponding global interrupt mask bits (CIU3_ISC*_CTL)
          are set, an interrupt is reported for this event.

      - name: DATA_DRP
        bits: 4
        access: R/W1C/H
        reset: 0
        typical: 0
        description: |
          Data was dropped due to RX FIFO full.
          If this bit and corresponding global interrupt mask bits (CIU3_ISC*_CTL)
          are set, an interrupt is reported for this event.

      - name: IRTHRESH
        bits: 3
        access: RO/H
        reset: 0
        typical: 0
        description: |
          ""Inbound Ring Packet Threshold Exceeded
          When the pending #inbound packets in system
          memory(IRCNT) has exceeded a programmable threshold
          (IRHWM), then this bit is set.
          If this bit and corresponding global interrupt mask bits (CIU3_ISC*_CTL)
          are set, an interrupt is reported for this event."

      - name: ORTHRESH
        bits: 2
        access: RO/H
        reset: 0
        typical: 0
        description: |
          ""Outbound Ring Packet Threshold Exceeded
          When the pending #outbound packets in system
          memory(ORCNT) has exceeded a programmable threshold
          (ORHWM), then this bit is set.
          If this bit and corresponding global interrupt mask bits (CIU3_ISC*_CTL)
          are set, an interrupt is reported for this event."

      - name: IDBLOVF
        bits: 1
        access: R/W1C/H
        reset: 0
        typical: 0
        description: |
          "Inbound DoorBell(IDBELL) Overflow Detected
          If SW attempts to write to the MIX_IRING2[IDBELL]
          with a value greater than the remaining #of
          I-Ring Buffer Entries (MIX_REMCNT[IREMCNT]), then
          the following occurs:
          1) The  MIX_IRING2[IDBELL] write is IGNORED
          2) If both ODBLOVF and global interrupt mask bits (CIU3_ISC*_CTL)
          are set, an interrupt is reported for this event.
          SW should keep track of the #I-Ring Entries in use
          (ie: cumulative # of IDBELL writes),  and ensure that
          future IDBELL writes don't exceed the size of the
          I-Ring Buffer (MIX_IRING2[ISIZE]).
          SW must reclaim I-Ring Entries by keeping track of the
          #IRing-Entries, and writing to the MIX_IRCNT[IRCNT].
          NOTE: The MIX_IRCNT[IRCNT] register represents the
          total #packets(not IRing Entries) and SW must further
          keep track of the # of I-Ring Entries associated with
          each packet as they are processed.
          NOTE: There is no recovery from an IDBLOVF Interrupt.
          If it occurs, it's an indication that SW has
          overwritten the I-Ring buffer, and the only recourse
          is a HW reset."

      - name: ODBLOVF
        bits: 0
        access: R/W1C/H
        reset: 0
        typical: 0
        description: |
          "Outbound DoorBell(ODBELL) Overflow Detected
          If SW attempts to write to the MIX_ORING2[ODBELL]
          with a value greater than the remaining #of
          O-Ring Buffer Entries (MIX_REMCNT[OREMCNT]), then
          the following occurs:
          1) The  MIX_ORING2[ODBELL] write is IGNORED
          2) If both ODBLOVF and global interrupt mask bits (CIU3_ISC*_CTL)
          are set, an interrupt is reported for this event.
          SW should keep track of the #I-Ring Entries in use
          (ie: cumulative # of ODBELL writes),  and ensure that
          future ODBELL writes don't exceed the size of the
          O-Ring Buffer (MIX_ORING2[OSIZE]).
          SW must reclaim O-Ring Entries by writing to the
          MIX_ORCNT[ORCNT]. .
          NOTE: There is no recovery from an ODBLOVF Interrupt.
          If it occurs, it's an indication that SW has
          overwritten the O-Ring buffer, and the only recourse
          is a HW reset."


  - name: MIX(0..1)_REMCNT
    title: MIX Ring Buffer Remainder Counts (useful for HW debug only)
    address: 0x1070000100058 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To read the MIX_REMCNT register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: --
        bits: 63..52
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: IREMCNT
        bits: 51..32
        access: RO/H
        reset: 0x0
        typical: 0x0
        description: |
          "Remaining I-Ring Buffer Count
          Reflects the # of unused/remaining I-Ring Entries
          that HW  currently detects in the I-Ring Buffer.
          HW uses this value to detect I-Ring Doorbell overflows.
          (see: MIX_ISR[IDBLOVF])
          When SW writes the MIX_IRING1[ISIZE], the IREMCNT
          is loaded with MIX_IRING2[ISIZE] value. (NOTE: ISIZE should only
          be written at power-on, when it's known that there are
          no I-Ring Entries currently in use by HW).
          When SW writes to the IDBELL register, the IREMCNT
          is decremented by the CSR write value.
          When HW issues an IRing Write Request(onto NCB Bus),
          the IREMCNT is incremented by 1."

      - name: --
        bits: 31..20
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: OREMCNT
        bits: 19..0
        access: RO/H
        reset: 0x0
        typical: 0x0
        description: |
          "Remaining O-Ring Buffer Count
          Reflects the # of unused/remaining O-Ring Entries
          that HW  currently detects in the O-Ring Buffer.
          HW uses this value to detect O-Ring Doorbell overflows.
          (see: MIX_ISR[ODBLOVF])
          When SW writes the MIX_IRING1[OSIZE], the OREMCNT
          is loaded with MIX_ORING2[OSIZE] value. (NOTE: OSIZE should only
          be written at power-on, when it's known that there are
          no O-Ring Entries currently in use by HW).
          When SW writes to the ODBELL register, the OREMCNT
          is decremented by the CSR write value.
          When SW writes to MIX_[OREMCNT], the OREMCNT is decremented
          by the CSR write value."


  - name: MIX(0..1)_TSTAMP
    title: MIX TimeStamp Register
    address: 0x1070000100060 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To read the MIX_TSTAMP register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: TSTAMP
        bits: 63..0
        access: RO/H
        reset: 0x0
        typical: 0x0
        description: |
          "MIX TimeStamp Value
          When SW sets up an ORING Entry with [47]=1(TSTAMP),
          The packet is tagged with a specal SOP w/TSTAMP flag
          as it is sent to the AGL.
          Later the AGL will send "sample" strobe(s) to capture
          a global 64bit timestamp value followed by a "commit"
          strobe which writes the last sampled value into the
          outbound Timestamp fifo (max depth=4) and increments
          the MIX_TSCTL[TSCNT] register to indicate the total
          #of pending Timestamp interrupts.

          If the #pending Timestamp interrupts (MIX_TSCTL[TSCNT])
          is greater than the MIX_CTL[TS_THRESH] value, then
          a programmable interrupt is also triggered (see:
          MIX_ISR[TS] MIX_INTENA[TSENA]).
          SW will then read the MIX*_TSTAMP[TSTAMP]
          register value, and MUST THEN write the MIX_TSCTL
          register, which will decrement MIX_TSCTL[TSCNT] register,
          to indicate that a single timestamp interrupt has
          been serviced.
          NOTE: The MIO-MIX HW tracks upto MAX=4 outstanding
          timestamped outbound packets at a time. All subsequent
          ORING Entries w/SOP-TSTAMP will be stalled until
          SW can service the 4 outstanding interrupts.
          SW can read the MIX_TSCTL register to determine the
          #pending timestamp interrupts(TSCNT) as well as the
          #outstanding timestamp requests in flight(TSTOT), as
          well as the #of available timestamp entries (TSAVL).
          SW NOTE: A MIX_TSTAMP read when MIX_TSCTL[TSCNT]=0, will
          result in a return value of all zeroes. SW should only
          read this register when MIX_ISR[TS]=1 (or when
          MIX_TSCTL[TSCNT] != 0) to retrieve the timestamp value
          recorded by HW. If SW reads the TSTAMP when HW has not
          recorded a valid timestamp, then an  all zeroes value is
          returned."


  - name: MIX(0..1)_TSCTL
    title: MIX TimeStamp Control Register
    address: 0x1070000100068 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To read the MIX_TSCTL register, a device would issue an IOBLD64 directed at the MIO.
    internal: |
      "SW can read the MIX_TSCTL register to determine the #pending timestamp interrupts(TSCNT)
      as well as the #outstanding timestamp requests in flight(TSTOT), as well as the #of available
      timestamp entries (TSAVL) in the timestamp fifo.
      A write to the MIX_TSCTL register will advance the MIX*_TSTAMP fifo head ptr by 1, and
      also decrements the MIX*_TSCTL[TSCNT] and MIX*_TSCTL[TSTOT] pending count(s) by 1.
      For example, if SW reads MIX*_TSCTL[TSCNT]=2 (2 pending timestamp interrupts), it would
      immediately
      issue this sequence:
      1) MIX*_TSTAMP[TSTAMP] read followed by MIX*_TSCTL write
      [gets timestamp value/pops timestamp fifo and decrements pending count(s) by 1]
      2) MIX*_TSTAMP[TSTAMP] read followed by MIX*_TSCTL write
      [gets timestamp value/pops timestamp fifo and decrements pending count(s) by 1]
      SWNOTE: A MIX_TSCTL write when MIX_TSCTL[TSCNT]=0 (ie: TimeStamp Fifo empty), then the write
      is ignored."
    fields:
      - name: --
        bits: 63..24
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: --
        bits: 23..21
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: TSAVL
        bits: 20..16
        access: RO/H
        reset: 0x4
        typical: 0x4
        description: |
          "# of MIX TimeStamp Entries Available for use
          For o63: TSAVL MAX=4 (implementation
          depth of timestamp fifo)
          TSAVL = [IMPLEMENTATION_DEPTH=4(MAX) - TSCNT]"

      - name: --
        bits: 15..13
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: TSTOT
        bits: 12..8
        access: RO/H
        reset: 0x0
        typical: 0x0
        description: |
          "# of pending MIX TimeStamp Requests in-flight
          For o63: TSTOT must never exceed MAX=4 (implementation
          depth of timestamp fifo)"

      - name: --
        bits: 7..5
        access: ---
        reset: --
        typical: --
        description: Reserved.

      - name: TSCNT
        bits: 4..0
        access: RO/H
        reset: 0x0
        typical: 0x0
        description: |
          "# of pending MIX TimeStamp Interrupts
          For o63: TSCNT must never exceed MAX=4 (implementation
          depth of timestamp fifo)"


  - name: MIX(0..1)_BIST
    title: MIX BIST Register
    address: 0x1070000100078 + a*0x800
    bus: NCB
    description: |
      Description:
      NOTE: To read the MIX_BIST register, a device would issue an IOBLD64 directed at the MIO.
    fields:
      - name: --
        bits: 63..6
        access: ---
        reset: 0x0
        typical: 0x0
        description: Reserved.

      - name: OPFDAT
        bits: 5
        access: RO
        reset: 0
        typical: 0
        description: |
          Bist Results for AGO OPF Buffer RAM
          0: GOOD (or bist in progress/never run)
          1: BAD

      - name: MRGDAT
        bits: 4
        access: RO
        reset: 0
        typical: 0
        description: |
          Bist Results for AGI MRG Buffer RAM
          0: GOOD (or bist in progress/never run)
          1: BAD

      - name: MRQDAT
        bits: 3
        access: RO
        reset: 0
        typical: 0
        description: |
          Bist Results for NBR CSR RdReq RAM
          0: GOOD (or bist in progress/never run)
          1: BAD

      - name: IPFDAT
        bits: 2
        access: RO
        reset: 0
        typical: 0
        description: |
          Bist Results for MIX Inbound Packet RAM
          0: GOOD (or bist in progress/never run)
          1: BAD

      - name: IRFDAT
        bits: 1
        access: RO
        reset: 0
        typical: 0
        description: |
          Bist Results for MIX I-Ring Entry RAM
          0: GOOD (or bist in progress/never run)
          1: BAD

      - name: ORFDAT
        bits: 0
        access: RO
        reset: 0
        typical: 0
        description: |
          Bist Results for MIX O-Ring Entry RAM
          0: GOOD (or bist in progress/never run)
          1: BAD



