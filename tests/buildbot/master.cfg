# -*- python -*-
# ex: set syntax=python:


DEFAULT_PASSWORD = "caveo123"
SVN_URL = "svn://casw.caveonetworks.com/svn/octeon/"
MAKE = "make -j4 -s"
MAIL_TO = ["kreese@caviumnetworks.com"]

DEB32_SLAVES = ["qemu-debian32-slave1"]
DEB64_SLAVES = ["chad-pci-debian64-slave1", "chad-pci-debian64-slave2"]
PCI_SLAVES = ["chad-pci-debian64-slave2"]
PPC_SLAVES = ["qemu-debian32-ppc-slave"]
OTHER_SLAVES = ["i7-pci-debian64-slave1"]
ALL_SLAVES = []
ALL_SLAVES.extend(DEB32_SLAVES)
ALL_SLAVES.extend(DEB64_SLAVES)
ALL_SLAVES.extend(PCI_SLAVES)
#ALL_SLAVES.extend(PPC_SLAVES)
ALL_SLAVES.extend(OTHER_SLAVES)


####### PYTHON IMPORTS

import buildbot
from buildbot.buildslave import BuildSlave
from buildbot.changes.svnpoller import SVNPoller
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable
from buildbot.status import html
from buildbot.status import mail
from buildbot.steps.shell import Compile
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Test
from buildbot.steps.shell import WithProperties
from buildbot.steps.source import SVN
from buildbot.steps.trigger import Trigger
from buildbot.process.factory import BuildFactory


####### GLOBAL CONFIG

c = BuildmasterConfig = {}
c['buildbotURL'] = "http://chad-pci:8010/"
c['builders'] = []
c['projectName'] = "Octeon BDK"
c['projectURL'] = c['buildbotURL']
c['schedulers'] = []
c['slavePortnum'] = 9989
c['slaves'] = []
c['status'] = []
builder_names_by_branch = {}

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'].append(html.WebStatus(http_port=8010, allowForce=True))
#c['status'].append(mail.MailNotifier(fromaddr="buildbot@chad-pci",
#           extraRecipients=MAIL_TO, sendToInterestedUsers=False,
#           lookup="caviumnetworks.com"))


####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.

for slave in ALL_SLAVES:
    c['slaves'].append(BuildSlave(slave, DEFAULT_PASSWORD, max_builds=1))


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

def svn_branch_parser(path):
    pieces = path.split('/')
    project = pieces.pop(0)
    type = pieces.pop(0)
    if type == 'trunk':
        branch = "trunk"
    elif type == "branches":
        branch_name = pieces.pop(0)
        if branch_name == "users":
            branch = "branches/users" + pieces.pop(0)
        else:
            branch = "branches/" + branch_name
    elif type == "tags":
        tag_name = pieces.pop(0)
        if tag_name == "users":
            branch = "tags/users" + pieces.pop(0)
        else:
            branch = "tags/" + tag_name
    else:
        print "svn_branch_parser: Unknown branch format %s. Update buildbot master.cfg" % path
        return None
    print "svn_branch_parser: Using branch \"%s\"" % branch
    return (project + "/" + branch, "/".join(pieces))

c['change_source'] = SVNPoller(SVN_URL, split_file=svn_branch_parser, pollinterval=30)


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

COMMAND_PREFIX = ""

# This function adds a new command to a build factory. The command can
# have one of the following types: 'S'hell, 'C'ompile, or 'T'est. Name
# should be something short. Command will be executed with COMMAND_PREFIX
# prepeneded to it. COMMAND_PREFIX should normally run env-setup.
def addCmd(factory, type, name, command = "", timeout=60*60):
    global COMMAND_PREFIX
    command = WithProperties(COMMAND_PREFIX + command)
    if type == 'S':
        factory.addStep(ShellCommand(command=command, description="running " + name, descriptionDone=name, flunkOnFailure=True, timeout=timeout))
    elif type == 'C':
        factory.addStep(Compile(command=command, description="making " + name, descriptionDone="make " + name, warnOnWarnings=True, flunkOnFailure=True, timeout=timeout))
    elif type == 'T':
        factory.addStep(Test(command=command, description="running " + name, descriptionDone=name, warnOnFailure=True, timeout=timeout))
    else:
        raise Exception("Illegal addCmd() type=%s" % type)

# Utility function to add a builder for a build factory on multiple slaves.
# Name must be unique and will show up as the column headers in the waterfall
# display
def addBuilder(category, name, slaves, factory):
    global c
    builder = {'category': category, 'name': name, 'slavenames': slaves,
               'builddir': name, 'factory': factory}
    c['builders'].append(builder)

#
#
#
COMMAND_PREFIX = "export OCTEON_ROOT=`pwd`/sdk && export BDK_ROOT=`pwd` && export PATH=${OCTEON_ROOT}/tools/bin:${PATH} && "
factory = BuildFactory()
factory.addStep(SVN(mode="clobber", baseURL=SVN_URL, defaultBranch="bdk/trunk"))
addCmd(factory, 'S', "SDK export",          "svn export -r%(got_revision)s " + SVN_URL + "/sdk-base/trunk/sdk sdk")
addCmd(factory, 'S', "Setting tools",       "ln -sf /nfs/sdk/2.2.0-414/OCTEON-SDK/tools sdk/tools")
addCmd(factory, 'C', "libc",                MAKE + " -C libc")
addCmd(factory, 'C', "libbdk",              MAKE + " -C libbdk")
addCmd(factory, 'C', "docs",                MAKE + " -C docs")
addCmd(factory, 'C', "bdk-boot",            MAKE + " -C bdk-boot")
addCmd(factory, 'C', "utils",               MAKE + " -C utils")
addCmd(factory, 'C', "release",             MAKE + " release", timeout=120*60)
addCmd(factory, 'C', "crypto",              MAKE + " -C tests/hw-and-sim/crypto")
addCmd(factory, 'C', "pcie-dma-test",       MAKE + " -C tests/hw-only/pcie-dma-test")
addCmd(factory, 'T', "crypto cn63xx",       MAKE + " -C tests/hw-and-sim/crypto SIM=cn63xx test")
addCmd(factory, 'T', "crypto cn68xx",       MAKE + " -C tests/hw-and-sim/crypto SIM=cn68xx test")
addCmd(factory, 'T', "crypto cn66xx",       MAKE + " -C tests/hw-and-sim/crypto SIM=cn66xx test")
addCmd(factory, 'S', "Verify results dir",  "ssh chad-pci mkdir -p build-results/%(slavename)s/")
addCmd(factory, 'S', "Copy release",        "scp octeon-bdk-*.tgz chad-pci:build-results/%(slavename)s/")
addCmd(factory, 'S', "Copy release2",       "scp octeon-bdk-*.tgz chad-pci:build-results/%(slavename)s/build-%(buildnumber)d.tgz")
factory.addStep(Trigger(schedulerNames=["pci"], waitForFinish=False, set_properties={ 'release_path' : WithProperties("build-results/%(slavename)s/build-%(buildnumber)d.tgz") }))
factory.addStep(Trigger(schedulerNames=["majic"], waitForFinish=False, set_properties={ 'release_path' : WithProperties("build-results/%(slavename)s/build-%(buildnumber)d.tgz") }))
addBuilder("BDK Trunk", "BDK-Trunk-32", DEB32_SLAVES, factory)
addBuilder("BDK Trunk", "BDK-Trunk-64", DEB64_SLAVES, factory)
c['schedulers'].append(Scheduler(name="trunk", branch="bdk/trunk", treeStableTimer=1*60, builderNames=["BDK-Trunk-32", "BDK-Trunk-64"]))

#
#
#
factory = BuildFactory()
COMMAND_PREFIX = ""
addCmd(factory, 'S', "Get release",         "scp chad-pci:%(release_path)s bdk.tgz")
addCmd(factory, 'S', "Extract release",     "rm -rf bdk && tar -zxf bdk.tgz && mv octeon-bdk-* bdk")
addCmd(factory, 'S', "Set suid",            "chmod 777 bdk/bin/bdk-lua-x86 && sudo chown root bdk/bin/bdk-lua-x86 && sudo chmod +s bdk/bin/bdk-lua-x86")
addCmd(factory, 'S', "Get BDK tests",       "rm -rf bdk-buildbot && svn export -r%(revision)s " + SVN_URL + "/bdk/trunk/tests/buildbot bdk-buildbot")
COMMAND_PREFIX = "export BDK_ROOT=`pwd`/bdk && export PATH=${PATH}:${BDK_ROOT}/bin && umask u=rwx,g=rw,o=rw && "
addCmd(factory, 'S', "PCI test",            "cd bdk-buildbot/pci && python nic10e.py")
addBuilder("PCI", "PCI", PCI_SLAVES, factory)
c['schedulers'].append(Triggerable(name="pci", builderNames=["PCI"]))

#
#
#
factory = BuildFactory()
COMMAND_PREFIX = ""
addCmd(factory, 'S', "Get release",         "scp chad-pci:%(release_path)s bdk.tgz")
addCmd(factory, 'S', "Extract release",     "rm -rf bdk && tar -zxf bdk.tgz && mv octeon-bdk-* bdk")
addCmd(factory, 'S', "Get BDK tests",       "rm -rf bdk-buildbot && svn export -r%(revision)s " + SVN_URL + "/bdk/trunk/tests/buildbot bdk-buildbot")
COMMAND_PREFIX = "export BDK_ROOT=`pwd`/bdk && export PATH=${PATH}:${BDK_ROOT}/bin && umask u=rwx,g=rw,o=rw && "
addCmd(factory, 'S', "Majic test",          "cd bdk-buildbot/ejtag && python majic.py")
addBuilder("Majic", "Majic", ["chad-pci-debian64-slave1"], factory)
c['schedulers'].append(Triggerable(name="majic", builderNames=["Majic"]))

