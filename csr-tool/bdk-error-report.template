#include <bdk.h>
#include "bdk-error-support.h"
/***********************license start***************
 * Copyright (c) 2003-2012  Cavium Networks (support@cavium.com). All rights
 * reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.

 *   * Neither the name of Cavium Networks nor the names of
 *     its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.

 * This Software, including technical data, may be subject to U.S. export  control
 * laws, including the U.S. Export Administration Act and its  associated
 * regulations, and may be subject to export or import  regulations in other
 * countries.

 * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
 * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR
 * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
 * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR
 * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM
 * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,
 * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF
 * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR
 * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.
 ***********************license end**************************************/


/**
 * @file
 *
 * Automatically generated error messages.
 *
 * This file is auto generated. Do not edit.
 */

/* Abstract tree
ROOT/none [
    root/None ->
        CIU_INTX_SUM0(0)/CIU_INTX_EN0(0) [
            mii/mii ->
                MIXX_ISR(0)/MIXX_INTENA(0) [
                    data_drp/data_drpena
                    idblovf/ivfena
                    irun/irunena
                    odblovf/ovfena
                    orun/orunena
                ]
            pcm/pcm ->
                PCMX_INT_SUM(0)/PCMX_INT_ENA(0) [
                    fsyncextra/fsyncextra
                    fsyncmissed/fsyncmissed
                    rxovf/rxovf
                    txempty/txempty
                ]
                PCMX_INT_SUM(1)/PCMX_INT_ENA(1) [
                    fsyncextra/fsyncextra
                    fsyncmissed/fsyncmissed
                    rxovf/rxovf
                    txempty/txempty
                ]
                PCMX_INT_SUM(2)/PCMX_INT_ENA(2) [
                    fsyncextra/fsyncextra
                    fsyncmissed/fsyncmissed
                    rxovf/rxovf
                    txempty/txempty
                ]
                PCMX_INT_SUM(3)/PCMX_INT_ENA(3) [
                    fsyncextra/fsyncextra
                    fsyncmissed/fsyncmissed
                    rxovf/rxovf
                    txempty/txempty
                ]
            rml/rml ->
                CIU_BLOCK_INT/none [
                    agl/None ->
                        AGL_GMX_BAD_REG/none [
                            loststat/None
                            out_ovr/None
                            ovrflw/None
                            ovrflw1/None
                            txpop/None
                            txpop1/None
                            txpsh/None
                            txpsh1/None
                        ]
                        AGL_GMX_RXX_INT_REG(0)/AGL_GMX_RXX_INT_EN(0) [
                            ovrerr/ovrerr
                            skperr/skperr
                        ]
                        AGL_GMX_RXX_INT_REG(1)/AGL_GMX_RXX_INT_EN(1) [
                            ovrerr/ovrerr
                            skperr/skperr
                        ]
                        AGL_GMX_TX_INT_REG/AGL_GMX_TX_INT_EN [
                            pko_nxa/pko_nxa
                            undflw/undflw
                        ]
                    asxpcs0/None ->
                        PCSX_INTX_REG(0,0)/PCSX_INTX_EN_REG(0,0) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(1,0)/PCSX_INTX_EN_REG(1,0) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(2,0)/PCSX_INTX_EN_REG(2,0) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(3,0)/PCSX_INTX_EN_REG(3,0) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSXX_INT_REG(0)/PCSXX_INT_EN_REG(0) [
                            algnlos/algnlos_en
                            bitlckls/bitlckls_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxsynbad/rxsynbad_en
                            synlos/synlos_en
                            txflt/txflt_en
                        ]
                    asxpcs1/None ->
                        PCSX_INTX_REG(0,1)/PCSX_INTX_EN_REG(0,1) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(1,1)/PCSX_INTX_EN_REG(1,1) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(2,1)/PCSX_INTX_EN_REG(2,1) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(3,1)/PCSX_INTX_EN_REG(3,1) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSXX_INT_REG(1)/PCSXX_INT_EN_REG(1) [
                            algnlos/algnlos_en
                            bitlckls/bitlckls_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxsynbad/rxsynbad_en
                            synlos/synlos_en
                            txflt/txflt_en
                        ]
                    dfa/None ->
                        DFA_ERROR/DFA_INTMSK [
                            dblovf/dblina
                            dc0perr/dc0pena
                            dc1perr/dc1pena
                            dc2perr/dc2pena
                            dfanxm/dfanxmena
                            dlc0_ovferr/dlc0_ovfena
                            dlc1_ovferr/dlc1_ovfena
                            replerr/replerrena
                        ]
                    dpi/None ->
                        DPI_INT_REG/DPI_INT_EN [
                            dmadbo/dmadbo
                            nderr/nderr
                            nfovr/nfovr
                            req_anull/req_anull
                            req_badadr/req_badadr
                            req_badfil/req_badfil
                            req_badlen/req_badlen
                            req_inull/req_inull
                            req_ovrflw/req_ovrflw
                            req_undflw/req_undflw
                            sprt0_rst/sprt0_rst
                            sprt1_rst/sprt1_rst
                            sprt2_rst/sprt2_rst
                            sprt3_rst/sprt3_rst
                        ]
                        DPI_PKT_ERR_RSP/none [
                            pkterr/None
                        ]
                        DPI_REQ_ERR_RSP/none [
                            qerr/None
                        ]
                        DPI_REQ_ERR_RST/none [
                            qerr/None
                        ]
                    fpa/None ->
                        FPA_INT_SUM/FPA_INT_ENB [
                            fed0_dbe/fed0_dbe
                            fed0_sbe/fed0_sbe
                            fed1_dbe/fed1_dbe
                            fed1_sbe/fed1_sbe
                            free0/free0
                            free1/free1
                            free2/free2
                            free3/free3
                            free4/free4
                            free5/free5
                            free6/free6
                            free7/free7
                            free8/free8
                            paddr_e/paddr_e
                            pool0th/pool0th
                            pool1th/pool1th
                            pool2th/pool2th
                            pool3th/pool3th
                            pool4th/pool4th
                            pool5th/pool5th
                            pool6th/pool6th
                            pool7th/pool7th
                            pool8th/pool8th
                            q0_coff/q0_coff
                            q0_perr/q0_perr
                            q0_und/q0_und
                            q1_coff/q1_coff
                            q1_perr/q1_perr
                            q1_und/q1_und
                            q2_coff/q2_coff
                            q2_perr/q2_perr
                            q2_und/q2_und
                            q3_coff/q3_coff
                            q3_perr/q3_perr
                            q3_und/q3_und
                            q4_coff/q4_coff
                            q4_perr/q4_perr
                            q4_und/q4_und
                            q5_coff/q5_coff
                            q5_perr/q5_perr
                            q5_und/q5_und
                            q6_coff/q6_coff
                            q6_perr/q6_perr
                            q6_und/q6_und
                            q7_coff/q7_coff
                            q7_perr/q7_perr
                            q7_und/q7_und
                            q8_coff/q8_coff
                            q8_perr/q8_perr
                            q8_und/q8_und
                        ]
                    gmx0/None ->
                        GMXX_RXX_INT_REG(0,0)/GMXX_RXX_INT_EN(0,0) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(1,0)/GMXX_RXX_INT_EN(1,0) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(2,0)/GMXX_RXX_INT_EN(2,0) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(3,0)/GMXX_RXX_INT_EN(3,0) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_TX_INT_REG(0)/GMXX_TX_INT_EN(0) [
                            pko_nxa/pko_nxa
                            pko_nxp/pko_nxp
                            ptp_lost/ptp_lost
                            undflw/undflw
                        ]
                        GMXX_BAD_REG(0)/none [
                            inb_nxa/None
                            loststat/None
                            out_ovr/None
                            statovr/None
                        ]
                    gmx1/None ->
                        GMXX_RXX_INT_REG(0,1)/GMXX_RXX_INT_EN(0,1) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(1,1)/GMXX_RXX_INT_EN(1,1) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(2,1)/GMXX_RXX_INT_EN(2,1) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(3,1)/GMXX_RXX_INT_EN(3,1) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_TX_INT_REG(1)/GMXX_TX_INT_EN(1) [
                            pko_nxa/pko_nxa
                            pko_nxp/pko_nxp
                            ptp_lost/ptp_lost
                            undflw/undflw
                        ]
                        GMXX_BAD_REG(1)/none [
                            inb_nxa/None
                            loststat/None
                            out_ovr/None
                            statovr/None
                        ]
                    iob/None ->
                        IOB0_INT_SUM/IOB0_INT_ENB [
                            np_dat/np_dat
                            np_eop/np_eop
                            np_sop/np_sop
                            p_dat/p_dat
                            p_eop/p_eop
                            p_sop/p_sop
                        ]
                    ipd/None ->
                        IPD_INT_SUM/IPD_INT_ENB [
                            bc_ovr/bc_ovr
                            bp_sub/bp_sub
                            c_coll/c_coll
                            cc_ovr/cc_ovr
                            d_coll/d_coll
                            dat/dat
                            dc_ovr/dc_ovr
                            eop/eop
                            prc_par0/prc_par0
                            prc_par1/prc_par1
                            prc_par2/prc_par2
                            prc_par3/prc_par3
                            pw0_dbe/pw0_dbe
                            pw0_sbe/pw0_sbe
                            pw1_dbe/pw1_dbe
                            pw1_sbe/pw1_sbe
                            pw2_dbe/pw2_dbe
                            pw2_sbe/pw2_sbe
                            pw3_dbe/pw3_dbe
                            pw3_sbe/pw3_sbe
                            sop/sop
                        ]
                    key/None ->
                        KEY_INT_SUM/KEY_INT_ENB [
                            ked0_dbe/ked0_dbe
                            ked0_sbe/ked0_sbe
                            ked1_dbe/ked1_dbe
                            ked1_sbe/ked1_sbe
                        ]
                    l2c/None ->
                        L2C_INT_REG/L2C_INT_ENA [
                            bigrd/bigrd
                            bigwr/bigwr
                            holerd/holerd
                            holewr/holewr
                            tad0/None ->
                                L2C_TADX_INT(0)/L2C_TADX_IEN(0) [
                                    l2ddbe/l2ddbe
                                    l2dsbe/l2dsbe
                                    noway/noway
                                    rddislmc/rddislmc
                                    tagdbe/tagdbe
                                    tagsbe/tagsbe
                                    vbfdbe/vbfdbe
                                    vbfsbe/vbfsbe
                                    wrdislmc/wrdislmc
                                ]
                            tad1/None ->
                                L2C_TADX_INT(1)/L2C_TADX_IEN(1) [
                                    l2ddbe/l2ddbe
                                    l2dsbe/l2dsbe
                                    noway/noway
                                    rddislmc/rddislmc
                                    tagdbe/tagdbe
                                    tagsbe/tagsbe
                                    vbfdbe/vbfdbe
                                    vbfsbe/vbfsbe
                                    wrdislmc/wrdislmc
                                ]
                            tad2/None ->
                                L2C_TADX_INT(2)/L2C_TADX_IEN(2) [
                                    l2ddbe/l2ddbe
                                    l2dsbe/l2dsbe
                                    noway/noway
                                    rddislmc/rddislmc
                                    tagdbe/tagdbe
                                    tagsbe/tagsbe
                                    vbfdbe/vbfdbe
                                    vbfsbe/vbfsbe
                                    wrdislmc/wrdislmc
                                ]
                            tad3/None ->
                                L2C_TADX_INT(3)/L2C_TADX_IEN(3) [
                                    l2ddbe/l2ddbe
                                    l2dsbe/l2dsbe
                                    noway/noway
                                    rddislmc/rddislmc
                                    tagdbe/tagdbe
                                    tagsbe/tagsbe
                                    vbfdbe/vbfdbe
                                    vbfsbe/vbfsbe
                                    wrdislmc/wrdislmc
                                ]
                            vrtadrng/vrtadrng
                            vrtidrng/vrtidrng
                            vrtpe/vrtpe
                            vrtwr/vrtwr
                        ]
                    lmc0/None ->
                        LMCX_INT(0)/LMCX_INT_EN(0) [
                            ded_err/intr_ded_ena
                            nxm_wr_err/intr_nxm_wr_ena
                            sec_err/intr_sec_ena
                        ]
                    mio/None ->
                        MIO_BOOT_ERR/MIO_BOOT_INT [
                            adr_err/adr_int
                            wait_err/wait_int
                        ]
                        MIO_RST_INT/MIO_RST_INT_EN [
                            perst0/perst0
                            perst1/perst1
                            rst_link0/rst_link0
                            rst_link1/rst_link1
                            rst_link2/rst_link2
                            rst_link3/rst_link3
                        ]
                    pem0/None ->
                        PEMX_INT_SUM(0)/PEMX_INT_ENB(0) [
                            crs_dr/crs_dr
                            crs_er/crs_er
                            exc/exc ->
                                PEMX_DBG_INFO(0)/PEMX_DBG_INFO_EN(0) [
                                    acto/acto
                                    caar/caar
                                    dpeoosd/dpeoosd
                                    ecrc_e/ecrc_e
                                    fcpvwt/fcpvwt
                                    fcuv/fcuv
                                    mre/mre
                                    racca/racca
                                    racpp/racpp
                                    racur/racur
                                    ramtlp/ramtlp
                                    rarwdns/rarwdns
                                    rauc/rauc
                                    rawwpp/rawwpp
                                    rcemrc/rcemrc
                                    rdwdle/rdwdle
                                    recrce/recrce
                                    rfemrc/rfemrc
                                    rnfemrc/rnfemrc
                                    rpe/rpe
                                    rpmerc/rpmerc
                                    rpoison/rpoison
                                    rptamrc/rptamrc
                                    rqo/rqo
                                    rte/rte
                                    rtlplle/rtlplle
                                    rtlpmal/rtlpmal
                                    rtwdle/rtwdle
                                    rumep/rumep
                                    rvdm/rvdm
                                    spoison/spoison
                                ]
                            rdlk/rdlk
                            se/se
                            un_b1/un_b1
                            un_b2/un_b2
                            un_bx/un_bx
                            up_b1/up_b1
                            up_b2/up_b2
                            up_bx/up_bx
                        ]
                    pem1/None ->
                        PEMX_INT_SUM(1)/PEMX_INT_ENB(1) [
                            crs_dr/crs_dr
                            crs_er/crs_er
                            exc/exc ->
                                PEMX_DBG_INFO(1)/PEMX_DBG_INFO_EN(1) [
                                    acto/acto
                                    caar/caar
                                    dpeoosd/dpeoosd
                                    ecrc_e/ecrc_e
                                    fcpvwt/fcpvwt
                                    fcuv/fcuv
                                    mre/mre
                                    racca/racca
                                    racpp/racpp
                                    racur/racur
                                    ramtlp/ramtlp
                                    rarwdns/rarwdns
                                    rauc/rauc
                                    rawwpp/rawwpp
                                    rcemrc/rcemrc
                                    rdwdle/rdwdle
                                    recrce/recrce
                                    rfemrc/rfemrc
                                    rnfemrc/rnfemrc
                                    rpe/rpe
                                    rpmerc/rpmerc
                                    rpoison/rpoison
                                    rptamrc/rptamrc
                                    rqo/rqo
                                    rte/rte
                                    rtlplle/rtlplle
                                    rtlpmal/rtlpmal
                                    rtwdle/rtwdle
                                    rumep/rumep
                                    rvdm/rvdm
                                    spoison/spoison
                                ]
                            rdlk/rdlk
                            se/se
                            un_b1/un_b1
                            un_b2/un_b2
                            un_bx/un_bx
                            up_b1/up_b1
                            up_b2/up_b2
                            up_bx/up_bx
                        ]
                    pip/None ->
                        PIP_INT_REG/PIP_INT_EN [
                            badtag/badtag
                            beperr/beperr
                            feperr/feperr
                            prtnxa/prtnxa
                            punyerr/punyerr
                            skprunt/skprunt
                            todoovr/todoovr
                        ]
                    pko/None ->
                        PKO_REG_ERROR/PKO_REG_INT_MASK [
                            currzero/currzero
                            doorbell/doorbell
                            loopback/loopback
                            parity/parity
                        ]
                    rad/None ->
                        RAD_REG_ERROR/RAD_REG_INT_MASK [
                            doorbell/doorbell
                        ]
                    srio0/None ->
                        SRIOX_INT_REG(0)/SRIOX_INT_ENABLE(0) [
                            bar_err/bar_err
                            degrad/degrade
                            deny_wr/deny_wr
                            f_error/f_error
                            fail/fail
                            log_erb/log_erb
                            mac_buf/mac_buf
                            mce_rx/mce_rx
                            omsg_err/omsg_err
                            phy_erb/phy_erb
                            pko_err/pko_err
                            rtry_err/rtry_err
                            sli_err/sli_err
                            ttl_tout/ttl_tout
                            zero_pkt/zero_pkt
                        ]
                    srio1/None ->
                        SRIOX_INT_REG(1)/SRIOX_INT_ENABLE(1) [
                            bar_err/bar_err
                            degrad/degrade
                            deny_wr/deny_wr
                            f_error/f_error
                            fail/fail
                            log_erb/log_erb
                            mac_buf/mac_buf
                            mce_rx/mce_rx
                            omsg_err/omsg_err
                            phy_erb/phy_erb
                            pko_err/pko_err
                            rtry_err/rtry_err
                            sli_err/sli_err
                            ttl_tout/ttl_tout
                            zero_pkt/zero_pkt
                        ]
                    tim/None ->
                        TIM_REG_ERROR/TIM_REG_INT_MASK [
                            mask/mask
                        ]
                    zip/None ->
                        ZIP_ERROR/ZIP_INT_MASK [
                            doorbell/doorbell
                        ]
                ]
        ]
    root2/None ->
        CIU_INT_SUM1/CIU_INTX_EN1(0) [
            mii1/mii1 ->
                MIXX_ISR(1)/MIXX_INTENA(1) [
                    data_drp/data_drpena
                    idblovf/ivfena
                    irun/irunena
                    odblovf/ovfena
                    orun/orunena
                ]
            nand/nand ->
                NDF_INT/NDF_INT_EN [
                    ecc_1bit/ecc_1bit
                    ecc_mult/ecc_mult
                    ovrf/ovrf
                    sm_bad/sm_bad
                    wdog/wdog
                ]
            usb/usb ->
                UCTLX_INT_REG(0)/UCTLX_INT_ENA(0) [
                    cf_psh_f/cf_psh_f
                    ec_ovf_e/ec_ovf_e
                    er_psh_f/er_psh_f
                    oc_ovf_e/oc_ovf_e
                    or_psh_f/or_psh_f
                    pp_psh_f/pp_psh_f
                    wb_pop_e/wb_pop_e
                    wb_psh_f/wb_psh_f
                ]
        ]
    root3/None ->
        CIU2_SUM_PPX_IP2(0)/none [
            io/None ->
                CIU2_SRC_PPX_IP2_IO(0)/CIU2_EN_PPX_IP2_IO(0) [
                    pem[0]/pem ->
                        PEMX_INT_SUM(0)/PEMX_INT_ENB(0) [
                            crs_dr/crs_dr
                            crs_er/crs_er
                            exc/exc ->
                                PEMX_DBG_INFO(0)/PEMX_DBG_INFO_EN(0) [
                                    acto/acto
                                    caar/caar
                                    dpeoosd/dpeoosd
                                    ecrc_e/ecrc_e
                                    fcpvwt/fcpvwt
                                    fcuv/fcuv
                                    mre/mre
                                    racca/racca
                                    racpp/racpp
                                    racur/racur
                                    ramtlp/ramtlp
                                    rarwdns/rarwdns
                                    rauc/rauc
                                    rawwpp/rawwpp
                                    rcemrc/rcemrc
                                    rdwdle/rdwdle
                                    recrce/recrce
                                    rfemrc/rfemrc
                                    rnfemrc/rnfemrc
                                    rpe/rpe
                                    rpmerc/rpmerc
                                    rpoison/rpoison
                                    rptamrc/rptamrc
                                    rqo/rqo
                                    rte/rte
                                    rtlplle/rtlplle
                                    rtlpmal/rtlpmal
                                    rtwdle/rtwdle
                                    rumep/rumep
                                    rvdm/rvdm
                                    spoison/spoison
                                ]
                            rdlk/rdlk
                            se/se
                            un_b1/un_b1
                            un_b2/un_b2
                            un_bx/un_bx
                            up_b1/up_b1
                            up_b2/up_b2
                            up_bx/up_bx
                        ]
                    pem[1]/pem ->
                        PEMX_INT_SUM(1)/PEMX_INT_ENB(1) [
                            crs_dr/crs_dr
                            crs_er/crs_er
                            exc/exc ->
                                PEMX_DBG_INFO(1)/PEMX_DBG_INFO_EN(1) [
                                    acto/acto
                                    caar/caar
                                    dpeoosd/dpeoosd
                                    ecrc_e/ecrc_e
                                    fcpvwt/fcpvwt
                                    fcuv/fcuv
                                    mre/mre
                                    racca/racca
                                    racpp/racpp
                                    racur/racur
                                    ramtlp/ramtlp
                                    rarwdns/rarwdns
                                    rauc/rauc
                                    rawwpp/rawwpp
                                    rcemrc/rcemrc
                                    rdwdle/rdwdle
                                    recrce/recrce
                                    rfemrc/rfemrc
                                    rnfemrc/rnfemrc
                                    rpe/rpe
                                    rpmerc/rpmerc
                                    rpoison/rpoison
                                    rptamrc/rptamrc
                                    rqo/rqo
                                    rte/rte
                                    rtlplle/rtlplle
                                    rtlpmal/rtlpmal
                                    rtwdle/rtwdle
                                    rumep/rumep
                                    rvdm/rvdm
                                    spoison/spoison
                                ]
                            rdlk/rdlk
                            se/se
                            un_b1/un_b1
                            un_b2/un_b2
                            un_bx/un_bx
                            up_b1/up_b1
                            up_b2/up_b2
                            up_bx/up_bx
                        ]
                ]
            mem/None ->
                CIU2_SRC_PPX_IP2_MEM(0)/CIU2_EN_PPX_IP2_MEM(0) [
                    lmc[0]/lmc ->
                        LMCX_INT(0)/LMCX_INT_EN(0) [
                            ded_err/intr_ded_ena
                            nxm_wr_err/intr_nxm_wr_ena
                            sec_err/intr_sec_ena
                        ]
                    lmc[1]/lmc ->
                        LMCX_INT(1)/LMCX_INT_EN(1) [
                            ded_err/intr_ded_ena
                            nxm_wr_err/intr_nxm_wr_ena
                            sec_err/intr_sec_ena
                        ]
                    lmc[2]/lmc ->
                        LMCX_INT(2)/LMCX_INT_EN(2) [
                            ded_err/intr_ded_ena
                            nxm_wr_err/intr_nxm_wr_ena
                            sec_err/intr_sec_ena
                        ]
                    lmc[3]/lmc ->
                        LMCX_INT(3)/LMCX_INT_EN(3) [
                            ded_err/intr_ded_ena
                            nxm_wr_err/intr_nxm_wr_ena
                            sec_err/intr_sec_ena
                        ]
                ]
            mio/None ->
                CIU2_SRC_PPX_IP2_MIO(0)/CIU2_EN_PPX_IP2_MIO(0) [
                    mio/mio ->
                        MIO_BOOT_ERR/MIO_BOOT_INT [
                            adr_err/adr_int
                            wait_err/wait_int
                        ]
                        MIO_RST_INT/MIO_RST_INT_EN [
                            perst0/perst0
                            perst1/perst1
                            rst_link0/rst_link0
                            rst_link1/rst_link1
                            rst_link2/rst_link2
                            rst_link3/rst_link3
                        ]
                    nand/nand ->
                        NDF_INT/NDF_INT_EN [
                            ecc_1bit/ecc_1bit
                            ecc_mult/ecc_mult
                            ovrf/ovrf
                            sm_bad/sm_bad
                            wdog/wdog
                        ]
                    usb_uctl/usb_uctl ->
                        UCTLX_INT_REG(0)/UCTLX_INT_ENA(0) [
                            cf_psh_f/cf_psh_f
                            ec_ovf_e/ec_ovf_e
                            er_psh_f/er_psh_f
                            oc_ovf_e/oc_ovf_e
                            or_psh_f/or_psh_f
                            pp_psh_f/pp_psh_f
                            wb_pop_e/wb_pop_e
                            wb_psh_f/wb_psh_f
                        ]
                ]
            pkt/None ->
                CIU2_SRC_PPX_IP2_PKT(0)/CIU2_EN_PPX_IP2_PKT(0) [
                    agl/agl ->
                        AGL_GMX_BAD_REG/none [
                            loststat/None
                            out_ovr/None
                            ovrflw/None
                            ovrflw1/None
                            txpop/None
                            txpop1/None
                            txpsh/None
                            txpsh1/None
                        ]
                        AGL_GMX_RXX_INT_REG(0)/AGL_GMX_RXX_INT_EN(0) [
                            ovrerr/ovrerr
                            skperr/skperr
                        ]
                        AGL_GMX_RXX_INT_REG(1)/AGL_GMX_RXX_INT_EN(1) [
                            ovrerr/ovrerr
                            skperr/skperr
                        ]
                        AGL_GMX_TX_INT_REG/AGL_GMX_TX_INT_EN [
                            pko_nxa/pko_nxa
                            undflw/undflw
                        ]
                    agx[0]/agx ->
                        GMXX_RXX_INT_REG(0,0)/GMXX_RXX_INT_EN(0,0) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(1,0)/GMXX_RXX_INT_EN(1,0) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(2,0)/GMXX_RXX_INT_EN(2,0) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(3,0)/GMXX_RXX_INT_EN(3,0) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_TX_INT_REG(0)/GMXX_TX_INT_EN(0) [
                            pko_nxa/pko_nxa
                            pko_nxp/pko_nxp
                            ptp_lost/ptp_lost
                            undflw/undflw
                        ]
                        GMXX_BAD_REG(0)/none [
                            inb_nxa/None
                            loststat/None
                            out_ovr/None
                            statovr/None
                        ]
                        PCSX_INTX_REG(0,0)/PCSX_INTX_EN_REG(0,0) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(1,0)/PCSX_INTX_EN_REG(1,0) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(2,0)/PCSX_INTX_EN_REG(2,0) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(3,0)/PCSX_INTX_EN_REG(3,0) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSXX_INT_REG(0)/PCSXX_INT_EN_REG(0) [
                            algnlos/algnlos_en
                            bitlckls/bitlckls_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxsynbad/rxsynbad_en
                            synlos/synlos_en
                            txflt/txflt_en
                        ]
                    agx[1]/agx ->
                        GMXX_RXX_INT_REG(0,1)/GMXX_RXX_INT_EN(0,1) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(1,1)/GMXX_RXX_INT_EN(1,1) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(2,1)/GMXX_RXX_INT_EN(2,1) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(3,1)/GMXX_RXX_INT_EN(3,1) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_TX_INT_REG(1)/GMXX_TX_INT_EN(1) [
                            pko_nxa/pko_nxa
                            pko_nxp/pko_nxp
                            ptp_lost/ptp_lost
                            undflw/undflw
                        ]
                        GMXX_BAD_REG(1)/none [
                            inb_nxa/None
                            loststat/None
                            out_ovr/None
                            statovr/None
                        ]
                        PCSX_INTX_REG(0,1)/PCSX_INTX_EN_REG(0,1) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(1,1)/PCSX_INTX_EN_REG(1,1) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(2,1)/PCSX_INTX_EN_REG(2,1) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(3,1)/PCSX_INTX_EN_REG(3,1) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSXX_INT_REG(1)/PCSXX_INT_EN_REG(1) [
                            algnlos/algnlos_en
                            bitlckls/bitlckls_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxsynbad/rxsynbad_en
                            synlos/synlos_en
                            txflt/txflt_en
                        ]
                    agx[2]/agx ->
                        GMXX_RXX_INT_REG(0,2)/GMXX_RXX_INT_EN(0,2) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(1,2)/GMXX_RXX_INT_EN(1,2) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(2,2)/GMXX_RXX_INT_EN(2,2) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(3,2)/GMXX_RXX_INT_EN(3,2) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_TX_INT_REG(2)/GMXX_TX_INT_EN(2) [
                            pko_nxa/pko_nxa
                            pko_nxp/pko_nxp
                            ptp_lost/ptp_lost
                            undflw/undflw
                        ]
                        GMXX_BAD_REG(2)/none [
                            inb_nxa/None
                            loststat/None
                            out_ovr/None
                            statovr/None
                        ]
                        PCSX_INTX_REG(0,2)/PCSX_INTX_EN_REG(0,2) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(1,2)/PCSX_INTX_EN_REG(1,2) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(2,2)/PCSX_INTX_EN_REG(2,2) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(3,2)/PCSX_INTX_EN_REG(3,2) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSXX_INT_REG(2)/PCSXX_INT_EN_REG(2) [
                            algnlos/algnlos_en
                            bitlckls/bitlckls_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxsynbad/rxsynbad_en
                            synlos/synlos_en
                            txflt/txflt_en
                        ]
                    agx[3]/agx ->
                        GMXX_RXX_INT_REG(0,3)/GMXX_RXX_INT_EN(0,3) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(1,3)/GMXX_RXX_INT_EN(1,3) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(2,3)/GMXX_RXX_INT_EN(2,3) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(3,3)/GMXX_RXX_INT_EN(3,3) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_TX_INT_REG(3)/GMXX_TX_INT_EN(3) [
                            pko_nxa/pko_nxa
                            pko_nxp/pko_nxp
                            ptp_lost/ptp_lost
                            undflw/undflw
                        ]
                        GMXX_BAD_REG(3)/none [
                            inb_nxa/None
                            loststat/None
                            out_ovr/None
                            statovr/None
                        ]
                        PCSX_INTX_REG(0,3)/PCSX_INTX_EN_REG(0,3) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(1,3)/PCSX_INTX_EN_REG(1,3) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(2,3)/PCSX_INTX_EN_REG(2,3) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(3,3)/PCSX_INTX_EN_REG(3,3) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSXX_INT_REG(3)/PCSXX_INT_EN_REG(3) [
                            algnlos/algnlos_en
                            bitlckls/bitlckls_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxsynbad/rxsynbad_en
                            synlos/synlos_en
                            txflt/txflt_en
                        ]
                    agx[4]/agx ->
                        GMXX_RXX_INT_REG(0,4)/GMXX_RXX_INT_EN(0,4) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(1,4)/GMXX_RXX_INT_EN(1,4) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(2,4)/GMXX_RXX_INT_EN(2,4) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_RXX_INT_REG(3,4)/GMXX_RXX_INT_EN(3,4) [
                            bad_seq/bad_seq
                            bad_term/bad_term
                            carext/carext
                            hg2cc/hg2cc
                            hg2fld/hg2fld
                            loc_fault/loc_fault
                            ovrerr/ovrerr
                            rem_fault/rem_fault
                            skperr/skperr
                            undat/undat
                            uneop/uneop
                            unsop/unsop
                        ]
                        GMXX_TX_INT_REG(4)/GMXX_TX_INT_EN(4) [
                            pko_nxa/pko_nxa
                            pko_nxp/pko_nxp
                            ptp_lost/ptp_lost
                            undflw/undflw
                        ]
                        GMXX_BAD_REG(4)/none [
                            inb_nxa/None
                            loststat/None
                            out_ovr/None
                            statovr/None
                        ]
                        PCSX_INTX_REG(0,4)/PCSX_INTX_EN_REG(0,4) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(1,4)/PCSX_INTX_EN_REG(1,4) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(2,4)/PCSX_INTX_EN_REG(2,4) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSX_INTX_REG(3,4)/PCSX_INTX_EN_REG(3,4) [
                            an_bad/an_bad_en
                            an_err/an_err_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxlock/rxlock_en
                            sync_bad/sync_bad_en
                            txbad/txbad_en
                            txfifo/txfifo_en
                            txfifu/txfifu_en
                        ]
                        PCSXX_INT_REG(4)/PCSXX_INT_EN_REG(4) [
                            algnlos/algnlos_en
                            bitlckls/bitlckls_en
                            dbg_sync/dbg_sync_en
                            rxbad/rxbad_en
                            rxsynbad/rxsynbad_en
                            synlos/synlos_en
                            txflt/txflt_en
                        ]
                    ilk/ilk ->
                        ILK_GBL_INT/ILK_GBL_INT_EN [
                            rxf_ctl_perr/rxf_ctl_perr
                            rxf_lnk0_perr/rxf_lnk0_perr
                            rxf_lnk1_perr/rxf_lnk1_perr
                            rxf_pop_empty/rxf_pop_empty
                            rxf_push_full/rxf_push_full
                        ]
                        ILK_TXX_INT(0)/ILK_TXX_INT_EN(0) [
                            bad_pipe/bad_pipe
                            bad_seq/bad_seq
                            txf_err/txf_err
                        ]
                        ILK_RXX_INT(0)/ILK_RXX_INT_EN(0) [
                            crc24_err/crc24_err
                            lane_bad_word/lane_bad_word
                            pkt_drop_rid/pkt_drop_rid
                            pkt_drop_rxf/pkt_drop_rxf
                            pkt_drop_sop/pkt_drop_sop
                        ]
                        ILK_TXX_INT(1)/ILK_TXX_INT_EN(1) [
                            bad_pipe/bad_pipe
                            bad_seq/bad_seq
                            txf_err/txf_err
                        ]
                        ILK_RXX_INT(1)/ILK_RXX_INT_EN(1) [
                            crc24_err/crc24_err
                            lane_bad_word/lane_bad_word
                            pkt_drop_rid/pkt_drop_rid
                            pkt_drop_rxf/pkt_drop_rxf
                            pkt_drop_sop/pkt_drop_sop
                        ]
                        ILK_RX_LNEX_INT(0)/ILK_RX_LNEX_INT_EN(0) [
                            bad_64b67b/bad_64b67b
                            bdry_sync_loss/bdry_sync_loss
                            crc32_err/crc32_err
                            dskew_fifo_ovfl/dskew_fifo_ovfl
                            scrm_sync_loss/scrm_sync_loss
                            serdes_lock_loss/serdes_lock_loss
                            stat_msg/stat_msg
                            ukwn_cntl_word/ukwn_cntl_word
                        ]
                        ILK_RX_LNEX_INT(1)/ILK_RX_LNEX_INT_EN(1) [
                            bad_64b67b/bad_64b67b
                            bdry_sync_loss/bdry_sync_loss
                            crc32_err/crc32_err
                            dskew_fifo_ovfl/dskew_fifo_ovfl
                            scrm_sync_loss/scrm_sync_loss
                            serdes_lock_loss/serdes_lock_loss
                            stat_msg/stat_msg
                            ukwn_cntl_word/ukwn_cntl_word
                        ]
                        ILK_RX_LNEX_INT(2)/ILK_RX_LNEX_INT_EN(2) [
                            bad_64b67b/bad_64b67b
                            bdry_sync_loss/bdry_sync_loss
                            crc32_err/crc32_err
                            dskew_fifo_ovfl/dskew_fifo_ovfl
                            scrm_sync_loss/scrm_sync_loss
                            serdes_lock_loss/serdes_lock_loss
                            stat_msg/stat_msg
                            ukwn_cntl_word/ukwn_cntl_word
                        ]
                        ILK_RX_LNEX_INT(3)/ILK_RX_LNEX_INT_EN(3) [
                            bad_64b67b/bad_64b67b
                            bdry_sync_loss/bdry_sync_loss
                            crc32_err/crc32_err
                            dskew_fifo_ovfl/dskew_fifo_ovfl
                            scrm_sync_loss/scrm_sync_loss
                            serdes_lock_loss/serdes_lock_loss
                            stat_msg/stat_msg
                            ukwn_cntl_word/ukwn_cntl_word
                        ]
                        ILK_RX_LNEX_INT(4)/ILK_RX_LNEX_INT_EN(4) [
                            bad_64b67b/bad_64b67b
                            bdry_sync_loss/bdry_sync_loss
                            crc32_err/crc32_err
                            dskew_fifo_ovfl/dskew_fifo_ovfl
                            scrm_sync_loss/scrm_sync_loss
                            serdes_lock_loss/serdes_lock_loss
                            stat_msg/stat_msg
                            ukwn_cntl_word/ukwn_cntl_word
                        ]
                        ILK_RX_LNEX_INT(5)/ILK_RX_LNEX_INT_EN(5) [
                            bad_64b67b/bad_64b67b
                            bdry_sync_loss/bdry_sync_loss
                            crc32_err/crc32_err
                            dskew_fifo_ovfl/dskew_fifo_ovfl
                            scrm_sync_loss/scrm_sync_loss
                            serdes_lock_loss/serdes_lock_loss
                            stat_msg/stat_msg
                            ukwn_cntl_word/ukwn_cntl_word
                        ]
                        ILK_RX_LNEX_INT(6)/ILK_RX_LNEX_INT_EN(6) [
                            bad_64b67b/bad_64b67b
                            bdry_sync_loss/bdry_sync_loss
                            crc32_err/crc32_err
                            dskew_fifo_ovfl/dskew_fifo_ovfl
                            scrm_sync_loss/scrm_sync_loss
                            serdes_lock_loss/serdes_lock_loss
                            stat_msg/stat_msg
                            ukwn_cntl_word/ukwn_cntl_word
                        ]
                        ILK_RX_LNEX_INT(7)/ILK_RX_LNEX_INT_EN(7) [
                            bad_64b67b/bad_64b67b
                            bdry_sync_loss/bdry_sync_loss
                            crc32_err/crc32_err
                            dskew_fifo_ovfl/dskew_fifo_ovfl
                            scrm_sync_loss/scrm_sync_loss
                            serdes_lock_loss/serdes_lock_loss
                            stat_msg/stat_msg
                            ukwn_cntl_word/ukwn_cntl_word
                        ]
                    mii/mii ->
                        MIXX_ISR(0)/MIXX_INTENA(0) [
                            data_drp/data_drpena
                            idblovf/ivfena
                            irun/irunena
                            odblovf/ovfena
                            orun/orunena
                        ]
                        MIXX_ISR(1)/MIXX_INTENA(1) [
                            data_drp/data_drpena
                            idblovf/ivfena
                            irun/irunena
                            odblovf/ovfena
                            orun/orunena
                        ]
                ]
            rml/None ->
                CIU2_SRC_PPX_IP2_RML(0)/CIU2_EN_PPX_IP2_RML(0) [
                    dfa/dfa ->
                        DFA_ERROR/DFA_INTMSK [
                            dblovf/dblina
                            dc0perr/dc0pena
                            dc1perr/dc1pena
                            dc2perr/dc2pena
                            dfanxm/dfanxmena
                            dlc0_ovferr/dlc0_ovfena
                            dlc1_ovferr/dlc1_ovfena
                            replerr/replerrena
                        ]
                    dpi/dpi ->
                        DPI_INT_REG/DPI_INT_EN [
                            dmadbo/dmadbo
                            nderr/nderr
                            nfovr/nfovr
                            req_anull/req_anull
                            req_badadr/req_badadr
                            req_badfil/req_badfil
                            req_badlen/req_badlen
                            req_inull/req_inull
                            req_ovrflw/req_ovrflw
                            req_undflw/req_undflw
                            sprt0_rst/sprt0_rst
                            sprt1_rst/sprt1_rst
                            sprt2_rst/sprt2_rst
                            sprt3_rst/sprt3_rst
                        ]
                        DPI_PKT_ERR_RSP/none [
                            pkterr/None
                        ]
                        DPI_REQ_ERR_RSP/none [
                            qerr/None
                        ]
                        DPI_REQ_ERR_RST/none [
                            qerr/None
                        ]
                    fpa/fpa ->
                        FPA_INT_SUM/FPA_INT_ENB [
                            fed0_dbe/fed0_dbe
                            fed0_sbe/fed0_sbe
                            fed1_dbe/fed1_dbe
                            fed1_sbe/fed1_sbe
                            free0/free0
                            free1/free1
                            free2/free2
                            free3/free3
                            free4/free4
                            free5/free5
                            free6/free6
                            free7/free7
                            free8/free8
                            paddr_e/paddr_e
                            pool0th/pool0th
                            pool1th/pool1th
                            pool2th/pool2th
                            pool3th/pool3th
                            pool4th/pool4th
                            pool5th/pool5th
                            pool6th/pool6th
                            pool7th/pool7th
                            pool8th/pool8th
                            q0_coff/q0_coff
                            q0_perr/q0_perr
                            q0_und/q0_und
                            q1_coff/q1_coff
                            q1_perr/q1_perr
                            q1_und/q1_und
                            q2_coff/q2_coff
                            q2_perr/q2_perr
                            q2_und/q2_und
                            q3_coff/q3_coff
                            q3_perr/q3_perr
                            q3_und/q3_und
                            q4_coff/q4_coff
                            q4_perr/q4_perr
                            q4_und/q4_und
                            q5_coff/q5_coff
                            q5_perr/q5_perr
                            q5_und/q5_und
                            q6_coff/q6_coff
                            q6_perr/q6_perr
                            q6_und/q6_und
                            q7_coff/q7_coff
                            q7_perr/q7_perr
                            q7_und/q7_und
                            q8_coff/q8_coff
                            q8_perr/q8_perr
                            q8_und/q8_und
                        ]
                    iob/iob ->
                        IOB0_INT_SUM/IOB0_INT_ENB [
                            np_dat/np_dat
                            np_eop/np_eop
                            np_sop/np_sop
                            p_dat/p_dat
                            p_eop/p_eop
                            p_sop/p_sop
                        ]
                    ipd/ipd ->
                        IPD_INT_SUM/IPD_INT_ENB [
                            bc_ovr/bc_ovr
                            bp_sub/bp_sub
                            c_coll/c_coll
                            cc_ovr/cc_ovr
                            d_coll/d_coll
                            dat/dat
                            dc_ovr/dc_ovr
                            eop/eop
                            prc_par0/prc_par0
                            prc_par1/prc_par1
                            prc_par2/prc_par2
                            prc_par3/prc_par3
                            pw0_dbe/pw0_dbe
                            pw0_sbe/pw0_sbe
                            pw1_dbe/pw1_dbe
                            pw1_sbe/pw1_sbe
                            pw2_dbe/pw2_dbe
                            pw2_sbe/pw2_sbe
                            pw3_dbe/pw3_dbe
                            pw3_sbe/pw3_sbe
                            sop/sop
                        ]
                    key/key ->
                        KEY_INT_SUM/KEY_INT_ENB [
                            ked0_dbe/ked0_dbe
                            ked0_sbe/ked0_sbe
                            ked1_dbe/ked1_dbe
                            ked1_sbe/ked1_sbe
                        ]
                    l2c/l2c ->
                        L2C_INT_REG/L2C_INT_ENA [
                            bigrd/bigrd
                            bigwr/bigwr
                            holerd/holerd
                            holewr/holewr
                            tad0/None ->
                                L2C_TADX_INT(0)/L2C_TADX_IEN(0) [
                                    l2ddbe/l2ddbe
                                    l2dsbe/l2dsbe
                                    noway/noway
                                    rddislmc/rddislmc
                                    tagdbe/tagdbe
                                    tagsbe/tagsbe
                                    vbfdbe/vbfdbe
                                    vbfsbe/vbfsbe
                                    wrdislmc/wrdislmc
                                ]
                            tad1/None ->
                                L2C_TADX_INT(1)/L2C_TADX_IEN(1) [
                                    l2ddbe/l2ddbe
                                    l2dsbe/l2dsbe
                                    noway/noway
                                    rddislmc/rddislmc
                                    tagdbe/tagdbe
                                    tagsbe/tagsbe
                                    vbfdbe/vbfdbe
                                    vbfsbe/vbfsbe
                                    wrdislmc/wrdislmc
                                ]
                            tad2/None ->
                                L2C_TADX_INT(2)/L2C_TADX_IEN(2) [
                                    l2ddbe/l2ddbe
                                    l2dsbe/l2dsbe
                                    noway/noway
                                    rddislmc/rddislmc
                                    tagdbe/tagdbe
                                    tagsbe/tagsbe
                                    vbfdbe/vbfdbe
                                    vbfsbe/vbfsbe
                                    wrdislmc/wrdislmc
                                ]
                            tad3/None ->
                                L2C_TADX_INT(3)/L2C_TADX_IEN(3) [
                                    l2ddbe/l2ddbe
                                    l2dsbe/l2dsbe
                                    noway/noway
                                    rddislmc/rddislmc
                                    tagdbe/tagdbe
                                    tagsbe/tagsbe
                                    vbfdbe/vbfdbe
                                    vbfsbe/vbfsbe
                                    wrdislmc/wrdislmc
                                ]
                            vrtadrng/vrtadrng
                            vrtidrng/vrtidrng
                            vrtpe/vrtpe
                            vrtwr/vrtwr
                        ]
                    pip/pip ->
                        PIP_INT_REG/PIP_INT_EN [
                            badtag/badtag
                            beperr/beperr
                            feperr/feperr
                            prtnxa/prtnxa
                            punyerr/punyerr
                            skprunt/skprunt
                            todoovr/todoovr
                        ]
                    pko/pko ->
                        PKO_REG_ERROR/PKO_REG_INT_MASK [
                            currzero/currzero
                            doorbell/doorbell
                            loopback/loopback
                            parity/parity
                        ]
                    rad/rad ->
                        RAD_REG_ERROR/RAD_REG_INT_MASK [
                            doorbell/doorbell
                        ]
                    sso/sso ->
                        SSO_ERR/SSO_ERR_ENB [
                            awe/awe_ie
                            bfp/bfp_ie
                            fidx_dbe/fidx_dbe_ie
                            fidx_sbe/fidx_sbe_ie
                            fpe/fpe_ie
                            idx_dbe/idx_dbe_ie
                            idx_sbe/idx_sbe_ie
                            iop/iop_ie
                            oth_dbe0/oth_dbe0_ie
                            oth_dbe1/oth_dbe1_ie
                            oth_sbe0/oth_sbe0_ie
                            oth_sbe1/oth_sbe1_ie
                            pnd_dbe0/pnd_dbe0_ie
                            pnd_dbe1/pnd_dbe1_ie
                            pnd_sbe0/pnd_sbe0_ie
                            pnd_sbe1/pnd_sbe1_ie
                        ]
                    tim/tim ->
                        TIM_INT0/TIM_INT0_EN [
                            int0/int0_en
                        ]
                        TIM_INT_ECCERR/TIM_INT_ECCERR_EN [
                            dbe/dbe_en
                            sbe/sbe_en
                        ]
                    zip/zip ->
                        ZIP_ERROR/ZIP_INT_MASK [
                            doorbell/doorbell
                        ]
                        ZIP_INT_REG/ZIP_INT_ENA [
                            doorbell0/doorbell0
                            doorbell1/doorbell1
                            ibdbe/ibdbe
                            ibsbe/ibsbe
                        ]
                ]
        ]
]
*/
void bdk_error_check(void)
{

static void check_agl(void)
{
    {
        BDK_CSR_INIT(c, BDK_AGL_GMX_BAD_REG);
        CHECK_ERROR(BDK_AGL_GMX_BAD_REG, loststat);
        CHECK_ERROR(BDK_AGL_GMX_BAD_REG, out_ovr);
        CHECK_ERROR(BDK_AGL_GMX_BAD_REG, ovrflw);
        CHECK_ERROR(BDK_AGL_GMX_BAD_REG, ovrflw1);
        CHECK_ERROR(BDK_AGL_GMX_BAD_REG, txpop);
        CHECK_ERROR(BDK_AGL_GMX_BAD_REG, txpop1);
        CHECK_ERROR(BDK_AGL_GMX_BAD_REG, txpsh);
        CHECK_ERROR(BDK_AGL_GMX_BAD_REG, txpsh1);
    }
    {
        BDK_CSR_INIT(c, BDK_AGL_GMX_RXX_INT_REG(0));
        CHECK_ERROR(BDK_AGL_GMX_RXX_INT_REG(0), ovrerr);
        CHECK_ERROR(BDK_AGL_GMX_RXX_INT_REG(0), skperr);
    }
    {
        BDK_CSR_INIT(c, BDK_AGL_GMX_RXX_INT_REG(1));
        CHECK_ERROR(BDK_AGL_GMX_RXX_INT_REG(1), ovrerr);
        CHECK_ERROR(BDK_AGL_GMX_RXX_INT_REG(1), skperr);
    }
    {
        BDK_CSR_INIT(c, BDK_AGL_GMX_TX_INT_REG);
        CHECK_ERROR(BDK_AGL_GMX_TX_INT_REG, pko_nxa);
        CHECK_ERROR(BDK_AGL_GMX_TX_INT_REG, undflw);
    }
}

static void check_dfa(void)
{
    BDK_CSR_INIT(c, BDK_DFA_ERROR);
    CHECK_ERROR(BDK_DFA_ERROR, dblovf);
    CHECK_ERROR(BDK_DFA_ERROR, dc0perr);
    CHECK_ERROR(BDK_DFA_ERROR, dc1perr);
    CHECK_ERROR(BDK_DFA_ERROR, dc2perr);
    CHECK_ERROR(BDK_DFA_ERROR, dfanxm);
    CHECK_ERROR(BDK_DFA_ERROR, dlc0_ovferr);
    CHECK_ERROR(BDK_DFA_ERROR, dlc1_ovferr);
    CHECK_ERROR(BDK_DFA_ERROR, replerr);
}

static void check_dpi(void)
{
    {
        BDK_CSR_INIT(c, BDK_DPI_INT_REG);
        CHECK_ERROR(BDK_DPI_INT_REG, dmadbo);
        CHECK_ERROR(BDK_DPI_INT_REG, nderr);
        CHECK_ERROR(BDK_DPI_INT_REG, nfovr);
        CHECK_ERROR(BDK_DPI_INT_REG, req_anull);
        CHECK_ERROR(BDK_DPI_INT_REG, req_badadr);
        CHECK_ERROR(BDK_DPI_INT_REG, req_badfil);
        CHECK_ERROR(BDK_DPI_INT_REG, req_badlen);
        CHECK_ERROR(BDK_DPI_INT_REG, req_inull);
        CHECK_ERROR(BDK_DPI_INT_REG, req_ovrflw);
        CHECK_ERROR(BDK_DPI_INT_REG, req_undflw);
        CHECK_ERROR(BDK_DPI_INT_REG, sprt0_rst);
        CHECK_ERROR(BDK_DPI_INT_REG, sprt1_rst);
        CHECK_ERROR(BDK_DPI_INT_REG, sprt2_rst);
        CHECK_ERROR(BDK_DPI_INT_REG, sprt3_rst);
    }
    {
        BDK_CSR_INIT(c, BDK_DPI_PKT_ERR_RSP);
        CHECK_ERROR(BDK_DPI_PKT_ERR_RSP, pkterr);
    }
    {
        BDK_CSR_INIT(c, BDK_DPI_REQ_ERR_RSP);
        CHECK_ERROR(BDK_DPI_REQ_ERR_RSP, qerr);
    }
    {
        BDK_CSR_INIT(c, BDK_DPI_REQ_ERR_RST);
        CHECK_ERROR(BDK_DPI_REQ_ERR_RST, qerr);
    }
}

static void check_fpa(void)
{
    BDK_CSR_INIT(c, BDK_FPA_INT_SUM);
    CHECK_ERROR(BDK_FPA_INT_SUM, fed0_dbe);
    CHECK_ERROR(BDK_FPA_INT_SUM, fed0_sbe);
    CHECK_ERROR(BDK_FPA_INT_SUM, fed1_dbe);
    CHECK_ERROR(BDK_FPA_INT_SUM, fed1_sbe);
    CHECK_ERROR(BDK_FPA_INT_SUM, free0);
    CHECK_ERROR(BDK_FPA_INT_SUM, free1);
    CHECK_ERROR(BDK_FPA_INT_SUM, free2);
    CHECK_ERROR(BDK_FPA_INT_SUM, free3);
    CHECK_ERROR(BDK_FPA_INT_SUM, free4);
    CHECK_ERROR(BDK_FPA_INT_SUM, free5);
    CHECK_ERROR(BDK_FPA_INT_SUM, free6);
    CHECK_ERROR(BDK_FPA_INT_SUM, free7);
    CHECK_ERROR(BDK_FPA_INT_SUM, free8);
    CHECK_ERROR(BDK_FPA_INT_SUM, paddr_e);
    CHECK_ERROR(BDK_FPA_INT_SUM, pool0th);
    CHECK_ERROR(BDK_FPA_INT_SUM, pool1th);
    CHECK_ERROR(BDK_FPA_INT_SUM, pool2th);
    CHECK_ERROR(BDK_FPA_INT_SUM, pool3th);
    CHECK_ERROR(BDK_FPA_INT_SUM, pool4th);
    CHECK_ERROR(BDK_FPA_INT_SUM, pool5th);
    CHECK_ERROR(BDK_FPA_INT_SUM, pool6th);
    CHECK_ERROR(BDK_FPA_INT_SUM, pool7th);
    CHECK_ERROR(BDK_FPA_INT_SUM, pool8th);
    CHECK_ERROR(BDK_FPA_INT_SUM, q0_coff);
    CHECK_ERROR(BDK_FPA_INT_SUM, q0_perr);
    CHECK_ERROR(BDK_FPA_INT_SUM, q0_und);
    CHECK_ERROR(BDK_FPA_INT_SUM, q1_coff);
    CHECK_ERROR(BDK_FPA_INT_SUM, q1_perr);
    CHECK_ERROR(BDK_FPA_INT_SUM, q1_und);
    CHECK_ERROR(BDK_FPA_INT_SUM, q2_coff);
    CHECK_ERROR(BDK_FPA_INT_SUM, q2_perr);
    CHECK_ERROR(BDK_FPA_INT_SUM, q2_und);
    CHECK_ERROR(BDK_FPA_INT_SUM, q3_coff);
    CHECK_ERROR(BDK_FPA_INT_SUM, q3_perr);
    CHECK_ERROR(BDK_FPA_INT_SUM, q3_und);
    CHECK_ERROR(BDK_FPA_INT_SUM, q4_coff);
    CHECK_ERROR(BDK_FPA_INT_SUM, q4_perr);
    CHECK_ERROR(BDK_FPA_INT_SUM, q4_und);
    CHECK_ERROR(BDK_FPA_INT_SUM, q5_coff);
    CHECK_ERROR(BDK_FPA_INT_SUM, q5_perr);
    CHECK_ERROR(BDK_FPA_INT_SUM, q5_und);
    CHECK_ERROR(BDK_FPA_INT_SUM, q6_coff);
    CHECK_ERROR(BDK_FPA_INT_SUM, q6_perr);
    CHECK_ERROR(BDK_FPA_INT_SUM, q6_und);
    CHECK_ERROR(BDK_FPA_INT_SUM, q7_coff);
    CHECK_ERROR(BDK_FPA_INT_SUM, q7_perr);
    CHECK_ERROR(BDK_FPA_INT_SUM, q7_und);
    CHECK_ERROR(BDK_FPA_INT_SUM, q8_coff);
    CHECK_ERROR(BDK_FPA_INT_SUM, q8_perr);
    CHECK_ERROR(BDK_FPA_INT_SUM, q8_und);
}

static void check_gmx(void)
{
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(0,0));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,0), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(1,0));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,0), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(2,0));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,0), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(3,0));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,0), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_TX_INT_REG(0));
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(0), pko_nxa);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(0), pko_nxp);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(0), ptp_lost);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(0), undflw);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_BAD_REG(0));
        CHECK_ERROR(BDK_GMXX_BAD_REG(0), inb_nxa);
        CHECK_ERROR(BDK_GMXX_BAD_REG(0), loststat);
        CHECK_ERROR(BDK_GMXX_BAD_REG(0), out_ovr);
        CHECK_ERROR(BDK_GMXX_BAD_REG(0), statovr);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(0,1));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,1), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(1,1));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,1), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(2,1));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,1), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(3,1));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,1), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_TX_INT_REG(1));
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(1), pko_nxa);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(1), pko_nxp);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(1), ptp_lost);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(1), undflw);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_BAD_REG(1));
        CHECK_ERROR(BDK_GMXX_BAD_REG(1), inb_nxa);
        CHECK_ERROR(BDK_GMXX_BAD_REG(1), loststat);
        CHECK_ERROR(BDK_GMXX_BAD_REG(1), out_ovr);
        CHECK_ERROR(BDK_GMXX_BAD_REG(1), statovr);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(0,3));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,3), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(1,3));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,3), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(2,3));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,3), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(3,3));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,3), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_TX_INT_REG(3));
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(3), pko_nxa);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(3), pko_nxp);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(3), ptp_lost);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(3), undflw);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_BAD_REG(3));
        CHECK_ERROR(BDK_GMXX_BAD_REG(3), inb_nxa);
        CHECK_ERROR(BDK_GMXX_BAD_REG(3), loststat);
        CHECK_ERROR(BDK_GMXX_BAD_REG(3), out_ovr);
        CHECK_ERROR(BDK_GMXX_BAD_REG(3), statovr);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(0,2));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,2), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(1,2));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,2), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(2,2));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,2), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(3,2));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,2), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_TX_INT_REG(2));
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(2), pko_nxa);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(2), pko_nxp);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(2), ptp_lost);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(2), undflw);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_BAD_REG(2));
        CHECK_ERROR(BDK_GMXX_BAD_REG(2), inb_nxa);
        CHECK_ERROR(BDK_GMXX_BAD_REG(2), loststat);
        CHECK_ERROR(BDK_GMXX_BAD_REG(2), out_ovr);
        CHECK_ERROR(BDK_GMXX_BAD_REG(2), statovr);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(0,4));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(0,4), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(1,4));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(1,4), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(2,4));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(2,4), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_RXX_INT_REG(3,4));
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), bad_seq);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), bad_term);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), carext);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), hg2cc);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), hg2fld);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), loc_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), ovrerr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), rem_fault);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), skperr);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), undat);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), uneop);
        CHECK_ERROR(BDK_GMXX_RXX_INT_REG(3,4), unsop);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_TX_INT_REG(4));
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(4), pko_nxa);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(4), pko_nxp);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(4), ptp_lost);
        CHECK_ERROR(BDK_GMXX_TX_INT_REG(4), undflw);
    }
    {
        BDK_CSR_INIT(c, BDK_GMXX_BAD_REG(4));
        CHECK_ERROR(BDK_GMXX_BAD_REG(4), inb_nxa);
        CHECK_ERROR(BDK_GMXX_BAD_REG(4), loststat);
        CHECK_ERROR(BDK_GMXX_BAD_REG(4), out_ovr);
        CHECK_ERROR(BDK_GMXX_BAD_REG(4), statovr);
    }
}

static void check_ilk(void)
{
    {
        BDK_CSR_INIT(c, BDK_ILK_GBL_INT);
        CHECK_ERROR(BDK_ILK_GBL_INT, rxf_ctl_perr);
        CHECK_ERROR(BDK_ILK_GBL_INT, rxf_lnk0_perr);
        CHECK_ERROR(BDK_ILK_GBL_INT, rxf_lnk1_perr);
        CHECK_ERROR(BDK_ILK_GBL_INT, rxf_pop_empty);
        CHECK_ERROR(BDK_ILK_GBL_INT, rxf_push_full);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_TXX_INT(0));
        CHECK_ERROR(BDK_ILK_TXX_INT(0), bad_pipe);
        CHECK_ERROR(BDK_ILK_TXX_INT(0), bad_seq);
        CHECK_ERROR(BDK_ILK_TXX_INT(0), txf_err);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_RXX_INT(0));
        CHECK_ERROR(BDK_ILK_RXX_INT(0), crc24_err);
        CHECK_ERROR(BDK_ILK_RXX_INT(0), lane_bad_word);
        CHECK_ERROR(BDK_ILK_RXX_INT(0), pkt_drop_rid);
        CHECK_ERROR(BDK_ILK_RXX_INT(0), pkt_drop_rxf);
        CHECK_ERROR(BDK_ILK_RXX_INT(0), pkt_drop_sop);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_TXX_INT(1));
        CHECK_ERROR(BDK_ILK_TXX_INT(1), bad_pipe);
        CHECK_ERROR(BDK_ILK_TXX_INT(1), bad_seq);
        CHECK_ERROR(BDK_ILK_TXX_INT(1), txf_err);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_RXX_INT(1));
        CHECK_ERROR(BDK_ILK_RXX_INT(1), crc24_err);
        CHECK_ERROR(BDK_ILK_RXX_INT(1), lane_bad_word);
        CHECK_ERROR(BDK_ILK_RXX_INT(1), pkt_drop_rid);
        CHECK_ERROR(BDK_ILK_RXX_INT(1), pkt_drop_rxf);
        CHECK_ERROR(BDK_ILK_RXX_INT(1), pkt_drop_sop);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_RX_LNEX_INT(0));
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(0), bad_64b67b);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(0), bdry_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(0), crc32_err);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(0), dskew_fifo_ovfl);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(0), scrm_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(0), serdes_lock_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(0), stat_msg);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(0), ukwn_cntl_word);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_RX_LNEX_INT(1));
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(1), bad_64b67b);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(1), bdry_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(1), crc32_err);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(1), dskew_fifo_ovfl);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(1), scrm_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(1), serdes_lock_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(1), stat_msg);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(1), ukwn_cntl_word);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_RX_LNEX_INT(2));
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(2), bad_64b67b);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(2), bdry_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(2), crc32_err);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(2), dskew_fifo_ovfl);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(2), scrm_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(2), serdes_lock_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(2), stat_msg);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(2), ukwn_cntl_word);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_RX_LNEX_INT(3));
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(3), bad_64b67b);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(3), bdry_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(3), crc32_err);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(3), dskew_fifo_ovfl);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(3), scrm_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(3), serdes_lock_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(3), stat_msg);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(3), ukwn_cntl_word);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_RX_LNEX_INT(4));
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(4), bad_64b67b);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(4), bdry_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(4), crc32_err);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(4), dskew_fifo_ovfl);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(4), scrm_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(4), serdes_lock_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(4), stat_msg);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(4), ukwn_cntl_word);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_RX_LNEX_INT(5));
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(5), bad_64b67b);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(5), bdry_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(5), crc32_err);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(5), dskew_fifo_ovfl);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(5), scrm_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(5), serdes_lock_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(5), stat_msg);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(5), ukwn_cntl_word);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_RX_LNEX_INT(6));
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(6), bad_64b67b);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(6), bdry_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(6), crc32_err);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(6), dskew_fifo_ovfl);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(6), scrm_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(6), serdes_lock_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(6), stat_msg);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(6), ukwn_cntl_word);
    }
    {
        BDK_CSR_INIT(c, BDK_ILK_RX_LNEX_INT(7));
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(7), bad_64b67b);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(7), bdry_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(7), crc32_err);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(7), dskew_fifo_ovfl);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(7), scrm_sync_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(7), serdes_lock_loss);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(7), stat_msg);
        CHECK_ERROR(BDK_ILK_RX_LNEX_INT(7), ukwn_cntl_word);
    }
}

static void check_iob(void)
{
    BDK_CSR_INIT(c, BDK_IOB0_INT_SUM);
    CHECK_ERROR(BDK_IOB0_INT_SUM, np_dat);
    CHECK_ERROR(BDK_IOB0_INT_SUM, np_eop);
    CHECK_ERROR(BDK_IOB0_INT_SUM, np_sop);
    CHECK_ERROR(BDK_IOB0_INT_SUM, p_dat);
    CHECK_ERROR(BDK_IOB0_INT_SUM, p_eop);
    CHECK_ERROR(BDK_IOB0_INT_SUM, p_sop);
}

static void check_ipd(void)
{
    BDK_CSR_INIT(c, BDK_IPD_INT_SUM);
    CHECK_ERROR(BDK_IPD_INT_SUM, bc_ovr);
    CHECK_ERROR(BDK_IPD_INT_SUM, bp_sub);
    CHECK_ERROR(BDK_IPD_INT_SUM, c_coll);
    CHECK_ERROR(BDK_IPD_INT_SUM, cc_ovr);
    CHECK_ERROR(BDK_IPD_INT_SUM, d_coll);
    CHECK_ERROR(BDK_IPD_INT_SUM, dat);
    CHECK_ERROR(BDK_IPD_INT_SUM, dc_ovr);
    CHECK_ERROR(BDK_IPD_INT_SUM, eop);
    CHECK_ERROR(BDK_IPD_INT_SUM, prc_par0);
    CHECK_ERROR(BDK_IPD_INT_SUM, prc_par1);
    CHECK_ERROR(BDK_IPD_INT_SUM, prc_par2);
    CHECK_ERROR(BDK_IPD_INT_SUM, prc_par3);
    CHECK_ERROR(BDK_IPD_INT_SUM, pw0_dbe);
    CHECK_ERROR(BDK_IPD_INT_SUM, pw0_sbe);
    CHECK_ERROR(BDK_IPD_INT_SUM, pw1_dbe);
    CHECK_ERROR(BDK_IPD_INT_SUM, pw1_sbe);
    CHECK_ERROR(BDK_IPD_INT_SUM, pw2_dbe);
    CHECK_ERROR(BDK_IPD_INT_SUM, pw2_sbe);
    CHECK_ERROR(BDK_IPD_INT_SUM, pw3_dbe);
    CHECK_ERROR(BDK_IPD_INT_SUM, pw3_sbe);
    CHECK_ERROR(BDK_IPD_INT_SUM, sop);
}

static void check_key(void)
{
    BDK_CSR_INIT(c, BDK_KEY_INT_SUM);
    CHECK_ERROR(BDK_KEY_INT_SUM, ked0_dbe);
    CHECK_ERROR(BDK_KEY_INT_SUM, ked0_sbe);
    CHECK_ERROR(BDK_KEY_INT_SUM, ked1_dbe);
    CHECK_ERROR(BDK_KEY_INT_SUM, ked1_sbe);
}

static void check_l2c(void)
{
    BDK_CSR_INIT(c, BDK_L2C_INT_REG);
    CHECK_ERROR(BDK_L2C_INT_REG, bigrd);
    CHECK_ERROR(BDK_L2C_INT_REG, bigwr);
    CHECK_ERROR(BDK_L2C_INT_REG, holerd);
    CHECK_ERROR(BDK_L2C_INT_REG, holewr);
    if (c.s.tad0)
    {
        check_l2c_tad() /* L2C_TADX_INT(0) */
    }
    if (c.s.tad1)
    {
        check_l2c_tad() /* L2C_TADX_INT(1) */
    }
    if (c.s.tad2)
    {
        check_l2c_tad() /* L2C_TADX_INT(2) */
    }
    if (c.s.tad3)
    {
        check_l2c_tad() /* L2C_TADX_INT(3) */
    }
    CHECK_ERROR(BDK_L2C_INT_REG, vrtadrng);
    CHECK_ERROR(BDK_L2C_INT_REG, vrtidrng);
    CHECK_ERROR(BDK_L2C_INT_REG, vrtpe);
    CHECK_ERROR(BDK_L2C_INT_REG, vrtwr);
}

static void check_l2c_tad(void)
{
    {
        BDK_CSR_INIT(c, BDK_L2C_TADX_INT(1));
        CHECK_ERROR(BDK_L2C_TADX_INT(1), l2ddbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(1), l2dsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(1), noway);
        CHECK_ERROR(BDK_L2C_TADX_INT(1), rddislmc);
        CHECK_ERROR(BDK_L2C_TADX_INT(1), tagdbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(1), tagsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(1), vbfdbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(1), vbfsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(1), wrdislmc);
    }
    {
        BDK_CSR_INIT(c, BDK_L2C_TADX_INT(0));
        CHECK_ERROR(BDK_L2C_TADX_INT(0), l2ddbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(0), l2dsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(0), noway);
        CHECK_ERROR(BDK_L2C_TADX_INT(0), rddislmc);
        CHECK_ERROR(BDK_L2C_TADX_INT(0), tagdbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(0), tagsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(0), vbfdbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(0), vbfsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(0), wrdislmc);
    }
    {
        BDK_CSR_INIT(c, BDK_L2C_TADX_INT(3));
        CHECK_ERROR(BDK_L2C_TADX_INT(3), l2ddbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(3), l2dsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(3), noway);
        CHECK_ERROR(BDK_L2C_TADX_INT(3), rddislmc);
        CHECK_ERROR(BDK_L2C_TADX_INT(3), tagdbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(3), tagsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(3), vbfdbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(3), vbfsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(3), wrdislmc);
    }
    {
        BDK_CSR_INIT(c, BDK_L2C_TADX_INT(2));
        CHECK_ERROR(BDK_L2C_TADX_INT(2), l2ddbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(2), l2dsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(2), noway);
        CHECK_ERROR(BDK_L2C_TADX_INT(2), rddislmc);
        CHECK_ERROR(BDK_L2C_TADX_INT(2), tagdbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(2), tagsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(2), vbfdbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(2), vbfsbe);
        CHECK_ERROR(BDK_L2C_TADX_INT(2), wrdislmc);
    }
}

static void check_lmc(void)
{
    {
        BDK_CSR_INIT(c, BDK_LMCX_INT(0));
        CHECK_ERROR(BDK_LMCX_INT(0), ded_err);
        CHECK_ERROR(BDK_LMCX_INT(0), nxm_wr_err);
        CHECK_ERROR(BDK_LMCX_INT(0), sec_err);
    }
    {
        BDK_CSR_INIT(c, BDK_LMCX_INT(2));
        CHECK_ERROR(BDK_LMCX_INT(2), ded_err);
        CHECK_ERROR(BDK_LMCX_INT(2), nxm_wr_err);
        CHECK_ERROR(BDK_LMCX_INT(2), sec_err);
    }
    {
        BDK_CSR_INIT(c, BDK_LMCX_INT(1));
        CHECK_ERROR(BDK_LMCX_INT(1), ded_err);
        CHECK_ERROR(BDK_LMCX_INT(1), nxm_wr_err);
        CHECK_ERROR(BDK_LMCX_INT(1), sec_err);
    }
    {
        BDK_CSR_INIT(c, BDK_LMCX_INT(3));
        CHECK_ERROR(BDK_LMCX_INT(3), ded_err);
        CHECK_ERROR(BDK_LMCX_INT(3), nxm_wr_err);
        CHECK_ERROR(BDK_LMCX_INT(3), sec_err);
    }
}

static void check_mio(void)
{
    {
        BDK_CSR_INIT(c, BDK_MIO_BOOT_ERR);
        CHECK_ERROR(BDK_MIO_BOOT_ERR, adr_err);
        CHECK_ERROR(BDK_MIO_BOOT_ERR, wait_err);
    }
    {
        BDK_CSR_INIT(c, BDK_MIO_RST_INT);
        CHECK_ERROR(BDK_MIO_RST_INT, perst0);
        CHECK_ERROR(BDK_MIO_RST_INT, perst1);
        CHECK_ERROR(BDK_MIO_RST_INT, rst_link0);
        CHECK_ERROR(BDK_MIO_RST_INT, rst_link1);
        CHECK_ERROR(BDK_MIO_RST_INT, rst_link2);
        CHECK_ERROR(BDK_MIO_RST_INT, rst_link3);
    }
}

static void check_mix(void)
{
    {
        BDK_CSR_INIT(c, BDK_MIXX_ISR(0));
        CHECK_ERROR(BDK_MIXX_ISR(0), data_drp);
        CHECK_ERROR(BDK_MIXX_ISR(0), idblovf);
        CHECK_ERROR(BDK_MIXX_ISR(0), irun);
        CHECK_ERROR(BDK_MIXX_ISR(0), odblovf);
        CHECK_ERROR(BDK_MIXX_ISR(0), orun);
    }
    {
        BDK_CSR_INIT(c, BDK_MIXX_ISR(1));
        CHECK_ERROR(BDK_MIXX_ISR(1), data_drp);
        CHECK_ERROR(BDK_MIXX_ISR(1), idblovf);
        CHECK_ERROR(BDK_MIXX_ISR(1), irun);
        CHECK_ERROR(BDK_MIXX_ISR(1), odblovf);
        CHECK_ERROR(BDK_MIXX_ISR(1), orun);
    }
}

static void check_nand(void)
{
    BDK_CSR_INIT(c, BDK_NDF_INT);
    CHECK_ERROR(BDK_NDF_INT, ecc_1bit);
    CHECK_ERROR(BDK_NDF_INT, ecc_mult);
    CHECK_ERROR(BDK_NDF_INT, ovrf);
    CHECK_ERROR(BDK_NDF_INT, sm_bad);
    CHECK_ERROR(BDK_NDF_INT, wdog);
}

static void check_pcm(void)
{
    {
        BDK_CSR_INIT(c, BDK_PCMX_INT_SUM(0));
        CHECK_ERROR(BDK_PCMX_INT_SUM(0), fsyncextra);
        CHECK_ERROR(BDK_PCMX_INT_SUM(0), fsyncmissed);
        CHECK_ERROR(BDK_PCMX_INT_SUM(0), rxovf);
        CHECK_ERROR(BDK_PCMX_INT_SUM(0), txempty);
    }
    {
        BDK_CSR_INIT(c, BDK_PCMX_INT_SUM(1));
        CHECK_ERROR(BDK_PCMX_INT_SUM(1), fsyncextra);
        CHECK_ERROR(BDK_PCMX_INT_SUM(1), fsyncmissed);
        CHECK_ERROR(BDK_PCMX_INT_SUM(1), rxovf);
        CHECK_ERROR(BDK_PCMX_INT_SUM(1), txempty);
    }
    {
        BDK_CSR_INIT(c, BDK_PCMX_INT_SUM(2));
        CHECK_ERROR(BDK_PCMX_INT_SUM(2), fsyncextra);
        CHECK_ERROR(BDK_PCMX_INT_SUM(2), fsyncmissed);
        CHECK_ERROR(BDK_PCMX_INT_SUM(2), rxovf);
        CHECK_ERROR(BDK_PCMX_INT_SUM(2), txempty);
    }
    {
        BDK_CSR_INIT(c, BDK_PCMX_INT_SUM(3));
        CHECK_ERROR(BDK_PCMX_INT_SUM(3), fsyncextra);
        CHECK_ERROR(BDK_PCMX_INT_SUM(3), fsyncmissed);
        CHECK_ERROR(BDK_PCMX_INT_SUM(3), rxovf);
        CHECK_ERROR(BDK_PCMX_INT_SUM(3), txempty);
    }
}

static void check_pcs(void)
{
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(0,1));
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,1), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,1), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,1), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,1), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,1), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,1), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,1), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,1), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,1), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(1,1));
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,1), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,1), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,1), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,1), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,1), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,1), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,1), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,1), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,1), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(2,1));
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,1), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,1), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,1), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,1), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,1), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,1), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,1), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,1), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,1), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(3,1));
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,1), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,1), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,1), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,1), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,1), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,1), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,1), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,1), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,1), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(0,0));
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,0), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,0), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,0), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,0), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,0), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,0), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,0), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,0), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,0), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(1,0));
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,0), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,0), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,0), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,0), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,0), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,0), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,0), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,0), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,0), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(2,0));
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,0), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,0), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,0), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,0), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,0), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,0), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,0), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,0), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,0), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(3,0));
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,0), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,0), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,0), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,0), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,0), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,0), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,0), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,0), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,0), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(0,3));
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,3), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,3), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,3), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,3), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,3), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,3), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,3), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,3), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,3), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(1,3));
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,3), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,3), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,3), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,3), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,3), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,3), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,3), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,3), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,3), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(2,3));
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,3), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,3), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,3), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,3), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,3), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,3), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,3), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,3), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,3), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(3,3));
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,3), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,3), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,3), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,3), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,3), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,3), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,3), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,3), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,3), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(0,2));
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,2), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,2), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,2), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,2), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,2), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,2), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,2), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,2), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,2), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(1,2));
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,2), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,2), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,2), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,2), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,2), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,2), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,2), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,2), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,2), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(2,2));
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,2), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,2), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,2), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,2), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,2), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,2), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,2), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,2), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,2), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(3,2));
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,2), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,2), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,2), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,2), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,2), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,2), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,2), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,2), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,2), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(0,4));
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,4), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,4), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,4), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,4), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,4), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,4), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,4), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,4), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(0,4), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(1,4));
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,4), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,4), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,4), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,4), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,4), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,4), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,4), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,4), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(1,4), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(2,4));
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,4), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,4), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,4), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,4), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,4), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,4), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,4), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,4), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(2,4), txfifu);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSX_INTX_REG(3,4));
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,4), an_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,4), an_err);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,4), dbg_sync);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,4), rxbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,4), rxlock);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,4), sync_bad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,4), txbad);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,4), txfifo);
        CHECK_ERROR(BDK_PCSX_INTX_REG(3,4), txfifu);
    }
}

static void check_pcsx(void)
{
    {
        BDK_CSR_INIT(c, BDK_PCSXX_INT_REG(1));
        CHECK_ERROR(BDK_PCSXX_INT_REG(1), algnlos);
        CHECK_ERROR(BDK_PCSXX_INT_REG(1), bitlckls);
        CHECK_ERROR(BDK_PCSXX_INT_REG(1), dbg_sync);
        CHECK_ERROR(BDK_PCSXX_INT_REG(1), rxbad);
        CHECK_ERROR(BDK_PCSXX_INT_REG(1), rxsynbad);
        CHECK_ERROR(BDK_PCSXX_INT_REG(1), synlos);
        CHECK_ERROR(BDK_PCSXX_INT_REG(1), txflt);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSXX_INT_REG(0));
        CHECK_ERROR(BDK_PCSXX_INT_REG(0), algnlos);
        CHECK_ERROR(BDK_PCSXX_INT_REG(0), bitlckls);
        CHECK_ERROR(BDK_PCSXX_INT_REG(0), dbg_sync);
        CHECK_ERROR(BDK_PCSXX_INT_REG(0), rxbad);
        CHECK_ERROR(BDK_PCSXX_INT_REG(0), rxsynbad);
        CHECK_ERROR(BDK_PCSXX_INT_REG(0), synlos);
        CHECK_ERROR(BDK_PCSXX_INT_REG(0), txflt);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSXX_INT_REG(3));
        CHECK_ERROR(BDK_PCSXX_INT_REG(3), algnlos);
        CHECK_ERROR(BDK_PCSXX_INT_REG(3), bitlckls);
        CHECK_ERROR(BDK_PCSXX_INT_REG(3), dbg_sync);
        CHECK_ERROR(BDK_PCSXX_INT_REG(3), rxbad);
        CHECK_ERROR(BDK_PCSXX_INT_REG(3), rxsynbad);
        CHECK_ERROR(BDK_PCSXX_INT_REG(3), synlos);
        CHECK_ERROR(BDK_PCSXX_INT_REG(3), txflt);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSXX_INT_REG(2));
        CHECK_ERROR(BDK_PCSXX_INT_REG(2), algnlos);
        CHECK_ERROR(BDK_PCSXX_INT_REG(2), bitlckls);
        CHECK_ERROR(BDK_PCSXX_INT_REG(2), dbg_sync);
        CHECK_ERROR(BDK_PCSXX_INT_REG(2), rxbad);
        CHECK_ERROR(BDK_PCSXX_INT_REG(2), rxsynbad);
        CHECK_ERROR(BDK_PCSXX_INT_REG(2), synlos);
        CHECK_ERROR(BDK_PCSXX_INT_REG(2), txflt);
    }
    {
        BDK_CSR_INIT(c, BDK_PCSXX_INT_REG(4));
        CHECK_ERROR(BDK_PCSXX_INT_REG(4), algnlos);
        CHECK_ERROR(BDK_PCSXX_INT_REG(4), bitlckls);
        CHECK_ERROR(BDK_PCSXX_INT_REG(4), dbg_sync);
        CHECK_ERROR(BDK_PCSXX_INT_REG(4), rxbad);
        CHECK_ERROR(BDK_PCSXX_INT_REG(4), rxsynbad);
        CHECK_ERROR(BDK_PCSXX_INT_REG(4), synlos);
        CHECK_ERROR(BDK_PCSXX_INT_REG(4), txflt);
    }
}

static void check_pem(void)
{
    {
        BDK_CSR_INIT(c, BDK_PEMX_INT_SUM(0));
        CHECK_ERROR(BDK_PEMX_INT_SUM(0), crs_dr);
        CHECK_ERROR(BDK_PEMX_INT_SUM(0), crs_er);
        if (c.s.exc)
        {
            BDK_CSR_INIT(c, BDK_PEMX_DBG_INFO(0));
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), acto);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), caar);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), dpeoosd);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), ecrc_e);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), fcpvwt);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), fcuv);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), mre);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), racca);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), racpp);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), racur);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), ramtlp);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rarwdns);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rauc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rawwpp);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rcemrc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rdwdle);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), recrce);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rfemrc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rnfemrc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rpe);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rpmerc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rpoison);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rptamrc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rqo);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rte);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rtlplle);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rtlpmal);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rtwdle);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rumep);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rvdm);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(0), spoison);
        }
        CHECK_ERROR(BDK_PEMX_INT_SUM(0), rdlk);
        CHECK_ERROR(BDK_PEMX_INT_SUM(0), se);
        CHECK_ERROR(BDK_PEMX_INT_SUM(0), un_b1);
        CHECK_ERROR(BDK_PEMX_INT_SUM(0), un_b2);
        CHECK_ERROR(BDK_PEMX_INT_SUM(0), un_bx);
        CHECK_ERROR(BDK_PEMX_INT_SUM(0), up_b1);
        CHECK_ERROR(BDK_PEMX_INT_SUM(0), up_b2);
        CHECK_ERROR(BDK_PEMX_INT_SUM(0), up_bx);
    }
    {
        BDK_CSR_INIT(c, BDK_PEMX_DBG_INFO(0));
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), acto);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), caar);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), dpeoosd);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), ecrc_e);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), fcpvwt);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), fcuv);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), mre);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), racca);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), racpp);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), racur);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), ramtlp);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rarwdns);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rauc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rawwpp);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rcemrc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rdwdle);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), recrce);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rfemrc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rnfemrc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rpe);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rpmerc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rpoison);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rptamrc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rqo);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rte);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rtlplle);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rtlpmal);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rtwdle);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rumep);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), rvdm);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(0), spoison);
    }
    {
        BDK_CSR_INIT(c, BDK_PEMX_INT_SUM(1));
        CHECK_ERROR(BDK_PEMX_INT_SUM(1), crs_dr);
        CHECK_ERROR(BDK_PEMX_INT_SUM(1), crs_er);
        if (c.s.exc)
        {
            BDK_CSR_INIT(c, BDK_PEMX_DBG_INFO(1));
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), acto);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), caar);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), dpeoosd);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), ecrc_e);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), fcpvwt);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), fcuv);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), mre);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), racca);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), racpp);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), racur);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), ramtlp);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rarwdns);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rauc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rawwpp);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rcemrc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rdwdle);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), recrce);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rfemrc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rnfemrc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rpe);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rpmerc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rpoison);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rptamrc);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rqo);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rte);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rtlplle);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rtlpmal);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rtwdle);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rumep);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rvdm);
            CHECK_ERROR(BDK_PEMX_DBG_INFO(1), spoison);
        }
        CHECK_ERROR(BDK_PEMX_INT_SUM(1), rdlk);
        CHECK_ERROR(BDK_PEMX_INT_SUM(1), se);
        CHECK_ERROR(BDK_PEMX_INT_SUM(1), un_b1);
        CHECK_ERROR(BDK_PEMX_INT_SUM(1), un_b2);
        CHECK_ERROR(BDK_PEMX_INT_SUM(1), un_bx);
        CHECK_ERROR(BDK_PEMX_INT_SUM(1), up_b1);
        CHECK_ERROR(BDK_PEMX_INT_SUM(1), up_b2);
        CHECK_ERROR(BDK_PEMX_INT_SUM(1), up_bx);
    }
    {
        BDK_CSR_INIT(c, BDK_PEMX_DBG_INFO(1));
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), acto);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), caar);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), dpeoosd);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), ecrc_e);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), fcpvwt);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), fcuv);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), mre);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), racca);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), racpp);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), racur);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), ramtlp);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rarwdns);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rauc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rawwpp);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rcemrc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rdwdle);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), recrce);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rfemrc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rnfemrc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rpe);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rpmerc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rpoison);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rptamrc);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rqo);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rte);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rtlplle);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rtlpmal);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rtwdle);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rumep);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), rvdm);
        CHECK_ERROR(BDK_PEMX_DBG_INFO(1), spoison);
    }
}

static void check_pip(void)
{
    BDK_CSR_INIT(c, BDK_PIP_INT_REG);
    CHECK_ERROR(BDK_PIP_INT_REG, badtag);
    CHECK_ERROR(BDK_PIP_INT_REG, beperr);
    CHECK_ERROR(BDK_PIP_INT_REG, feperr);
    CHECK_ERROR(BDK_PIP_INT_REG, prtnxa);
    CHECK_ERROR(BDK_PIP_INT_REG, punyerr);
    CHECK_ERROR(BDK_PIP_INT_REG, skprunt);
    CHECK_ERROR(BDK_PIP_INT_REG, todoovr);
}

static void check_pko(void)
{
    BDK_CSR_INIT(c, BDK_PKO_REG_ERROR);
    CHECK_ERROR(BDK_PKO_REG_ERROR, currzero);
    CHECK_ERROR(BDK_PKO_REG_ERROR, doorbell);
    CHECK_ERROR(BDK_PKO_REG_ERROR, loopback);
    CHECK_ERROR(BDK_PKO_REG_ERROR, parity);
}

static void check_rad(void)
{
    BDK_CSR_INIT(c, BDK_RAD_REG_ERROR);
    CHECK_ERROR(BDK_RAD_REG_ERROR, doorbell);
}

static void check_srio(void)
{
    {
        BDK_CSR_INIT(c, BDK_SRIOX_INT_REG(0));
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), bar_err);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), degrad);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), deny_wr);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), f_error);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), fail);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), log_erb);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), mac_buf);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), mce_rx);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), omsg_err);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), phy_erb);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), pko_err);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), rtry_err);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), sli_err);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), ttl_tout);
        CHECK_ERROR(BDK_SRIOX_INT_REG(0), zero_pkt);
    }
    {
        BDK_CSR_INIT(c, BDK_SRIOX_INT_REG(1));
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), bar_err);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), degrad);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), deny_wr);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), f_error);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), fail);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), log_erb);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), mac_buf);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), mce_rx);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), omsg_err);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), phy_erb);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), pko_err);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), rtry_err);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), sli_err);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), ttl_tout);
        CHECK_ERROR(BDK_SRIOX_INT_REG(1), zero_pkt);
    }
}

static void check_sso_cn68xx(void)
{
    BDK_CSR_INIT(c, BDK_SSO_ERR);
    CHECK_ERROR(BDK_SSO_ERR, awe);
    CHECK_ERROR(BDK_SSO_ERR, bfp);
    CHECK_ERROR(BDK_SSO_ERR, fidx_dbe);
    CHECK_ERROR(BDK_SSO_ERR, fidx_sbe);
    CHECK_ERROR(BDK_SSO_ERR, fpe);
    CHECK_ERROR(BDK_SSO_ERR, idx_dbe);
    CHECK_ERROR(BDK_SSO_ERR, idx_sbe);
    CHECK_ERROR(BDK_SSO_ERR, iop);
    CHECK_ERROR(BDK_SSO_ERR, oth_dbe0);
    CHECK_ERROR(BDK_SSO_ERR, oth_dbe1);
    CHECK_ERROR(BDK_SSO_ERR, oth_sbe0);
    CHECK_ERROR(BDK_SSO_ERR, oth_sbe1);
    CHECK_ERROR(BDK_SSO_ERR, pnd_dbe0);
    CHECK_ERROR(BDK_SSO_ERR, pnd_dbe1);
    CHECK_ERROR(BDK_SSO_ERR, pnd_sbe0);
    CHECK_ERROR(BDK_SSO_ERR, pnd_sbe1);
}

static void check_tim_cn68xx(void)
{
    {
        BDK_CSR_INIT(c, BDK_TIM_INT0);
        CHECK_ERROR(BDK_TIM_INT0, int0);
    }
    {
        BDK_CSR_INIT(c, BDK_TIM_INT_ECCERR);
        CHECK_ERROR(BDK_TIM_INT_ECCERR, dbe);
        CHECK_ERROR(BDK_TIM_INT_ECCERR, sbe);
    }
}

static void check_tim_cn6xxx(void)
{
    BDK_CSR_INIT(c, BDK_TIM_REG_ERROR);
    CHECK_ERROR(BDK_TIM_REG_ERROR, mask);
}

static void check_usb(void)
{
    BDK_CSR_INIT(c, BDK_UCTLX_INT_REG(0));
    CHECK_ERROR(BDK_UCTLX_INT_REG(0), cf_psh_f);
    CHECK_ERROR(BDK_UCTLX_INT_REG(0), ec_ovf_e);
    CHECK_ERROR(BDK_UCTLX_INT_REG(0), er_psh_f);
    CHECK_ERROR(BDK_UCTLX_INT_REG(0), oc_ovf_e);
    CHECK_ERROR(BDK_UCTLX_INT_REG(0), or_psh_f);
    CHECK_ERROR(BDK_UCTLX_INT_REG(0), pp_psh_f);
    CHECK_ERROR(BDK_UCTLX_INT_REG(0), wb_pop_e);
    CHECK_ERROR(BDK_UCTLX_INT_REG(0), wb_psh_f);
}

static void check_zip(void)
{
    {
        BDK_CSR_INIT(c, BDK_ZIP_ERROR);
        CHECK_ERROR(BDK_ZIP_ERROR, doorbell);
    }
    {
        BDK_CSR_INIT(c, BDK_ZIP_INT_REG);
        CHECK_ERROR(BDK_ZIP_INT_REG, doorbell0);
        CHECK_ERROR(BDK_ZIP_INT_REG, doorbell1);
        CHECK_ERROR(BDK_ZIP_INT_REG, ibdbe);
        CHECK_ERROR(BDK_ZIP_INT_REG, ibsbe);
    }
}
BDK_CSR_INIT(c, BDK_ROOT);
if (c.s.root)
{
    BDK_CSR_INIT(c, BDK_CIU_INTX_SUM0(0));
    if (c.s.mii)
    {
        check_mix() /* MIXX_ISR(0) */
    }
    if (c.s.pcm)
    {
        check_pcm() /* PCMX_INT_SUM(0) */
        check_pcm() /* PCMX_INT_SUM(1) */
        check_pcm() /* PCMX_INT_SUM(2) */
        check_pcm() /* PCMX_INT_SUM(3) */
    }
    if (c.s.rml)
    {
        BDK_CSR_INIT(c, BDK_CIU_BLOCK_INT);
        if (c.s.agl)
        {
            check_agl() /* AGL_GMX_BAD_REG */
            check_agl() /* AGL_GMX_RXX_INT_REG(0) */
            check_agl() /* AGL_GMX_RXX_INT_REG(1) */
            check_agl() /* AGL_GMX_TX_INT_REG */
        }
        if (c.s.asxpcs0)
        {
            check_pcs() /* PCSX_INTX_REG(0,0) */
            check_pcs() /* PCSX_INTX_REG(1,0) */
            check_pcs() /* PCSX_INTX_REG(2,0) */
            check_pcs() /* PCSX_INTX_REG(3,0) */
            check_pcsx() /* PCSXX_INT_REG(0) */
        }
        if (c.s.asxpcs1)
        {
            check_pcs() /* PCSX_INTX_REG(0,1) */
            check_pcs() /* PCSX_INTX_REG(1,1) */
            check_pcs() /* PCSX_INTX_REG(2,1) */
            check_pcs() /* PCSX_INTX_REG(3,1) */
            check_pcsx() /* PCSXX_INT_REG(1) */
        }
        if (c.s.dfa)
        {
            check_dfa() /* DFA_ERROR */
        }
        if (c.s.dpi)
        {
            check_dpi() /* DPI_INT_REG */
            check_dpi() /* DPI_PKT_ERR_RSP */
            check_dpi() /* DPI_REQ_ERR_RSP */
            check_dpi() /* DPI_REQ_ERR_RST */
        }
        if (c.s.fpa)
        {
            check_fpa() /* FPA_INT_SUM */
        }
        if (c.s.gmx0)
        {
            check_gmx() /* GMXX_RXX_INT_REG(0,0) */
            check_gmx() /* GMXX_RXX_INT_REG(1,0) */
            check_gmx() /* GMXX_RXX_INT_REG(2,0) */
            check_gmx() /* GMXX_RXX_INT_REG(3,0) */
            check_gmx() /* GMXX_TX_INT_REG(0) */
            check_gmx() /* GMXX_BAD_REG(0) */
        }
        if (c.s.gmx1)
        {
            check_gmx() /* GMXX_RXX_INT_REG(0,1) */
            check_gmx() /* GMXX_RXX_INT_REG(1,1) */
            check_gmx() /* GMXX_RXX_INT_REG(2,1) */
            check_gmx() /* GMXX_RXX_INT_REG(3,1) */
            check_gmx() /* GMXX_TX_INT_REG(1) */
            check_gmx() /* GMXX_BAD_REG(1) */
        }
        if (c.s.iob)
        {
            check_iob() /* IOB0_INT_SUM */
        }
        if (c.s.ipd)
        {
            check_ipd() /* IPD_INT_SUM */
        }
        if (c.s.key)
        {
            check_key() /* KEY_INT_SUM */
        }
        if (c.s.l2c)
        {
            check_l2c() /* L2C_INT_REG */
        }
        if (c.s.lmc0)
        {
            check_lmc() /* LMCX_INT(0) */
        }
        if (c.s.mio)
        {
            check_mio() /* MIO_BOOT_ERR */
            check_mio() /* MIO_RST_INT */
        }
        if (c.s.pem0)
        {
            check_pem() /* PEMX_INT_SUM(0) */
        }
        if (c.s.pem1)
        {
            check_pem() /* PEMX_INT_SUM(1) */
        }
        if (c.s.pip)
        {
            check_pip() /* PIP_INT_REG */
        }
        if (c.s.pko)
        {
            check_pko() /* PKO_REG_ERROR */
        }
        if (c.s.rad)
        {
            check_rad() /* RAD_REG_ERROR */
        }
        if (c.s.srio0)
        {
            check_srio() /* SRIOX_INT_REG(0) */
        }
        if (c.s.srio1)
        {
            check_srio() /* SRIOX_INT_REG(1) */
        }
        if (c.s.tim)
        {
            check_tim_cn6xxx() /* TIM_REG_ERROR */
        }
        if (c.s.zip)
        {
            check_zip() /* ZIP_ERROR */
        }
    }
}
if (c.s.root2)
{
    BDK_CSR_INIT(c, BDK_CIU_INT_SUM1);
    if (c.s.mii1)
    {
        check_mix() /* MIXX_ISR(1) */
    }
    if (c.s.nand)
    {
        check_nand() /* NDF_INT */
    }
    if (c.s.usb)
    {
        check_usb() /* UCTLX_INT_REG(0) */
    }
}
if (c.s.root3)
{
    BDK_CSR_INIT(c, BDK_CIU2_SUM_PPX_IP2(0));
    if (c.s.io)
    {
        BDK_CSR_INIT(c, BDK_CIU2_SRC_PPX_IP2_IO(0));
        if (c.s.pem[0])
        {
            check_pem() /* PEMX_INT_SUM(0) */
        }
        if (c.s.pem[1])
        {
            check_pem() /* PEMX_INT_SUM(1) */
        }
    }
    if (c.s.mem)
    {
        BDK_CSR_INIT(c, BDK_CIU2_SRC_PPX_IP2_MEM(0));
        if (c.s.lmc[0])
        {
            check_lmc() /* LMCX_INT(0) */
        }
        if (c.s.lmc[1])
        {
            check_lmc() /* LMCX_INT(1) */
        }
        if (c.s.lmc[2])
        {
            check_lmc() /* LMCX_INT(2) */
        }
        if (c.s.lmc[3])
        {
            check_lmc() /* LMCX_INT(3) */
        }
    }
    if (c.s.mio)
    {
        BDK_CSR_INIT(c, BDK_CIU2_SRC_PPX_IP2_MIO(0));
        if (c.s.mio)
        {
            check_mio() /* MIO_BOOT_ERR */
            check_mio() /* MIO_RST_INT */
        }
        if (c.s.nand)
        {
            check_nand() /* NDF_INT */
        }
        if (c.s.usb_uctl)
        {
            check_usb() /* UCTLX_INT_REG(0) */
        }
    }
    if (c.s.pkt)
    {
        BDK_CSR_INIT(c, BDK_CIU2_SRC_PPX_IP2_PKT(0));
        if (c.s.agl)
        {
            check_agl() /* AGL_GMX_BAD_REG */
            check_agl() /* AGL_GMX_RXX_INT_REG(0) */
            check_agl() /* AGL_GMX_RXX_INT_REG(1) */
            check_agl() /* AGL_GMX_TX_INT_REG */
        }
        if (c.s.agx[0])
        {
            check_gmx() /* GMXX_RXX_INT_REG(0,0) */
            check_gmx() /* GMXX_RXX_INT_REG(1,0) */
            check_gmx() /* GMXX_RXX_INT_REG(2,0) */
            check_gmx() /* GMXX_RXX_INT_REG(3,0) */
            check_gmx() /* GMXX_TX_INT_REG(0) */
            check_gmx() /* GMXX_BAD_REG(0) */
            check_pcs() /* PCSX_INTX_REG(0,0) */
            check_pcs() /* PCSX_INTX_REG(1,0) */
            check_pcs() /* PCSX_INTX_REG(2,0) */
            check_pcs() /* PCSX_INTX_REG(3,0) */
            check_pcsx() /* PCSXX_INT_REG(0) */
        }
        if (c.s.agx[1])
        {
            check_gmx() /* GMXX_RXX_INT_REG(0,1) */
            check_gmx() /* GMXX_RXX_INT_REG(1,1) */
            check_gmx() /* GMXX_RXX_INT_REG(2,1) */
            check_gmx() /* GMXX_RXX_INT_REG(3,1) */
            check_gmx() /* GMXX_TX_INT_REG(1) */
            check_gmx() /* GMXX_BAD_REG(1) */
            check_pcs() /* PCSX_INTX_REG(0,1) */
            check_pcs() /* PCSX_INTX_REG(1,1) */
            check_pcs() /* PCSX_INTX_REG(2,1) */
            check_pcs() /* PCSX_INTX_REG(3,1) */
            check_pcsx() /* PCSXX_INT_REG(1) */
        }
        if (c.s.agx[2])
        {
            check_gmx() /* GMXX_RXX_INT_REG(0,2) */
            check_gmx() /* GMXX_RXX_INT_REG(1,2) */
            check_gmx() /* GMXX_RXX_INT_REG(2,2) */
            check_gmx() /* GMXX_RXX_INT_REG(3,2) */
            check_gmx() /* GMXX_TX_INT_REG(2) */
            check_gmx() /* GMXX_BAD_REG(2) */
            check_pcs() /* PCSX_INTX_REG(0,2) */
            check_pcs() /* PCSX_INTX_REG(1,2) */
            check_pcs() /* PCSX_INTX_REG(2,2) */
            check_pcs() /* PCSX_INTX_REG(3,2) */
            check_pcsx() /* PCSXX_INT_REG(2) */
        }
        if (c.s.agx[3])
        {
            check_gmx() /* GMXX_RXX_INT_REG(0,3) */
            check_gmx() /* GMXX_RXX_INT_REG(1,3) */
            check_gmx() /* GMXX_RXX_INT_REG(2,3) */
            check_gmx() /* GMXX_RXX_INT_REG(3,3) */
            check_gmx() /* GMXX_TX_INT_REG(3) */
            check_gmx() /* GMXX_BAD_REG(3) */
            check_pcs() /* PCSX_INTX_REG(0,3) */
            check_pcs() /* PCSX_INTX_REG(1,3) */
            check_pcs() /* PCSX_INTX_REG(2,3) */
            check_pcs() /* PCSX_INTX_REG(3,3) */
            check_pcsx() /* PCSXX_INT_REG(3) */
        }
        if (c.s.agx[4])
        {
            check_gmx() /* GMXX_RXX_INT_REG(0,4) */
            check_gmx() /* GMXX_RXX_INT_REG(1,4) */
            check_gmx() /* GMXX_RXX_INT_REG(2,4) */
            check_gmx() /* GMXX_RXX_INT_REG(3,4) */
            check_gmx() /* GMXX_TX_INT_REG(4) */
            check_gmx() /* GMXX_BAD_REG(4) */
            check_pcs() /* PCSX_INTX_REG(0,4) */
            check_pcs() /* PCSX_INTX_REG(1,4) */
            check_pcs() /* PCSX_INTX_REG(2,4) */
            check_pcs() /* PCSX_INTX_REG(3,4) */
            check_pcsx() /* PCSXX_INT_REG(4) */
        }
        if (c.s.ilk)
        {
            check_ilk() /* ILK_GBL_INT */
            check_ilk() /* ILK_TXX_INT(0) */
            check_ilk() /* ILK_RXX_INT(0) */
            check_ilk() /* ILK_TXX_INT(1) */
            check_ilk() /* ILK_RXX_INT(1) */
            check_ilk() /* ILK_RX_LNEX_INT(0) */
            check_ilk() /* ILK_RX_LNEX_INT(1) */
            check_ilk() /* ILK_RX_LNEX_INT(2) */
            check_ilk() /* ILK_RX_LNEX_INT(3) */
            check_ilk() /* ILK_RX_LNEX_INT(4) */
            check_ilk() /* ILK_RX_LNEX_INT(5) */
            check_ilk() /* ILK_RX_LNEX_INT(6) */
            check_ilk() /* ILK_RX_LNEX_INT(7) */
        }
        if (c.s.mii)
        {
            check_mix() /* MIXX_ISR(0) */
            check_mix() /* MIXX_ISR(1) */
        }
    }
    if (c.s.rml)
    {
        BDK_CSR_INIT(c, BDK_CIU2_SRC_PPX_IP2_RML(0));
        if (c.s.dfa)
        {
            check_dfa() /* DFA_ERROR */
        }
        if (c.s.dpi)
        {
            check_dpi() /* DPI_INT_REG */
            check_dpi() /* DPI_PKT_ERR_RSP */
            check_dpi() /* DPI_REQ_ERR_RSP */
            check_dpi() /* DPI_REQ_ERR_RST */
        }
        if (c.s.fpa)
        {
            check_fpa() /* FPA_INT_SUM */
        }
        if (c.s.iob)
        {
            check_iob() /* IOB0_INT_SUM */
        }
        if (c.s.ipd)
        {
            check_ipd() /* IPD_INT_SUM */
        }
        if (c.s.key)
        {
            check_key() /* KEY_INT_SUM */
        }
        if (c.s.l2c)
        {
            check_l2c() /* L2C_INT_REG */
        }
        if (c.s.pip)
        {
            check_pip() /* PIP_INT_REG */
        }
        if (c.s.pko)
        {
            check_pko() /* PKO_REG_ERROR */
        }
        if (c.s.rad)
        {
            check_rad() /* RAD_REG_ERROR */
        }
        if (c.s.sso)
        {
            check_sso_cn68xx() /* SSO_ERR */
        }
        if (c.s.tim)
        {
            check_tim_cn68xx() /* TIM_INT0 */
            check_tim_cn68xx() /* TIM_INT_ECCERR */
        }
        if (c.s.zip)
        {
            check_zip() /* ZIP_ERROR */
            check_zip() /* ZIP_INT_REG */
        }
    }
}
}
void bdk_error_enable(void)
{

static void enable_agl(void)
{
    {
    }
    {
        BDK_CSR_MODIFY(c, BDK_AGL_GMX_RXX_INT_EN(0),
            c.s.ovrerr = -1;
            c.s.skperr = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_AGL_GMX_RXX_INT_EN(1),
            c.s.ovrerr = -1;
            c.s.skperr = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_AGL_GMX_TX_INT_EN,
            c.s.pko_nxa = -1;
            c.s.undflw = -1;
        );
    }
}

static void enable_dfa(void)
{
    BDK_CSR_MODIFY(c, BDK_DFA_INTMSK,
        c.s.dblina = -1;
        c.s.dc0pena = -1;
        c.s.dc1pena = -1;
        c.s.dc2pena = -1;
        c.s.dfanxmena = -1;
        c.s.dlc0_ovfena = -1;
        c.s.dlc1_ovfena = -1;
        c.s.replerrena = -1;
    );
}

static void enable_dpi(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_DPI_INT_EN,
            c.s.dmadbo = -1;
            c.s.nderr = -1;
            c.s.nfovr = -1;
            c.s.req_anull = -1;
            c.s.req_badadr = -1;
            c.s.req_badfil = -1;
            c.s.req_badlen = -1;
            c.s.req_inull = -1;
            c.s.req_ovrflw = -1;
            c.s.req_undflw = -1;
            c.s.sprt0_rst = -1;
            c.s.sprt1_rst = -1;
            c.s.sprt2_rst = -1;
            c.s.sprt3_rst = -1;
        );
    }
    {
    }
    {
    }
    {
    }
}

static void enable_fpa(void)
{
    BDK_CSR_MODIFY(c, BDK_FPA_INT_ENB,
        c.s.fed0_dbe = -1;
        c.s.fed0_sbe = -1;
        c.s.fed1_dbe = -1;
        c.s.fed1_sbe = -1;
        c.s.free0 = -1;
        c.s.free1 = -1;
        c.s.free2 = -1;
        c.s.free3 = -1;
        c.s.free4 = -1;
        c.s.free5 = -1;
        c.s.free6 = -1;
        c.s.free7 = -1;
        c.s.free8 = -1;
        c.s.paddr_e = -1;
        c.s.pool0th = -1;
        c.s.pool1th = -1;
        c.s.pool2th = -1;
        c.s.pool3th = -1;
        c.s.pool4th = -1;
        c.s.pool5th = -1;
        c.s.pool6th = -1;
        c.s.pool7th = -1;
        c.s.pool8th = -1;
        c.s.q0_coff = -1;
        c.s.q0_perr = -1;
        c.s.q0_und = -1;
        c.s.q1_coff = -1;
        c.s.q1_perr = -1;
        c.s.q1_und = -1;
        c.s.q2_coff = -1;
        c.s.q2_perr = -1;
        c.s.q2_und = -1;
        c.s.q3_coff = -1;
        c.s.q3_perr = -1;
        c.s.q3_und = -1;
        c.s.q4_coff = -1;
        c.s.q4_perr = -1;
        c.s.q4_und = -1;
        c.s.q5_coff = -1;
        c.s.q5_perr = -1;
        c.s.q5_und = -1;
        c.s.q6_coff = -1;
        c.s.q6_perr = -1;
        c.s.q6_und = -1;
        c.s.q7_coff = -1;
        c.s.q7_perr = -1;
        c.s.q7_und = -1;
        c.s.q8_coff = -1;
        c.s.q8_perr = -1;
        c.s.q8_und = -1;
    );
}

static void enable_gmx(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(0,0),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(1,0),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(2,0),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(3,0),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_TX_INT_EN(0),
            c.s.pko_nxa = -1;
            c.s.pko_nxp = -1;
            c.s.ptp_lost = -1;
            c.s.undflw = -1;
        );
    }
    {
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(0,1),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(1,1),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(2,1),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(3,1),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_TX_INT_EN(1),
            c.s.pko_nxa = -1;
            c.s.pko_nxp = -1;
            c.s.ptp_lost = -1;
            c.s.undflw = -1;
        );
    }
    {
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(0,3),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(1,3),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(2,3),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(3,3),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_TX_INT_EN(3),
            c.s.pko_nxa = -1;
            c.s.pko_nxp = -1;
            c.s.ptp_lost = -1;
            c.s.undflw = -1;
        );
    }
    {
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(0,2),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(1,2),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(2,2),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(3,2),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_TX_INT_EN(2),
            c.s.pko_nxa = -1;
            c.s.pko_nxp = -1;
            c.s.ptp_lost = -1;
            c.s.undflw = -1;
        );
    }
    {
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(0,4),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(1,4),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(2,4),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_RXX_INT_EN(3,4),
            c.s.bad_seq = -1;
            c.s.bad_term = -1;
            c.s.carext = -1;
            c.s.hg2cc = -1;
            c.s.hg2fld = -1;
            c.s.loc_fault = -1;
            c.s.ovrerr = -1;
            c.s.rem_fault = -1;
            c.s.skperr = -1;
            c.s.undat = -1;
            c.s.uneop = -1;
            c.s.unsop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_GMXX_TX_INT_EN(4),
            c.s.pko_nxa = -1;
            c.s.pko_nxp = -1;
            c.s.ptp_lost = -1;
            c.s.undflw = -1;
        );
    }
    {
    }
}

static void enable_ilk(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_ILK_GBL_INT_EN,
            c.s.rxf_ctl_perr = -1;
            c.s.rxf_lnk0_perr = -1;
            c.s.rxf_lnk1_perr = -1;
            c.s.rxf_pop_empty = -1;
            c.s.rxf_push_full = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_TXX_INT_EN(0),
            c.s.bad_pipe = -1;
            c.s.bad_seq = -1;
            c.s.txf_err = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_RXX_INT_EN(0),
            c.s.crc24_err = -1;
            c.s.lane_bad_word = -1;
            c.s.pkt_drop_rid = -1;
            c.s.pkt_drop_rxf = -1;
            c.s.pkt_drop_sop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_TXX_INT_EN(1),
            c.s.bad_pipe = -1;
            c.s.bad_seq = -1;
            c.s.txf_err = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_RXX_INT_EN(1),
            c.s.crc24_err = -1;
            c.s.lane_bad_word = -1;
            c.s.pkt_drop_rid = -1;
            c.s.pkt_drop_rxf = -1;
            c.s.pkt_drop_sop = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_RX_LNEX_INT_EN(0),
            c.s.bad_64b67b = -1;
            c.s.bdry_sync_loss = -1;
            c.s.crc32_err = -1;
            c.s.dskew_fifo_ovfl = -1;
            c.s.scrm_sync_loss = -1;
            c.s.serdes_lock_loss = -1;
            c.s.stat_msg = -1;
            c.s.ukwn_cntl_word = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_RX_LNEX_INT_EN(1),
            c.s.bad_64b67b = -1;
            c.s.bdry_sync_loss = -1;
            c.s.crc32_err = -1;
            c.s.dskew_fifo_ovfl = -1;
            c.s.scrm_sync_loss = -1;
            c.s.serdes_lock_loss = -1;
            c.s.stat_msg = -1;
            c.s.ukwn_cntl_word = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_RX_LNEX_INT_EN(2),
            c.s.bad_64b67b = -1;
            c.s.bdry_sync_loss = -1;
            c.s.crc32_err = -1;
            c.s.dskew_fifo_ovfl = -1;
            c.s.scrm_sync_loss = -1;
            c.s.serdes_lock_loss = -1;
            c.s.stat_msg = -1;
            c.s.ukwn_cntl_word = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_RX_LNEX_INT_EN(3),
            c.s.bad_64b67b = -1;
            c.s.bdry_sync_loss = -1;
            c.s.crc32_err = -1;
            c.s.dskew_fifo_ovfl = -1;
            c.s.scrm_sync_loss = -1;
            c.s.serdes_lock_loss = -1;
            c.s.stat_msg = -1;
            c.s.ukwn_cntl_word = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_RX_LNEX_INT_EN(4),
            c.s.bad_64b67b = -1;
            c.s.bdry_sync_loss = -1;
            c.s.crc32_err = -1;
            c.s.dskew_fifo_ovfl = -1;
            c.s.scrm_sync_loss = -1;
            c.s.serdes_lock_loss = -1;
            c.s.stat_msg = -1;
            c.s.ukwn_cntl_word = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_RX_LNEX_INT_EN(5),
            c.s.bad_64b67b = -1;
            c.s.bdry_sync_loss = -1;
            c.s.crc32_err = -1;
            c.s.dskew_fifo_ovfl = -1;
            c.s.scrm_sync_loss = -1;
            c.s.serdes_lock_loss = -1;
            c.s.stat_msg = -1;
            c.s.ukwn_cntl_word = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_RX_LNEX_INT_EN(6),
            c.s.bad_64b67b = -1;
            c.s.bdry_sync_loss = -1;
            c.s.crc32_err = -1;
            c.s.dskew_fifo_ovfl = -1;
            c.s.scrm_sync_loss = -1;
            c.s.serdes_lock_loss = -1;
            c.s.stat_msg = -1;
            c.s.ukwn_cntl_word = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ILK_RX_LNEX_INT_EN(7),
            c.s.bad_64b67b = -1;
            c.s.bdry_sync_loss = -1;
            c.s.crc32_err = -1;
            c.s.dskew_fifo_ovfl = -1;
            c.s.scrm_sync_loss = -1;
            c.s.serdes_lock_loss = -1;
            c.s.stat_msg = -1;
            c.s.ukwn_cntl_word = -1;
        );
    }
}

static void enable_iob(void)
{
    BDK_CSR_MODIFY(c, BDK_IOB0_INT_ENB,
        c.s.np_dat = -1;
        c.s.np_eop = -1;
        c.s.np_sop = -1;
        c.s.p_dat = -1;
        c.s.p_eop = -1;
        c.s.p_sop = -1;
    );
}

static void enable_ipd(void)
{
    BDK_CSR_MODIFY(c, BDK_IPD_INT_ENB,
        c.s.bc_ovr = -1;
        c.s.bp_sub = -1;
        c.s.c_coll = -1;
        c.s.cc_ovr = -1;
        c.s.d_coll = -1;
        c.s.dat = -1;
        c.s.dc_ovr = -1;
        c.s.eop = -1;
        c.s.prc_par0 = -1;
        c.s.prc_par1 = -1;
        c.s.prc_par2 = -1;
        c.s.prc_par3 = -1;
        c.s.pw0_dbe = -1;
        c.s.pw0_sbe = -1;
        c.s.pw1_dbe = -1;
        c.s.pw1_sbe = -1;
        c.s.pw2_dbe = -1;
        c.s.pw2_sbe = -1;
        c.s.pw3_dbe = -1;
        c.s.pw3_sbe = -1;
        c.s.sop = -1;
    );
}

static void enable_key(void)
{
    BDK_CSR_MODIFY(c, BDK_KEY_INT_ENB,
        c.s.ked0_dbe = -1;
        c.s.ked0_sbe = -1;
        c.s.ked1_dbe = -1;
        c.s.ked1_sbe = -1;
    );
}

static void enable_l2c(void)
{
    BDK_CSR_MODIFY(c, BDK_L2C_INT_ENA,
        c.s.bigrd = -1;
        c.s.bigwr = -1;
        c.s.holerd = -1;
        c.s.holewr = -1;
        c.s.vrtadrng = -1;
        c.s.vrtidrng = -1;
        c.s.vrtpe = -1;
        c.s.vrtwr = -1;
    );
        enable_l2c_tad() /* L2C_TADX_IEN(0) */
        enable_l2c_tad() /* L2C_TADX_IEN(1) */
        enable_l2c_tad() /* L2C_TADX_IEN(2) */
        enable_l2c_tad() /* L2C_TADX_IEN(3) */
}

static void enable_l2c_tad(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_L2C_TADX_IEN(1),
            c.s.l2ddbe = -1;
            c.s.l2dsbe = -1;
            c.s.noway = -1;
            c.s.rddislmc = -1;
            c.s.tagdbe = -1;
            c.s.tagsbe = -1;
            c.s.vbfdbe = -1;
            c.s.vbfsbe = -1;
            c.s.wrdislmc = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_L2C_TADX_IEN(0),
            c.s.l2ddbe = -1;
            c.s.l2dsbe = -1;
            c.s.noway = -1;
            c.s.rddislmc = -1;
            c.s.tagdbe = -1;
            c.s.tagsbe = -1;
            c.s.vbfdbe = -1;
            c.s.vbfsbe = -1;
            c.s.wrdislmc = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_L2C_TADX_IEN(3),
            c.s.l2ddbe = -1;
            c.s.l2dsbe = -1;
            c.s.noway = -1;
            c.s.rddislmc = -1;
            c.s.tagdbe = -1;
            c.s.tagsbe = -1;
            c.s.vbfdbe = -1;
            c.s.vbfsbe = -1;
            c.s.wrdislmc = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_L2C_TADX_IEN(2),
            c.s.l2ddbe = -1;
            c.s.l2dsbe = -1;
            c.s.noway = -1;
            c.s.rddislmc = -1;
            c.s.tagdbe = -1;
            c.s.tagsbe = -1;
            c.s.vbfdbe = -1;
            c.s.vbfsbe = -1;
            c.s.wrdislmc = -1;
        );
    }
}

static void enable_lmc(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_LMCX_INT_EN(0),
            c.s.intr_ded_ena = -1;
            c.s.intr_nxm_wr_ena = -1;
            c.s.intr_sec_ena = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_LMCX_INT_EN(2),
            c.s.intr_ded_ena = -1;
            c.s.intr_nxm_wr_ena = -1;
            c.s.intr_sec_ena = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_LMCX_INT_EN(1),
            c.s.intr_ded_ena = -1;
            c.s.intr_nxm_wr_ena = -1;
            c.s.intr_sec_ena = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_LMCX_INT_EN(3),
            c.s.intr_ded_ena = -1;
            c.s.intr_nxm_wr_ena = -1;
            c.s.intr_sec_ena = -1;
        );
    }
}

static void enable_mio(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_MIO_BOOT_INT,
            c.s.adr_int = -1;
            c.s.wait_int = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_MIO_RST_INT_EN,
            c.s.perst0 = -1;
            c.s.perst1 = -1;
            c.s.rst_link0 = -1;
            c.s.rst_link1 = -1;
            c.s.rst_link2 = -1;
            c.s.rst_link3 = -1;
        );
    }
}

static void enable_mix(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_MIXX_INTENA(0),
            c.s.data_drpena = -1;
            c.s.ivfena = -1;
            c.s.irunena = -1;
            c.s.ovfena = -1;
            c.s.orunena = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_MIXX_INTENA(1),
            c.s.data_drpena = -1;
            c.s.ivfena = -1;
            c.s.irunena = -1;
            c.s.ovfena = -1;
            c.s.orunena = -1;
        );
    }
}

static void enable_nand(void)
{
    BDK_CSR_MODIFY(c, BDK_NDF_INT_EN,
        c.s.ecc_1bit = -1;
        c.s.ecc_mult = -1;
        c.s.ovrf = -1;
        c.s.sm_bad = -1;
        c.s.wdog = -1;
    );
}

static void enable_pcm(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_PCMX_INT_ENA(0),
            c.s.fsyncextra = -1;
            c.s.fsyncmissed = -1;
            c.s.rxovf = -1;
            c.s.txempty = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCMX_INT_ENA(1),
            c.s.fsyncextra = -1;
            c.s.fsyncmissed = -1;
            c.s.rxovf = -1;
            c.s.txempty = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCMX_INT_ENA(2),
            c.s.fsyncextra = -1;
            c.s.fsyncmissed = -1;
            c.s.rxovf = -1;
            c.s.txempty = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCMX_INT_ENA(3),
            c.s.fsyncextra = -1;
            c.s.fsyncmissed = -1;
            c.s.rxovf = -1;
            c.s.txempty = -1;
        );
    }
}

static void enable_pcs(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(0,1),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(1,1),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(2,1),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(3,1),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(0,0),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(1,0),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(2,0),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(3,0),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(0,3),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(1,3),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(2,3),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(3,3),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(0,2),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(1,2),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(2,2),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(3,2),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(0,4),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(1,4),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(2,4),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSX_INTX_EN_REG(3,4),
            c.s.an_bad_en = -1;
            c.s.an_err_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxlock_en = -1;
            c.s.sync_bad_en = -1;
            c.s.txbad_en = -1;
            c.s.txfifo_en = -1;
            c.s.txfifu_en = -1;
        );
    }
}

static void enable_pcsx(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_PCSXX_INT_EN_REG(1),
            c.s.algnlos_en = -1;
            c.s.bitlckls_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxsynbad_en = -1;
            c.s.synlos_en = -1;
            c.s.txflt_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSXX_INT_EN_REG(0),
            c.s.algnlos_en = -1;
            c.s.bitlckls_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxsynbad_en = -1;
            c.s.synlos_en = -1;
            c.s.txflt_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSXX_INT_EN_REG(3),
            c.s.algnlos_en = -1;
            c.s.bitlckls_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxsynbad_en = -1;
            c.s.synlos_en = -1;
            c.s.txflt_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSXX_INT_EN_REG(2),
            c.s.algnlos_en = -1;
            c.s.bitlckls_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxsynbad_en = -1;
            c.s.synlos_en = -1;
            c.s.txflt_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PCSXX_INT_EN_REG(4),
            c.s.algnlos_en = -1;
            c.s.bitlckls_en = -1;
            c.s.dbg_sync_en = -1;
            c.s.rxbad_en = -1;
            c.s.rxsynbad_en = -1;
            c.s.synlos_en = -1;
            c.s.txflt_en = -1;
        );
    }
}

static void enable_pem(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_PEMX_INT_ENB(0),
            c.s.crs_dr = -1;
            c.s.crs_er = -1;
            c.s.exc = -1;
            c.s.rdlk = -1;
            c.s.se = -1;
            c.s.un_b1 = -1;
            c.s.un_b2 = -1;
            c.s.un_bx = -1;
            c.s.up_b1 = -1;
            c.s.up_b2 = -1;
            c.s.up_bx = -1;
        );
            BDK_CSR_MODIFY(c, BDK_PEMX_DBG_INFO_EN(0),
                c.s.acto = -1;
                c.s.caar = -1;
                c.s.dpeoosd = -1;
                c.s.ecrc_e = -1;
                c.s.fcpvwt = -1;
                c.s.fcuv = -1;
                c.s.mre = -1;
                c.s.racca = -1;
                c.s.racpp = -1;
                c.s.racur = -1;
                c.s.ramtlp = -1;
                c.s.rarwdns = -1;
                c.s.rauc = -1;
                c.s.rawwpp = -1;
                c.s.rcemrc = -1;
                c.s.rdwdle = -1;
                c.s.recrce = -1;
                c.s.rfemrc = -1;
                c.s.rnfemrc = -1;
                c.s.rpe = -1;
                c.s.rpmerc = -1;
                c.s.rpoison = -1;
                c.s.rptamrc = -1;
                c.s.rqo = -1;
                c.s.rte = -1;
                c.s.rtlplle = -1;
                c.s.rtlpmal = -1;
                c.s.rtwdle = -1;
                c.s.rumep = -1;
                c.s.rvdm = -1;
                c.s.spoison = -1;
            );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PEMX_DBG_INFO_EN(0),
            c.s.acto = -1;
            c.s.caar = -1;
            c.s.dpeoosd = -1;
            c.s.ecrc_e = -1;
            c.s.fcpvwt = -1;
            c.s.fcuv = -1;
            c.s.mre = -1;
            c.s.racca = -1;
            c.s.racpp = -1;
            c.s.racur = -1;
            c.s.ramtlp = -1;
            c.s.rarwdns = -1;
            c.s.rauc = -1;
            c.s.rawwpp = -1;
            c.s.rcemrc = -1;
            c.s.rdwdle = -1;
            c.s.recrce = -1;
            c.s.rfemrc = -1;
            c.s.rnfemrc = -1;
            c.s.rpe = -1;
            c.s.rpmerc = -1;
            c.s.rpoison = -1;
            c.s.rptamrc = -1;
            c.s.rqo = -1;
            c.s.rte = -1;
            c.s.rtlplle = -1;
            c.s.rtlpmal = -1;
            c.s.rtwdle = -1;
            c.s.rumep = -1;
            c.s.rvdm = -1;
            c.s.spoison = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PEMX_INT_ENB(1),
            c.s.crs_dr = -1;
            c.s.crs_er = -1;
            c.s.exc = -1;
            c.s.rdlk = -1;
            c.s.se = -1;
            c.s.un_b1 = -1;
            c.s.un_b2 = -1;
            c.s.un_bx = -1;
            c.s.up_b1 = -1;
            c.s.up_b2 = -1;
            c.s.up_bx = -1;
        );
            BDK_CSR_MODIFY(c, BDK_PEMX_DBG_INFO_EN(1),
                c.s.acto = -1;
                c.s.caar = -1;
                c.s.dpeoosd = -1;
                c.s.ecrc_e = -1;
                c.s.fcpvwt = -1;
                c.s.fcuv = -1;
                c.s.mre = -1;
                c.s.racca = -1;
                c.s.racpp = -1;
                c.s.racur = -1;
                c.s.ramtlp = -1;
                c.s.rarwdns = -1;
                c.s.rauc = -1;
                c.s.rawwpp = -1;
                c.s.rcemrc = -1;
                c.s.rdwdle = -1;
                c.s.recrce = -1;
                c.s.rfemrc = -1;
                c.s.rnfemrc = -1;
                c.s.rpe = -1;
                c.s.rpmerc = -1;
                c.s.rpoison = -1;
                c.s.rptamrc = -1;
                c.s.rqo = -1;
                c.s.rte = -1;
                c.s.rtlplle = -1;
                c.s.rtlpmal = -1;
                c.s.rtwdle = -1;
                c.s.rumep = -1;
                c.s.rvdm = -1;
                c.s.spoison = -1;
            );
    }
    {
        BDK_CSR_MODIFY(c, BDK_PEMX_DBG_INFO_EN(1),
            c.s.acto = -1;
            c.s.caar = -1;
            c.s.dpeoosd = -1;
            c.s.ecrc_e = -1;
            c.s.fcpvwt = -1;
            c.s.fcuv = -1;
            c.s.mre = -1;
            c.s.racca = -1;
            c.s.racpp = -1;
            c.s.racur = -1;
            c.s.ramtlp = -1;
            c.s.rarwdns = -1;
            c.s.rauc = -1;
            c.s.rawwpp = -1;
            c.s.rcemrc = -1;
            c.s.rdwdle = -1;
            c.s.recrce = -1;
            c.s.rfemrc = -1;
            c.s.rnfemrc = -1;
            c.s.rpe = -1;
            c.s.rpmerc = -1;
            c.s.rpoison = -1;
            c.s.rptamrc = -1;
            c.s.rqo = -1;
            c.s.rte = -1;
            c.s.rtlplle = -1;
            c.s.rtlpmal = -1;
            c.s.rtwdle = -1;
            c.s.rumep = -1;
            c.s.rvdm = -1;
            c.s.spoison = -1;
        );
    }
}

static void enable_pip(void)
{
    BDK_CSR_MODIFY(c, BDK_PIP_INT_EN,
        c.s.badtag = -1;
        c.s.beperr = -1;
        c.s.feperr = -1;
        c.s.prtnxa = -1;
        c.s.punyerr = -1;
        c.s.skprunt = -1;
        c.s.todoovr = -1;
    );
}

static void enable_pko(void)
{
    BDK_CSR_MODIFY(c, BDK_PKO_REG_INT_MASK,
        c.s.currzero = -1;
        c.s.doorbell = -1;
        c.s.loopback = -1;
        c.s.parity = -1;
    );
}

static void enable_rad(void)
{
    BDK_CSR_MODIFY(c, BDK_RAD_REG_INT_MASK,
        c.s.doorbell = -1;
    );
}

static void enable_srio(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_SRIOX_INT_ENABLE(0),
            c.s.bar_err = -1;
            c.s.degrade = -1;
            c.s.deny_wr = -1;
            c.s.f_error = -1;
            c.s.fail = -1;
            c.s.log_erb = -1;
            c.s.mac_buf = -1;
            c.s.mce_rx = -1;
            c.s.omsg_err = -1;
            c.s.phy_erb = -1;
            c.s.pko_err = -1;
            c.s.rtry_err = -1;
            c.s.sli_err = -1;
            c.s.ttl_tout = -1;
            c.s.zero_pkt = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_SRIOX_INT_ENABLE(1),
            c.s.bar_err = -1;
            c.s.degrade = -1;
            c.s.deny_wr = -1;
            c.s.f_error = -1;
            c.s.fail = -1;
            c.s.log_erb = -1;
            c.s.mac_buf = -1;
            c.s.mce_rx = -1;
            c.s.omsg_err = -1;
            c.s.phy_erb = -1;
            c.s.pko_err = -1;
            c.s.rtry_err = -1;
            c.s.sli_err = -1;
            c.s.ttl_tout = -1;
            c.s.zero_pkt = -1;
        );
    }
}

static void enable_sso_cn68xx(void)
{
    BDK_CSR_MODIFY(c, BDK_SSO_ERR_ENB,
        c.s.awe_ie = -1;
        c.s.bfp_ie = -1;
        c.s.fidx_dbe_ie = -1;
        c.s.fidx_sbe_ie = -1;
        c.s.fpe_ie = -1;
        c.s.idx_dbe_ie = -1;
        c.s.idx_sbe_ie = -1;
        c.s.iop_ie = -1;
        c.s.oth_dbe0_ie = -1;
        c.s.oth_dbe1_ie = -1;
        c.s.oth_sbe0_ie = -1;
        c.s.oth_sbe1_ie = -1;
        c.s.pnd_dbe0_ie = -1;
        c.s.pnd_dbe1_ie = -1;
        c.s.pnd_sbe0_ie = -1;
        c.s.pnd_sbe1_ie = -1;
    );
}

static void enable_tim_cn68xx(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_TIM_INT0_EN,
            c.s.int0_en = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_TIM_INT_ECCERR_EN,
            c.s.dbe_en = -1;
            c.s.sbe_en = -1;
        );
    }
}

static void enable_tim_cn6xxx(void)
{
    BDK_CSR_MODIFY(c, BDK_TIM_REG_INT_MASK,
        c.s.mask = -1;
    );
}

static void enable_usb(void)
{
    BDK_CSR_MODIFY(c, BDK_UCTLX_INT_ENA(0),
        c.s.cf_psh_f = -1;
        c.s.ec_ovf_e = -1;
        c.s.er_psh_f = -1;
        c.s.oc_ovf_e = -1;
        c.s.or_psh_f = -1;
        c.s.pp_psh_f = -1;
        c.s.wb_pop_e = -1;
        c.s.wb_psh_f = -1;
    );
}

static void enable_zip(void)
{
    {
        BDK_CSR_MODIFY(c, BDK_ZIP_INT_MASK,
            c.s.doorbell = -1;
        );
    }
    {
        BDK_CSR_MODIFY(c, BDK_ZIP_INT_ENA,
            c.s.doorbell0 = -1;
            c.s.doorbell1 = -1;
            c.s.ibdbe = -1;
            c.s.ibsbe = -1;
        );
    }
}
    BDK_CSR_MODIFY(c, BDK_CIU_INTX_EN0(0),
        c.s.mii = -1;
        c.s.pcm = -1;
        c.s.rml = -1;
    );
        enable_mix() /* MIXX_INTENA(0) */
        enable_pcm() /* PCMX_INT_ENA(0) */
        enable_pcm() /* PCMX_INT_ENA(1) */
        enable_pcm() /* PCMX_INT_ENA(2) */
        enable_pcm() /* PCMX_INT_ENA(3) */
            enable_agl() /* AGL_GMX_RXX_INT_EN(0) */
            enable_agl() /* AGL_GMX_RXX_INT_EN(1) */
            enable_agl() /* AGL_GMX_TX_INT_EN */
            enable_pcs() /* PCSX_INTX_EN_REG(0,0) */
            enable_pcs() /* PCSX_INTX_EN_REG(1,0) */
            enable_pcs() /* PCSX_INTX_EN_REG(2,0) */
            enable_pcs() /* PCSX_INTX_EN_REG(3,0) */
            enable_pcsx() /* PCSXX_INT_EN_REG(0) */
            enable_pcs() /* PCSX_INTX_EN_REG(0,1) */
            enable_pcs() /* PCSX_INTX_EN_REG(1,1) */
            enable_pcs() /* PCSX_INTX_EN_REG(2,1) */
            enable_pcs() /* PCSX_INTX_EN_REG(3,1) */
            enable_pcsx() /* PCSXX_INT_EN_REG(1) */
            enable_dfa() /* DFA_INTMSK */
            enable_dpi() /* DPI_INT_EN */
            enable_fpa() /* FPA_INT_ENB */
            enable_gmx() /* GMXX_RXX_INT_EN(0,0) */
            enable_gmx() /* GMXX_RXX_INT_EN(1,0) */
            enable_gmx() /* GMXX_RXX_INT_EN(2,0) */
            enable_gmx() /* GMXX_RXX_INT_EN(3,0) */
            enable_gmx() /* GMXX_TX_INT_EN(0) */
            enable_gmx() /* GMXX_RXX_INT_EN(0,1) */
            enable_gmx() /* GMXX_RXX_INT_EN(1,1) */
            enable_gmx() /* GMXX_RXX_INT_EN(2,1) */
            enable_gmx() /* GMXX_RXX_INT_EN(3,1) */
            enable_gmx() /* GMXX_TX_INT_EN(1) */
            enable_iob() /* IOB0_INT_ENB */
            enable_ipd() /* IPD_INT_ENB */
            enable_key() /* KEY_INT_ENB */
            enable_l2c() /* L2C_INT_ENA */
            enable_lmc() /* LMCX_INT_EN(0) */
            enable_mio() /* MIO_BOOT_INT */
            enable_mio() /* MIO_RST_INT_EN */
            enable_pem() /* PEMX_INT_ENB(0) */
            enable_pem() /* PEMX_INT_ENB(1) */
            enable_pip() /* PIP_INT_EN */
            enable_pko() /* PKO_REG_INT_MASK */
            enable_rad() /* RAD_REG_INT_MASK */
            enable_srio() /* SRIOX_INT_ENABLE(0) */
            enable_srio() /* SRIOX_INT_ENABLE(1) */
            enable_tim_cn6xxx() /* TIM_REG_INT_MASK */
            enable_zip() /* ZIP_INT_MASK */
    BDK_CSR_MODIFY(c, BDK_CIU_INTX_EN1(0),
        c.s.mii1 = -1;
        c.s.nand = -1;
        c.s.usb = -1;
    );
        enable_mix() /* MIXX_INTENA(1) */
        enable_nand() /* NDF_INT_EN */
        enable_usb() /* UCTLX_INT_ENA(0) */
        BDK_CSR_MODIFY(c, BDK_CIU2_EN_PPX_IP2_IO(0),
            c.s.pem = -1;
            c.s.pem = -1;
        );
            enable_pem() /* PEMX_INT_ENB(0) */
            enable_pem() /* PEMX_INT_ENB(1) */
        BDK_CSR_MODIFY(c, BDK_CIU2_EN_PPX_IP2_MEM(0),
            c.s.lmc = -1;
            c.s.lmc = -1;
            c.s.lmc = -1;
            c.s.lmc = -1;
        );
            enable_lmc() /* LMCX_INT_EN(0) */
            enable_lmc() /* LMCX_INT_EN(1) */
            enable_lmc() /* LMCX_INT_EN(2) */
            enable_lmc() /* LMCX_INT_EN(3) */
        BDK_CSR_MODIFY(c, BDK_CIU2_EN_PPX_IP2_MIO(0),
            c.s.mio = -1;
            c.s.nand = -1;
            c.s.usb_uctl = -1;
        );
            enable_mio() /* MIO_BOOT_INT */
            enable_mio() /* MIO_RST_INT_EN */
            enable_nand() /* NDF_INT_EN */
            enable_usb() /* UCTLX_INT_ENA(0) */
        BDK_CSR_MODIFY(c, BDK_CIU2_EN_PPX_IP2_PKT(0),
            c.s.agl = -1;
            c.s.agx = -1;
            c.s.agx = -1;
            c.s.agx = -1;
            c.s.agx = -1;
            c.s.agx = -1;
            c.s.ilk = -1;
            c.s.mii = -1;
        );
            enable_agl() /* AGL_GMX_RXX_INT_EN(0) */
            enable_agl() /* AGL_GMX_RXX_INT_EN(1) */
            enable_agl() /* AGL_GMX_TX_INT_EN */
            enable_gmx() /* GMXX_RXX_INT_EN(0,0) */
            enable_gmx() /* GMXX_RXX_INT_EN(1,0) */
            enable_gmx() /* GMXX_RXX_INT_EN(2,0) */
            enable_gmx() /* GMXX_RXX_INT_EN(3,0) */
            enable_gmx() /* GMXX_TX_INT_EN(0) */
            enable_pcs() /* PCSX_INTX_EN_REG(0,0) */
            enable_pcs() /* PCSX_INTX_EN_REG(1,0) */
            enable_pcs() /* PCSX_INTX_EN_REG(2,0) */
            enable_pcs() /* PCSX_INTX_EN_REG(3,0) */
            enable_pcsx() /* PCSXX_INT_EN_REG(0) */
            enable_gmx() /* GMXX_RXX_INT_EN(0,1) */
            enable_gmx() /* GMXX_RXX_INT_EN(1,1) */
            enable_gmx() /* GMXX_RXX_INT_EN(2,1) */
            enable_gmx() /* GMXX_RXX_INT_EN(3,1) */
            enable_gmx() /* GMXX_TX_INT_EN(1) */
            enable_pcs() /* PCSX_INTX_EN_REG(0,1) */
            enable_pcs() /* PCSX_INTX_EN_REG(1,1) */
            enable_pcs() /* PCSX_INTX_EN_REG(2,1) */
            enable_pcs() /* PCSX_INTX_EN_REG(3,1) */
            enable_pcsx() /* PCSXX_INT_EN_REG(1) */
            enable_gmx() /* GMXX_RXX_INT_EN(0,2) */
            enable_gmx() /* GMXX_RXX_INT_EN(1,2) */
            enable_gmx() /* GMXX_RXX_INT_EN(2,2) */
            enable_gmx() /* GMXX_RXX_INT_EN(3,2) */
            enable_gmx() /* GMXX_TX_INT_EN(2) */
            enable_pcs() /* PCSX_INTX_EN_REG(0,2) */
            enable_pcs() /* PCSX_INTX_EN_REG(1,2) */
            enable_pcs() /* PCSX_INTX_EN_REG(2,2) */
            enable_pcs() /* PCSX_INTX_EN_REG(3,2) */
            enable_pcsx() /* PCSXX_INT_EN_REG(2) */
            enable_gmx() /* GMXX_RXX_INT_EN(0,3) */
            enable_gmx() /* GMXX_RXX_INT_EN(1,3) */
            enable_gmx() /* GMXX_RXX_INT_EN(2,3) */
            enable_gmx() /* GMXX_RXX_INT_EN(3,3) */
            enable_gmx() /* GMXX_TX_INT_EN(3) */
            enable_pcs() /* PCSX_INTX_EN_REG(0,3) */
            enable_pcs() /* PCSX_INTX_EN_REG(1,3) */
            enable_pcs() /* PCSX_INTX_EN_REG(2,3) */
            enable_pcs() /* PCSX_INTX_EN_REG(3,3) */
            enable_pcsx() /* PCSXX_INT_EN_REG(3) */
            enable_gmx() /* GMXX_RXX_INT_EN(0,4) */
            enable_gmx() /* GMXX_RXX_INT_EN(1,4) */
            enable_gmx() /* GMXX_RXX_INT_EN(2,4) */
            enable_gmx() /* GMXX_RXX_INT_EN(3,4) */
            enable_gmx() /* GMXX_TX_INT_EN(4) */
            enable_pcs() /* PCSX_INTX_EN_REG(0,4) */
            enable_pcs() /* PCSX_INTX_EN_REG(1,4) */
            enable_pcs() /* PCSX_INTX_EN_REG(2,4) */
            enable_pcs() /* PCSX_INTX_EN_REG(3,4) */
            enable_pcsx() /* PCSXX_INT_EN_REG(4) */
            enable_ilk() /* ILK_GBL_INT_EN */
            enable_ilk() /* ILK_TXX_INT_EN(0) */
            enable_ilk() /* ILK_RXX_INT_EN(0) */
            enable_ilk() /* ILK_TXX_INT_EN(1) */
            enable_ilk() /* ILK_RXX_INT_EN(1) */
            enable_ilk() /* ILK_RX_LNEX_INT_EN(0) */
            enable_ilk() /* ILK_RX_LNEX_INT_EN(1) */
            enable_ilk() /* ILK_RX_LNEX_INT_EN(2) */
            enable_ilk() /* ILK_RX_LNEX_INT_EN(3) */
            enable_ilk() /* ILK_RX_LNEX_INT_EN(4) */
            enable_ilk() /* ILK_RX_LNEX_INT_EN(5) */
            enable_ilk() /* ILK_RX_LNEX_INT_EN(6) */
            enable_ilk() /* ILK_RX_LNEX_INT_EN(7) */
            enable_mix() /* MIXX_INTENA(0) */
            enable_mix() /* MIXX_INTENA(1) */
        BDK_CSR_MODIFY(c, BDK_CIU2_EN_PPX_IP2_RML(0),
            c.s.dfa = -1;
            c.s.dpi = -1;
            c.s.fpa = -1;
            c.s.iob = -1;
            c.s.ipd = -1;
            c.s.key = -1;
            c.s.l2c = -1;
            c.s.pip = -1;
            c.s.pko = -1;
            c.s.rad = -1;
            c.s.sso = -1;
            c.s.tim = -1;
            c.s.zip = -1;
        );
            enable_dfa() /* DFA_INTMSK */
            enable_dpi() /* DPI_INT_EN */
            enable_fpa() /* FPA_INT_ENB */
            enable_iob() /* IOB0_INT_ENB */
            enable_ipd() /* IPD_INT_ENB */
            enable_key() /* KEY_INT_ENB */
            enable_l2c() /* L2C_INT_ENA */
            enable_pip() /* PIP_INT_EN */
            enable_pko() /* PKO_REG_INT_MASK */
            enable_rad() /* RAD_REG_INT_MASK */
            enable_sso_cn68xx() /* SSO_ERR_ENB */
            enable_tim_cn68xx() /* TIM_INT0_EN */
            enable_tim_cn68xx() /* TIM_INT_ECCERR_EN */
            enable_zip() /* ZIP_INT_MASK */
            enable_zip() /* ZIP_INT_ENA */
}
